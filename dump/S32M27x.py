#!/usr/bin/env python3
# 
# Copyright 2016-2024 NXP
# 
# NXP Confidential and Proprietary. This software is owned or controlled
# by NXP and may only be used strictly in accordance with the applicable
# license terms. By expressly accepting such terms or by downloading,
# installing, activating and/or otherwise using the software, you are
# agreeing that you have read, and that you agree to comply with and are
# bound by, such license terms. If you do not agree to be bound by the
# applicable license terms, then you may not retain, install, activate
# or otherwise use the software.
#   
import sys
import re
import openpyxl

from openpyxl.styles import Alignment
import openpyxl.worksheet
import openpyxl.worksheet.worksheet

class EnumVal:
    def __init__(self, name: str, MasKStr: str, description: str):
        self.name = name
        self.maskVal = 0xFFFFFFFF
        self.intVal = 1
        self.description = description
        try:
            if MasKStr.startswith('#'):
                self.maskVal = int(MasKStr.replace('0', '1').replace('x', '0').replace('#', '0b'), 2)
                self.intVal = int(MasKStr.replace('x', '0').replace('#', '0b'), 2)
            elif MasKStr.startswith('0x'):
                self.intVal = int(MasKStr, 16)
            else:
                self.intVal = int(MasKStr)
        except ValueError:
            self.maskVal = 0
            self.intVal = 1

    def Match(self, Value: int) -> bool:
        return (Value & self.maskVal) == self.intVal

class Field:
    def __init__(self, name: str, bit_offset: int, bit_width: int, description: str, enumVals: list):
        self.name = name
        self.bit_offset = bit_offset
        self.bit_width = bit_width
        self.description = description
        self.enumVals = enumVals


class Register:
    def __init__(self, name: str, Address: int, Size: int, Description: str, Fields: list):
        self.name = name
        self.Address = Address
        self.Size = Size
        self.Description = Description
        self.Fields = Fields

class Peripheral:
    def __init__(self, name: str, base_address: int, size: int, registers: list):
        self.name = name
        self.base_address = base_address
        self.size = size
        self.registers = registers

    def GetName(self) -> str:
        return self.name

    def Process(self, Address: int, Value: int, sheet: openpyxl.worksheet.worksheet.Worksheet, offset: int) -> int:
        for register in self.registers:
            if register.Address == Address:
                sheet[f"A{offset}"] = f"0x{Address:08X}"
                sheet[f"B{offset}"] = register.name
                sheet[f"C{offset}"] = f"0x{Value:0{(register.Size + 3) // 4}X}"
                sheet[f"D{offset}"] = register.Description
                offset += 1
                for field in register.Fields:
                    mask = (1 << field.bit_width) - 1
                    value = (Value >> field.bit_offset) & mask
                    sheet[f"A{offset}"] = f"{field.bit_offset} + {field.bit_width}"
                    sheet[f"B{offset}"] = field.name
                    sheet[f"C{offset}"] = f"0x{value:0{(field.bit_width + 3) // 4}X}"
                    sheet[f"D{offset}"] = field.description
                    offset += 1
                    for enumVal in field.enumVals:
                        if enumVal.Match(value):
                            sheet[f"C{offset}"] = enumVal.name
                            sheet[f"D{offset}"] = enumVal.description
                            offset += 1
                break
        return offset

class Module_ADC_0(Peripheral):
    def __init__(self):
        super().__init__("ADC_0", 0x400A0000, 0x3B8, [
            Register("MCR", 0x400A0000, 32, "Main Configuration", [
                Field("OWREN", 31, 1, "Overwrite Enable", [
                    EnumVal("noovwr", "0", "Disable"),
                    EnumVal("enovwr", "0x1", "Enable"),
                ]),
                Field("WLSIDE", 30, 1, "Write Left-Aligned", [
                    EnumVal("rightaligned", "0", "Right aligned"),
                    EnumVal("leftaligned", "0x1", "Left-aligned"),
                ]),
                Field("MODE", 29, 1, "Normal Conversion Mode", [
                    EnumVal("once", "0", "Single conversion"),
                    EnumVal("continuous", "0x1", "Continuous conversion"),
                ]),
                Field("TRGEN", 27, 1, "External Trigger Enable", [
                    EnumVal("noexttrg", "0", "Normal trigger input does not start a conversion"),
                    EnumVal("enexttrg", "0x1", "Normal trigger input starts a conversion"),
                ]),
                Field("EDGE", 26, 1, "External Trigger Edge Selection", [
                    EnumVal("fedge", "0", "Falling edge"),
                    EnumVal("redge", "0x1", "Rising edge"),
                ]),
                Field("XSTRTEN", 25, 1, "Auxiliary External Start Enable", [
                    EnumVal("noextstart", "0", "Disable"),
                    EnumVal("enextstart", "0x1", "Enable"),
                ]),
                Field("NSTART", 24, 1, "Start Normal Conversion", [
                    EnumVal("nonstart", "0", "No effect"),
                    EnumVal("donstart", "0x1", "Starts conversion"),
                ]),
                Field("JTRGEN", 22, 1, "Injection Trigger Enable", [
                    EnumVal("noj", "0", "Disable"),
                    EnumVal("enj", "0x1", "Enable"),
                ]),
                Field("JEDGE", 21, 1, "Injected Trigger Edge Selection", [
                    EnumVal("fjedge", "0", "Falling edge"),
                    EnumVal("rjedge", "0x1", "Rising edge"),
                ]),
                Field("JSTART", 20, 1, "Injected Start", [
                    EnumVal("noj", "0", "Injected conversion can be started"),
                    EnumVal("doj", "0x1", "Starts an injected conversion"),
                ]),
                Field("BCTUEN", 17, 1, "Body Cross Trigger Unit Enable", [
                    EnumVal("noctu", "0", "Disable"),
                    EnumVal("enctu", "0x1", "Enable"),
                ]),
                Field("BCTU_MODE", 16, 1, "Body Cross Trigger Unit Mode Select", [
                    EnumVal("ctuonly", "0", "Only BCTU can trigger conversion"),
                    EnumVal("alltrig", "0x1", "All trigger sources can trigger conversion"),
                ]),
                Field("STCL", 15, 1, "Self-Test Configuration Lock", [
                    EnumVal("noprotect", "0", "Registers are writeable"),
                    EnumVal("doprotect", "0x1", "Registers are read-only"),
                ]),
                Field("AVGEN", 11, 1, "Averaging Enable", [
                    EnumVal("noavg", "0", "Disable"),
                    EnumVal("enavg", "0x1", "Enable"),
                ]),
                Field("AVGS", 9, 2, "Averaging Select", [
                    EnumVal("avgs0", "0", "4 conversions"),
                    EnumVal("avgs1", "0x1", "8 conversions"),
                    EnumVal("avgs2", "0x2", "16 conversions"),
                    EnumVal("avgs3", "0x3", "32 conversions"),
                ]),
                Field("ABORTCHAIN", 7, 1, "Abort Chain", [
                    EnumVal("UNDEFINED", "0", "Undefined"),
                    EnumVal("ABORT_CHAIN_YES", "0x1", "Conversion aborted"),
                ]),
                Field("ABORT", 6, 1, "Abort Conversion", [
                    EnumVal("UNDEFINED", "0", "Undefined"),
                    EnumVal("DO_ABORT", "0x1", "Conversion aborted"),
                ]),
                Field("ACKO", 5, 1, "Auto Clock Off", [
                    EnumVal("aclkoff", "0", "Clock always active"),
                    EnumVal("aclkon", "0x1", "Clock gated"),
                ]),
                Field("ADCLKSEL", 1, 2, "Conversion Clock (AD_clk) Frequency Selection", [
                    EnumVal("disdiv", "0", "Module clock frequency"),
                    EnumVal("div2", "0x1", "Module clock frequency / 2"),
                    EnumVal("div4", "0x2", "Module clock frequency / 4"),
                ]),
                Field("PWDN", 0, 1, "Power Down", [
                    EnumVal("func", "0", "ADC enters a functional state"),
                    EnumVal("pwdn", "0x1", "ADC enters Power Down state"),
                ]),
            ]),
            Register("MSR", 0x400A0004, 32, "Main Status", [
                Field("CALIBRTD", 31, 1, "Calibration Status", [
                    EnumVal("nocal", "0", "Uncalibrated or calibration unsuccessful"),
                    EnumVal("cal", "0x1", "Calibrated"),
                ]),
                Field("NSTART", 24, 1, "Normal Conversion Started", [
                    EnumVal("non", "0", "Not in progress"),
                    EnumVal("nrunning", "0x1", "In progress"),
                ]),
                Field("JABORT", 23, 1, "Injected Conversion Aborted", [
                    EnumVal("nojabort", "0", "Not aborted"),
                    EnumVal("jaborted", "0x1", "Aborted"),
                ]),
                Field("JSTART", 20, 1, "Injected Conversion Started", [
                    EnumVal("noj", "0", "Not an injected conversion"),
                    EnumVal("jrunning", "0x1", "Injected conversion"),
                ]),
                Field("SELF_TEST_S", 18, 1, "Indicates whether an ongoing conversion is for self-test.", [
                    EnumVal("nost", "0", "Not self-test"),
                    EnumVal("strunning", "0x1", "Self-test"),
                ]),
                Field("BCTUSTART", 16, 1, "BCTU Conversion Started", [
                    EnumVal("ctuoff", "0", "Conversion was not triggered by BCTU"),
                    EnumVal("cturunning", "0x1", "Ongoing conversion was triggered by BCTU"),
                ]),
                Field("CHADDR", 9, 7, "Input Under Measure", [
                    EnumVal("input_number_0", "0", "Input number"),
                    EnumVal("input_number_1", "0x1", "Input number"),
                    EnumVal("input_number_2", "0x2", "Input number"),
                    EnumVal("input_number_3", "0x3", "Input number"),
                    EnumVal("input_number_4", "0x4", "Input number"),
                    EnumVal("input_number_5", "0x5", "Input number"),
                    EnumVal("input_number_6", "0x6", "Input number"),
                    EnumVal("input_number_7", "0x7", "Input number"),
                    EnumVal("input_number_8", "0x8", "Input number"),
                    EnumVal("input_number_9", "0x9", "Input number"),
                ]),
                Field("ACKO", 5, 1, "Auto Clock-Off On", [
                    EnumVal("ackooff", "0", "Inactive"),
                    EnumVal("ackoon", "0x1", "Active"),
                ]),
                Field("ADCSTATUS", 0, 3, "ADC State", [
                    EnumVal("idle", "0", "Idle"),
                    EnumVal("powerdown", "0x1", "Power Down"),
                    EnumVal("wait", "0x2", "Wait"),
                    EnumVal("calibrate", "0x3", "Calibrate"),
                    EnumVal("convert", "0x4", "Convert"),
                    EnumVal("done", "0x6", "Done"),
                ]),
            ]),
            Register("ISR", 0x400A0010, 32, "Interrupt Status", [
                Field("EOBCTU", 4, 1, "End Of BCTU Conversion", [
                    EnumVal("EOBCTU_NO", "0", "No EOBCTU interrupt generated"),
                    EnumVal("EOBCTU_YES", "0x1", "EOBCTU interrupt generated"),
                ]),
                Field("JEOC", 3, 1, "End Of Injected Conversion", [
                    EnumVal("JEOC_NO", "0", "No JEOC interrupt generated"),
                    EnumVal("JEOC_YES", "0x1", "JEOC interrupt generated"),
                ]),
                Field("JECH", 2, 1, "End Of Injected Chain Conversion", [
                    EnumVal("JECH_NO", "0", "No JECH interrupt generated"),
                    EnumVal("JECH_YES", "0x1", "JECH interrupt generated"),
                ]),
                Field("EOC", 1, 1, "End Of Conversion", [
                    EnumVal("EOC_NO", "0", "No EOC interrupt generated"),
                    EnumVal("EOC_YES", "0x1", "Interrupt generated"),
                ]),
                Field("ECH", 0, 1, "End Of Chain Conversion", [
                    EnumVal("ECH_NO", "0", "Indicates no ECH interrupt generated"),
                    EnumVal("ECH_YES", "0x1", "Indicates an ECH interrupt has been generated"),
                ]),
            ]),
            Register("CEOCFR0", 0x400A0014, 32, "Channel End Of Conversion Flag For Precision Inputs", [
                Field("PIEOCF7", 7, 1, "Precision Input End Of Conversion Flag 7", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF6", 6, 1, "Precision Input End Of Conversion Flag 6", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF5", 5, 1, "Precision Input End Of Conversion Flag 5", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF4", 4, 1, "Precision Input End Of Conversion Flag 4", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF3", 3, 1, "Precision Input End Of Conversion Flag 3", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF2", 2, 1, "Precision Input End Of Conversion Flag 2", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF1", 1, 1, "Precision Input End Of Conversion Flag 1", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF0", 0, 1, "Precision Input End Of Conversion Flag 0", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
            ]),
            Register("CEOCFR1", 0x400A0018, 32, "Channel End Of Conversion Flag For Standard Inputs", [
                Field("SIEOCF23", 23, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF22", 22, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF21", 21, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF20", 20, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF19", 19, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF18", 18, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF17", 17, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF16", 16, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF15", 15, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF14", 14, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF13", 13, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF12", 12, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF11", 11, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF10", 10, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF9", 9, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF8", 8, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF7", 7, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF6", 6, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF5", 5, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF4", 4, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF3", 3, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF2", 2, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF1", 1, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF0", 0, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
            ]),
            Register("CEOCFR2", 0x400A001C, 32, "Channel End Of Conversion Flag For External Inputs", [
                Field("EIEOCF31", 31, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF30", 30, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF29", 29, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF28", 28, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF27", 27, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF26", 26, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF25", 25, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF24", 24, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF23", 23, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF22", 22, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF21", 21, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF20", 20, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF19", 19, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF18", 18, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF17", 17, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF16", 16, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF15", 15, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF14", 14, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF13", 13, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF12", 12, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF11", 11, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF10", 10, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF9", 9, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF8", 8, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF7", 7, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF6", 6, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF5", 5, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF4", 4, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF3", 3, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF2", 2, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF1", 1, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF0", 0, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
            ]),
            Register("IMR", 0x400A0020, 32, "Interrupt Mask", [
                Field("MSKEOBCTU", 4, 1, "EOBCTU Interrupt Flag Enable", [
                    EnumVal("maskebctui", "0", "Interrupt is not flagged"),
                    EnumVal("eneobctui", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKJEOC", 3, 1, "JEOC Interrupt Flag Enable", [
                    EnumVal("maskjeoci", "0", "Interrupt is not flagged"),
                    EnumVal("enjeoci", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKJECH", 2, 1, "JECH Interrupt Flag Enable", [
                    EnumVal("maskjechi", "0", "Interrupt is not flagged"),
                    EnumVal("enjechi", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKEOC", 1, 1, "EOC Interrupt Flag Enable", [
                    EnumVal("maskeoci", "0", "Interrupt is not flagged"),
                    EnumVal("eneoci", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKECH", 0, 1, "ECH Interrupt Flag Enable", [
                    EnumVal("maskechi", "0", "Interrupt is not flagged"),
                    EnumVal("enechi", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("CIMR0", 0x400A0024, 32, "EOC Interrupt Enable For Precision Inputs", [
                Field("PIEOCIEN7", 7, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN6", 6, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN5", 5, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN4", 4, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN3", 3, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN2", 2, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN1", 1, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN0", 0, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("CIMR1", 0x400A0028, 32, "EOC Interrupt Enable For Standard Inputs", [
                Field("SIEOCIEN23", 23, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN22", 22, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN21", 21, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN20", 20, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN19", 19, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN18", 18, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN17", 17, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN16", 16, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN15", 15, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN14", 14, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN13", 13, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN12", 12, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN11", 11, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN10", 10, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN9", 9, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN8", 8, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN7", 7, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN6", 6, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN5", 5, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN4", 4, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN3", 3, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN2", 2, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN1", 1, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN0", 0, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("CIMR2", 0x400A002C, 32, "EOC Interrupt Enable For External Inputs", [
                Field("EIEOCIEN31", 31, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN30", 30, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN29", 29, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN28", 28, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN27", 27, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN26", 26, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN25", 25, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN24", 24, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN23", 23, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN22", 22, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN21", 21, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN20", 20, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN19", 19, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN18", 18, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN17", 17, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN16", 16, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN15", 15, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN14", 14, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN13", 13, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN12", 12, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN11", 11, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN10", 10, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN9", 9, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN8", 8, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN7", 7, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN6", 6, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN5", 5, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN4", 4, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN3", 3, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN2", 2, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN1", 1, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN0", 0, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("WTISR", 0x400A0030, 32, "Analog Watchdog Threshold Interrupt Status", [
                Field("HAWIF16", 31, 1, "High Analog Watchdog Interrupt Flag 16", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF16", 30, 1, "Low Analog Watchdog Interrupt Flag 16", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF15", 29, 1, "High Analog Watchdog Interrupt Flag 15", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF15", 28, 1, "Low Analog Watchdog Interrupt Flag 15", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF14", 27, 1, "High Analog Watchdog Interrupt Flag 14", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF14", 26, 1, "Low Analog Watchdog Interrupt Flag 14", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF13", 25, 1, "High Analog Watchdog Interrupt Flag 13", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF13", 24, 1, "Low Analog Watchdog Interrupt Flag 13", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF12", 23, 1, "High Analog Watchdog Interrupt Flag 12", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF12", 22, 1, "Low Analog Watchdog Interrupt Flag 12", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF11", 21, 1, "High Analog Watchdog Interrupt Flag 11", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF11", 20, 1, "Low Analog Watchdog Interrupt Flag 11", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF10", 19, 1, "High Analog Watchdog Interrupt Flag 10", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF10", 18, 1, "Low Analog Watchdog Interrupt Flag 10", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF9", 17, 1, "High Analog Watchdog Interrupt Flag 9", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF9", 16, 1, "Low Analog Watchdog Interrupt Flag 9", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF8", 15, 1, "High Analog Watchdog Interrupt Flag 8", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF8", 14, 1, "Low Analog Watchdog Interrupt Flag 8", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF7", 13, 1, "High Analog Watchdog Interrupt Flag 7", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF7", 12, 1, "Low Analog Watchdog Interrupt Flag 7", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF6", 11, 1, "High Analog Watchdog Interrupt Flag 6", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF6", 10, 1, "Low Analog Watchdog Interrupt Flag 6", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF5", 9, 1, "High Analog Watchdog Interrupt Flag 5", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF5", 8, 1, "Low Analog Watchdog Interrupt Flag 5", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF4", 7, 1, "High Analog Watchdog Interrupt Flag 4", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF4", 6, 1, "Low Analog Watchdog Interrupt Flag 4", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF3", 5, 1, "High Analog Watchdog Interrupt Flag 3", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF3", 4, 1, "Low Analog Watchdog Interrupt Flag 3", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF2", 3, 1, "High Analog Watchdog Interrupt Flag 2", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF2", 2, 1, "Low Analog Watchdog Interrupt Flag 2", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF1", 1, 1, "High Analog Watchdog Interrupt Flag 1", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF1", 0, 1, "Low Analog Watchdog Interrupt Flag 1", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
            ]),
            Register("WTIMR", 0x400A0034, 32, "Analog Watchdog Threshold Interrupt Enable", [
                Field("HDWIFEN4", 7, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN4", 6, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("HDWIFEN3", 5, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN3", 4, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("HDWIFEN2", 3, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN2", 2, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("HDWIFEN1", 1, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN1", 0, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("DMAE", 0x400A0040, 32, "Direct Memory Access Configuration", [
                Field("DCLR", 1, 1, "DMA Clear Request", [
                    EnumVal("ackclr", "0", "DMA controller acknowledges the request"),
                    EnumVal("ipsclr", "0x1", "Conversion data register is read"),
                ]),
                Field("DMAEN", 0, 1, "DMA Enable", [
                    EnumVal("dmadis", "0", "Disable"),
                    EnumVal("dmaen", "0x1", "Enable"),
                ]),
            ]),
            Register("DMAR0", 0x400A0044, 32, "DMA Request Enable For Precision Inputs", [
                Field("PIDMAREN7", 7, 1, "Precision Input DMA Request Enable 7", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN6", 6, 1, "Precision Input DMA Request Enable 6", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN5", 5, 1, "Precision Input DMA Request Enable 5", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN4", 4, 1, "Precision Input DMA Request Enable 4", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN3", 3, 1, "Precision Input DMA Request Enable 3", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN2", 2, 1, "Precision Input DMA Request Enable 2", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN1", 1, 1, "Precision Input DMA Request Enable 1", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN0", 0, 1, "Precision Input DMA Request Enable 0", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
            ]),
            Register("DMAR1", 0x400A0048, 32, "DMA Request Enable For Standard Inputs", [
                Field("SIDMAREN23", 23, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN22", 22, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN21", 21, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN20", 20, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN19", 19, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN18", 18, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN17", 17, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN16", 16, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN15", 15, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN14", 14, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN13", 13, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN12", 12, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN11", 11, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN10", 10, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN9", 9, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN8", 8, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN7", 7, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN6", 6, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN5", 5, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN4", 4, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN3", 3, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN2", 2, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN1", 1, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN0", 0, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
            ]),
            Register("DMAR2", 0x400A004C, 32, "DMA Request Enable For External Inputs", [
                Field("EIDMAREN31", 31, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN30", 30, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN29", 29, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN28", 28, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN27", 27, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN26", 26, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN25", 25, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN24", 24, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN23", 23, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN22", 22, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN21", 21, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN20", 20, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN19", 19, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN18", 18, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN17", 17, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN16", 16, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN15", 15, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN14", 14, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN13", 13, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN12", 12, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN11", 11, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN10", 10, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN9", 9, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN8", 8, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN7", 7, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN6", 6, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN5", 5, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN4", 4, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN3", 3, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN2", 2, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN1", 1, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN0", 0, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
            ]),
            Register("THRHLR[0]", 0x400A0060, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("THRHLR[1]", 0x400A0064, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("THRHLR[2]", 0x400A0068, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("THRHLR[3]", 0x400A006C, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("PSCR", 0x400A0080, 32, "Presampling Control", [
                Field("PREVAL2", 5, 1, "Presampling Voltage Select For External Inputs", [
                    EnumVal("lowpreval", "0", "VREFL"),
                    EnumVal("highpreval", "0x1", "VREFH"),
                ]),
                Field("PREVAL1", 3, 1, "Presampling Voltage Select For Standard Inputs", [
                    EnumVal("lowpreval", "0", "VREFL"),
                    EnumVal("highpreval", "0x1", "VREFH"),
                ]),
                Field("PREVAL0", 1, 1, "Presampling Voltage Select For Precision Inputs", [
                    EnumVal("lowpreval", "0", "VREFL"),
                    EnumVal("highpreval", "0x1", "VREFH"),
                ]),
                Field("PRECONV", 0, 1, "Convert Presampled Value", [
                    EnumVal("nocomp", "0", "No conversion after presampling"),
                    EnumVal("docomp", "0x1", "Presampling is followed by conversion"),
                ]),
            ]),
            Register("PSR0", 0x400A0084, 32, "Presampling Enable For Precision Inputs", [
                Field("PRES7", 7, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES6", 6, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES5", 5, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES4", 4, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES3", 3, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES2", 2, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES1", 1, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES0", 0, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
            ]),
            Register("PSR1", 0x400A0088, 32, "Presampling Enable For Standard Inputs", [
                Field("PRES23", 23, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES22", 22, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES21", 21, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES20", 20, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES19", 19, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES18", 18, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES17", 17, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES16", 16, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES15", 15, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES14", 14, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES13", 13, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES12", 12, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES11", 11, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES10", 10, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES9", 9, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES8", 8, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES7", 7, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES6", 6, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES5", 5, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES4", 4, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES3", 3, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES2", 2, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES1", 1, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES0", 0, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
            ]),
            Register("PSR2", 0x400A008C, 32, "Presampling Enable For External Inputs", [
                Field("PRES31", 31, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES30", 30, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES29", 29, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES28", 28, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES27", 27, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES26", 26, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES25", 25, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES24", 24, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES23", 23, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES22", 22, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES21", 21, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES20", 20, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES19", 19, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES18", 18, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES17", 17, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES16", 16, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES15", 15, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES14", 14, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES13", 13, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES12", 12, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES11", 11, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES10", 10, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES9", 9, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES8", 8, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES7", 7, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES6", 6, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES5", 5, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES4", 4, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES3", 3, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES2", 2, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES1", 1, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES0", 0, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
            ]),
            Register("CTR0", 0x400A0094, 32, "Conversion Timing For Precision Inputs", [
                Field("INPSAMP", 0, 8, "Input Sample Cycles", [
                ]),
            ]),
            Register("CTR1", 0x400A0098, 32, "Conversion Timing For Standard Inputs", [
                Field("INPSAMP", 0, 8, "Input Sample Cycles", [
                ]),
            ]),
            Register("CTR2", 0x400A009C, 32, "Conversion Timing For External Inputs", [
                Field("INPSAMP", 0, 8, "Input Sample Cycles", [
                ]),
            ]),
            Register("NCMR0", 0x400A00A4, 32, "Normal Conversion Enable For Precision Inputs", [
                Field("CH7", 7, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH6", 6, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH5", 5, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH4", 4, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH3", 3, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH2", 2, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH1", 1, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH0", 0, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
            ]),
            Register("NCMR1", 0x400A00A8, 32, "Normal Conversion Enable For Standard Inputs", [
                Field("CH55", 23, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH54", 22, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH53", 21, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH52", 20, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH51", 19, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH50", 18, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH49", 17, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH48", 16, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH47", 15, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH46", 14, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH45", 13, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH44", 12, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH43", 11, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH42", 10, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH41", 9, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH40", 8, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH39", 7, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH38", 6, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH37", 5, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH36", 4, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH35", 3, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH34", 2, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH33", 1, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH32", 0, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("NCMR2", 0x400A00AC, 32, "Normal Conversion Enable For External Inputs", [
                Field("CH95", 31, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH94", 30, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH93", 29, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH92", 28, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH91", 27, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH90", 26, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH89", 25, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH88", 24, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH87", 23, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH86", 22, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH85", 21, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH84", 20, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH83", 19, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH82", 18, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH81", 17, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH80", 16, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH79", 15, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH78", 14, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH77", 13, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH76", 12, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH75", 11, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH74", 10, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH73", 9, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH72", 8, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH71", 7, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH70", 6, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH69", 5, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH68", 4, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH67", 3, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH66", 2, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH65", 1, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH64", 0, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("JCMR0", 0x400A00B4, 32, "Injected Conversion Enable For Precision Inputs", [
                Field("CH7", 7, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 7 is not selected"),
                    EnumVal("docon", "0x1", "Input 7 is selected"),
                ]),
                Field("CH6", 6, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 6 is not selected"),
                    EnumVal("docon", "0x1", "Input 6 is selected"),
                ]),
                Field("CH5", 5, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 5 is not selected"),
                    EnumVal("docon", "0x1", "Input 5 is selected"),
                ]),
                Field("CH4", 4, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 4 is not selected"),
                    EnumVal("docon", "0x1", "Input 4 is selected"),
                ]),
                Field("CH3", 3, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 3 is not selected"),
                    EnumVal("docon", "0x1", "Input 3 is selected"),
                ]),
                Field("CH2", 2, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 2 is not selected"),
                    EnumVal("docon", "0x1", "Input 2 is selected"),
                ]),
                Field("CH1", 1, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 1 is not selected"),
                    EnumVal("docon", "0x1", "Input 1 is selected"),
                ]),
                Field("CH0", 0, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 0 is not selected"),
                    EnumVal("docon", "0x1", "Input 0 is selected"),
                ]),
            ]),
            Register("JCMR1", 0x400A00B8, 32, "Injected Conversion Enable For Standard Inputs", [
                Field("CH55", 23, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH54", 22, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH53", 21, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH52", 20, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH51", 19, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH50", 18, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH49", 17, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH48", 16, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH47", 15, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH46", 14, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH45", 13, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH44", 12, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH43", 11, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH42", 10, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH41", 9, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH40", 8, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH39", 7, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH38", 6, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH37", 5, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH36", 4, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH35", 3, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH34", 2, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH33", 1, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH32", 0, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("JCMR2", 0x400A00BC, 32, "Injected Conversion Enable For External Inputs", [
                Field("CH95", 31, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH94", 30, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH93", 29, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH92", 28, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH91", 27, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH90", 26, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH89", 25, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH88", 24, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH87", 23, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH86", 22, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH85", 21, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH84", 20, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH83", 19, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH82", 18, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH81", 17, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH80", 16, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH79", 15, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH78", 14, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH77", 13, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH76", 12, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH75", 11, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH74", 10, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH73", 9, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH72", 8, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH71", 7, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH70", 6, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH69", 5, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH68", 4, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH67", 3, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH66", 2, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH65", 1, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH64", 0, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("DSDR", 0x400A00C4, 32, "Delay Start Of Data Conversion", [
                Field("DSD", 0, 16, "Delay", [
                ]),
            ]),
            Register("PDEDR", 0x400A00C8, 32, "Power Down Exit Delay", [
                Field("PDED", 0, 8, "Delay", [
                ]),
            ]),
            Register("PCDR0", 0x400A0100, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR1", 0x400A0104, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR2", 0x400A0108, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR3", 0x400A010C, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR4", 0x400A0110, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR5", 0x400A0114, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR6", 0x400A0118, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR7", 0x400A011C, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[0]", 0x400A0180, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[1]", 0x400A0184, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[2]", 0x400A0188, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[3]", 0x400A018C, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[4]", 0x400A0190, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[5]", 0x400A0194, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[6]", 0x400A0198, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[7]", 0x400A019C, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[8]", 0x400A01A0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[9]", 0x400A01A4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[10]", 0x400A01A8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[11]", 0x400A01AC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[12]", 0x400A01B0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[13]", 0x400A01B4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[14]", 0x400A01B8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[15]", 0x400A01BC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[16]", 0x400A01C0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[17]", 0x400A01C4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[18]", 0x400A01C8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[19]", 0x400A01CC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[20]", 0x400A01D0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[21]", 0x400A01D4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[22]", 0x400A01D8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[23]", 0x400A01DC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[0]", 0x400A0200, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[1]", 0x400A0204, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[2]", 0x400A0208, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[3]", 0x400A020C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[4]", 0x400A0210, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[5]", 0x400A0214, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[6]", 0x400A0218, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[7]", 0x400A021C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[8]", 0x400A0220, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[9]", 0x400A0224, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[10]", 0x400A0228, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[11]", 0x400A022C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[12]", 0x400A0230, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[13]", 0x400A0234, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[14]", 0x400A0238, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[15]", 0x400A023C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[16]", 0x400A0240, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[17]", 0x400A0244, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[18]", 0x400A0248, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[19]", 0x400A024C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[20]", 0x400A0250, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[21]", 0x400A0254, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[22]", 0x400A0258, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[23]", 0x400A025C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[24]", 0x400A0260, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[25]", 0x400A0264, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[26]", 0x400A0268, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[27]", 0x400A026C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[28]", 0x400A0270, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[29]", 0x400A0274, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[30]", 0x400A0278, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[31]", 0x400A027C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("CWSELRPI0", 0x400A02B0, 32, "Channel Analog Watchdog Select For Precision Inputs", [
                Field("WSEL_SI0_7", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_6", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_5", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_4", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_3", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_2", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_1", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_0", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELRPI1", 0x400A02B4, 32, "Channel Analog Watchdog Select For Precision Inputs", [
            ]),
            Register("CWSELRSI0", 0x400A02C0, 32, "Channel Analog Watchdog Select For Standard Inputs", [
                Field("WSEL_SI7_0", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI6_0", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI5_0", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI4_0", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_0", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_0", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_0", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_0", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELRSI1", 0x400A02C4, 32, "Channel Analog Watchdog Select For Standard Inputs", [
                Field("WSEL_SI7_1", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI6_1", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI5_1", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI4_1", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_1", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_1", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_1", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_1", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELRSI2", 0x400A02C8, 32, "Channel Analog Watchdog Select For Standard Inputs", [
                Field("WSEL_SI7_2", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI6_2", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI5_2", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI4_2", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_2", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_2", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_2", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_2", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI0", 0x400A02D0, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI0_7", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_6", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_5", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_4", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_3", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_2", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_1", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_0", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI1", 0x400A02D4, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI1_15", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_14", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_13", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_12", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_11", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_10", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_9", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_8", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI2", 0x400A02D8, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI2_23", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_22", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_21", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_20", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_19", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_18", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_17", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_16", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI3", 0x400A02DC, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI3_31", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_30", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_29", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_28", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_27", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_26", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_25", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_24", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWENR0", 0x400A02E0, 32, "Channel Watchdog Enable For Precision Inputs", [
                Field("CWEN7", 7, 1, "Channel Analog Watchdog Enable 7", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN6", 6, 1, "Channel Analog Watchdog Enable 6", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN5", 5, 1, "Channel Analog Watchdog Enable 5", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN4", 4, 1, "Channel Analog Watchdog Enable 4", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN3", 3, 1, "Channel Analog Watchdog Enable 3", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN2", 2, 1, "Channel Analog Watchdog Enable 2", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN1", 1, 1, "Channel Analog Watchdog Enable 1", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN0", 0, 1, "Channel Analog Watchdog Enable 0", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
            ]),
            Register("CWENR1", 0x400A02E4, 32, "Channel Watchdog Enable For Standard Inputs", [
                Field("CWEN55", 23, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN54", 22, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN53", 21, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN52", 20, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN51", 19, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN50", 18, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN49", 17, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN48", 16, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN47", 15, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN46", 14, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN45", 13, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN44", 12, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN43", 11, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN42", 10, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN41", 9, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN40", 8, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN39", 7, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN38", 6, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN37", 5, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN36", 4, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN35", 3, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN34", 2, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN33", 1, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN32", 0, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
            ]),
            Register("CWENR2", 0x400A02E8, 32, "Channel Watchdog Enable For External Inputs", [
                Field("CWEN95", 31, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN94", 30, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN93", 29, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN92", 28, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN91", 27, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN90", 26, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN89", 25, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN88", 24, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN87", 23, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN86", 22, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN85", 21, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN84", 20, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN83", 19, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN82", 18, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN81", 17, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN80", 16, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN79", 15, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN78", 14, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN77", 13, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN76", 12, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN75", 11, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN74", 10, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN73", 9, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN72", 8, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN71", 7, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN70", 6, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN69", 5, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN68", 4, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN67", 3, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN66", 2, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN65", 1, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN64", 0, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
            ]),
            Register("AWORR0", 0x400A02F0, 32, "Analog Watchdog Out Of Range For Precision Inputs", [
                Field("AWOR_CH7", 7, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH6", 6, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH5", 5, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH4", 4, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH3", 3, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH2", 2, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH1", 1, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH0", 0, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
            ]),
            Register("AWORR1", 0x400A02F4, 32, "Analog Watchdog Out Of Range For Standard Inputs", [
                Field("AWOR_CH23", 23, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH22", 22, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH21", 21, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH20", 20, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH19", 19, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH18", 18, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH17", 17, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH16", 16, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH15", 15, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH14", 14, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH13", 13, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH12", 12, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH11", 11, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH10", 10, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH9", 9, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH8", 8, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH7", 7, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH6", 6, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH5", 5, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH4", 4, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH3", 3, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH2", 2, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH1", 1, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH0", 0, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
            ]),
            Register("AWORR2", 0x400A02F8, 32, "Analog Watchdog Out Of Range For External Inputs", [
                Field("AWOR_CH31", 31, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH30", 30, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH29", 29, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH28", 28, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH27", 27, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH26", 26, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH25", 25, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH24", 24, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH23", 23, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH22", 22, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH21", 21, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH20", 20, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH19", 19, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH18", 18, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH17", 17, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH16", 16, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH15", 15, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH14", 14, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH13", 13, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH12", 12, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH11", 11, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH10", 10, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH9", 9, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH8", 8, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH7", 7, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH6", 6, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH5", 5, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH4", 4, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH3", 3, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH2", 2, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH1", 1, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH0", 0, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
            ]),
            Register("STCR1", 0x400A0340, 32, "Self-Test Configuration 1", [
                Field("INPSAMP_C", 24, 8, "Input Sampling Time Algorithm C", [
                ]),
                Field("INPSAMP_S", 8, 8, "Input Sampling Time Algorithm S", [
                ]),
            ]),
            Register("STCR2", 0x400A0344, 32, "Self-Test Configuration 2", [
                Field("MSKWDSERR", 27, 1, "Mask Interrupt Self-Test Watchdog Sequence Error", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("SERR", 26, 1, "Self-Test Error Injection", [
                    EnumVal("INJ_AVAIL", "0", "Error can be injected"),
                    EnumVal("INJ_NO", "0x1", "Error is being injected"),
                ]),
                Field("MSKWDTERR", 25, 1, "Mask Interrupt Self-Test Watchdog Timer Error", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKST_EOC", 23, 1, "Mask Interrupt Self-Test End Of Conversion", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKWDG_EOA_C", 18, 1, "Mask Error Interrupt End Of Algorithm C", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKWDG_EOA_S", 16, 1, "Mask Error Interrupt End Of Algorithm S", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_C", 15, 1, "Mask Error Interrupt Algorithm C", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_S2", 13, 1, "Mask Error Interrupt Algorithm S2", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_S1", 12, 1, "Mask Error Interrupt Algorithm S1", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_S0", 11, 1, "Mask Error Interrupt Algorithm S0", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("EN", 7, 1, "Self-Test Enable", [
                    EnumVal("stdis", "0", "Disable"),
                    EnumVal("sten", "0x1", "Enable"),
                ]),
                Field("FMA_WDSERR", 4, 1, "Fault Mapping Self-Test Watchdog Sequence Error", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
                Field("FMA_WDTERR", 3, 1, "Fault Mapping Self-Test Watchdog Timer Error", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
                Field("FMA_C", 2, 1, "Fault Mapping Algorithm C", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
                Field("FMA_S", 0, 1, "Fault Mapping Algorithm S", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
            ]),
            Register("STCR3", 0x400A0348, 32, "Self-Test Configuration 3", [
                Field("ALG", 8, 2, "Algorithm Selection", [
                ]),
                Field("MSTEP", 0, 5, "Algorithm Step", [
                ]),
            ]),
            Register("STBRR", 0x400A034C, 32, "Self-Test Baud Rate", [
                Field("WDT", 16, 3, "Self-Test Watchdog Timer", [
                    EnumVal("br0", "0", "8192 conversion clock cycles (~0.1 ms at 80 MHz)"),
                    EnumVal("br1", "0x1", "39,936 conversion clock cycles (~0.5 ms at 80 MHz)"),
                    EnumVal("br2", "0x2", "79,872 conversion clock cycles (~1 ms at 80 MHz)"),
                    EnumVal("br3", "0x3", "159,744 conversion clock cycles (~2 ms at 80 MHz)"),
                    EnumVal("br4", "0x4", "400,384 conversion clock cycles (~5 ms at 80 MHz)"),
                    EnumVal("br5", "0x5", "799,744 conversion clock cycles (~10 ms at 80 MHz)"),
                    EnumVal("br6", "0x6", "1,599,488 conversion clock cycles (~20 ms at 80 MHz)"),
                    EnumVal("br7", "0x7", "3,999,744 conversion clock cycles (~50 ms at 80 MHz)"),
                ]),
                Field("BR", 0, 8, "Baud Rate", [
                    EnumVal("fastestbr", "0", "A step of the selected self-test algorithm is executed every time after the set of selected inputs has been converted."),
                    EnumVal("slowestbr", "0xFF", "A step of the selected self-test algorithm is executed after the set of selected inputs has been converted 256 times."),
                ]),
            ]),
            Register("STSR1", 0x400A0350, 32, "Self-Test Status 1", [
                Field("WDSERR", 27, 1, "Self-Test Watchdog Sequence Error", [
                    EnumVal("WDSERR_NO", "0", "Algorithm executed in correct sequence"),
                    EnumVal("WDSERR_YES", "0x1", "Algorithm did not execute in correct sequence"),
                ]),
                Field("WDTERR", 25, 1, "Self-Test Watchdog Timer Error", [
                    EnumVal("WDTERR_NO", "0", "Algorithm finished within the safe time period (or safe time period not yet elapsed)."),
                    EnumVal("WDTERR_YES", "0x1", "Algorithm did not finish within safe time period."),
                ]),
                Field("OVERWR", 24, 1, "Self-Test Error Status Overwrite", [
                    EnumVal("STOVRW_NO", "0", "No self-test error status flag overwritten"),
                    EnumVal("STOVRW_YES", "0x1", "Self-test error status flag overwritten"),
                ]),
                Field("ST_EOC", 23, 1, "Self-Test End Of Conversion", [
                    EnumVal("STEOC_NO", "0", "Not complete"),
                    EnumVal("STEOC_YES", "0x1", "Complete"),
                ]),
                Field("WDG_EOA_C", 18, 1, "Self-Test Watchdog End Of Algorithm C", [
                    EnumVal("COMPLETE_NO", "0", "Not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Complete"),
                ]),
                Field("WDG_EOA_S", 16, 1, "Self-Test Watchdog End Of Algorithm S", [
                    EnumVal("COMPLETE_NO", "0", "Not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Complete"),
                ]),
                Field("ERR_C", 15, 1, "Error Algorithm C", [
                    EnumVal("ERRC_NO", "0", "No error"),
                    EnumVal("ERRC_YES", "0x1", "Error"),
                ]),
                Field("ERR_S2", 13, 1, "Error Algorithm S Step 2", [
                    EnumVal("S2_ERR_NO", "0", "No error"),
                    EnumVal("S2_ERR_YES", "0x1", "Error"),
                ]),
                Field("ERR_S1", 12, 1, "Error Algorithm S Step 1", [
                    EnumVal("S1_ERR_NO", "0", "No error"),
                    EnumVal("S1_ERR_YES", "0x1", "Error"),
                ]),
                Field("ERR_S0", 11, 1, "Error Algorithm S Step 0", [
                    EnumVal("S0_ERR_NO", "0", "No error"),
                    EnumVal("S0_ERR_YES", "0x1", "Error"),
                ]),
                Field("STEP_C", 5, 5, "Step Of Algorithm C", [
                ]),
            ]),
            Register("STSR2", 0x400A0354, 32, "Self-Test Status 2", [
                Field("DATA0", 0, 15, "Conversion Data ERR_S1", [
                ]),
            ]),
            Register("STSR3", 0x400A0358, 32, "Self-Test Status 3", [
                Field("DATA1", 16, 15, "Conversion Data ERR_S2", [
                ]),
                Field("DATA0", 0, 15, "Conversion Data ERR_S0", [
                ]),
            ]),
            Register("STSR4", 0x400A035C, 32, "Self-Test Status 4", [
                Field("DATA1", 16, 15, "Conversion Data ERR_C", [
                ]),
            ]),
            Register("STDR1", 0x400A0370, 32, "Self-Test Conversion Data 1", [
                Field("VALID", 19, 1, "Valid Conversion Data", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OWERWR", 18, 1, "Conversion Data Overwrite Status", [
                    EnumVal("noovwr", "0", "Current conversion data not overwritten"),
                    EnumVal("ovwr", "0x1", "Current conversion data was overwritten"),
                ]),
                Field("TCDATA", 0, 15, "Test Channel Conversion Data", [
                ]),
            ]),
            Register("STAW0R", 0x400A0380, 32, "Self-Test Analog Watchdog S0", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("diswd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("WDTE", 30, 1, "Self-Test Watchdog Timer Enable", [
                    EnumVal("diswdt", "0", "Disable"),
                    EnumVal("enwdt", "0x1", "Enable"),
                ]),
                Field("THRH", 16, 14, "Higher Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW1R", 0x400A0388, 32, "Self-Test Analog Watchdog S1", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("diswd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW2R", 0x400A038C, 32, "Self-Test Analog Watchdog S2", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("diswd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW4R", 0x400A0394, 32, "Self-Test Analog Watchdog C0", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("noawc", "0", "Disable"),
                    EnumVal("wdacen", "0x1", "Enable"),
                ]),
                Field("WDTE", 30, 1, "Self-Test Watchdog Timer Enable", [
                    EnumVal("stwdtdis", "0", "Disable"),
                    EnumVal("stwdten", "0x1", "Enable"),
                ]),
                Field("THRH", 16, 14, "Higher Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW5R", 0x400A0398, 32, "Self-Test Analog Watchdog C", [
                Field("THRH", 16, 15, "Higher Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("AMSIO", 0x400A039C, 32, "Analog Miscellaneous In/Out register", [
                Field("HSEN", 17, 2, "High-Speed Enable", [
                ]),
                Field("CMPCTRL0", 16, 1, "Compare Control 0", [
                ]),
            ]),
            Register("CALBISTREG", 0x400A03A0, 32, "Control And Calibration Status", [
                Field("RESN", 29, 3, "Conversion Resolution", [
                    EnumVal("high", "0", "14-bit resolution"),
                    EnumVal("mid", "0x1", "12-bit resolution"),
                    EnumVal("low", "0x2", "10-bit resolution"),
                    EnumVal("lowest", "0x3", "8-bit resolution"),
                ]),
                Field("TSAMP", 27, 2, "Sample Period In Calibration", [
                    EnumVal("high", "0", "22 conversion clock cycles"),
                    EnumVal("lowest", "0x1", "8 conversion clock cycles"),
                    EnumVal("low", "0x2", "16 conversion clock cycles"),
                    EnumVal("highest", "0x3", "32 conversion clock cycles"),
                ]),
                Field("C_T_BUSY", 15, 1, "Calibration Busy", [
                    EnumVal("waitcal", "0", "Calibration can be started"),
                    EnumVal("runcal", "0x1", "Calibration is in progress"),
                ]),
                Field("CALSTFUL", 14, 1, "Calibration And Self-Test Full Range Comparison", [
                    EnumVal("reducedsar", "0", "Lowest 11 bits are compared."),
                    EnumVal("fullsar", "0x1", "All 15 bits are compared."),
                ]),
                Field("NR_SMPL", 5, 2, "Calibration Averaging Number", [
                    EnumVal("lowest", "0", "4 samples"),
                    EnumVal("low", "0x1", "8 samples"),
                    EnumVal("high", "0x2", "16 samples"),
                    EnumVal("highest", "0x3", "32 samples"),
                ]),
                Field("AVG_EN", 4, 1, "Calibration Averaging Enable", [
                    EnumVal("discalavg", "0", "Disable"),
                    EnumVal("calav", "0x1", "Enable"),
                ]),
                Field("TEST_FAIL", 3, 1, "Calibration Status", [
                    EnumVal("CALPASS_YES", "0", "Calibration finished successfully or has not been run since the last reset"),
                    EnumVal("CALPASS_NO", "0x1", "Calibration did not finish successfully"),
                ]),
                Field("TEST_EN", 0, 1, "Calibration Enable", [
                    EnumVal("nocal", "0", "Wait to start a calibration"),
                    EnumVal("runcal", "0x1", "Start calibration"),
                ]),
            ]),
            Register("OFSGNUSR", 0x400A03A8, 32, "Offset And Gain User", [
                Field("GAIN_USER", 16, 10, "Gain User", [
                ]),
                Field("OFFSET_USER", 0, 8, "Offset User", [
                ]),
            ]),
            Register("CAL2", 0x400A03B4, 32, "Calibration Value 2", [
                Field("ENX", 15, 1, "Enable X", [
                    EnumVal("disclpx", "0", "Disable"),
                    EnumVal("enclpx", "0x1", "Enable"),
                ]),
            ]),
        ])

class Module_ADC_1(Peripheral):
    def __init__(self):
        super().__init__("ADC_1", 0x400A4000, 0x3B8, [
            Register("MCR", 0x400A4000, 32, "Main Configuration", [
                Field("OWREN", 31, 1, "Overwrite Enable", [
                    EnumVal("noovwr", "0", "Disable"),
                    EnumVal("enovwr", "0x1", "Enable"),
                ]),
                Field("WLSIDE", 30, 1, "Write Left-Aligned", [
                    EnumVal("rightaligned", "0", "Right aligned"),
                    EnumVal("leftaligned", "0x1", "Left-aligned"),
                ]),
                Field("MODE", 29, 1, "Normal Conversion Mode", [
                    EnumVal("once", "0", "Single conversion"),
                    EnumVal("continuous", "0x1", "Continuous conversion"),
                ]),
                Field("TRGEN", 27, 1, "External Trigger Enable", [
                    EnumVal("noexttrg", "0", "Normal trigger input does not start a conversion"),
                    EnumVal("enexttrg", "0x1", "Normal trigger input starts a conversion"),
                ]),
                Field("EDGE", 26, 1, "External Trigger Edge Selection", [
                    EnumVal("fedge", "0", "Falling edge"),
                    EnumVal("redge", "0x1", "Rising edge"),
                ]),
                Field("XSTRTEN", 25, 1, "Auxiliary External Start Enable", [
                    EnumVal("noextstart", "0", "Disable"),
                    EnumVal("enextstart", "0x1", "Enable"),
                ]),
                Field("NSTART", 24, 1, "Start Normal Conversion", [
                    EnumVal("nonstart", "0", "No effect"),
                    EnumVal("donstart", "0x1", "Starts conversion"),
                ]),
                Field("JTRGEN", 22, 1, "Injection Trigger Enable", [
                    EnumVal("noj", "0", "Disable"),
                    EnumVal("enj", "0x1", "Enable"),
                ]),
                Field("JEDGE", 21, 1, "Injected Trigger Edge Selection", [
                    EnumVal("fjedge", "0", "Falling edge"),
                    EnumVal("rjedge", "0x1", "Rising edge"),
                ]),
                Field("JSTART", 20, 1, "Injected Start", [
                    EnumVal("noj", "0", "Injected conversion can be started"),
                    EnumVal("doj", "0x1", "Starts an injected conversion"),
                ]),
                Field("BCTUEN", 17, 1, "Body Cross Trigger Unit Enable", [
                    EnumVal("noctu", "0", "Disable"),
                    EnumVal("enctu", "0x1", "Enable"),
                ]),
                Field("BCTU_MODE", 16, 1, "Body Cross Trigger Unit Mode Select", [
                    EnumVal("ctuonly", "0", "Only BCTU can trigger conversion"),
                    EnumVal("alltrig", "0x1", "All trigger sources can trigger conversion"),
                ]),
                Field("STCL", 15, 1, "Self-Test Configuration Lock", [
                    EnumVal("noprotect", "0", "Registers are writeable"),
                    EnumVal("doprotect", "0x1", "Registers are read-only"),
                ]),
                Field("AVGEN", 11, 1, "Averaging Enable", [
                    EnumVal("noavg", "0", "Disable"),
                    EnumVal("enavg", "0x1", "Enable"),
                ]),
                Field("AVGS", 9, 2, "Averaging Select", [
                    EnumVal("avgs0", "0", "4 conversions"),
                    EnumVal("avgs1", "0x1", "8 conversions"),
                    EnumVal("avgs2", "0x2", "16 conversions"),
                    EnumVal("avgs3", "0x3", "32 conversions"),
                ]),
                Field("ABORTCHAIN", 7, 1, "Abort Chain", [
                    EnumVal("UNDEFINED", "0", "Undefined"),
                    EnumVal("ABORT_CHAIN_YES", "0x1", "Conversion aborted"),
                ]),
                Field("ABORT", 6, 1, "Abort Conversion", [
                    EnumVal("UNDEFINED", "0", "Undefined"),
                    EnumVal("DO_ABORT", "0x1", "Conversion aborted"),
                ]),
                Field("ACKO", 5, 1, "Auto Clock Off", [
                    EnumVal("aclkoff", "0", "Clock always active"),
                    EnumVal("aclkon", "0x1", "Clock gated"),
                ]),
                Field("ADCLKSEL", 1, 2, "Conversion Clock (AD_clk) Frequency Selection", [
                    EnumVal("disdiv", "0", "Module clock frequency"),
                    EnumVal("div2", "0x1", "Module clock frequency / 2"),
                    EnumVal("div4", "0x2", "Module clock frequency / 4"),
                ]),
                Field("PWDN", 0, 1, "Power Down", [
                    EnumVal("func", "0", "ADC enters a functional state"),
                    EnumVal("pwdn", "0x1", "ADC enters Power Down state"),
                ]),
            ]),
            Register("MSR", 0x400A4004, 32, "Main Status", [
                Field("CALIBRTD", 31, 1, "Calibration Status", [
                    EnumVal("nocal", "0", "Uncalibrated or calibration unsuccessful"),
                    EnumVal("cal", "0x1", "Calibrated"),
                ]),
                Field("NSTART", 24, 1, "Normal Conversion Started", [
                    EnumVal("non", "0", "Not in progress"),
                    EnumVal("nrunning", "0x1", "In progress"),
                ]),
                Field("JABORT", 23, 1, "Injected Conversion Aborted", [
                    EnumVal("nojabort", "0", "Not aborted"),
                    EnumVal("jaborted", "0x1", "Aborted"),
                ]),
                Field("JSTART", 20, 1, "Injected Conversion Started", [
                    EnumVal("noj", "0", "Not an injected conversion"),
                    EnumVal("jrunning", "0x1", "Injected conversion"),
                ]),
                Field("SELF_TEST_S", 18, 1, "Indicates whether an ongoing conversion is for self-test.", [
                    EnumVal("nost", "0", "Not self-test"),
                    EnumVal("strunning", "0x1", "Self-test"),
                ]),
                Field("BCTUSTART", 16, 1, "BCTU Conversion Started", [
                    EnumVal("ctuoff", "0", "Conversion was not triggered by BCTU"),
                    EnumVal("cturunning", "0x1", "Ongoing conversion was triggered by BCTU"),
                ]),
                Field("CHADDR", 9, 7, "Input Under Measure", [
                    EnumVal("input_number_0", "0", "Input number"),
                    EnumVal("input_number_1", "0x1", "Input number"),
                    EnumVal("input_number_2", "0x2", "Input number"),
                    EnumVal("input_number_3", "0x3", "Input number"),
                    EnumVal("input_number_4", "0x4", "Input number"),
                    EnumVal("input_number_5", "0x5", "Input number"),
                    EnumVal("input_number_6", "0x6", "Input number"),
                    EnumVal("input_number_7", "0x7", "Input number"),
                    EnumVal("input_number_8", "0x8", "Input number"),
                    EnumVal("input_number_9", "0x9", "Input number"),
                ]),
                Field("ACKO", 5, 1, "Auto Clock-Off On", [
                    EnumVal("ackooff", "0", "Inactive"),
                    EnumVal("ackoon", "0x1", "Active"),
                ]),
                Field("ADCSTATUS", 0, 3, "ADC State", [
                    EnumVal("idle", "0", "Idle"),
                    EnumVal("powerdown", "0x1", "Power Down"),
                    EnumVal("wait", "0x2", "Wait"),
                    EnumVal("calibrate", "0x3", "Calibrate"),
                    EnumVal("convert", "0x4", "Convert"),
                    EnumVal("done", "0x6", "Done"),
                ]),
            ]),
            Register("ISR", 0x400A4010, 32, "Interrupt Status", [
                Field("EOBCTU", 4, 1, "End Of BCTU Conversion", [
                    EnumVal("EOBCTU_NO", "0", "No EOBCTU interrupt generated"),
                    EnumVal("EOBCTU_YES", "0x1", "EOBCTU interrupt generated"),
                ]),
                Field("JEOC", 3, 1, "End Of Injected Conversion", [
                    EnumVal("JEOC_NO", "0", "No JEOC interrupt generated"),
                    EnumVal("JEOC_YES", "0x1", "JEOC interrupt generated"),
                ]),
                Field("JECH", 2, 1, "End Of Injected Chain Conversion", [
                    EnumVal("JECH_NO", "0", "No JECH interrupt generated"),
                    EnumVal("JECH_YES", "0x1", "JECH interrupt generated"),
                ]),
                Field("EOC", 1, 1, "End Of Conversion", [
                    EnumVal("EOC_NO", "0", "No EOC interrupt generated"),
                    EnumVal("EOC_YES", "0x1", "Interrupt generated"),
                ]),
                Field("ECH", 0, 1, "End Of Chain Conversion", [
                    EnumVal("ECH_NO", "0", "Indicates no ECH interrupt generated"),
                    EnumVal("ECH_YES", "0x1", "Indicates an ECH interrupt has been generated"),
                ]),
            ]),
            Register("CEOCFR0", 0x400A4014, 32, "Channel End Of Conversion Flag For Precision Inputs", [
                Field("PIEOCF7", 7, 1, "Precision Input End Of Conversion Flag 7", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF6", 6, 1, "Precision Input End Of Conversion Flag 6", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF5", 5, 1, "Precision Input End Of Conversion Flag 5", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF4", 4, 1, "Precision Input End Of Conversion Flag 4", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF3", 3, 1, "Precision Input End Of Conversion Flag 3", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF2", 2, 1, "Precision Input End Of Conversion Flag 2", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF1", 1, 1, "Precision Input End Of Conversion Flag 1", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("PIEOCF0", 0, 1, "Precision Input End Of Conversion Flag 0", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
            ]),
            Register("CEOCFR1", 0x400A4018, 32, "Channel End Of Conversion Flag For Standard Inputs", [
                Field("SIEOCF23", 23, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF22", 22, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF21", 21, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF20", 20, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF19", 19, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF18", 18, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF17", 17, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF16", 16, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF15", 15, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF14", 14, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF13", 13, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF12", 12, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF11", 11, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF10", 10, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF9", 9, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF8", 8, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF7", 7, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF6", 6, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF5", 5, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF4", 4, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF3", 3, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF2", 2, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF1", 1, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("SIEOCF0", 0, 1, "Standard Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
            ]),
            Register("CEOCFR2", 0x400A401C, 32, "Channel End Of Conversion Flag For External Inputs", [
                Field("EIEOCF31", 31, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF30", 30, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF29", 29, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF28", 28, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF27", 27, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF26", 26, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF25", 25, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF24", 24, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF23", 23, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF22", 22, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF21", 21, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF20", 20, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF19", 19, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF18", 18, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF17", 17, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF16", 16, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF15", 15, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF14", 14, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF13", 13, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF12", 12, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF11", 11, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF10", 10, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF9", 9, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF8", 8, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF7", 7, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF6", 6, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF5", 5, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF4", 4, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF3", 3, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF2", 2, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF1", 1, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
                Field("EIEOCF0", 0, 1, "External Input End Of Conversion Flag", [
                    EnumVal("COMPLETE_NO", "0", "Conversion not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Conversion complete"),
                ]),
            ]),
            Register("IMR", 0x400A4020, 32, "Interrupt Mask", [
                Field("MSKEOBCTU", 4, 1, "EOBCTU Interrupt Flag Enable", [
                    EnumVal("maskebctui", "0", "Interrupt is not flagged"),
                    EnumVal("eneobctui", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKJEOC", 3, 1, "JEOC Interrupt Flag Enable", [
                    EnumVal("maskjeoci", "0", "Interrupt is not flagged"),
                    EnumVal("enjeoci", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKJECH", 2, 1, "JECH Interrupt Flag Enable", [
                    EnumVal("maskjechi", "0", "Interrupt is not flagged"),
                    EnumVal("enjechi", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKEOC", 1, 1, "EOC Interrupt Flag Enable", [
                    EnumVal("maskeoci", "0", "Interrupt is not flagged"),
                    EnumVal("eneoci", "0x1", "Interrupt is flagged"),
                ]),
                Field("MSKECH", 0, 1, "ECH Interrupt Flag Enable", [
                    EnumVal("maskechi", "0", "Interrupt is not flagged"),
                    EnumVal("enechi", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("CIMR0", 0x400A4024, 32, "EOC Interrupt Enable For Precision Inputs", [
                Field("PIEOCIEN7", 7, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN6", 6, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN5", 5, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN4", 4, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN3", 3, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN2", 2, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN1", 1, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("PIEOCIEN0", 0, 1, "Precision Input EOC Interrupt Enable", [
                    EnumVal("nopieoci", "0", "Interrupt is not flagged"),
                    EnumVal("pieociset", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("CIMR1", 0x400A4028, 32, "EOC Interrupt Enable For Standard Inputs", [
                Field("SIEOCIEN23", 23, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN22", 22, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN21", 21, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN20", 20, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN19", 19, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN18", 18, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN17", 17, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN16", 16, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN15", 15, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN14", 14, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN13", 13, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN12", 12, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN11", 11, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN10", 10, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN9", 9, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN8", 8, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN7", 7, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN6", 6, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN5", 5, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN4", 4, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN3", 3, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN2", 2, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN1", 1, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("SIEOCIEN0", 0, 1, "Standard Input EOC Interrupt Enable", [
                    EnumVal("nosieoci", "0", "Interrupt is not flagged"),
                    EnumVal("sieociset", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("CIMR2", 0x400A402C, 32, "EOC Interrupt Enable For External Inputs", [
                Field("EIEOCIEN31", 31, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN30", 30, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN29", 29, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN28", 28, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN27", 27, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN26", 26, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN25", 25, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN24", 24, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN23", 23, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN22", 22, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN21", 21, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN20", 20, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN19", 19, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN18", 18, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN17", 17, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN16", 16, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN15", 15, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN14", 14, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN13", 13, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN12", 12, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN11", 11, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN10", 10, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN9", 9, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN8", 8, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN7", 7, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN6", 6, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN5", 5, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN4", 4, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN3", 3, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN2", 2, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN1", 1, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
                Field("EIEOCIEN0", 0, 1, "External Input EOC Interrupt Enable", [
                    EnumVal("noeieoci", "0", "Interrupt is not flagged"),
                    EnumVal("eieociset", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("WTISR", 0x400A4030, 32, "Analog Watchdog Threshold Interrupt Status", [
                Field("HAWIF16", 31, 1, "High Analog Watchdog Interrupt Flag 16", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF16", 30, 1, "Low Analog Watchdog Interrupt Flag 16", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF15", 29, 1, "High Analog Watchdog Interrupt Flag 15", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF15", 28, 1, "Low Analog Watchdog Interrupt Flag 15", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF14", 27, 1, "High Analog Watchdog Interrupt Flag 14", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF14", 26, 1, "Low Analog Watchdog Interrupt Flag 14", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF13", 25, 1, "High Analog Watchdog Interrupt Flag 13", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF13", 24, 1, "Low Analog Watchdog Interrupt Flag 13", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF12", 23, 1, "High Analog Watchdog Interrupt Flag 12", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF12", 22, 1, "Low Analog Watchdog Interrupt Flag 12", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF11", 21, 1, "High Analog Watchdog Interrupt Flag 11", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF11", 20, 1, "Low Analog Watchdog Interrupt Flag 11", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF10", 19, 1, "High Analog Watchdog Interrupt Flag 10", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF10", 18, 1, "Low Analog Watchdog Interrupt Flag 10", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF9", 17, 1, "High Analog Watchdog Interrupt Flag 9", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF9", 16, 1, "Low Analog Watchdog Interrupt Flag 9", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF8", 15, 1, "High Analog Watchdog Interrupt Flag 8", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF8", 14, 1, "Low Analog Watchdog Interrupt Flag 8", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF7", 13, 1, "High Analog Watchdog Interrupt Flag 7", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF7", 12, 1, "Low Analog Watchdog Interrupt Flag 7", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF6", 11, 1, "High Analog Watchdog Interrupt Flag 6", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF6", 10, 1, "Low Analog Watchdog Interrupt Flag 6", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF5", 9, 1, "High Analog Watchdog Interrupt Flag 5", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF5", 8, 1, "Low Analog Watchdog Interrupt Flag 5", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF4", 7, 1, "High Analog Watchdog Interrupt Flag 4", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF4", 6, 1, "Low Analog Watchdog Interrupt Flag 4", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF3", 5, 1, "High Analog Watchdog Interrupt Flag 3", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF3", 4, 1, "Low Analog Watchdog Interrupt Flag 3", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF2", 3, 1, "High Analog Watchdog Interrupt Flag 2", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF2", 2, 1, "Low Analog Watchdog Interrupt Flag 2", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
                Field("HAWIF1", 1, 1, "High Analog Watchdog Interrupt Flag 1", [
                    EnumVal("LOWER", "0", "Conversion result is lower than the specified high threshold"),
                    EnumVal("HIGHER", "0x1", "Conversion result is higher than the specified high threshold"),
                ]),
                Field("LAWIF1", 0, 1, "Low Analog Watchdog Interrupt Flag 1", [
                    EnumVal("GREATER", "0", "Conversion result is greater than the specified low threshold"),
                    EnumVal("LOWER", "0x1", "Conversion result is lower than the specified low threshold"),
                ]),
            ]),
            Register("WTIMR", 0x400A4034, 32, "Analog Watchdog Threshold Interrupt Enable", [
                Field("HDWIFEN4", 7, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN4", 6, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("HDWIFEN3", 5, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN3", 4, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("HDWIFEN2", 3, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN2", 2, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("HDWIFEN1", 1, 1, "High Data Watchdog Interrupt Flag Enable n", [
                    EnumVal("hwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("hwdgien", "0x1", "Interrupt is flagged"),
                ]),
                Field("LAWIFEN1", 0, 1, "Low Analog Watchdog Interrupt Flag Enable n", [
                    EnumVal("lwdgidis", "0", "Interrupt is not flagged"),
                    EnumVal("lwdgien", "0x1", "Interrupt is flagged"),
                ]),
            ]),
            Register("DMAE", 0x400A4040, 32, "Direct Memory Access Configuration", [
                Field("DCLR", 1, 1, "DMA Clear Request", [
                    EnumVal("ackclr", "0", "DMA controller acknowledges the request"),
                    EnumVal("ipsclr", "0x1", "Conversion data register is read"),
                ]),
                Field("DMAEN", 0, 1, "DMA Enable", [
                    EnumVal("dmadis", "0", "Disable"),
                    EnumVal("dmaen", "0x1", "Enable"),
                ]),
            ]),
            Register("DMAR0", 0x400A4044, 32, "DMA Request Enable For Precision Inputs", [
                Field("PIDMAREN7", 7, 1, "Precision Input DMA Request Enable 7", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN6", 6, 1, "Precision Input DMA Request Enable 6", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN5", 5, 1, "Precision Input DMA Request Enable 5", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN4", 4, 1, "Precision Input DMA Request Enable 4", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN3", 3, 1, "Precision Input DMA Request Enable 3", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN2", 2, 1, "Precision Input DMA Request Enable 2", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN1", 1, 1, "Precision Input DMA Request Enable 1", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
                Field("PIDMAREN0", 0, 1, "Precision Input DMA Request Enable 0", [
                    EnumVal("nodmareq", "0", "Not triggered"),
                    EnumVal("dmareqen", "0x1", "Triggered"),
                ]),
            ]),
            Register("DMAR1", 0x400A4048, 32, "DMA Request Enable For Standard Inputs", [
                Field("SIDMAREN23", 23, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN22", 22, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN21", 21, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN20", 20, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN19", 19, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN18", 18, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN17", 17, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN16", 16, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN15", 15, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN14", 14, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN13", 13, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN12", 12, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN11", 11, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN10", 10, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN9", 9, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN8", 8, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN7", 7, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN6", 6, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN5", 5, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN4", 4, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN3", 3, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN2", 2, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN1", 1, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
                Field("SIDMAREN0", 0, 1, "Standard Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA is request triggered"),
                ]),
            ]),
            Register("DMAR2", 0x400A404C, 32, "DMA Request Enable For External Inputs", [
                Field("EIDMAREN31", 31, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN30", 30, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN29", 29, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN28", 28, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN27", 27, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN26", 26, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN25", 25, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN24", 24, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN23", 23, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN22", 22, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN21", 21, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN20", 20, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN19", 19, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN18", 18, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN17", 17, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN16", 16, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN15", 15, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN14", 14, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN13", 13, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN12", 12, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN11", 11, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN10", 10, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN9", 9, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN8", 8, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN7", 7, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN6", 6, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN5", 5, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN4", 4, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN3", 3, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN2", 2, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN1", 1, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
                Field("EIDMAREN0", 0, 1, "External Input DMA Request Enable n", [
                    EnumVal("nodmareq", "0", "DMA request is not triggered"),
                    EnumVal("dmareqen", "0x1", "DMA request is triggered"),
                ]),
            ]),
            Register("THRHLR[0]", 0x400A4060, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("THRHLR[1]", 0x400A4064, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("THRHLR[2]", 0x400A4068, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("THRHLR[3]", 0x400A406C, 32, "Analog Watchdog Threshold Values", [
                Field("THRH", 16, 15, "High Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Low Threshold Value", [
                ]),
            ]),
            Register("PSCR", 0x400A4080, 32, "Presampling Control", [
                Field("PREVAL2", 5, 1, "Presampling Voltage Select For External Inputs", [
                    EnumVal("lowpreval", "0", "VREFL"),
                    EnumVal("highpreval", "0x1", "VREFH"),
                ]),
                Field("PREVAL1", 3, 1, "Presampling Voltage Select For Standard Inputs", [
                    EnumVal("lowpreval", "0", "VREFL"),
                    EnumVal("highpreval", "0x1", "VREFH"),
                ]),
                Field("PREVAL0", 1, 1, "Presampling Voltage Select For Precision Inputs", [
                    EnumVal("lowpreval", "0", "VREFL"),
                    EnumVal("highpreval", "0x1", "VREFH"),
                ]),
                Field("PRECONV", 0, 1, "Convert Presampled Value", [
                    EnumVal("nocomp", "0", "No conversion after presampling"),
                    EnumVal("docomp", "0x1", "Presampling is followed by conversion"),
                ]),
            ]),
            Register("PSR0", 0x400A4084, 32, "Presampling Enable For Precision Inputs", [
                Field("PRES7", 7, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES6", 6, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES5", 5, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES4", 4, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES3", 3, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES2", 2, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES1", 1, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES0", 0, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
            ]),
            Register("PSR1", 0x400A4088, 32, "Presampling Enable For Standard Inputs", [
                Field("PRES23", 23, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES22", 22, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES21", 21, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES20", 20, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES19", 19, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES18", 18, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES17", 17, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES16", 16, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES15", 15, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES14", 14, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES13", 13, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES12", 12, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES11", 11, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES10", 10, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES9", 9, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES8", 8, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES7", 7, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES6", 6, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES5", 5, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES4", 4, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES3", 3, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES2", 2, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES1", 1, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES0", 0, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
            ]),
            Register("PSR2", 0x400A408C, 32, "Presampling Enable For External Inputs", [
                Field("PRES31", 31, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES30", 30, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES29", 29, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES28", 28, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES27", 27, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES26", 26, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES25", 25, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES24", 24, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES23", 23, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES22", 22, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES21", 21, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES20", 20, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES19", 19, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES18", 18, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES17", 17, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES16", 16, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES15", 15, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES14", 14, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES13", 13, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES12", 12, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES11", 11, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES10", 10, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES9", 9, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES8", 8, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES7", 7, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES6", 6, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES5", 5, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES4", 4, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES3", 3, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES2", 2, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES1", 1, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
                Field("PRES0", 0, 1, "Presampling Enable n", [
                    EnumVal("nopre", "0", "Disable"),
                    EnumVal("dopre", "0x1", "Enable"),
                ]),
            ]),
            Register("CTR0", 0x400A4094, 32, "Conversion Timing For Precision Inputs", [
                Field("INPSAMP", 0, 8, "Input Sample Cycles", [
                ]),
            ]),
            Register("CTR1", 0x400A4098, 32, "Conversion Timing For Standard Inputs", [
                Field("INPSAMP", 0, 8, "Input Sample Cycles", [
                ]),
            ]),
            Register("CTR2", 0x400A409C, 32, "Conversion Timing For External Inputs", [
                Field("INPSAMP", 0, 8, "Input Sample Cycles", [
                ]),
            ]),
            Register("NCMR0", 0x400A40A4, 32, "Normal Conversion Enable For Precision Inputs", [
                Field("CH7", 7, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH6", 6, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH5", 5, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH4", 4, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH3", 3, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH2", 2, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH1", 1, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
                Field("CH0", 0, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input is not selected"),
                    EnumVal("docon", "0x1", "Input is selected"),
                ]),
            ]),
            Register("NCMR1", 0x400A40A8, 32, "Normal Conversion Enable For Standard Inputs", [
                Field("CH55", 23, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH54", 22, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH53", 21, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH52", 20, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH51", 19, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH50", 18, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH49", 17, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH48", 16, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH47", 15, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH46", 14, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH45", 13, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH44", 12, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH43", 11, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH42", 10, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH41", 9, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH40", 8, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH39", 7, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH38", 6, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH37", 5, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH36", 4, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH35", 3, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH34", 2, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH33", 1, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH32", 0, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("NCMR2", 0x400A40AC, 32, "Normal Conversion Enable For External Inputs", [
                Field("CH95", 31, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH94", 30, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH93", 29, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH92", 28, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH91", 27, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH90", 26, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH89", 25, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH88", 24, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH87", 23, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH86", 22, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH85", 21, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH84", 20, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH83", 19, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH82", 18, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH81", 17, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH80", 16, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH79", 15, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH78", 14, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH77", 13, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH76", 12, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH75", 11, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH74", 10, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH73", 9, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH72", 8, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH71", 7, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH70", 6, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH69", 5, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH68", 4, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH67", 3, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH66", 2, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH65", 1, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH64", 0, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("JCMR0", 0x400A40B4, 32, "Injected Conversion Enable For Precision Inputs", [
                Field("CH7", 7, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 7 is not selected"),
                    EnumVal("docon", "0x1", "Input 7 is selected"),
                ]),
                Field("CH6", 6, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 6 is not selected"),
                    EnumVal("docon", "0x1", "Input 6 is selected"),
                ]),
                Field("CH5", 5, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 5 is not selected"),
                    EnumVal("docon", "0x1", "Input 5 is selected"),
                ]),
                Field("CH4", 4, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 4 is not selected"),
                    EnumVal("docon", "0x1", "Input 4 is selected"),
                ]),
                Field("CH3", 3, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 3 is not selected"),
                    EnumVal("docon", "0x1", "Input 3 is selected"),
                ]),
                Field("CH2", 2, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 2 is not selected"),
                    EnumVal("docon", "0x1", "Input 2 is selected"),
                ]),
                Field("CH1", 1, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 1 is not selected"),
                    EnumVal("docon", "0x1", "Input 1 is selected"),
                ]),
                Field("CH0", 0, 1, "Precision Input To Be Converted", [
                    EnumVal("nocon", "0", "Input 0 is not selected"),
                    EnumVal("docon", "0x1", "Input 0 is selected"),
                ]),
            ]),
            Register("JCMR1", 0x400A40B8, 32, "Injected Conversion Enable For Standard Inputs", [
                Field("CH55", 23, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH54", 22, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH53", 21, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH52", 20, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH51", 19, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH50", 18, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH49", 17, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH48", 16, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH47", 15, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH46", 14, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH45", 13, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH44", 12, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH43", 11, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH42", 10, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH41", 9, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH40", 8, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH39", 7, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH38", 6, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH37", 5, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH36", 4, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH35", 3, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH34", 2, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH33", 1, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH32", 0, 1, "Standard Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("JCMR2", 0x400A40BC, 32, "Injected Conversion Enable For External Inputs", [
                Field("CH95", 31, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH94", 30, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH93", 29, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH92", 28, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH91", 27, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH90", 26, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH89", 25, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH88", 24, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH87", 23, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH86", 22, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH85", 21, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH84", 20, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH83", 19, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH82", 18, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH81", 17, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH80", 16, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH79", 15, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH78", 14, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH77", 13, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH76", 12, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH75", 11, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH74", 10, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH73", 9, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH72", 8, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH71", 7, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH70", 6, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH69", 5, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH68", 4, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH67", 3, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH66", 2, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH65", 1, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
                Field("CH64", 0, 1, "External Input To Be Converted", [
                    EnumVal("nocon", "0", "Input n is not selected"),
                    EnumVal("docon", "0x1", "Input n is selected"),
                ]),
            ]),
            Register("DSDR", 0x400A40C4, 32, "Delay Start Of Data Conversion", [
                Field("DSD", 0, 16, "Delay", [
                ]),
            ]),
            Register("PDEDR", 0x400A40C8, 32, "Power Down Exit Delay", [
                Field("PDED", 0, 8, "Delay", [
                ]),
            ]),
            Register("PCDR0", 0x400A4100, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR1", 0x400A4104, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR2", 0x400A4108, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR3", 0x400A410C, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR4", 0x400A4110, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR5", 0x400A4114, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR6", 0x400A4118, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("PCDR7", 0x400A411C, 32, "Precision Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[0]", 0x400A4180, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[1]", 0x400A4184, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[2]", 0x400A4188, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[3]", 0x400A418C, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[4]", 0x400A4190, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[5]", 0x400A4194, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[6]", 0x400A4198, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[7]", 0x400A419C, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[8]", 0x400A41A0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[9]", 0x400A41A4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[10]", 0x400A41A8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[11]", 0x400A41AC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[12]", 0x400A41B0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[13]", 0x400A41B4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[14]", 0x400A41B8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[15]", 0x400A41BC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[16]", 0x400A41C0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[17]", 0x400A41C4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[18]", 0x400A41C8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[19]", 0x400A41CC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[20]", 0x400A41D0, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[21]", 0x400A41D4, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[22]", 0x400A41D8, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ICDR[23]", 0x400A41DC, 32, "Standard Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[0]", 0x400A4200, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[1]", 0x400A4204, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[2]", 0x400A4208, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[3]", 0x400A420C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[4]", 0x400A4210, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[5]", 0x400A4214, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[6]", 0x400A4218, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[7]", 0x400A421C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[8]", 0x400A4220, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[9]", 0x400A4224, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[10]", 0x400A4228, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[11]", 0x400A422C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[12]", 0x400A4230, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[13]", 0x400A4234, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[14]", 0x400A4238, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[15]", 0x400A423C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[16]", 0x400A4240, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[17]", 0x400A4244, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[18]", 0x400A4248, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[19]", 0x400A424C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[20]", 0x400A4250, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[21]", 0x400A4254, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[22]", 0x400A4258, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[23]", 0x400A425C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[24]", 0x400A4260, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[25]", 0x400A4264, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[26]", 0x400A4268, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[27]", 0x400A426C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[28]", 0x400A4270, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[29]", 0x400A4274, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[30]", 0x400A4278, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("ECDR[31]", 0x400A427C, 32, "External Input n Conversion Data", [
                Field("VALID", 19, 1, "Conversion Data Available", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OVERW", 18, 1, "Overwrite Status Flag", [
                    EnumVal("noowr", "0", "No unread data is overwritten"),
                    EnumVal("owr", "0x1", "Unread data is overwritten"),
                ]),
                Field("RESULT", 16, 2, "Conversion Data Type", [
                    EnumVal("ncd", "0", "Normal trigger"),
                    EnumVal("jcd", "0x1", "Injected trigger"),
                    EnumVal("bctucd", "0x2", "BCTU trigger"),
                ]),
                Field("CDATA", 0, 16, "Conversion Data", [
                ]),
            ]),
            Register("CWSELRPI0", 0x400A42B0, 32, "Channel Analog Watchdog Select For Precision Inputs", [
                Field("WSEL_SI0_7", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_6", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_5", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_4", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_3", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_2", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_1", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_0", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELRPI1", 0x400A42B4, 32, "Channel Analog Watchdog Select For Precision Inputs", [
            ]),
            Register("CWSELRSI0", 0x400A42C0, 32, "Channel Analog Watchdog Select For Standard Inputs", [
                Field("WSEL_SI7_0", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI6_0", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI5_0", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI4_0", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_0", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_0", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_0", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_0", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELRSI1", 0x400A42C4, 32, "Channel Analog Watchdog Select For Standard Inputs", [
                Field("WSEL_SI7_1", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI6_1", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI5_1", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI4_1", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_1", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_1", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_1", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_1", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELRSI2", 0x400A42C8, 32, "Channel Analog Watchdog Select For Standard Inputs", [
                Field("WSEL_SI7_2", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI6_2", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI5_2", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI4_2", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_2", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_2", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_2", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_2", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI0", 0x400A42D0, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI0_7", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_6", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_5", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_4", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_3", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_2", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_1", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI0_0", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI1", 0x400A42D4, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI1_15", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_14", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_13", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_12", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_11", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_10", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_9", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI1_8", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI2", 0x400A42D8, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI2_23", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_22", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_21", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_20", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_19", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_18", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_17", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI2_16", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWSELREI3", 0x400A42DC, 32, "Channel Analog Watchdog Select For External inputs", [
                Field("WSEL_SI3_31", 28, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_30", 24, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_29", 20, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_28", 16, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_27", 12, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_26", 8, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_25", 4, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
                Field("WSEL_SI3_24", 0, 2, "Analog Watchdog Selection", [
                    EnumVal("THRHLR0", "0", "Analog watchdog THRHLR0"),
                    EnumVal("THRHLR1", "0x1", "Analog watchdog THRHLR1"),
                    EnumVal("THRHLR2", "0x2", "Analog watchdog THRHLR2"),
                    EnumVal("THRHLR3", "0x3", "Analog watchdog THRHLR3"),
                ]),
            ]),
            Register("CWENR0", 0x400A42E0, 32, "Channel Watchdog Enable For Precision Inputs", [
                Field("CWEN7", 7, 1, "Channel Analog Watchdog Enable 7", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN6", 6, 1, "Channel Analog Watchdog Enable 6", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN5", 5, 1, "Channel Analog Watchdog Enable 5", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN4", 4, 1, "Channel Analog Watchdog Enable 4", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN3", 3, 1, "Channel Analog Watchdog Enable 3", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN2", 2, 1, "Channel Analog Watchdog Enable 2", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN1", 1, 1, "Channel Analog Watchdog Enable 1", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN0", 0, 1, "Channel Analog Watchdog Enable 0", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
            ]),
            Register("CWENR1", 0x400A42E4, 32, "Channel Watchdog Enable For Standard Inputs", [
                Field("CWEN55", 23, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN54", 22, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN53", 21, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN52", 20, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN51", 19, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN50", 18, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN49", 17, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN48", 16, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN47", 15, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN46", 14, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN45", 13, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN44", 12, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN43", 11, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN42", 10, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN41", 9, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN40", 8, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN39", 7, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN38", 6, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN37", 5, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN36", 4, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN35", 3, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN34", 2, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN33", 1, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN32", 0, 1, "Channel Analog Watchdog Enable For Standard Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
            ]),
            Register("CWENR2", 0x400A42E8, 32, "Channel Watchdog Enable For External Inputs", [
                Field("CWEN95", 31, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN94", 30, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN93", 29, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN92", 28, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN91", 27, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN90", 26, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN89", 25, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN88", 24, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN87", 23, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN86", 22, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN85", 21, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN84", 20, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN83", 19, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN82", 18, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN81", 17, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN80", 16, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN79", 15, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN78", 14, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN77", 13, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN76", 12, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN75", 11, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN74", 10, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN73", 9, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN72", 8, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN71", 7, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN70", 6, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN69", 5, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN68", 4, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN67", 3, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN66", 2, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN65", 1, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("CWEN64", 0, 1, "Channel Analog Watchdog Enable For External Inputs", [
                    EnumVal("nowd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
            ]),
            Register("AWORR0", 0x400A42F0, 32, "Analog Watchdog Out Of Range For Precision Inputs", [
                Field("AWOR_CH7", 7, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH6", 6, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH5", 5, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH4", 4, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH3", 3, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH2", 2, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH1", 1, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH0", 0, 1, "Analog Watchdog Out Of Range For Precision Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
            ]),
            Register("AWORR1", 0x400A42F4, 32, "Analog Watchdog Out Of Range For Standard Inputs", [
                Field("AWOR_CH23", 23, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH22", 22, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH21", 21, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH20", 20, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH19", 19, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH18", 18, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH17", 17, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH16", 16, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH15", 15, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH14", 14, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH13", 13, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH12", 12, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH11", 11, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH10", 10, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH9", 9, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH8", 8, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH7", 7, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH6", 6, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH5", 5, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH4", 4, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH3", 3, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH2", 2, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH1", 1, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH0", 0, 1, "Analog Watchdog Out Of Range For Standard Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
            ]),
            Register("AWORR2", 0x400A42F8, 32, "Analog Watchdog Out Of Range For External Inputs", [
                Field("AWOR_CH31", 31, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH30", 30, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH29", 29, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH28", 28, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH27", 27, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH26", 26, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH25", 25, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH24", 24, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH23", 23, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH22", 22, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH21", 21, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH20", 20, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH19", 19, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH18", 18, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH17", 17, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH16", 16, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH15", 15, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH14", 14, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH13", 13, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH12", 12, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH11", 11, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH10", 10, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH9", 9, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH8", 8, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH7", 7, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH6", 6, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH5", 5, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH4", 4, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH3", 3, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH2", 2, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH1", 1, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
                Field("AWOR_CH0", 0, 1, "Analog Watchdog Out Of Range For External Inputs", [
                    EnumVal("VALID_YES", "0", "Conversion is within limits"),
                    EnumVal("VALID_NO", "0x1", "Conversion is not within limits"),
                ]),
            ]),
            Register("STCR1", 0x400A4340, 32, "Self-Test Configuration 1", [
                Field("INPSAMP_C", 24, 8, "Input Sampling Time Algorithm C", [
                ]),
                Field("INPSAMP_S", 8, 8, "Input Sampling Time Algorithm S", [
                ]),
            ]),
            Register("STCR2", 0x400A4344, 32, "Self-Test Configuration 2", [
                Field("MSKWDSERR", 27, 1, "Mask Interrupt Self-Test Watchdog Sequence Error", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("SERR", 26, 1, "Self-Test Error Injection", [
                    EnumVal("INJ_AVAIL", "0", "Error can be injected"),
                    EnumVal("INJ_NO", "0x1", "Error is being injected"),
                ]),
                Field("MSKWDTERR", 25, 1, "Mask Interrupt Self-Test Watchdog Timer Error", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKST_EOC", 23, 1, "Mask Interrupt Self-Test End Of Conversion", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKWDG_EOA_C", 18, 1, "Mask Error Interrupt End Of Algorithm C", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKWDG_EOA_S", 16, 1, "Mask Error Interrupt End Of Algorithm S", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_C", 15, 1, "Mask Error Interrupt Algorithm C", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_S2", 13, 1, "Mask Error Interrupt Algorithm S2", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_S1", 12, 1, "Mask Error Interrupt Algorithm S1", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("MSKERR_S0", 11, 1, "Mask Error Interrupt Algorithm S0", [
                    EnumVal("idis", "0", "No interrupt is generated"),
                    EnumVal("ien", "0x1", "Interrupt is generated"),
                ]),
                Field("EN", 7, 1, "Self-Test Enable", [
                    EnumVal("stdis", "0", "Disable"),
                    EnumVal("sten", "0x1", "Enable"),
                ]),
                Field("FMA_WDSERR", 4, 1, "Fault Mapping Self-Test Watchdog Sequence Error", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
                Field("FMA_WDTERR", 3, 1, "Fault Mapping Self-Test Watchdog Timer Error", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
                Field("FMA_C", 2, 1, "Fault Mapping Algorithm C", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
                Field("FMA_S", 0, 1, "Fault Mapping Algorithm S", [
                    EnumVal("ncf", "0", "Noncritical fault line"),
                    EnumVal("cf", "0x1", "Critical fault line"),
                ]),
            ]),
            Register("STCR3", 0x400A4348, 32, "Self-Test Configuration 3", [
                Field("ALG", 8, 2, "Algorithm Selection", [
                ]),
                Field("MSTEP", 0, 5, "Algorithm Step", [
                ]),
            ]),
            Register("STBRR", 0x400A434C, 32, "Self-Test Baud Rate", [
                Field("WDT", 16, 3, "Self-Test Watchdog Timer", [
                    EnumVal("br0", "0", "8192 conversion clock cycles (~0.1 ms at 80 MHz)"),
                    EnumVal("br1", "0x1", "39,936 conversion clock cycles (~0.5 ms at 80 MHz)"),
                    EnumVal("br2", "0x2", "79,872 conversion clock cycles (~1 ms at 80 MHz)"),
                    EnumVal("br3", "0x3", "159,744 conversion clock cycles (~2 ms at 80 MHz)"),
                    EnumVal("br4", "0x4", "400,384 conversion clock cycles (~5 ms at 80 MHz)"),
                    EnumVal("br5", "0x5", "799,744 conversion clock cycles (~10 ms at 80 MHz)"),
                    EnumVal("br6", "0x6", "1,599,488 conversion clock cycles (~20 ms at 80 MHz)"),
                    EnumVal("br7", "0x7", "3,999,744 conversion clock cycles (~50 ms at 80 MHz)"),
                ]),
                Field("BR", 0, 8, "Baud Rate", [
                    EnumVal("fastestbr", "0", "A step of the selected self-test algorithm is executed every time after the set of selected inputs has been converted."),
                    EnumVal("slowestbr", "0xFF", "A step of the selected self-test algorithm is executed after the set of selected inputs has been converted 256 times."),
                ]),
            ]),
            Register("STSR1", 0x400A4350, 32, "Self-Test Status 1", [
                Field("WDSERR", 27, 1, "Self-Test Watchdog Sequence Error", [
                    EnumVal("WDSERR_NO", "0", "Algorithm executed in correct sequence"),
                    EnumVal("WDSERR_YES", "0x1", "Algorithm did not execute in correct sequence"),
                ]),
                Field("WDTERR", 25, 1, "Self-Test Watchdog Timer Error", [
                    EnumVal("WDTERR_NO", "0", "Algorithm finished within the safe time period (or safe time period not yet elapsed)."),
                    EnumVal("WDTERR_YES", "0x1", "Algorithm did not finish within safe time period."),
                ]),
                Field("OVERWR", 24, 1, "Self-Test Error Status Overwrite", [
                    EnumVal("STOVRW_NO", "0", "No self-test error status flag overwritten"),
                    EnumVal("STOVRW_YES", "0x1", "Self-test error status flag overwritten"),
                ]),
                Field("ST_EOC", 23, 1, "Self-Test End Of Conversion", [
                    EnumVal("STEOC_NO", "0", "Not complete"),
                    EnumVal("STEOC_YES", "0x1", "Complete"),
                ]),
                Field("WDG_EOA_C", 18, 1, "Self-Test Watchdog End Of Algorithm C", [
                    EnumVal("COMPLETE_NO", "0", "Not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Complete"),
                ]),
                Field("WDG_EOA_S", 16, 1, "Self-Test Watchdog End Of Algorithm S", [
                    EnumVal("COMPLETE_NO", "0", "Not complete"),
                    EnumVal("COMPLETE_YES", "0x1", "Complete"),
                ]),
                Field("ERR_C", 15, 1, "Error Algorithm C", [
                    EnumVal("ERRC_NO", "0", "No error"),
                    EnumVal("ERRC_YES", "0x1", "Error"),
                ]),
                Field("ERR_S2", 13, 1, "Error Algorithm S Step 2", [
                    EnumVal("S2_ERR_NO", "0", "No error"),
                    EnumVal("S2_ERR_YES", "0x1", "Error"),
                ]),
                Field("ERR_S1", 12, 1, "Error Algorithm S Step 1", [
                    EnumVal("S1_ERR_NO", "0", "No error"),
                    EnumVal("S1_ERR_YES", "0x1", "Error"),
                ]),
                Field("ERR_S0", 11, 1, "Error Algorithm S Step 0", [
                    EnumVal("S0_ERR_NO", "0", "No error"),
                    EnumVal("S0_ERR_YES", "0x1", "Error"),
                ]),
                Field("STEP_C", 5, 5, "Step Of Algorithm C", [
                ]),
            ]),
            Register("STSR2", 0x400A4354, 32, "Self-Test Status 2", [
                Field("DATA0", 0, 15, "Conversion Data ERR_S1", [
                ]),
            ]),
            Register("STSR3", 0x400A4358, 32, "Self-Test Status 3", [
                Field("DATA1", 16, 15, "Conversion Data ERR_S2", [
                ]),
                Field("DATA0", 0, 15, "Conversion Data ERR_S0", [
                ]),
            ]),
            Register("STSR4", 0x400A435C, 32, "Self-Test Status 4", [
                Field("DATA1", 16, 15, "Conversion Data ERR_C", [
                ]),
            ]),
            Register("STDR1", 0x400A4370, 32, "Self-Test Conversion Data 1", [
                Field("VALID", 19, 1, "Valid Conversion Data", [
                    EnumVal("nodata", "0", "No unread conversion data"),
                    EnumVal("dataav", "0x1", "Unread conversion data is available"),
                ]),
                Field("OWERWR", 18, 1, "Conversion Data Overwrite Status", [
                    EnumVal("noovwr", "0", "Current conversion data not overwritten"),
                    EnumVal("ovwr", "0x1", "Current conversion data was overwritten"),
                ]),
                Field("TCDATA", 0, 15, "Test Channel Conversion Data", [
                ]),
            ]),
            Register("STAW0R", 0x400A4380, 32, "Self-Test Analog Watchdog S0", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("diswd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("WDTE", 30, 1, "Self-Test Watchdog Timer Enable", [
                    EnumVal("diswdt", "0", "Disable"),
                    EnumVal("enwdt", "0x1", "Enable"),
                ]),
                Field("THRH", 16, 14, "Higher Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW1R", 0x400A4388, 32, "Self-Test Analog Watchdog S1", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("diswd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW2R", 0x400A438C, 32, "Self-Test Analog Watchdog S2", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("diswd", "0", "Disable"),
                    EnumVal("enwd", "0x1", "Enable"),
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW4R", 0x400A4394, 32, "Self-Test Analog Watchdog C0", [
                Field("AWDE", 31, 1, "Self-Test Watchdog Enable", [
                    EnumVal("noawc", "0", "Disable"),
                    EnumVal("wdacen", "0x1", "Enable"),
                ]),
                Field("WDTE", 30, 1, "Self-Test Watchdog Timer Enable", [
                    EnumVal("stwdtdis", "0", "Disable"),
                    EnumVal("stwdten", "0x1", "Enable"),
                ]),
                Field("THRH", 16, 14, "Higher Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("STAW5R", 0x400A4398, 32, "Self-Test Analog Watchdog C", [
                Field("THRH", 16, 15, "Higher Threshold Value", [
                ]),
                Field("THRL", 0, 15, "Lower Threshold Value", [
                ]),
            ]),
            Register("AMSIO", 0x400A439C, 32, "Analog Miscellaneous In/Out register", [
                Field("HSEN", 17, 2, "High-Speed Enable", [
                ]),
                Field("CMPCTRL0", 16, 1, "Compare Control 0", [
                ]),
            ]),
            Register("CALBISTREG", 0x400A43A0, 32, "Control And Calibration Status", [
                Field("RESN", 29, 3, "Conversion Resolution", [
                    EnumVal("high", "0", "14-bit resolution"),
                    EnumVal("mid", "0x1", "12-bit resolution"),
                    EnumVal("low", "0x2", "10-bit resolution"),
                    EnumVal("lowest", "0x3", "8-bit resolution"),
                ]),
                Field("TSAMP", 27, 2, "Sample Period In Calibration", [
                    EnumVal("high", "0", "22 conversion clock cycles"),
                    EnumVal("lowest", "0x1", "8 conversion clock cycles"),
                    EnumVal("low", "0x2", "16 conversion clock cycles"),
                    EnumVal("highest", "0x3", "32 conversion clock cycles"),
                ]),
                Field("C_T_BUSY", 15, 1, "Calibration Busy", [
                    EnumVal("waitcal", "0", "Calibration can be started"),
                    EnumVal("runcal", "0x1", "Calibration is in progress"),
                ]),
                Field("CALSTFUL", 14, 1, "Calibration And Self-Test Full Range Comparison", [
                    EnumVal("reducedsar", "0", "Lowest 11 bits are compared."),
                    EnumVal("fullsar", "0x1", "All 15 bits are compared."),
                ]),
                Field("NR_SMPL", 5, 2, "Calibration Averaging Number", [
                    EnumVal("lowest", "0", "4 samples"),
                    EnumVal("low", "0x1", "8 samples"),
                    EnumVal("high", "0x2", "16 samples"),
                    EnumVal("highest", "0x3", "32 samples"),
                ]),
                Field("AVG_EN", 4, 1, "Calibration Averaging Enable", [
                    EnumVal("discalavg", "0", "Disable"),
                    EnumVal("calav", "0x1", "Enable"),
                ]),
                Field("TEST_FAIL", 3, 1, "Calibration Status", [
                    EnumVal("CALPASS_YES", "0", "Calibration finished successfully or has not been run since the last reset"),
                    EnumVal("CALPASS_NO", "0x1", "Calibration did not finish successfully"),
                ]),
                Field("TEST_EN", 0, 1, "Calibration Enable", [
                    EnumVal("nocal", "0", "Wait to start a calibration"),
                    EnumVal("runcal", "0x1", "Start calibration"),
                ]),
            ]),
            Register("OFSGNUSR", 0x400A43A8, 32, "Offset And Gain User", [
                Field("GAIN_USER", 16, 10, "Gain User", [
                ]),
                Field("OFFSET_USER", 0, 8, "Offset User", [
                ]),
            ]),
            Register("CAL2", 0x400A43B4, 32, "Calibration Value 2", [
                Field("ENX", 15, 1, "Enable X", [
                    EnumVal("disclpx", "0", "Disable"),
                    EnumVal("enclpx", "0x1", "Enable"),
                ]),
            ]),
        ])

class Module_AEC_AE(Peripheral):
    def __init__(self):
        super().__init__("AEC_AE", 0, 0x100, [
            Register("VERID", 0x0, 32, "AEC Version ID", [
                Field("ID", 16, 16, "Unique Identifier", [
                ]),
                Field("MAJOR", 8, 8, "Major Revision", [
                ]),
                Field("VARIANT", 4, 4, "Variant", [
                    EnumVal("NoCXPI", "#xxx1", "CXPI is disabled"),
                ]),
                Field("MINOR", 0, 4, "Minor Revision", [
                ]),
            ]),
            Register("LOCK_CONTROL", 0x8, 16, "Lock Control", [
                Field("UNLOCK_KEY", 8, 8, "Unlock Key", [
                ]),
                Field("RSTG_CFG_LOCK", 6, 1, "Lock Write Access to RSTGEN_CFG", [
                ]),
                Field("IRQ_SET_LOCK", 5, 1, "Lock Write Access to IRQ_SET", [
                ]),
                Field("CLKG_CFG_LOCK", 4, 1, "Lock Write Access to CLKGEN_CFG", [
                ]),
                Field("LPWU_CTL_LOCK", 3, 1, "Lock Write Access to LPWU_CONTROL", [
                ]),
                Field("TMON_CHK_LOCK", 2, 1, "Temperature Sensor Check Lock", [
                ]),
                Field("FWDG_CFG_LOCK", 1, 1, "Lock Write Access to Configuration of the FAULT Watchdog", [
                ]),
                Field("AWDG_CFG_LOCK", 0, 1, "Lock Write Access to Registers of the Alive Watchdog", [
                ]),
            ]),
            Register("LPWU_CONTROL", 0xC, 32, "Power Mode Control", [
                Field("NOIRQ_CFG", 31, 1, "No IRQ After Reset", [
                ]),
                Field("SW_RST_REQ", 19, 1, "Software Reset Request", [
                ]),
                Field("DEEP_SLEEP_REQ", 17, 1, "Deep Sleep Request", [
                ]),
                Field("SLEEP_REQ", 16, 1, "Sleep Request", [
                ]),
                Field("LPTIMER_CFG", 0, 16, "LP Timer Configuration", [
                ]),
            ]),
            Register("EVENTS_STATUS", 0x10, 16, "Event Notifications Status", [
                Field("FRAMEWIDTH_FL", 15, 1, "SPI Framewidth Notification Flag", [
                ]),
                Field("STATERESET_FL", 14, 1, "State Machine Reset Notification Flag", [
                ]),
                Field("HVI_AE_SUPPLY_FL", 12, 1, "HVI1 Notification Flag", [
                ]),
                Field("HVI_ACTIVE_FL", 9, 1, "HVI0 Notification Flag", [
                ]),
                Field("WAKEUP_FL", 8, 1, "Wake-up Notification Flag", [
                ]),
                Field("LVD_VDDC_FL", 7, 1, "LVD Vddc Notification Flag", [
                ]),
                Field("CAN_INT_FL", 6, 1, "CANPHY Notification Flag", [
                ]),
                Field("TEMP_WDG_PHY_FL", 5, 1, "Temperature Monitor PHY Notification Flag", [
                ]),
                Field("TEMP_WDG_PMC_FL", 4, 1, "Temperature Monitor PMC Notification Flag", [
                ]),
                Field("OCD_VDDE_FL", 3, 1, "Over Current Detector Notification Flag", [
                ]),
                Field("LIN_INT_FL", 2, 1, "LINPHY Notification Flag", [
                ]),
            ]),
            Register("EVENTS_ENABLE", 0x14, 16, "Event Notifications Enable", [
                Field("FRAMEWIDTH_EN", 15, 1, "SPI Framewidth Notification Enable", [
                ]),
                Field("STATERESET_EN", 14, 1, "State Machine Reset Notification Enable", [
                ]),
                Field("HVI_AE_SUPPLY_EN", 12, 1, "HVM1 Notification Enable", [
                ]),
                Field("HVI_ACTIVE_EN", 9, 1, "HVM0 Notification Enable", [
                ]),
                Field("WAKEUP_EN", 8, 1, "Wake Up Notification Enable", [
                ]),
                Field("LVD_VDDC_EN", 7, 1, "LVD VDDC Notification Enable", [
                ]),
                Field("CAN_INT_EN", 6, 1, "CANPHY Notification Enable", [
                ]),
                Field("TEMP_WDG_PHY_EN", 5, 1, "Temperature Sensor PHY Notification Enable", [
                ]),
                Field("TEMP_WDG_PMC_EN", 4, 1, "Temperature Sensor PMC Notification Enable", [
                ]),
                Field("OCD_VDDE_EN", 3, 1, "Over Current Detector Notification Enable", [
                ]),
                Field("LIN_INT_EN", 2, 1, "LINPHY Notification Enable", [
                ]),
            ]),
            Register("FAULTS_STATUS", 0x18, 16, "Fault Notifications Status", [
                Field("ALIVE_WDG_FL", 15, 1, "Alive Watchdog Flag", [
                ]),
                Field("ILL_TEST_FL", 14, 1, "Illegal Test Notification Flag", [
                ]),
                Field("HVD_AE_INTERN_FL", 13, 1, "HVD Notification Flag", [
                ]),
                Field("MCU_SUPPLY_FL", 12, 1, "MCU Supply Notification Flag", [
                ]),
                Field("EVENT_EXPIRED_FL", 11, 1, "Event Expired Notification Flag", [
                ]),
                Field("XFER_ERR_FL", 10, 1, "Transfer Error Notification Flag", [
                ]),
                Field("OBSCHK_ERR_FL", 9, 1, "OBSCHK Error Notification Flag", [
                ]),
                Field("CHKSUM_ERR_FL", 8, 1, "Checksum Error Notification Flag", [
                ]),
                Field("RAW_FAILED_FL", 7, 1, "RAW Failed Notification Flag", [
                ]),
                Field("PMC_VLS_FL", 4, 1, "PMC VLS Notification Flag", [
                ]),
                Field("DPGA_OC_POS_FL", 3, 1, "DPGA OC POS Notification Flag", [
                ]),
                Field("DPGA_OC_NEG_FL", 2, 1, "DPGA OC NEG Notification Flag", [
                ]),
                Field("GDU_INT_FL", 1, 1, "GDU Notification Flag", [
                ]),
                Field("GDU_FAULT_PROT_FL", 0, 1, "GDU Fault Protection Notification Flag", [
                ]),
            ]),
            Register("FAULTS_ENABLE", 0x1C, 16, "Fault Notifications Enable", [
                Field("ALIVE_WDG_EN", 15, 1, "Alive Watchdog Notification Enable", [
                ]),
                Field("ILL_TEST_EN", 14, 1, "Illegal Test Notification Enable", [
                ]),
                Field("HVD_AE_INTERN_EN", 13, 1, "HVD Internal Notification Enable", [
                ]),
                Field("MCU_SUPPLY_EN", 12, 1, "MCU Supply Notification Enable", [
                ]),
                Field("EVENT_EXPIRED_EN", 11, 1, "Event Expired Notification Enable", [
                ]),
                Field("XFER_ERR_EN", 10, 1, "Transfer Error Notification Enable", [
                ]),
                Field("OBSCHK_ERR_EN", 9, 1, "OBSCHK Error Notification Enable", [
                ]),
                Field("CHKSUM_ERR_EN", 8, 1, "Checksum Error Notification Enable", [
                ]),
                Field("RAW_FAILED_EN", 7, 1, "RAW Failed Notification Enable", [
                ]),
                Field("PMC_VLS_EN", 4, 1, "PMC VLS Notification Enable", [
                ]),
                Field("DPGA_OC_POS_EN", 3, 1, "DPGA OC POS Notification Enable", [
                ]),
                Field("DPGA_OC_NEG_EN", 2, 1, "DPGA OC NEG Notification Enable", [
                ]),
                Field("GDU_INT_EN", 1, 1, "GDU Notification Enable", [
                ]),
                Field("GDU_FAULT_PROT_EN", 0, 1, "GDU Fault Protection Notification Enable", [
                ]),
            ]),
            Register("NOTIFS_MONITOR", 0x20, 32, "Monitoring of Notifications", [
                Field("DPGA_PAR_ERR", 16, 1, "Current Parity Value Error", [
                ]),
                Field("OTP_MIRROR_PAR_ERR", 11, 1, "Current Parity Value Error", [
                ]),
                Field("OTP_MIRROR_PAR_VAL", 10, 1, "Parity Value Of Mirror Registers After Completion Of Otp Boot", [
                ]),
                Field("RSTG_CFG_PAR_ERR", 9, 1, "Current Parity Value Error", [
                ]),
                Field("RSTG_CFG_PAR_VAL", 8, 1, "Current Parity Value", [
                ]),
                Field("FAULTS_ENA_PAR_ERR", 7, 1, "Current Parity Value Error", [
                ]),
                Field("FAULTS_ENA_PAR_VAL", 6, 1, "Current Parity Value", [
                ]),
                Field("EVENTS_ENA_PAR_ERR", 5, 1, "Current Parity Value Error", [
                ]),
                Field("EVENTS_ENA_PAR_VAL", 4, 1, "Current Parity Value", [
                ]),
                Field("FAULT_WD_CFG_PAR_ERR", 3, 1, "Current Parity Value Error", [
                ]),
                Field("FAULT_WD_CFG_PAR_VAL", 2, 1, "Current Parity Value", [
                ]),
                Field("ALIVE_WD_CFG_PAR_ERR", 1, 1, "Current Parity Value Error", [
                ]),
                Field("ALIVE_WD_CFG_PAR_VAL", 0, 1, "Current Parity Value", [
                ]),
            ]),
            Register("IRQ_SET", 0x24, 32, "Set Status Bits", [
                Field("FLT15_SET", 31, 1, "Forces Flag Corresponding To Fault 15", [
                ]),
                Field("FLT14_SET", 30, 1, "Forces Flag Corresponding To Fault 14", [
                ]),
                Field("FLT13_SET", 29, 1, "Forces Flag Corresponding To Fault 13", [
                ]),
                Field("FLT12_SET", 28, 1, "Forces Flag Corresponding To Fault 12", [
                ]),
                Field("FLT11_SET", 27, 1, "Forces Flag Corresponding To Fault 11", [
                ]),
                Field("FLT10_SET", 26, 1, "Forces Flag Corresponding To Fault 10", [
                ]),
                Field("FLT09_SET", 25, 1, "Forces Flag Corresponding To Fault 9", [
                ]),
                Field("FLT08_SET", 24, 1, "Forces Flag Corresponding To Fault 8", [
                ]),
                Field("FLT07_SET", 23, 1, "Forces Flag Corresponding To Fault 7", [
                ]),
                Field("FLT04_SET", 20, 1, "Forces Flag Corresponding To Fault 4", [
                ]),
                Field("FLT03_SET", 19, 1, "Forces Flag Corresponding To Fault 3", [
                ]),
                Field("FLT02_SET", 18, 1, "Forces Flag Corresponding To Fault 2", [
                ]),
                Field("FLT01_SET", 17, 1, "Forces Flag Corresponding To Fault 1", [
                ]),
                Field("FLT00_SET", 16, 1, "Forces Flag Corresponding To Fault 0", [
                ]),
                Field("EVT15_SET", 15, 1, "Forces Flag Corresponding to Event 15", [
                ]),
                Field("EVT14_SET", 14, 1, "Forces Flag Corresponding to Event 14", [
                ]),
                Field("EVT12_SET", 12, 1, "Forces Flag Corresponding To Event 12", [
                ]),
                Field("EVT09_SET", 9, 1, "Forces Flag Corresponding To Event 9", [
                ]),
                Field("EVT08_SET", 8, 1, "Forces Flag Corresponding To Event 8", [
                ]),
                Field("EVT07_SET", 7, 1, "Forces Flag Corresponding To Event 7", [
                ]),
                Field("EVT06_SET", 6, 1, "Forces Flag Corresponding To Event 6", [
                ]),
                Field("EVT05_SET", 5, 1, "Forces Flag Corresponding To Event 5", [
                ]),
                Field("EVT04_SET", 4, 1, "Forces Flag Corresponding To Event 4", [
                ]),
                Field("EVT03_SET", 3, 1, "Forces Flag Corresponding To Event 3", [
                ]),
                Field("EVT02_SET", 2, 1, "Forces Flag Corresponding To Event 2", [
                ]),
            ]),
            Register("SAFETY_ENABLE", 0x28, 32, "Safety Enable", [
                Field("FAULT_ALIVE_WDG_EN", 31, 1, "Safe State Enable For FAULT ALIVE_WDG", [
                ]),
                Field("FAULT_ILL_TEST_EN", 30, 1, "Safe State Enable For FAULT ILL_TEST", [
                ]),
                Field("FAULT13_EN", 29, 1, "Not Used", [
                ]),
                Field("FAULT12_EN", 28, 1, "Not Used", [
                ]),
                Field("FAULT11_EN", 27, 1, "Not Used", [
                ]),
                Field("FAULT10_EN", 26, 1, "Not Used", [
                ]),
                Field("FAULT09_EN", 25, 1, "Not Used", [
                ]),
                Field("FAULT08_EN", 24, 1, "Not Used", [
                ]),
                Field("FAULT07_EN", 23, 1, "Not Used", [
                ]),
                Field("FAULT06_EN", 22, 1, "Not Used", [
                ]),
                Field("FAULT05_EN", 21, 1, "Not Used", [
                ]),
                Field("FAULT04_EN", 20, 1, "Not Used", [
                ]),
                Field("FAULT03_EN", 19, 1, "Not Used", [
                ]),
                Field("FAULT02_EN", 18, 1, "Not Used", [
                ]),
                Field("FAULT01_EN", 17, 1, "Not Used", [
                ]),
                Field("FAULT00_EN", 16, 1, "Not Used", [
                ]),
                Field("EVENT15_EN", 15, 1, "Not Used", [
                ]),
                Field("EVENT14_EN", 14, 1, "Not Used", [
                ]),
                Field("EVENT13_EN", 13, 1, "Not Used", [
                ]),
                Field("EVENT12_EN", 12, 1, "Not Used", [
                ]),
                Field("EVENT11_EN", 11, 1, "Not Used", [
                ]),
                Field("EVENT10_EN", 10, 1, "Not Used", [
                ]),
                Field("EVENT09_EN", 9, 1, "Not Used", [
                ]),
                Field("EVENT08_EN", 8, 1, "Not Used", [
                ]),
                Field("EVENT07_EN", 7, 1, "Not Used", [
                ]),
                Field("EVENT06_EN", 6, 1, "Not Used", [
                ]),
                Field("EVENT05_EN", 5, 1, "Not Used", [
                ]),
                Field("EVENT04_EN", 4, 1, "Not Used", [
                ]),
                Field("EVENT03_EN", 3, 1, "Not Used", [
                ]),
                Field("EVENT02_EN", 2, 1, "Not Used", [
                ]),
                Field("EVENT01_EN", 1, 1, "Not Used", [
                ]),
                Field("EVENT00_EN", 0, 1, "Not Used", [
                ]),
            ]),
            Register("SYSCLK_CHECK", 0x2C, 16, "System Clock Check", [
                Field("VALID_THR_U", 7, 9, "Valid System Clock Threshold Range, Upper Boundary", [
                ]),
                Field("VALID_THR_L", 0, 7, "Valid System Clock Threshold Range, Lower Boundary", [
                ]),
            ]),
            Register("ALIVE_WD_CFG", 0x30, 16, "Alive Watchdog Configuration", [
                Field("WDW_FAULTREC", 15, 1, "Fault Response Configuration", [
                    EnumVal("_0", "0", "Unserviced watchdog triggers a fault notification (ALIVE_WDG)"),
                    EnumVal("_1", "0x1", "Unserviced watchdog triggers a device reset"),
                ]),
                Field("WDW_MODE", 14, 1, "Watchdog Mode", [
                    EnumVal("_0", "0", "Simple mode. Expected response is token"),
                    EnumVal("_1", "0x1", "Challenge mode. Expected response is given by a LFSR"),
                ]),
                Field("WDW_BADRESP", 8, 2, "Max Number Of Bad Responses. Access Are Locked", [
                    EnumVal("_0", "0", "First incorrect response token triggers a fault event"),
                    EnumVal("_1", "0x1", "One incorrect response token permitted before triggering a fault event"),
                    EnumVal("_2", "0x2", "Two incorrect response token permitted before triggering a fault event"),
                    EnumVal("_3", "0x3", "Three incorrect response token permitted before triggering a fault event"),
                ]),
                Field("WDW_DC", 6, 2, "Window duty cycle", [
                    EnumVal("d0", "0", "0% Closed (feature disabled)"),
                    EnumVal("d1", "0x1", "First 31.25% closed (exact ratio: 1/2-1/4+1/16)"),
                    EnumVal("d2", "0x2", "First 50% closed"),
                    EnumVal("d3", "0x3", "First 68.75% closed (exact ratio: 1/2+1/4-1/16)"),
                ]),
                Field("WDW_PERIOD", 0, 4, "Watchdog Window Duration. Access Are Locked.", [
                    EnumVal("d0", "0", "Disabled"),
                    EnumVal("d1", "0x1", "1*2*512 us"),
                    EnumVal("d2", "0x2", "2*2*512 us"),
                    EnumVal("d3", "0x3", "3*2*512 us"),
                    EnumVal("d4", "0x4", "4*2*512 us"),
                    EnumVal("d5", "0x5", "6*2*512 us"),
                    EnumVal("d6", "0x6", "8*2*512 us"),
                    EnumVal("d7", "0x7", "23*512 us"),
                    EnumVal("d8", "0x8", "31*512 us"),
                    EnumVal("d9", "0x9", "47*512 us"),
                    EnumVal("d10", "0xA", "62*512 us"),
                    EnumVal("d11", "0xB", "125*512 us"),
                    EnumVal("d12", "0xC", "250*512 us"),
                    EnumVal("d13", "0xD", "500*512 us"),
                    EnumVal("d14", "0xE", "1000*512 us"),
                    EnumVal("d15", "0xF", "2000*512 us"),
                ]),
            ]),
            Register("ALIVE_WD_TOKEN", 0x34, 16, "Alive Watchdog Reference Value", [
                Field("WD_TOKEN", 0, 16, "Token", [
                ]),
            ]),
            Register("ALIVE_WD_ANSWER", 0x38, 16, "Alive Watchdog Answer", [
                Field("WD_ANSWER", 0, 16, "Answer", [
                ]),
            ]),
            Register("FAULT_WD_CFG", 0x3C, 16, "Fault Watchdog Configuration", [
                Field("TIME_OUT_CFG", 0, 12, "Window Period", [
                ]),
            ]),
            Register("CLKGEN_CFG", 0x40, 32, "Clock Generator Configuration", [
                Field("SYSCLK_FREQ_CFG", 28, 1, "System Clock Frequency Estimator Configuration", [
                ]),
                Field("SYSCLK_FREQ_VAL", 16, 9, "System Clock Frequency Estimator Result", [
                ]),
                Field("RCOSC_MOD_NBR", 14, 2, "RCOSC: number of modulation used for spreading frequency.", [
                    EnumVal("_0", "0", "The modulation of the RCosc change between 2 frequencies."),
                    EnumVal("_1", "0x1", "The modulation of the RCosc change between 4 frequencies."),
                    EnumVal("_2", "0x2", "The modulation of the RCosc change between 8 frequencies."),
                    EnumVal("_3", "0x3", "The modulation of the RCosc change between 16 frequencies."),
                ]),
                Field("RCOSC_MOD_FRQ", 11, 3, "RCOSC: control frequency of switch for modulation", [
                    EnumVal("_0", "0", "modulation change at each RCosc cycle"),
                    EnumVal("_1", "0x1", "modulation change each 2 RCosc cycles"),
                    EnumVal("_2", "0x2", "modulation change each 4 RCosc cycles"),
                    EnumVal("_3", "0x3", "modulation change each 8 RCosc cycles"),
                    EnumVal("_4", "0x4", "modulation change each 16 RCosc cycles"),
                    EnumVal("_5", "0x5", "modulation change each 32 RCosc cycles"),
                    EnumVal("_6", "0x6", "modulation change each 64 RCosc cycles"),
                    EnumVal("_7", "0x7", "modulation change each 128 RCosc cycles"),
                ]),
                Field("RCOSC_MOD_ENA", 10, 1, "RCOSC: modulation enable", [
                    EnumVal("DISABLE", "0", "Disable modulation on RC oscillator"),
                    EnumVal("ENABLE", "0x1", "Enable modulation on RC oscillator"),
                ]),
                Field("CXPI_CLK_EN", 8, 1, "Enable CXPI functional clock", [
                ]),
                Field("CLKGEN_CFG", 0, 8, "Force Enable Of Clocks", [
                    EnumVal("_0", "0", "Aec_sys (reg access)"),
                    EnumVal("_1", "0x1", "Pmc_sys (reg access)"),
                    EnumVal("_2", "0x2", "Mem_otp_sys (reg access, boot of OTP)"),
                    EnumVal("_3", "0x3", "Dpga_sys (reg access"),
                    EnumVal("_4", "0x4", "Gdu_sys (reg access)"),
                    EnumVal("_5", "0x5", "Hvi_sys (reg access)"),
                    EnumVal("_6", "0x6", "Can_phy_apb (scheduled transfer of trimming bits from OTP)"),
                    EnumVal("_7", "0x7", "Tempsensor_sys (reg access, scheduled measurement)"),
                ]),
            ]),
            Register("RSTGEN_CFG", 0x44, 16, "Reset Generator Configuration", [
                Field("NOFLUSH", 15, 1, "No Auto Flush", [
                ]),
                Field("RSTGEN_CFG", 0, 9, "Module Activation", [
                    EnumVal("_0", "#xxxxxxxx1", "Regs_otp (resets OTP register interface, not mirror regs)"),
                ]),
            ]),
            Register("IO_FUNCMUX_CFG", 0x48, 32, "IO Funcmux Configuration", [
                Field("CLKSEL", 18, 2, "CLK_MUX_OUT: CLK Selection", [
                    EnumVal("OSC", "0", "CLKOUT=OSC_RC 42 MHz divided by 8"),
                    EnumVal("PMC", "0x1", "CLKOUT=PMC FRO 150kHz"),
                    EnumVal("CANWU8", "0x2", "CLKOUT=CANPHY clkwuosc 1.25 MHz divided by 8"),
                    EnumVal("CANTRX256", "0x3", "CLKOUT=CANPHY clkosctrx 1.95 MHz divided by 256"),
                ]),
                Field("OUTSEL", 17, 1, "CLK_MUX_OUT: OUT Selection", [
                    EnumVal("CLK", "0", "CLKOUT"),
                    EnumVal("LINPHY", "0x1", "LIN Checking (LINPHY_RX)"),
                ]),
                Field("D2D_EN", 16, 1, "CLK_MUX_OUT: D2D Enable", [
                    EnumVal("DISABLE", "0", "CLK_MUX_OUT Is in tristate"),
                    EnumVal("ENABLE", "0x1", "CLK_MUX_OUT Pad is enabled"),
                ]),
                Field("VDDE_OCD_EN", 12, 1, "Enable Over Current Detection", [
                    EnumVal("DISABLE", "0", "VDDE Overcurrent detector is disabled"),
                    EnumVal("ENABLE", "0x1", "VDDE Overcurrent detector is enabled"),
                ]),
                Field("PHY_SEL", 10, 2, "VDDE PHY Selection", [
                    EnumVal("NOTUSED0", "0", "VDDE Input not used and not driven"),
                    EnumVal("NOTUSED1", "0x1", "VDDE Input not used and not driven"),
                    EnumVal("CANPHY", "0x2", "VDDE Use as input for CANPHY_Tx"),
                    EnumVal("LINPHY", "0x3", "VDDE Use as input for LINPHY_Tx"),
                ]),
                Field("VDDE_SEL", 9, 1, "VDDE Selection", [
                    EnumVal("DISABLE", "0", "Weak GND"),
                    EnumVal("ENABLE", "0x1", "Strong VDD"),
                ]),
                Field("VDDE_DRV", 8, 1, "VDDE Driver", [
                    EnumVal("DIGITAL", "0", "Digital mode, VDDE as input depends of PHY_SEL"),
                    EnumVal("ANALOG", "0x1", "Analog mode, VDDE as output depends of VDDE_SEL"),
                ]),
                Field("AMPOUT_SEL", 1, 3, "AMPOUT Selection", [
                    EnumVal("DPGA", "0", "Hi-Z (analog AMPOUT)"),
                    EnumVal("CANPHY", "0x1", "CANPHY_RX"),
                    EnumVal("LINPHY", "0x2", "LINPHY_RX"),
                    EnumVal("CANPHYWURX", "0x3", "CANPHY_WURX"),
                    EnumVal("OSC", "0x4", "Oscillator out (see CLKOUT)"),
                    EnumVal("PWM0", "0x5", "PWM0"),
                    EnumVal("PWM2", "0x6", "PWM2"),
                    EnumVal("PWM4", "0x7", "PWM4"),
                ]),
                Field("DPGA_OUT", 0, 1, "DPGA out Selection", [
                    EnumVal("DIGITAL", "0", "Digital mode, AMPOUT depends of AMPOUT_SEL"),
                    EnumVal("ANALOG", "0x1", "Analog mode, dpga is connected to ampout through an anamux"),
                ]),
            ]),
            Register("LINPHY_CFG", 0x60, 16, "LINPHY Configuration", [
                Field("LINPHY_ENABLE", 15, 1, "LINPHY Enable", [
                ]),
                Field("LIN_CXPI_SEL", 14, 1, "Select protocol used on LIN line.", [
                    EnumVal("LIN", "0", "Select LIN protocol"),
                    EnumVal("CXPI", "0x1", "Select CXPI protocol"),
                ]),
                Field("CXPI_BOOST", 11, 1, "Configures control of the falling edge.", [
                    EnumVal("ENABLE", "0", "Fast falling edge behavior enabled."),
                    EnumVal("DISABLE", "0x1", "Fast falling edge behavior disabled"),
                ]),
                Field("CXPI_SLOPE", 10, 1, "Configures controlled slope timings", [
                    EnumVal("LIN", "0", "Slope is optimized for LIN operation."),
                    EnumVal("CXPI", "0x1", "Slope is optimized for CXPI operation."),
                ]),
                Field("CXPI_MS", 9, 1, "CXPI Slave/Master mode.", [
                    EnumVal("MASTER", "0", "Device is configured in CXPI master mode."),
                    EnumVal("SLAVE", "0x1", "Device is configured in CXPI slave mode."),
                ]),
                Field("CXPI_NSLP", 8, 1, "CXPI No Sleep", [
                    EnumVal("SLEEP", "0", "CXPI is in sleep mode."),
                    EnumVal("NORMAL", "0x1", "CXPI is in normal mode."),
                ]),
                Field("SLEW", 4, 2, "Configures The Slew Rate Of LINPHY", [
                    EnumVal("_0", "0", "Slew rate optimized for Baud-Rate of 20kBIt/s"),
                    EnumVal("_1", "0x1", "Slew rate optimized for Baud-Rate of 115kbits (not LIN compliant)"),
                    EnumVal("_2", "0x2", "Slew rate optimized for Baud-Rate of 10.4kBIt/s"),
                ]),
                Field("ENATXTO", 3, 1, "Configures the TX Dominant Timeout Detection Of LINPHY", [
                    EnumVal("_0", "0", "TX dominant timeout detection disabled"),
                    EnumVal("_1", "0x1", "TX dominant timeout detection enabled"),
                ]),
                Field("ENAWUP", 2, 1, "Configures The Wakeup Receiver Of LINPHYs", [
                    EnumVal("_0", "0", "Wakeup receiver disabled"),
                    EnumVal("_1", "0x1", "Wakeup receiver enabled"),
                ]),
                Field("MODE", 0, 2, "Configures The Operating Mode Of LINPHY", [
                    EnumVal("OFForWakeCapable", "0", "Off when ENAWUP=0 or Wake capable when ENAWUP=1"),
                    EnumVal("ListenOnly", "0x1", "Listen only"),
                    EnumVal("Active", "0x2", "Normal"),
                ]),
            ]),
            Register("LINPHY_MONITOR", 0x64, 32, "LINPHY Monitor", [
                Field("CXPI_ARBIT_EN", 26, 1, "CXPI arbitration lost interrupt enable", [
                    EnumVal("_0", "0", "CXPI arbitration lost interrupt disabled"),
                    EnumVal("_1", "0x1", "CXPI_ARBIT_FL causes an interrupt"),
                ]),
                Field("CXPI_DOMTIMOUT_EN", 25, 1, "CXPI dominant timout Interrupt Enable", [
                    EnumVal("_0", "0", "CXPI dominant timout Interrupt Disable"),
                    EnumVal("_1", "0x1", "CXPI_DOMTIMOUT_FL causes an interrupt"),
                ]),
                Field("CXPI_WKUP_EN", 24, 1, "CXPI Wakeup Interrupt Enable", [
                    EnumVal("_0", "0", "CXPI wakeup interrupt disabled"),
                    EnumVal("_1", "0x1", "CXPI_WKUP_FL causes an interrupt"),
                ]),
                Field("CXPI_ARBIT_MON", 22, 1, "Status of CXPI arbitration lost", [
                    EnumVal("_0", "0", "CXPI arbitration is not lost."),
                    EnumVal("_1", "0x1", "CXPI arbitration is lost."),
                ]),
                Field("CXPI_DOMTIMOUT_MON", 21, 1, "Status of the CXPI TX Timeout Detector", [
                    EnumVal("_0", "0", "CXPI dominant timout inactive"),
                    EnumVal("_1", "0x1", "CXPI dominant timout active"),
                ]),
                Field("CXPI_WKUP_MON", 20, 1, "Status Of The CXPI Wakeup Detector", [
                    EnumVal("_0", "0", "CXPI wakeup inactive"),
                    EnumVal("_1", "0x1", "CXPI wakeup active"),
                ]),
                Field("CXPI_ARBIT_FL", 18, 1, "CXPI arbitration lost", [
                    EnumVal("_0", "0", "No CXPI arbitration lost event detected"),
                    EnumVal("_1", "0x1", "CXPI arbitration lost event detected"),
                ]),
                Field("CXPI_DOMTIMOUT_FL", 17, 1, "CXPI TX Timeout Detector", [
                    EnumVal("_0", "0", "No CXPI TX dominant timeout event detected"),
                    EnumVal("_1", "0x1", "CXPI TX dominant timeout event detected"),
                ]),
                Field("CXPI_WKUP_FL", 16, 1, "CXPI Wakeup", [
                    EnumVal("_0", "0", "No CXPI wakeup event detected"),
                    EnumVal("_1", "0x1", "CXPI wakeup event detected"),
                ]),
                Field("LINPHY_ERROR_EN", 11, 1, "LIN FSM Error Interrupt Enable", [
                    EnumVal("_0", "0", "Linphy FSM error interrupt disabled"),
                    EnumVal("_1", "0x1", "LINPHY_ERROR_FL causes an interrupt"),
                ]),
                Field("LINPHY_TXTOSTATE_EN", 10, 1, "LIN TX dominant Timeout Interrupt Enable", [
                    EnumVal("_0", "0", "Linphy dominant timeout interrupt disabled"),
                    EnumVal("_1", "0x1", "LINPHY_TXTOSTATE_FL causes an interrupt"),
                ]),
                Field("LINPHY_SCPSTATE_EN", 9, 1, "LIN Short Circuit Interrupt Enable", [
                    EnumVal("_0", "0", "Linphy short circuit interrupt disabled"),
                    EnumVal("_1", "0x1", "LINPHY_SCPSTATE_FL causes an interrupt"),
                ]),
                Field("LINPHY_WKUP_EN", 8, 1, "LIN Wakeup Interrupt Enable", [
                    EnumVal("_0", "0", "Linphy wakeup interrupt disabled"),
                    EnumVal("_1", "0x1", "LINPHY_WKUP_FL causes an interrupt"),
                ]),
                Field("LINPHY_ERROR_MON", 7, 1, "Status Of The LIN FSM Error", [
                    EnumVal("_0", "0", "Error in LIN FSM inactive"),
                    EnumVal("_1", "0x1", "Error in LIN FSM active"),
                ]),
                Field("LINPHY_TXTOSTATE_MON", 6, 1, "Status Of The LIN TX Dominant Timeout Detector", [
                    EnumVal("_0", "0", "LIN TX dominant timeout protection inactive"),
                    EnumVal("_1", "0x1", "LIN TX dominant timeout protection active"),
                ]),
                Field("LINPHY_SCPSTATE_MON", 5, 1, "Status Of The LIN Short Circuit Detector", [
                    EnumVal("_0", "0", "LIN short circuit protection inactive"),
                    EnumVal("_1", "0x1", "LIN short circuit protection active"),
                ]),
                Field("LINPHY_WKUP_MON", 4, 1, "Status Of The LIN Wakeup Detector", [
                    EnumVal("_0", "0", "LIN wakeup inactive"),
                    EnumVal("_1", "0x1", "LIN wakeup active"),
                ]),
                Field("LINPHY_ERROR_FL", 3, 1, "LIN FSM Error", [
                    EnumVal("_0", "0", "No error in LIN FSM detected"),
                    EnumVal("_1", "0x1", "Error in LIN FSM detected"),
                ]),
                Field("LINPHY_TXTOSTATE_FL", 2, 1, "LIN TX Timeout Detector", [
                    EnumVal("_0", "0", "No LIN TX dominant timeout event detected"),
                    EnumVal("_1", "0x1", "LIN TX dominant timeout event detected"),
                ]),
                Field("LINPHY_SCPSTATE_FL", 1, 1, "LIN Short Circuit", [
                    EnumVal("_0", "0", "No LIN short circuit event detected"),
                    EnumVal("_1", "0x1", "LIN short circuit event detected"),
                ]),
                Field("LINPHY_WKUP_FL", 0, 1, "LIN Wakeup", [
                    EnumVal("_0", "0", "No LIN wakeup event detected"),
                    EnumVal("_1", "0x1", "LIN wakeup event detected"),
                ]),
            ]),
            Register("CANPHY_CFG", 0x70, 16, "CANPHY Configuration", [
                Field("CANPHY_ENABLE", 15, 1, "CANPHY Enable", [
                ]),
                Field("MODE", 0, 2, "CANPHY Mode Control", [
                    EnumVal("Offline", "0", "Offline mode"),
                    EnumVal("Normal", "0x1", "Normal mode"),
                    EnumVal("ListenOnly", "0x3", "Listen only mode"),
                ]),
            ]),
            Register("CANPHY_MONITOR", 0x74, 16, "CANPHY Monitor", [
                Field("CANPHY_INVALIDSTATE_EN", 10, 1, "CANPHY FSM Error Notification Enable", [
                    EnumVal("DISABLE", "0", "CANPHY FSM error notification disabled"),
                    EnumVal("ENABLE", "0x1", "CANPHY_INVALIDSTATE_FL triggers a notification"),
                ]),
                Field("CANPHY_TXDOMTIMEDOUT_EN", 9, 1, "CANPHY TX Dominant Timeout Notification Enable", [
                    EnumVal("DISABLE", "0", "CANPHY TX dominant timeout notification disabled"),
                    EnumVal("ENABLE", "0x1", "CANPHY_TXDOMTIMEDOUT_FL triggers a notification"),
                ]),
                Field("CANPHY_WKUP_EN", 8, 1, "CANPHY Wakeup Notification Enable", [
                    EnumVal("DISABLE", "0", "CANPHY wakeup notification disabled"),
                    EnumVal("ENABLE", "0x1", "CANPHY_WKUP_FL triggers a notification"),
                ]),
                Field("CANPHY_INVALIDSTATE_MON", 6, 1, "Live Status Of The CANPHY FSM Error", [
                    EnumVal("DISABLE", "0", "No error in CANPHY FSM"),
                    EnumVal("ENABLE", "0x1", "Error in CANPHY FSM"),
                ]),
                Field("CANPHY_TXDOMTIMEDOUT_MON", 5, 1, "Live status of the CANPHY TX dominant timeout detector", [
                    EnumVal("DISABLE", "0", "CANPHY TX dominant timeout protection inactive"),
                    EnumVal("ENABLE", "0x1", "CANPHY TX dominant timeout protection active"),
                ]),
                Field("CANPHY_WKUP_MON", 4, 1, "Live Status Of The CANPHY Wakeup Detector", [
                    EnumVal("DISABLE", "0", "CANPHY wakeup inactive"),
                    EnumVal("ENABLE", "0x1", "CANPHY wakeup active"),
                ]),
                Field("CANPHY_INVALIDSTATE_FL", 2, 1, "CANPHY Invalid State", [
                    EnumVal("DISABLE", "0", "No CANPHY FSM error event detected"),
                    EnumVal("ENABLE", "0x1", "CANPHY FSM error event detected"),
                ]),
                Field("CANPHY_TXDOMTIMEDOUT_FL", 1, 1, "CANPHY TX Dominant Timeout", [
                    EnumVal("DISABLE", "0", "No CANPHY TX dominant timeout event detected"),
                    EnumVal("ENABLE", "0x1", "CANPHY TX dominant timeout event detected"),
                ]),
                Field("CANPHY_WKUP_FL", 0, 1, "CANPHY Wakeup", [
                    EnumVal("DISABLE", "0", "No CANPHY wakeup event detected"),
                    EnumVal("ENABLE", "0x1", "CANPHY wakeup event detected"),
                ]),
            ]),
            Register("TMON_PHY", 0x80, 32, "Temperature Monitor PHY", [
                Field("PHY_175_EN", 19, 1, "PHY 175degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PHY_150_EN", 18, 1, "PHY 150degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PHY_125_EN", 17, 1, "PHY 125degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PHY_85_EN", 16, 1, "PHY 85degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PHY_175_MON", 11, 1, "PHY Temperature Sensor Is Over 175degree C", [
                ]),
                Field("PHY_150_MON", 10, 1, "PHY Temperature Sensor Is Over 150degree C", [
                ]),
                Field("PHY_125_MON", 9, 1, "PHY Temperature Sensor Is Over 125degree C", [
                ]),
                Field("PHY_85_MON", 8, 1, "PHY Temperature Sensor Is Over 85degree C", [
                ]),
                Field("PHY_175_FL", 3, 1, "Status flag for temperature crossing over 175degree C This is a sticky-bit implemented as W1C that is set whenever this temperature is reached", [
                ]),
                Field("PHY_150_FL", 2, 1, "PHY 150degree Flag", [
                ]),
                Field("PHY_125_FL", 1, 1, "PHY 125degree Flag", [
                ]),
                Field("PHY_85_FL", 0, 1, "PHY 85degree Flag", [
                ]),
            ]),
            Register("TMON_PMC", 0x84, 32, "Temperature Monitor PMC", [
                Field("PMC_175_EN", 19, 1, "PMC 175degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PMC_150_EN", 18, 1, "PMC 150degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PMC_125_EN", 17, 1, "PMC 125degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PMC_85_EN", 16, 1, "PMC 85degree Enable", [
                    EnumVal("DISABLE", "0", "Disable generation of a notification event"),
                    EnumVal("ENABLE", "0x1", "Enable generation of a notification event"),
                ]),
                Field("PMC_175_MON", 11, 1, "PMC Temperature Sensor Is Over 175degree C", [
                ]),
                Field("PMC_150_MON", 10, 1, "PMC Temperature Sensor Is Over 150degree C", [
                ]),
                Field("PMC_125_MON", 9, 1, "PMC Temperature Sensor Is Over 125degree C", [
                ]),
                Field("PMC_85_MON", 8, 1, "PMC Temperature Sensor Is Over 85degree C", [
                ]),
                Field("PMC_175_FL", 3, 1, "PMC 175degree Flag", [
                ]),
                Field("PMC_150_FL", 2, 1, "PMC 150degree Flag", [
                ]),
                Field("PMC_125_FL", 1, 1, "PMC 125degree Flag", [
                ]),
                Field("PMC_85_FL", 0, 1, "PMC 85degree Flag", [
                ]),
            ]),
            Register("TMON_MONITOR", 0x88, 16, "TMON Monitor", [
                Field("PMC_SELF_EN", 12, 1, "TEMPSENSOR PMC self-test Failure Enable", [
                ]),
                Field("PMC_SELF_MON", 9, 1, "TEMPSENSOR Monitor Self-test", [
                ]),
                Field("PMC_SELF_FL", 8, 1, "TEMPSENSOR PMC Self-test Failure Status", [
                ]),
                Field("PHY_SELF_EN", 4, 1, "TEMPSENSOR PHY Self-test Failure Enable", [
                ]),
                Field("PHY_SELF_MON", 1, 1, "TEMPSENSOR Monitor Self-Test", [
                ]),
                Field("PHY_SELF_FL", 0, 1, "TEMPSENSOR PHY Self-test Failure Status", [
                ]),
            ]),
            Register("TMON_CHECK", 0x8A, 16, "TMON Check", [
                Field("SELF_ACT", 1, 1, "Status Of Self-check Command", [
                    EnumVal("_0", "0", "Self-check is inactive"),
                    EnumVal("_1", "0x1", "Self-check is active, still running"),
                ]),
                Field("SELF_CMD", 0, 1, "Trigger self-test On Both Temp Sensors", [
                    EnumVal("_1", "0x1", "Trigger a new self-test"),
                ]),
            ]),
        ])

class Module_BCTU(Peripheral):
    def __init__(self):
        super().__init__("BCTU", 0x40084000, 0x474, [
            Register("MCR", 0x40084000, 32, "Module Configuration", [
                Field("Software_Reset", 31, 1, "Software Reset", [
                    EnumVal("deasserted", "0", "Deasserts"),
                    EnumVal("asserted", "0x1", "Asserts"),
                ]),
                Field("MDIS", 30, 1, "Module Disable", [
                    EnumVal("normal", "0", "Enable (normal operation)"),
                    EnumVal("low_power", "0x1", "Disable (low-power operation)"),
                ]),
                Field("FRZ", 29, 1, "Debug Freeze", [
                    EnumVal("disable", "0", "Disables"),
                    EnumVal("enable", "0x1", "Enables"),
                ]),
                Field("GTRGEN", 26, 1, "Global Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DMA1", 17, 1, "Enable ADC1DR DMA", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DMA0", 16, 1, "Enable ADC0DR DMA", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRGEN", 7, 1, "Trigger Interrupt Request Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("LIST_IEN", 5, 1, "CL Interrupt Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("IEN1", 1, 1, "Interrupt Enable For ADC1DR", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("IEN0", 0, 1, "Interrupt Enable For ADC0DR", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
            ]),
            Register("MSR", 0x40084008, 32, "Module Status", [
                Field("TRGF_CLR", 31, 1, "TRGF Clear", [
                    EnumVal("no_action", "0", "No action"),
                    EnumVal("clear", "0x1", "Changes to 0"),
                ]),
                Field("LIST1_Last_CLR", 25, 1, "CL 1 Last Clear", [
                    EnumVal("no_action", "0", "No action"),
                    EnumVal("write", "0x1", "Changes to 0"),
                ]),
                Field("LIST0_Last_CLR", 24, 1, "CL 0 Last Clear", [
                    EnumVal("no_action", "0", "No action"),
                    EnumVal("write", "0x1", "Changes to 0"),
                ]),
                Field("DATAOVR1_CLR", 21, 1, "DATAOVR1 Clear", [
                    EnumVal("no_action", "0", "No action"),
                    EnumVal("write", "0x1", "Changes to 0"),
                ]),
                Field("DATAOVR0_CLR", 20, 1, "DATAOVR0 Clear", [
                    EnumVal("no_action", "0", "No action"),
                    EnumVal("write", "0x1", "Changes to 0"),
                ]),
                Field("NDATA1_CLR", 17, 1, "New Data Clear", [
                    EnumVal("no_action", "0", "No action"),
                    EnumVal("write", "0x1", "Changes to 0"),
                ]),
                Field("NDATA0_CLR", 16, 1, "New Data Clear", [
                    EnumVal("no_action", "0", "No action"),
                    EnumVal("write", "0x1", "Changes to 0"),
                ]),
                Field("TRGF", 15, 1, "Trigger Flag", [
                    EnumVal("not_triggered", "0", "No ADC triggered"),
                    EnumVal("triggered", "0x1", "An ADC was triggered"),
                ]),
                Field("LIST1_Last", 9, 1, "CL 1 Last Conversion", [
                    EnumVal("not_complete", "0", "Last conversion not complete"),
                    EnumVal("conversion_complete", "0x1", "Last conversion complete"),
                ]),
                Field("LIST0_Last", 8, 1, "CL 0 Last Conversion", [
                    EnumVal("not_complete", "0", "Last conversion not complete"),
                    EnumVal("conversion_complete", "0x1", "Last conversion complete"),
                ]),
                Field("DATAOVR1", 5, 1, "Data Overrun 1", [
                    EnumVal("not_overwritten", "0", "Data not overwritten"),
                    EnumVal("overwritten", "0x1", "Data overwritten"),
                ]),
                Field("DATAOVR0", 4, 1, "Data Overrun 0", [
                    EnumVal("not_overwritten", "0", "Data not overwritten"),
                    EnumVal("overwritten", "0x1", "Data overwritten"),
                ]),
                Field("NDATA1", 1, 1, "New Data 1", [
                    EnumVal("not_available", "0", "Not available"),
                    EnumVal("available", "0x1", "Available"),
                ]),
                Field("NDATA0", 0, 1, "New Data 0", [
                    EnumVal("not_available", "0", "Not available"),
                    EnumVal("available", "0x1", "Available"),
                ]),
            ]),
            Register("TRGCFG_[0]", 0x40084018, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[1]", 0x4008401C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[2]", 0x40084020, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[3]", 0x40084024, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[4]", 0x40084028, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[5]", 0x4008402C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[6]", 0x40084030, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[7]", 0x40084034, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[8]", 0x40084038, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[9]", 0x4008403C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[10]", 0x40084040, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[11]", 0x40084044, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[12]", 0x40084048, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[13]", 0x4008404C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[14]", 0x40084050, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[15]", 0x40084054, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[16]", 0x40084058, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[17]", 0x4008405C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[18]", 0x40084060, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[19]", 0x40084064, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[20]", 0x40084068, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[21]", 0x4008406C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[22]", 0x40084070, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[23]", 0x40084074, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[24]", 0x40084078, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[25]", 0x4008407C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[26]", 0x40084080, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[27]", 0x40084084, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[28]", 0x40084088, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[29]", 0x4008408C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[30]", 0x40084090, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[31]", 0x40084094, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[32]", 0x40084098, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[33]", 0x4008409C, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[34]", 0x400840A0, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[35]", 0x400840A4, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[36]", 0x400840A8, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[37]", 0x400840AC, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[38]", 0x400840B0, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[39]", 0x400840B4, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[40]", 0x400840B8, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[41]", 0x400840BC, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[42]", 0x400840C0, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[43]", 0x400840C4, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[44]", 0x400840C8, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[45]", 0x400840CC, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[46]", 0x400840D0, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("TRGCFG_[47]", 0x400840D4, 32, "Trigger Configuration", [
                Field("LOOP", 31, 1, "Loop", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DATA_DEST", 28, 3, "Data Destination", [
                    EnumVal("adc_specific", "0", "ADC-specific data registers"),
                    EnumVal("fifo1", "0x1", "FIFO1"),
                    EnumVal("fifo2", "0x2", "FIFO2"),
                ]),
                Field("TRIGEN", 15, 1, "Trigger Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("TRG_FLAG", 14, 1, "Trigger Flag", [
                    EnumVal("write_zero", "0", "No action"),
                    EnumVal("write_one", "0x1", "Changes to 0"),
                ]),
                Field("TRS", 13, 1, "Trigger Resolution", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL conversions"),
                ]),
                Field("ADC_SEL1", 9, 1, "ADC Select 1", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("ADC_SEL0", 8, 1, "ADC Select 0", [
                    EnumVal("not_selected", "0", "Deselects"),
                    EnumVal("selected", "0x1", "Selects"),
                ]),
                Field("CHANNEL_VALUE_OR_LADDR", 0, 7, "Channel or CL Address", [
                ]),
            ]),
            Register("WRPROT", 0x40084228, 32, "Write Protection", [
                Field("PROTEC_CODE", 0, 4, "Protection Code", [
                    EnumVal("enable", "0", "Enable protection"),
                    EnumVal("disable_one_cycle", "0x9", "Disable protection for one write cycle"),
                    EnumVal("disable_permanent", "0xA", "Disable protection permanently"),
                ]),
            ]),
            Register("SFTRGR1", 0x4008422C, 32, "Software Trigger 1", [
                Field("SFTRG31", 31, 1, "Software Trigger 31", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG30", 30, 1, "Software Trigger 30", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG29", 29, 1, "Software Trigger 29", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG28", 28, 1, "Software Trigger 28", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG27", 27, 1, "Software Trigger 27", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG26", 26, 1, "Software Trigger 26", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG25", 25, 1, "Software Trigger 25", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG24", 24, 1, "Software Trigger 24", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG23", 23, 1, "Software Trigger 23", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG22", 22, 1, "Software Trigger 22", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG21", 21, 1, "Software Trigger 21", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG20", 20, 1, "Software Trigger 20", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG19", 19, 1, "Software Trigger 19", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG18", 18, 1, "Software Trigger 18", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG17", 17, 1, "Software Trigger 17", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG16", 16, 1, "Software Trigger 16", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG15", 15, 1, "Software Trigger 15", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG14", 14, 1, "Software Trigger 14", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG13", 13, 1, "Software Trigger 13", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG12", 12, 1, "Software Trigger 12", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG11", 11, 1, "Software Trigger 11", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG10", 10, 1, "Software Trigger 10", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG9", 9, 1, "Software Trigger 9", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG8", 8, 1, "Software Trigger 8", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG7", 7, 1, "Software Trigger 7", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG6", 6, 1, "Software Trigger 6", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG5", 5, 1, "Software Trigger 5", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG4", 4, 1, "Software Trigger 4", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG3", 3, 1, "Software Trigger 3", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG2", 2, 1, "Software Trigger 2", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG1", 1, 1, "Software Trigger 1", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG0", 0, 1, "Software Trigger 0", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
            ]),
            Register("SFTRGR2", 0x40084230, 32, "Software Trigger 2", [
                Field("SFTRG47", 15, 1, "Software Trigger 47", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG46", 14, 1, "Software Trigger 46", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG45", 13, 1, "Software Trigger 45", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG44", 12, 1, "Software Trigger 44", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG43", 11, 1, "Software Trigger 43", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG42", 10, 1, "Software Trigger 42", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG41", 9, 1, "Software Trigger 41", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG40", 8, 1, "Software Trigger 40", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG39", 7, 1, "Software Trigger 39", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG38", 6, 1, "Software Trigger 38", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG37", 5, 1, "Software Trigger 37", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG36", 4, 1, "Software Trigger 36", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG35", 3, 1, "Software Trigger 35", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG34", 2, 1, "Software Trigger 34", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG33", 1, 1, "Software Trigger 33", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
                Field("SFTRG32", 0, 1, "Software Trigger 32", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("trigger", "0x1", "Trigger conversion"),
                ]),
            ]),
            Register("ADCDR[0]", 0x4008423C, 32, "ADCn Result Data", [
                Field("TRG_SRC", 25, 7, "Trigger Source", [
                ]),
                Field("CH", 18, 7, "Channel", [
                ]),
                Field("LIST", 17, 1, "List", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL"),
                ]),
                Field("LAST", 16, 1, "Last", [
                    EnumVal("not_last", "0", "Not the last conversion of a CL, or not a CL conversion"),
                    EnumVal("last", "0x1", "Last conversion of a CL"),
                ]),
                Field("ADC_DATA", 0, 15, "ADC Data", [
                ]),
            ]),
            Register("ADCDR[1]", 0x40084240, 32, "ADCn Result Data", [
                Field("TRG_SRC", 25, 7, "Trigger Source", [
                ]),
                Field("CH", 18, 7, "Channel", [
                ]),
                Field("LIST", 17, 1, "List", [
                    EnumVal("single", "0", "Single conversion"),
                    EnumVal("cl", "0x1", "CL"),
                ]),
                Field("LAST", 16, 1, "Last", [
                    EnumVal("not_last", "0", "Not the last conversion of a CL, or not a CL conversion"),
                    EnumVal("last", "0x1", "Last conversion of a CL"),
                ]),
                Field("ADC_DATA", 0, 15, "ADC Data", [
                ]),
            ]),
            Register("LISTSTAR", 0x4008424C, 32, "CL Size Status", [
                Field("LISTSZ", 0, 8, "CL Size", [
                ]),
            ]),
            Register("LISTCHR_[0]", 0x40084250, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[1]", 0x40084254, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[2]", 0x40084258, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[3]", 0x4008425C, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[4]", 0x40084260, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[5]", 0x40084264, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[6]", 0x40084268, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[7]", 0x4008426C, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[8]", 0x40084270, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[9]", 0x40084274, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[10]", 0x40084278, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[11]", 0x4008427C, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[12]", 0x40084280, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[13]", 0x40084284, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[14]", 0x40084288, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("LISTCHR_[15]", 0x4008428C, 32, "CL Channel Address", [
                Field("LAST_y", 31, 1, "Last Channel", [
                    EnumVal("not_last", "0", "Not last"),
                    EnumVal("last", "0x1", "Last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y", 30, 1, "Next Channel Wait For Trigger", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CH_y", 16, 7, "ADC Channel Selection", [
                ]),
                Field("LAST_y_plus_1", 15, 1, "Last Channel Plus 1", [
                    EnumVal("not_last", "0", "Not next-to-last"),
                    EnumVal("last", "0x1", "Next-to-last channel in CL"),
                ]),
                Field("NEXT_CH_WAIT_ON_TRIG_y_plus_1", 14, 1, "Next Channel Wait For Trigger Plus 1", [
                    EnumVal("continuous", "0", "CL executes continuously"),
                    EnumVal("stop_after_current", "0x1", "CL stops executing"),
                ]),
                Field("ADC_CHL_y_plus_1", 0, 7, "ADC Channel Selection Plus 1", [
                ]),
            ]),
            Register("FIFO1DR", 0x40084450, 32, "FIFO Result Data", [
                Field("TRG_SRC", 25, 7, "Trigger Source", [
                ]),
                Field("CH", 18, 7, "Channel", [
                ]),
                Field("ADC_NUM", 16, 2, "ADC Number", [
                    EnumVal("adc_0", "0", "ADC 0"),
                    EnumVal("adc_1", "0x1", "ADC 1"),
                    EnumVal("adc_2", "0x2", "ADC 2"),
                    EnumVal("adc_3", "0x3", "ADC 3"),
                ]),
                Field("ADC_DATA", 0, 15, "ADC Data", [
                ]),
            ]),
            Register("FIFO2DR", 0x40084454, 32, "FIFO Result Data", [
                Field("TRG_SRC", 25, 7, "Trigger Source", [
                ]),
                Field("CH", 18, 7, "Channel", [
                ]),
                Field("ADC_NUM", 16, 2, "ADC Number", [
                    EnumVal("adc_0", "0", "ADC 0"),
                    EnumVal("adc_1", "0x1", "ADC 1"),
                    EnumVal("adc_2", "0x2", "ADC 2"),
                    EnumVal("adc_3", "0x3", "ADC 3"),
                ]),
                Field("ADC_DATA", 0, 15, "ADC Data", [
                ]),
            ]),
            Register("FIFOCR", 0x40084460, 32, "FIFO Control", [
                Field("DMA_EN_FIFO2", 25, 1, "FIFO2 DMA Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("DMA_EN_FIFO1", 24, 1, "FIFO1 DMA Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("IEN_FIFO2", 17, 1, "FIFO2 Interrupt Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("IEN_FIFO1", 16, 1, "FIFO1 Interrupt Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
            ]),
            Register("FIFOWM", 0x40084464, 32, "FIFO Watermark Configuration", [
                Field("WM_FIFO2", 8, 3, "FIFO2 Watermark Level", [
                ]),
                Field("WM_FIFO1", 0, 4, "FIFO1 Watermark Level", [
                ]),
            ]),
            Register("FIFOERR", 0x40084468, 32, "FIFO Error/Status", [
                Field("UNDR_ERR_FIFO2", 27, 1, "Underrun Error Flag", [
                    EnumVal("no_underrun", "0", "No underrun"),
                    EnumVal("underrun", "0x1", "Underrun"),
                ]),
                Field("OVR_ERR_FIFO2", 26, 1, "Overrun Error Flag", [
                    EnumVal("no_overrun", "0", "No overrun"),
                    EnumVal("overrun", "0x1", "Overrun"),
                ]),
                Field("UNDR_ERR_FIFO1", 25, 1, "Underrun Error Flag", [
                    EnumVal("no_underrun", "0", "No underrun"),
                    EnumVal("underrun", "0x1", "Underrun"),
                ]),
                Field("OVR_ERR_FIFO1", 24, 1, "Overrun Error Flag", [
                    EnumVal("no_overrun", "0", "No overrun"),
                    EnumVal("overrun", "0x1", "Overrun"),
                ]),
                Field("WM_INT_FIFO2", 17, 1, "FIFO Watermark Interrupt Status", [
                    EnumVal("not_exceed", "0", "Does not exceed watermark"),
                    EnumVal("exceeds", "0x1", "Exceeds watermark"),
                ]),
                Field("WM_INT_FIFO1", 16, 1, "FIFO Watermark Interrupt Status", [
                    EnumVal("not_exceed", "0", "Does not exceed watermark"),
                    EnumVal("exceeds", "0x1", "Exceeds watermark"),
                ]),
            ]),
            Register("FIFOSR", 0x4008446C, 32, "FIFO Status", [
                Field("FULL_FIFO2", 1, 1, "FIFO Full", [
                    EnumVal("not_full", "0", "Not full"),
                    EnumVal("full", "0x1", "Full"),
                ]),
                Field("FULL_FIFO1", 0, 1, "FIFO Full", [
                    EnumVal("not_full", "0", "Not full"),
                    EnumVal("full", "0x1", "Full"),
                ]),
            ]),
            Register("FIFOCNTR", 0x40084470, 32, "FIFO Counter", [
                Field("CNTR_FIFO2", 8, 4, "FIFO2 Counter", [
                ]),
                Field("CNTR_FIFO1", 0, 5, "FIFO1 Counter", [
                ]),
            ]),
        ])

class Module_CAN_0(Peripheral):
    def __init__(self):
        super().__init__("CAN_0", 0x40304000, 0x3200, [
            Register("MCR", 0x40304000, 32, "Module Configuration", [
                Field("MDIS", 31, 1, "Module Disable", [
                    EnumVal("flexcan_enabled", "0", "Enable"),
                    EnumVal("flexcan_disabled", "0x1", "Disable"),
                ]),
                Field("FRZ", 30, 1, "Freeze Enable", [
                    EnumVal("freeze_mode_disabled", "0", "Disable"),
                    EnumVal("freeze_mode_enabled", "0x1", "Enable"),
                ]),
                Field("RFEN", 29, 1, "Legacy RX FIFO Enable", [
                    EnumVal("id1", "0", "Disable"),
                    EnumVal("id2", "0x1", "Enable"),
                ]),
                Field("HALT", 28, 1, "Halt FlexCAN", [
                    EnumVal("HALT_disable", "0", "No request"),
                    EnumVal("HALT_enable", "0x1", "Enter Freeze mode, if MCR[FRZ] = 1."),
                ]),
                Field("NOTRDY", 27, 1, "FlexCAN Not Ready", [
                    EnumVal("id1", "0", "FlexCAN is in Normal mode, Listen-Only mode, or Loopback mode."),
                    EnumVal("id5", "0x1", "FlexCAN is in Disable mode or Freeze mode."),
                ]),
                Field("SOFTRST", 25, 1, "Soft Reset", [
                    EnumVal("SOFTRST_no_reset_request", "0", "No reset"),
                    EnumVal("SOFTRST_reset_registers", "0x1", "Soft reset affects reset registers"),
                ]),
                Field("FRZACK", 24, 1, "Freeze Mode Acknowledge", [
                    EnumVal("freeze_mode_no", "0", "Not in Freeze mode, prescaler running."),
                    EnumVal("freeze_mode_yes", "0x1", "In Freeze mode, prescaler stopped."),
                ]),
                Field("SUPV", 23, 1, "Supervisor Mode", [
                    EnumVal("id1", "0", "User mode"),
                    EnumVal("id2", "0x1", "Supervisor mode"),
                ]),
                Field("WRNEN", 21, 1, "Warning Interrupt Enable", [
                    EnumVal("TWRNINT_RWRNINT_inactive", "0", "Disable"),
                    EnumVal("TWRNINT_RWRNINT_active", "0x1", "Enable"),
                ]),
                Field("LPMACK", 20, 1, "Low-Power Mode Acknowledge", [
                    EnumVal("low_power_no", "0", "Not in a low-power mode"),
                    EnumVal("low_power_yes", "0x1", "In a low-power mode"),
                ]),
                Field("SRXDIS", 17, 1, "Self-Reception Disable", [
                    EnumVal("self_reception_enabled", "0", "Enable"),
                    EnumVal("self_reception_disabled", "0x1", "Disable"),
                ]),
                Field("IRMQ", 16, 1, "Individual RX Masking and Queue Enable", [
                    EnumVal("individual_rx_masking_disabled", "0", "Disable"),
                    EnumVal("individual_rx_masking_enabled", "0x1", "Enable"),
                ]),
                Field("DMA", 15, 1, "DMA Enable", [
                    EnumVal("id1", "0", "Disable"),
                    EnumVal("id2", "0x1", "Enable"),
                ]),
                Field("LPRIOEN", 13, 1, "Local Priority Enable", [
                    EnumVal("local_priority_disabled", "0", "Disable"),
                    EnumVal("local_priority_enabled", "0x1", "Enable"),
                ]),
                Field("AEN", 12, 1, "Abort Enable", [
                    EnumVal("abort_disabled", "0", "Disabled"),
                    EnumVal("abort_enabled", "0x1", "Enabled"),
                ]),
                Field("FDEN", 11, 1, "CAN FD Operation Enable", [
                    EnumVal("CAN_FD_disabled", "0", "Disable"),
                    EnumVal("CAN_FD_enabled", "0x1", "Enable"),
                ]),
                Field("IDAM", 8, 2, "ID Acceptance Mode", [
                    EnumVal("one_full_ID", "0", "Format A: One full ID (standard and extended) per ID filter table element."),
                    EnumVal("two_full_ID", "0x1", "Format B: Two full standard IDs or two partial 14-bit (standard and extended) IDs per ID filter table element."),
                    EnumVal("four_partial_ID", "0x2", "Format C: Four partial 8-bit standard IDs per ID filter table element."),
                    EnumVal("all_frames_rejected", "0x3", "Format D: All frames rejected."),
                ]),
                Field("MAXMB", 0, 7, "Number of the Last Message Buffer", [
                ]),
            ]),
            Register("CTRL1", 0x40304004, 32, "Control 1", [
                Field("PRESDIV", 24, 8, "Prescaler Division Factor", [
                ]),
                Field("RJW", 22, 2, "Resync Jump Width", [
                ]),
                Field("PSEG1", 19, 3, "Phase Segment 1", [
                ]),
                Field("PSEG2", 16, 3, "Phase Segment 2", [
                ]),
                Field("BOFFMSK", 15, 1, "Bus Off Interrupt Mask", [
                    EnumVal("bus_off_int_disabled", "0", "Interrupt disabled"),
                    EnumVal("bus_off_int_enabled", "0x1", "Interrupt enabled"),
                ]),
                Field("ERRMSK", 14, 1, "Error Interrupt Mask", [
                    EnumVal("error_int_disabled", "0", "Interrupt disabled"),
                    EnumVal("error_int_enabled", "0x1", "Interrupt enabled"),
                ]),
                Field("LPB", 12, 1, "Loopback Mode", [
                    EnumVal("loopback_disabled", "0", "Disabled"),
                    EnumVal("loopback_enabled", "0x1", "Enabled"),
                ]),
                Field("TWRNMSK", 11, 1, "TX Warning Interrupt Mask", [
                    EnumVal("tx_warning_int_disabled", "0", "Disabled"),
                    EnumVal("tx_warning_int_enabled", "0x1", "Enabled"),
                ]),
                Field("RWRNMSK", 10, 1, "RX Warning Interrupt Mask", [
                    EnumVal("rx_warning_int_disabled", "0", "Disabled"),
                    EnumVal("rx_warning_int_enabled", "0x1", "Enabled"),
                ]),
                Field("SMP", 7, 1, "CAN Bit Sampling", [
                    EnumVal("one_sample", "0", "One sample is used to determine the bit value."),
                    EnumVal("three_sample", "0x1", "Three samples are used to determine the value of the received bit: the regular one (sample point) and two preceding samples. A majority rule is used."),
                ]),
                Field("BOFFREC", 6, 1, "Bus Off Recovery", [
                    EnumVal("auto_recover_enabled", "0", "Enabled"),
                    EnumVal("auto_recover_disabled", "0x1", "Disabled"),
                ]),
                Field("TSYN", 5, 1, "Timer Sync", [
                    EnumVal("timer_sync_disabled", "0", "Disable"),
                    EnumVal("timer_sync_enabled", "0x1", "Enable"),
                ]),
                Field("LBUF", 4, 1, "Lowest Buffer Transmitted First", [
                    EnumVal("highest_buffer_first", "0", "Buffer with highest priority is transmitted first."),
                    EnumVal("lowest_buffer_first", "0x1", "Lowest number buffer is transmitted first."),
                ]),
                Field("LOM", 3, 1, "Listen-Only Mode", [
                    EnumVal("listen_only_mode_disabled", "0", "Listen-Only mode is deactivated."),
                    EnumVal("listen_only_mode_enabled", "0x1", "FlexCAN module operates in Listen-Only mode."),
                ]),
                Field("PROPSEG", 0, 3, "Propagation Segment", [
                ]),
            ]),
            Register("TIMER", 0x40304008, 32, "Free-Running Timer", [
                Field("TIMER", 0, 16, "Timer Value", [
                ]),
            ]),
            Register("RXMGMASK", 0x40304010, 32, "RX Message Buffers Global Mask", [
                Field("MG", 0, 32, "Global Mask for RX Message Buffers", [
                ]),
            ]),
            Register("RX14MASK", 0x40304014, 32, "Receive 14 Mask", [
                Field("RX14M", 0, 32, "RX Buffer 14 Mask Bits", [
                ]),
            ]),
            Register("RX15MASK", 0x40304018, 32, "Receive 15 Mask", [
                Field("RX15M", 0, 32, "RX Buffer 15 Mask Bits", [
                ]),
            ]),
            Register("ECR", 0x4030401C, 32, "Error Counter", [
                Field("RXERRCNT_FAST", 24, 8, "Receive Error Counter for Fast Bits", [
                ]),
                Field("TXERRCNT_FAST", 16, 8, "Transmit Error Counter for Fast Bits", [
                ]),
                Field("RXERRCNT", 8, 8, "Receive Error Counter", [
                ]),
                Field("TXERRCNT", 0, 8, "Transmit Error Counter", [
                ]),
            ]),
            Register("ESR1", 0x40304020, 32, "Error and Status 1", [
                Field("BIT1ERR_FAST", 31, 1, "Fast Bit1 Error Flag", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR_FAST", 30, 1, "Fast Bit0 Error Flag", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("CRCERR_FAST", 28, 1, "Fast Cyclic Redundancy Check Error Flag", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR_FAST", 27, 1, "Fast Form Error Flag", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A form error occurred since last read of this register."),
                ]),
                Field("STFERR_FAST", 26, 1, "Fast Stuffing Error Flag", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("ERROVR", 21, 1, "Error Overrun Flag", [
                    EnumVal("overrun_not_occurred", "0", "No overrun"),
                    EnumVal("overrun_occurred", "0x1", "Overrun"),
                ]),
                Field("ERRINT_FAST", 20, 1, "Fast Error Interrupt Flag", [
                    EnumVal("errors_data_phase_no", "0", "No such occurrence."),
                    EnumVal("errors_data_phase_yes", "0x1", "Error flag set in the data phase of CAN FD frames that have BRS = 1."),
                ]),
                Field("BOFFDONEINT", 19, 1, "Bus Off Done Interrupt Flag", [
                    EnumVal("bus_off_not_done", "0", "No such occurrence"),
                    EnumVal("bus_off_done", "0x1", "FlexCAN module has completed Bus Off process."),
                ]),
                Field("SYNCH", 18, 1, "CAN Synchronization Status Flag", [
                    EnumVal("CAN_bus_sync_no", "0", "Not synchronized"),
                    EnumVal("CAN_bus_sync_yes", "0x1", "Synchronized"),
                ]),
                Field("TWRNINT", 17, 1, "TX Warning Interrupt Flag", [
                    EnumVal("Tx_warning_int_no", "0", "No such occurrence"),
                    EnumVal("Tx_warning_int_yes", "0x1", "TX error counter changed from less than 96 to greater than or equal to 96."),
                ]),
                Field("RWRNINT", 16, 1, "RX Warning Interrupt Flag", [
                    EnumVal("Rx_warning_int_no", "0", "No such occurrence"),
                    EnumVal("Rx_warning_int_yes", "0x1", "RX error counter changed from less than 96 to greater than or equal to 96."),
                ]),
                Field("BIT1ERR", 15, 1, "Bit1 Error Flag", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR", 14, 1, "Bit0 Error Flag", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("ACKERR", 13, 1, "Acknowledge Error Flag", [
                    EnumVal("ACK_error_no", "0", "No error"),
                    EnumVal("ACK_error_yes", "0x1", "An ACK error occurred since last read of this register."),
                ]),
                Field("CRCERR", 12, 1, "Cyclic Redundancy Check Error Flag", [
                    EnumVal("CRC_error_no", "0", "No error"),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR", 11, 1, "Form Error Flag", [
                    EnumVal("form_error_no", "0", "No error"),
                    EnumVal("form_error_yes", "0x1", "A Form Error occurred since last read of this register."),
                ]),
                Field("STFERR", 10, 1, "Stuffing Error Flag", [
                    EnumVal("stuffing_error_no", "0", "No error"),
                    EnumVal("stuffing_error_yes", "0x1", "Error occurred since last read of this register."),
                ]),
                Field("TXWRN", 9, 1, "TX Error Warning Flag", [
                    EnumVal("TXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("TXERRCNT_GTE_96", "0x1", "TXERRCNT is 96 or greater."),
                ]),
                Field("RXWRN", 8, 1, "RX Error Warning Flag", [
                    EnumVal("RXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("RXERRCNT_GTE_96", "0x1", "RXERRCNT is greater than or equal to 96."),
                ]),
                Field("IDLE", 7, 1, "Idle", [
                    EnumVal("can_bus_not_idle", "0", "Not IDLE"),
                    EnumVal("can_bus_idle", "0x1", "IDLE"),
                ]),
                Field("TX", 6, 1, "FlexCAN In Transmission", [
                    EnumVal("transmit_message_no", "0", "Not transmitting"),
                    EnumVal("transmit_message_yes", "0x1", "Transmitting"),
                ]),
                Field("FLTCONF", 4, 2, "Fault Confinement State", [
                    EnumVal("error_active", "0", "Error Active"),
                    EnumVal("error_passive", "0x1", "Error Passive"),
                    EnumVal("bus_off", "#1x", "Bus Off"),
                ]),
                Field("RX", 3, 1, "FlexCAN in Reception Flag", [
                    EnumVal("DISABLE", "0", "Not receiving"),
                    EnumVal("ENABLE", "0x1", "Receiving"),
                ]),
                Field("BOFFINT", 2, 1, "Bus Off Interrupt Flag", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "FlexCAN module entered Bus Off state."),
                ]),
                Field("ERRINT", 1, 1, "Error Interrupt Flag", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "Indicates setting of any error flag in the Error and Status register."),
                ]),
            ]),
            Register("IMASK2", 0x40304024, 32, "Interrupt Masks 2", [
                Field("BUF63TO32M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IMASK1", 0x40304028, 32, "Interrupt Masks 1", [
                Field("BUF31TO0M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IFLAG2", 0x4030402C, 32, "Interrupt Flags 2", [
                Field("BUF63TO32I", 0, 32, "Buffer MBi Interrupt", [
                ]),
            ]),
            Register("IFLAG1", 0x40304030, 32, "Interrupt Flags 1", [
                Field("BUF31TO8I", 8, 24, "Buffer MBi Interrupt", [
                ]),
                Field("BUF7I", 7, 1, "Buffer MB7 Interrupt or Legacy RX FIFO Overflow", [
                    EnumVal("id1", "0", "No occurrence of MB7 completing transmission or reception, or no FIFO overflow."),
                    EnumVal("id2", "0x1", "MB7 completed transmission or reception, or FIFO overflow."),
                ]),
                Field("BUF6I", 6, 1, "Buffer MB6 Interrupt or Legacy RX FIFO Warning", [
                    EnumVal("id1", "0", "No occurrence of MB6 completing transmission or reception, or FIFO not almost full."),
                    EnumVal("id2", "0x1", "MB6 completed transmission or reception, or FIFO almost full."),
                ]),
                Field("BUF5I", 5, 1, "Buffer MB5 Interrupt or Frames available in Legacy RX FIFO", [
                    EnumVal("id1", "0", "No occurrence of completed transmission or reception, or no frames available"),
                    EnumVal("id2", "0x1", "MB5 completed transmission or reception, or frames available"),
                ]),
                Field("BUF4TO1I", 1, 4, "Buffer MBi Interrupt or Reserved", [
                ]),
                Field("BUF0I", 0, 1, "Buffer MB0 Interrupt or Clear Legacy FIFO bit", [
                    EnumVal("buffer_Tx_Rx_not_complete", "0", "MB0 has no occurrence of successfully completed transmission or reception."),
                    EnumVal("buffer_Tx_Rx_complete", "0x1", "MB0 has successfully completed transmission or reception."),
                ]),
            ]),
            Register("CTRL2", 0x40304034, 32, "Control 2", [
                Field("ERRMSK_FAST", 31, 1, "Error Interrupt Mask for Errors Detected in the Data Phase of Fast CAN FD Frames", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("BOFFDONEMSK", 30, 1, "Bus Off Done Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ECRWRE", 29, 1, "Error Correction Configuration Register Write Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("WRMFRZ", 28, 1, "Write Access to Memory in Freeze Mode", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("RFFN", 24, 4, "Number of Legacy Receive FIFO Filters", [
                ]),
                Field("TASD", 19, 5, "Transmission Arbitration Start Delay", [
                ]),
                Field("MRP", 18, 1, "Message Buffers Reception Priority", [
                    EnumVal("id1", "0", "Matching starts from Legacy RX FIFO or Enhanced RX FIFO and continues on message buffers."),
                    EnumVal("id3", "0x1", "Matching starts from message buffers and continues on Legacy RX FIFO or Enhanced RX FIFO."),
                ]),
                Field("RRS", 17, 1, "Remote Request Storing", [
                    EnumVal("remote_response_frame_not_generated", "0", "Generated"),
                    EnumVal("remote_response_frame_generated", "0x1", "Stored"),
                ]),
                Field("EACEN", 16, 1, "Entire Frame Arbitration Field Comparison Enable for RX Message Buffers", [
                    EnumVal("RTR_compare_no", "0", "Disable"),
                    EnumVal("RTR_compare_yes", "0x1", "Enable"),
                ]),
                Field("TIMER_SRC", 15, 1, "Timer Source", [
                    EnumVal("CAN_bit_clock", "0", "CAN bit clock"),
                    EnumVal("external_clock", "0x1", "External time tick"),
                ]),
                Field("PREXCEN", 14, 1, "Protocol Exception Enable", [
                    EnumVal("DISABLE", "0", "Disabled"),
                    EnumVal("ENABLE", "0x1", "Enabled"),
                ]),
                Field("BTE", 13, 1, "Bit Timing Expansion Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ISOCANFDEN", 12, 1, "ISO CAN FD Enable", [
                    EnumVal("non_ISO", "0", "Disable. FlexCAN operates using the non-ISO CAN FD protocol."),
                    EnumVal("ISO", "0x1", "Enable. FlexCAN operates using the ISO CAN FD protocol (ISO 11898-1:2015)."),
                ]),
                Field("EDFLTDIS", 11, 1, "Edge Filter Disable", [
                    EnumVal("ENABLE", "0", "Enabled"),
                    EnumVal("DISABLE", "0x1", "Disabled"),
                ]),
                Field("MBTSBASE", 8, 2, "Message Buffer Timestamp Base", [
                    EnumVal("base_TIMER", "0", "TIMER"),
                    EnumVal("base_lower_16", "0x1", "Lower 16 bits of high-resolution timer"),
                    EnumVal("base_upper_16", "0x2", "Upper 16 bits of high-resolution timer"),
                ]),
                Field("TSTAMPCAP", 6, 2, "Timestamp Capture Point", [
                    EnumVal("time_stamp_capture_disabled", "0", "Disabled"),
                    EnumVal("time_stamp_capture_frame_end_enabled", "0x1", "End of the CAN frame"),
                    EnumVal("time_stamp_capture_frame_start_enabled", "0x2", "Start of the CAN frame"),
                    EnumVal("time_stamp_capture_2_types_enabled", "0x3", "Start of frame for classical CAN frames; res bit for CAN FD frames"),
                ]),
            ]),
            Register("ESR2", 0x40304038, 32, "Error and Status 2", [
                Field("LPTM", 16, 7, "Lowest Priority TX Message Buffer", [
                ]),
                Field("VPS", 14, 1, "Valid Priority Status", [
                    EnumVal("invalid", "0", "Invalid"),
                    EnumVal("valid", "0x1", "Valid"),
                ]),
                Field("IMB", 13, 1, "Inactive Message Buffer", [
                    EnumVal("inactive_mailbox_no", "0", "Message buffer indicated by ESR2[LPTM] is not inactive."),
                    EnumVal("inactive_mailbox_yes", "0x1", "At least one message buffer is inactive."),
                ]),
            ]),
            Register("CRCR", 0x40304044, 32, "Cyclic Redundancy Check", [
                Field("MBCRC", 16, 7, "CRC Message Buffer", [
                ]),
                Field("TXCRC", 0, 15, "Transmitted CRC value", [
                ]),
            ]),
            Register("RXFGMASK", 0x40304048, 32, "Legacy RX FIFO Global Mask", [
                Field("FGM", 0, 32, "Legacy RX FIFO Global Mask Bits", [
                ]),
            ]),
            Register("RXFIR", 0x4030404C, 32, "Legacy RX FIFO Information", [
                Field("IDHIT", 0, 9, "Identifier Acceptance Filter Hit Indicator", [
                ]),
            ]),
            Register("CBT", 0x40304050, 32, "CAN Bit Timing", [
                Field("BTF", 31, 1, "Bit Timing Format Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("EPRESDIV", 21, 10, "Extended Prescaler Division Factor", [
                ]),
                Field("ERJW", 16, 5, "Extended Resync Jump Width", [
                ]),
                Field("EPROPSEG", 10, 6, "Extended Propagation Segment", [
                ]),
                Field("EPSEG1", 5, 5, "Extended Phase Segment 1", [
                ]),
                Field("EPSEG2", 0, 5, "Extended Phase Segment 2", [
                ]),
            ]),
            Register("RXIMR[0]", 0x40304880, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[1]", 0x40304884, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[2]", 0x40304888, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[3]", 0x4030488C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[4]", 0x40304890, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[5]", 0x40304894, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[6]", 0x40304898, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[7]", 0x4030489C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[8]", 0x403048A0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[9]", 0x403048A4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[10]", 0x403048A8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[11]", 0x403048AC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[12]", 0x403048B0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[13]", 0x403048B4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[14]", 0x403048B8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[15]", 0x403048BC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[16]", 0x403048C0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[17]", 0x403048C4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[18]", 0x403048C8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[19]", 0x403048CC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[20]", 0x403048D0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[21]", 0x403048D4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[22]", 0x403048D8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[23]", 0x403048DC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[24]", 0x403048E0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[25]", 0x403048E4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[26]", 0x403048E8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[27]", 0x403048EC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[28]", 0x403048F0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[29]", 0x403048F4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[30]", 0x403048F8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[31]", 0x403048FC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[32]", 0x40304900, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[33]", 0x40304904, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[34]", 0x40304908, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[35]", 0x4030490C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[36]", 0x40304910, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[37]", 0x40304914, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[38]", 0x40304918, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[39]", 0x4030491C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[40]", 0x40304920, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[41]", 0x40304924, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[42]", 0x40304928, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[43]", 0x4030492C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[44]", 0x40304930, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[45]", 0x40304934, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[46]", 0x40304938, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[47]", 0x4030493C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[48]", 0x40304940, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[49]", 0x40304944, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[50]", 0x40304948, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[51]", 0x4030494C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[52]", 0x40304950, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[53]", 0x40304954, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[54]", 0x40304958, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[55]", 0x4030495C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[56]", 0x40304960, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[57]", 0x40304964, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[58]", 0x40304968, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[59]", 0x4030496C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[60]", 0x40304970, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[61]", 0x40304974, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[62]", 0x40304978, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[63]", 0x4030497C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("MECR", 0x40304AE0, 32, "Memory Error Control", [
                Field("ECRWRDIS", 31, 1, "Error Configuration Register Write Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("HANCEI_MSK", 19, 1, "Host Access with Non-Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FANCEI_MSK", 18, 1, "FlexCAN Access with Non-Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("CEI_MSK", 16, 1, "Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("HAERRIE", 15, 1, "Host Access Error Injection Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FAERRIE", 14, 1, "FlexCAN Access Error Injection Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("EXTERRIE", 13, 1, "Extended Error Injection Enable", [
                    EnumVal("inject_32_bit", "0", "Disable. Apply error injection only to the 32-bit word."),
                    EnumVal("inject_64_bit", "0x1", "Enable. Apply error injection to the 64-bit word."),
                ]),
                Field("RERRDIS", 9, 1, "Error Report Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("ECCDIS", 8, 1, "Error Correction Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("NCEFAFRZ", 7, 1, "Non-Correctable Errors in FlexCAN Access Put Device in Freeze Mode", [
                    EnumVal("normal", "0", "Keep normal operation."),
                    EnumVal("freeze", "0x1", "Put FlexCAN in Freeze mode (see section \"Freeze mode\")."),
                ]),
            ]),
            Register("ERRIAR", 0x40304AE4, 32, "Error Injection Address", [
                Field("INJADDR_H", 2, 12, "Error Injection Address High", [
                ]),
                Field("INJADDR_L", 0, 2, "Error Injection Address Low", [
                ]),
            ]),
            Register("ERRIDPR", 0x40304AE8, 32, "Error Injection Data Pattern", [
                Field("DFLIP", 0, 32, "Data Flip Pattern", [
                ]),
            ]),
            Register("ERRIPPR", 0x40304AEC, 32, "Error Injection Parity Pattern", [
                Field("PFLIP3", 24, 5, "Parity Flip Pattern for Byte 3 (Most Significant)", [
                ]),
                Field("PFLIP2", 16, 5, "Parity Flip Pattern for Byte 2", [
                ]),
                Field("PFLIP1", 8, 5, "Parity Flip Pattern for Byte 1", [
                ]),
                Field("PFLIP0", 0, 5, "Parity Flip Pattern for Byte 0 (Least Significant)", [
                ]),
            ]),
            Register("RERRAR", 0x40304AF0, 32, "Error Report Address", [
                Field("NCE", 24, 1, "Non-Correctable Error", [
                    EnumVal("correctable", "0", "Reporting a correctable error"),
                    EnumVal("non_correctable", "0x1", "Reporting a non-correctable error"),
                ]),
                Field("SAID", 16, 3, "SAID", [
                ]),
                Field("ERRADDR", 0, 14, "Address Where Error Detected", [
                ]),
            ]),
            Register("RERRDR", 0x40304AF4, 32, "Error Report Data", [
                Field("RDATA", 0, 32, "Raw Data Word Read from Memory with Error", [
                ]),
            ]),
            Register("RERRSYNR", 0x40304AF8, 32, "Error Report Syndrome", [
                Field("BE3", 31, 1, "Byte Enabled for Byte 3 (Most Significant)", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND3", 24, 5, "Error Syndrome for Byte 3 (Most Significant)", [
                ]),
                Field("BE2", 23, 1, "Byte Enabled for Byte 2", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND2", 16, 5, "Error Syndrome for Byte 2", [
                ]),
                Field("BE1", 15, 1, "Byte Enabled for Byte 1", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND1", 8, 5, "Error Syndrome for Byte 1", [
                ]),
                Field("BE0", 7, 1, "Byte Enabled for Byte 0 (Least Significant)", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND0", 0, 5, "Error Syndrome for Byte 0 (Least Significant)", [
                ]),
            ]),
            Register("ERRSR", 0x40304AFC, 32, "Error Status", [
                Field("HANCEIF", 19, 1, "Host Access with Noncorrectable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("FANCEIF", 18, 1, "FlexCAN Access with Non-Correctable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("CEIF", 16, 1, "Correctable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("HANCEIOF", 3, 1, "Host Access With Non-Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("FANCEIOF", 2, 1, "FlexCAN Access with Non-Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("CEIOF", 0, 1, "Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
            ]),
            Register("EPRS", 0x40304BF0, 32, "Enhanced CAN Bit Timing Prescalers", [
                Field("EDPRESDIV", 16, 10, "Extended Data Phase Prescaler Division Factor", [
                ]),
                Field("ENPRESDIV", 0, 10, "Extended Nominal Prescaler Division Factor", [
                ]),
            ]),
            Register("ENCBT", 0x40304BF4, 32, "Enhanced Nominal CAN Bit Timing", [
                Field("NRJW", 22, 7, "Nominal Resynchronization Jump Width", [
                ]),
                Field("NTSEG2", 12, 7, "Nominal Time Segment 2", [
                ]),
                Field("NTSEG1", 0, 8, "Nominal Time Segment 1", [
                ]),
            ]),
            Register("EDCBT", 0x40304BF8, 32, "Enhanced Data Phase CAN Bit Timing", [
                Field("DRJW", 22, 4, "Data Phase Resynchronization Jump Width", [
                ]),
                Field("DTSEG2", 12, 4, "Data Phase Time Segment 2", [
                ]),
                Field("DTSEG1", 0, 5, "Data Phase Segment 1", [
                ]),
            ]),
            Register("ETDC", 0x40304BFC, 32, "Enhanced Transceiver Delay Compensation", [
                Field("ETDCEN", 31, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDMDIS", 30, 1, "Transceiver Delay Measurement Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("ETDCOFF", 16, 7, "Enhanced Transceiver Delay Compensation Offset", [
                ]),
                Field("ETDCFAIL", 15, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "In range"),
                    EnumVal("out_of_range", "0x1", "Out of range"),
                ]),
                Field("ETDCVAL", 0, 8, "Enhanced Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCTRL", 0x40304C00, 32, "CAN FD Control", [
                Field("FDRATE", 31, 1, "Bit Rate Switch Enable", [
                    EnumVal("nominal", "0", "Disable"),
                    EnumVal("bit_rate_switching", "0x1", "Enable"),
                ]),
                Field("MBDSR1", 19, 2, "Message Buffer Data Size for Region 1", [
                    EnumVal("R1_8_bytes", "0", "8 bytes"),
                    EnumVal("R1_16_bytes", "0x1", "16 bytes"),
                    EnumVal("R1_32_bytes", "0x2", "32 bytes"),
                    EnumVal("R1_64_bytes", "0x3", "64 bytes"),
                ]),
                Field("MBDSR0", 16, 2, "Message Buffer Data Size for Region 0", [
                    EnumVal("R0_8_bytes", "0", "8 bytes"),
                    EnumVal("R0_16_bytes", "0x1", "16 bytes"),
                    EnumVal("R0_32_bytes", "0x2", "32 bytes"),
                    EnumVal("R0_64_bytes", "0x3", "64 bytes"),
                ]),
                Field("TDCEN", 15, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDCFAIL", 14, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "In range"),
                    EnumVal("out_of_range", "0x1", "Out of range"),
                ]),
                Field("TDCOFF", 8, 5, "Transceiver Delay Compensation Offset", [
                ]),
                Field("TDCVAL", 0, 6, "Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCBT", 0x40304C04, 32, "CAN FD Bit Timing", [
                Field("FPRESDIV", 20, 10, "Fast Prescaler Division Factor", [
                ]),
                Field("FRJW", 16, 3, "Fast Resync Jump Width", [
                ]),
                Field("FPROPSEG", 10, 5, "Fast Propagation Segment", [
                ]),
                Field("FPSEG1", 5, 3, "Fast Phase Segment 1", [
                ]),
                Field("FPSEG2", 0, 3, "Fast Phase Segment 2", [
                ]),
            ]),
            Register("FDCRC", 0x40304C08, 32, "CAN FD CRC", [
                Field("FD_MBCRC", 24, 7, "CRC Message Buffer Number for FD_TXCRC", [
                ]),
                Field("FD_TXCRC", 0, 21, "Extended Transmitted CRC value", [
                ]),
            ]),
            Register("ERFCR", 0x40304C0C, 32, "Enhanced RX FIFO Control", [
                Field("ERFEN", 31, 1, "Enhanced RX FIFO enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("DMALW", 26, 5, "DMA Last Word", [
                ]),
                Field("NEXIF", 16, 7, "Number of Extended ID Filter Elements", [
                ]),
                Field("NFE", 8, 6, "Number of Enhanced RX FIFO Filter Elements", [
                ]),
                Field("ERFWM", 0, 5, "Enhanced RX FIFO Watermark", [
                ]),
            ]),
            Register("ERFIER", 0x40304C10, 32, "Enhanced RX FIFO Interrupt Enable", [
                Field("ERFUFWIE", 31, 1, "Enhanced RX FIFO Underflow Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ERFOVFIE", 30, 1, "Enhanced RX FIFO Overflow Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ERFWMIIE", 29, 1, "Enhanced RX FIFO Watermark Indication Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ERFDAIE", 28, 1, "Enhanced RX FIFO Data Available Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("ERFSR", 0x40304C14, 32, "Enhanced RX FIFO Status", [
                Field("ERFUFW", 31, 1, "Enhanced RX FIFO Underflow Flag", [
                    EnumVal("no_underflow", "0", "No such occurrence"),
                    EnumVal("underflow", "0x1", "Underflow"),
                ]),
                Field("ERFOVF", 30, 1, "Enhanced RX FIFO Overflow Flag", [
                    EnumVal("no_overflow", "0", "No such occurrence"),
                    EnumVal("overflow", "0x1", "Overflow"),
                ]),
                Field("ERFWMI", 29, 1, "Enhanced RX FIFO Watermark Indication Flag", [
                    EnumVal("watermark_no", "0", "No such occurrence"),
                    EnumVal("watermark_yes", "0x1", "Number of messages in FIFO is greater than the watermark"),
                ]),
                Field("ERFDA", 28, 1, "Enhanced RX FIFO Data Available Flag", [
                    EnumVal("no_message_stored", "0", "No such occurrence"),
                    EnumVal("message_stored", "0x1", "At least one message stored in Enhanced RX FIFO"),
                ]),
                Field("ERFCLR", 27, 1, "Enhanced RX FIFO Clear", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("clear", "0x1", "Clear enhanced RX FIFO content"),
                ]),
                Field("ERFE", 17, 1, "Enhanced RX FIFO Empty Flag", [
                    EnumVal("not_empty", "0", "Not empty"),
                    EnumVal("empty", "0x1", "Empty"),
                ]),
                Field("ERFF", 16, 1, "Enhanced RX FIFO Full Flag", [
                    EnumVal("not_full", "0", "Not full"),
                    EnumVal("full", "0x1", "Full"),
                ]),
                Field("ERFEL", 0, 6, "Enhanced RX FIFO Elements", [
                ]),
            ]),
            Register("HR_TIME_STAMP[0]", 0x40304C30, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[1]", 0x40304C34, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[2]", 0x40304C38, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[3]", 0x40304C3C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[4]", 0x40304C40, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[5]", 0x40304C44, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[6]", 0x40304C48, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[7]", 0x40304C4C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[8]", 0x40304C50, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[9]", 0x40304C54, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[10]", 0x40304C58, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[11]", 0x40304C5C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[12]", 0x40304C60, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[13]", 0x40304C64, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[14]", 0x40304C68, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[15]", 0x40304C6C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[16]", 0x40304C70, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[17]", 0x40304C74, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[18]", 0x40304C78, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[19]", 0x40304C7C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[20]", 0x40304C80, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[21]", 0x40304C84, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[22]", 0x40304C88, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[23]", 0x40304C8C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[24]", 0x40304C90, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[25]", 0x40304C94, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[26]", 0x40304C98, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[27]", 0x40304C9C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[28]", 0x40304CA0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[29]", 0x40304CA4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[30]", 0x40304CA8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[31]", 0x40304CAC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[32]", 0x40304CB0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[33]", 0x40304CB4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[34]", 0x40304CB8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[35]", 0x40304CBC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[36]", 0x40304CC0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[37]", 0x40304CC4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[38]", 0x40304CC8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[39]", 0x40304CCC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[40]", 0x40304CD0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[41]", 0x40304CD4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[42]", 0x40304CD8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[43]", 0x40304CDC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[44]", 0x40304CE0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[45]", 0x40304CE4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[46]", 0x40304CE8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[47]", 0x40304CEC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[48]", 0x40304CF0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[49]", 0x40304CF4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[50]", 0x40304CF8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[51]", 0x40304CFC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[52]", 0x40304D00, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[53]", 0x40304D04, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[54]", 0x40304D08, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[55]", 0x40304D0C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[56]", 0x40304D10, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[57]", 0x40304D14, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[58]", 0x40304D18, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[59]", 0x40304D1C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[60]", 0x40304D20, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[61]", 0x40304D24, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[62]", 0x40304D28, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[63]", 0x40304D2C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("ERFFEL[0]", 0x40307000, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[1]", 0x40307004, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[2]", 0x40307008, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[3]", 0x4030700C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[4]", 0x40307010, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[5]", 0x40307014, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[6]", 0x40307018, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[7]", 0x4030701C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[8]", 0x40307020, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[9]", 0x40307024, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[10]", 0x40307028, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[11]", 0x4030702C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[12]", 0x40307030, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[13]", 0x40307034, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[14]", 0x40307038, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[15]", 0x4030703C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[16]", 0x40307040, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[17]", 0x40307044, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[18]", 0x40307048, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[19]", 0x4030704C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[20]", 0x40307050, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[21]", 0x40307054, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[22]", 0x40307058, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[23]", 0x4030705C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[24]", 0x40307060, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[25]", 0x40307064, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[26]", 0x40307068, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[27]", 0x4030706C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[28]", 0x40307070, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[29]", 0x40307074, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[30]", 0x40307078, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[31]", 0x4030707C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[32]", 0x40307080, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[33]", 0x40307084, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[34]", 0x40307088, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[35]", 0x4030708C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[36]", 0x40307090, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[37]", 0x40307094, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[38]", 0x40307098, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[39]", 0x4030709C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[40]", 0x403070A0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[41]", 0x403070A4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[42]", 0x403070A8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[43]", 0x403070AC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[44]", 0x403070B0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[45]", 0x403070B4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[46]", 0x403070B8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[47]", 0x403070BC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[48]", 0x403070C0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[49]", 0x403070C4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[50]", 0x403070C8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[51]", 0x403070CC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[52]", 0x403070D0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[53]", 0x403070D4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[54]", 0x403070D8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[55]", 0x403070DC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[56]", 0x403070E0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[57]", 0x403070E4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[58]", 0x403070E8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[59]", 0x403070EC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[60]", 0x403070F0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[61]", 0x403070F4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[62]", 0x403070F8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[63]", 0x403070FC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[64]", 0x40307100, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[65]", 0x40307104, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[66]", 0x40307108, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[67]", 0x4030710C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[68]", 0x40307110, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[69]", 0x40307114, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[70]", 0x40307118, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[71]", 0x4030711C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[72]", 0x40307120, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[73]", 0x40307124, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[74]", 0x40307128, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[75]", 0x4030712C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[76]", 0x40307130, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[77]", 0x40307134, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[78]", 0x40307138, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[79]", 0x4030713C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[80]", 0x40307140, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[81]", 0x40307144, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[82]", 0x40307148, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[83]", 0x4030714C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[84]", 0x40307150, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[85]", 0x40307154, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[86]", 0x40307158, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[87]", 0x4030715C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[88]", 0x40307160, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[89]", 0x40307164, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[90]", 0x40307168, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[91]", 0x4030716C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[92]", 0x40307170, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[93]", 0x40307174, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[94]", 0x40307178, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[95]", 0x4030717C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[96]", 0x40307180, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[97]", 0x40307184, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[98]", 0x40307188, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[99]", 0x4030718C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[100]", 0x40307190, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[101]", 0x40307194, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[102]", 0x40307198, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[103]", 0x4030719C, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[104]", 0x403071A0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[105]", 0x403071A4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[106]", 0x403071A8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[107]", 0x403071AC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[108]", 0x403071B0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[109]", 0x403071B4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[110]", 0x403071B8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[111]", 0x403071BC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[112]", 0x403071C0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[113]", 0x403071C4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[114]", 0x403071C8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[115]", 0x403071CC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[116]", 0x403071D0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[117]", 0x403071D4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[118]", 0x403071D8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[119]", 0x403071DC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[120]", 0x403071E0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[121]", 0x403071E4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[122]", 0x403071E8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[123]", 0x403071EC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[124]", 0x403071F0, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[125]", 0x403071F4, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[126]", 0x403071F8, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
            Register("ERFFEL[127]", 0x403071FC, 32, "Enhanced RX FIFO Filter Element", [
                Field("FEL", 0, 32, "Filter Element Bits", [
                ]),
            ]),
        ])

class Module_CAN_1(Peripheral):
    def __init__(self):
        super().__init__("CAN_1", 0x40308000, 0xD30, [
            Register("MCR", 0x40308000, 32, "Module Configuration", [
                Field("MDIS", 31, 1, "Module Disable", [
                    EnumVal("flexcan_enabled", "0", "Enable"),
                    EnumVal("flexcan_disabled", "0x1", "Disable"),
                ]),
                Field("FRZ", 30, 1, "Freeze Enable", [
                    EnumVal("freeze_mode_disabled", "0", "Disable"),
                    EnumVal("freeze_mode_enabled", "0x1", "Enable"),
                ]),
                Field("RFEN", 29, 1, "RX FIFO Enable", [
                    EnumVal("id1", "0", "Disable"),
                    EnumVal("id2", "0x1", "Enable"),
                ]),
                Field("HALT", 28, 1, "Halt FlexCAN", [
                    EnumVal("HALT_disable", "0", "No request"),
                    EnumVal("HALT_enable", "0x1", "Enter Freeze mode, if MCR[FRZ] = 1."),
                ]),
                Field("NOTRDY", 27, 1, "FlexCAN Not Ready", [
                    EnumVal("id1", "0", "FlexCAN is in Normal mode, Listen-Only mode, or Loopback mode."),
                    EnumVal("id5", "0x1", "FlexCAN is in Disable mode or Freeze mode."),
                ]),
                Field("SOFTRST", 25, 1, "Soft Reset", [
                    EnumVal("SOFTRST_no_reset_request", "0", "No reset"),
                    EnumVal("SOFTRST_reset_registers", "0x1", "Soft reset affects reset registers"),
                ]),
                Field("FRZACK", 24, 1, "Freeze Mode Acknowledge", [
                    EnumVal("freeze_mode_no", "0", "Not in Freeze mode, prescaler running."),
                    EnumVal("freeze_mode_yes", "0x1", "In Freeze mode, prescaler stopped."),
                ]),
                Field("SUPV", 23, 1, "Supervisor Mode", [
                    EnumVal("id1", "0", "User mode"),
                    EnumVal("id2", "0x1", "Supervisor mode"),
                ]),
                Field("WRNEN", 21, 1, "Warning Interrupt Enable", [
                    EnumVal("TWRNINT_RWRNINT_inactive", "0", "Disable"),
                    EnumVal("TWRNINT_RWRNINT_active", "0x1", "Enable"),
                ]),
                Field("LPMACK", 20, 1, "Low-Power Mode Acknowledge", [
                    EnumVal("low_power_no", "0", "Not in a low-power mode"),
                    EnumVal("low_power_yes", "0x1", "In a low-power mode"),
                ]),
                Field("SRXDIS", 17, 1, "Self-Reception Disable", [
                    EnumVal("self_reception_enabled", "0", "Enable"),
                    EnumVal("self_reception_disabled", "0x1", "Disable"),
                ]),
                Field("IRMQ", 16, 1, "Individual RX Masking and Queue Enable", [
                    EnumVal("individual_rx_masking_disabled", "0", "Disable"),
                    EnumVal("individual_rx_masking_enabled", "0x1", "Enable"),
                ]),
                Field("DMA", 15, 1, "DMA Enable", [
                    EnumVal("id1", "0", "Disable"),
                    EnumVal("id2", "0x1", "Enable"),
                ]),
                Field("LPRIOEN", 13, 1, "Local Priority Enable", [
                    EnumVal("local_priority_disabled", "0", "Disable"),
                    EnumVal("local_priority_enabled", "0x1", "Enable"),
                ]),
                Field("AEN", 12, 1, "Abort Enable", [
                    EnumVal("abort_disabled", "0", "Disabled"),
                    EnumVal("abort_enabled", "0x1", "Enabled"),
                ]),
                Field("FDEN", 11, 1, "CAN FD Operation Enable", [
                    EnumVal("CAN_FD_disabled", "0", "Disable"),
                    EnumVal("CAN_FD_enabled", "0x1", "Enable"),
                ]),
                Field("IDAM", 8, 2, "ID Acceptance Mode", [
                    EnumVal("one_full_ID", "0", "Format A: One full ID (standard and extended) per ID filter table element."),
                    EnumVal("two_full_ID", "0x1", "Format B: Two full standard IDs or two partial 14-bit (standard and extended) IDs per ID filter table element."),
                    EnumVal("four_partial_ID", "0x2", "Format C: Four partial 8-bit standard IDs per ID filter table element."),
                    EnumVal("all_frames_rejected", "0x3", "Format D: All frames rejected."),
                ]),
                Field("MAXMB", 0, 7, "Number of the Last Message Buffer", [
                ]),
            ]),
            Register("CTRL1", 0x40308004, 32, "Control 1", [
                Field("PRESDIV", 24, 8, "Prescaler Division Factor", [
                ]),
                Field("RJW", 22, 2, "Resync Jump Width", [
                ]),
                Field("PSEG1", 19, 3, "Phase Segment 1", [
                ]),
                Field("PSEG2", 16, 3, "Phase Segment 2", [
                ]),
                Field("BOFFMSK", 15, 1, "Bus Off Interrupt Mask", [
                    EnumVal("bus_off_int_disabled", "0", "Interrupt disabled"),
                    EnumVal("bus_off_int_enabled", "0x1", "Interrupt enabled"),
                ]),
                Field("ERRMSK", 14, 1, "Error Interrupt Mask", [
                    EnumVal("error_int_disabled", "0", "Interrupt disabled"),
                    EnumVal("error_int_enabled", "0x1", "Interrupt enabled"),
                ]),
                Field("LPB", 12, 1, "Loopback Mode", [
                    EnumVal("loopback_disabled", "0", "Disabled"),
                    EnumVal("loopback_enabled", "0x1", "Enabled"),
                ]),
                Field("TWRNMSK", 11, 1, "TX Warning Interrupt Mask", [
                    EnumVal("tx_warning_int_disabled", "0", "Disabled"),
                    EnumVal("tx_warning_int_enabled", "0x1", "Enabled"),
                ]),
                Field("RWRNMSK", 10, 1, "RX Warning Interrupt Mask", [
                    EnumVal("rx_warning_int_disabled", "0", "Disabled"),
                    EnumVal("rx_warning_int_enabled", "0x1", "Enabled"),
                ]),
                Field("SMP", 7, 1, "CAN Bit Sampling", [
                    EnumVal("one_sample", "0", "One sample is used to determine the bit value."),
                    EnumVal("three_sample", "0x1", "Three samples are used to determine the value of the received bit: the regular one (sample point) and two preceding samples. A majority rule is used."),
                ]),
                Field("BOFFREC", 6, 1, "Bus Off Recovery", [
                    EnumVal("auto_recover_enabled", "0", "Enabled"),
                    EnumVal("auto_recover_disabled", "0x1", "Disabled"),
                ]),
                Field("TSYN", 5, 1, "Timer Sync", [
                    EnumVal("timer_sync_disabled", "0", "Disable"),
                    EnumVal("timer_sync_enabled", "0x1", "Enable"),
                ]),
                Field("LBUF", 4, 1, "Lowest Buffer Transmitted First", [
                    EnumVal("highest_buffer_first", "0", "Buffer with highest priority is transmitted first."),
                    EnumVal("lowest_buffer_first", "0x1", "Lowest number buffer is transmitted first."),
                ]),
                Field("LOM", 3, 1, "Listen-Only Mode", [
                    EnumVal("listen_only_mode_disabled", "0", "Listen-Only mode is deactivated."),
                    EnumVal("listen_only_mode_enabled", "0x1", "FlexCAN module operates in Listen-Only mode."),
                ]),
                Field("PROPSEG", 0, 3, "Propagation Segment", [
                ]),
            ]),
            Register("TIMER", 0x40308008, 32, "Free-Running Timer", [
                Field("TIMER", 0, 16, "Timer Value", [
                ]),
            ]),
            Register("RXMGMASK", 0x40308010, 32, "RX Message Buffers Global Mask", [
                Field("MG", 0, 32, "Global Mask for RX Message Buffers", [
                ]),
            ]),
            Register("RX14MASK", 0x40308014, 32, "Receive 14 Mask", [
                Field("RX14M", 0, 32, "RX Buffer 14 Mask Bits", [
                ]),
            ]),
            Register("RX15MASK", 0x40308018, 32, "Receive 15 Mask", [
                Field("RX15M", 0, 32, "RX Buffer 15 Mask Bits", [
                ]),
            ]),
            Register("ECR", 0x4030801C, 32, "Error Counter", [
                Field("RXERRCNT_FAST", 24, 8, "Receive Error Counter for Fast Bits", [
                ]),
                Field("TXERRCNT_FAST", 16, 8, "Transmit Error Counter for Fast Bits", [
                ]),
                Field("RXERRCNT", 8, 8, "Receive Error Counter", [
                ]),
                Field("TXERRCNT", 0, 8, "Transmit Error Counter", [
                ]),
            ]),
            Register("ESR1", 0x40308020, 32, "Error and Status 1", [
                Field("BIT1ERR_FAST", 31, 1, "Fast Bit1 Error Flag", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR_FAST", 30, 1, "Fast Bit0 Error Flag", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("CRCERR_FAST", 28, 1, "Fast Cyclic Redundancy Check Error Flag", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR_FAST", 27, 1, "Fast Form Error Flag", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A form error occurred since last read of this register."),
                ]),
                Field("STFERR_FAST", 26, 1, "Fast Stuffing Error Flag", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("ERROVR", 21, 1, "Error Overrun Flag", [
                    EnumVal("overrun_not_occurred", "0", "No overrun"),
                    EnumVal("overrun_occurred", "0x1", "Overrun"),
                ]),
                Field("ERRINT_FAST", 20, 1, "Fast Error Interrupt Flag", [
                    EnumVal("errors_data_phase_no", "0", "No such occurrence."),
                    EnumVal("errors_data_phase_yes", "0x1", "Error flag set in the data phase of CAN FD frames that have BRS = 1."),
                ]),
                Field("BOFFDONEINT", 19, 1, "Bus Off Done Interrupt Flag", [
                    EnumVal("bus_off_not_done", "0", "No such occurrence"),
                    EnumVal("bus_off_done", "0x1", "FlexCAN module has completed Bus Off process."),
                ]),
                Field("SYNCH", 18, 1, "CAN Synchronization Status Flag", [
                    EnumVal("CAN_bus_sync_no", "0", "Not synchronized"),
                    EnumVal("CAN_bus_sync_yes", "0x1", "Synchronized"),
                ]),
                Field("TWRNINT", 17, 1, "TX Warning Interrupt Flag", [
                    EnumVal("Tx_warning_int_no", "0", "No such occurrence"),
                    EnumVal("Tx_warning_int_yes", "0x1", "TX error counter changed from less than 96 to greater than or equal to 96."),
                ]),
                Field("RWRNINT", 16, 1, "RX Warning Interrupt Flag", [
                    EnumVal("Rx_warning_int_no", "0", "No such occurrence"),
                    EnumVal("Rx_warning_int_yes", "0x1", "RX error counter changed from less than 96 to greater than or equal to 96."),
                ]),
                Field("BIT1ERR", 15, 1, "Bit1 Error Flag", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR", 14, 1, "Bit0 Error Flag", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("ACKERR", 13, 1, "Acknowledge Error Flag", [
                    EnumVal("ACK_error_no", "0", "No error"),
                    EnumVal("ACK_error_yes", "0x1", "An ACK error occurred since last read of this register."),
                ]),
                Field("CRCERR", 12, 1, "Cyclic Redundancy Check Error Flag", [
                    EnumVal("CRC_error_no", "0", "No error"),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR", 11, 1, "Form Error Flag", [
                    EnumVal("form_error_no", "0", "No error"),
                    EnumVal("form_error_yes", "0x1", "A Form Error occurred since last read of this register."),
                ]),
                Field("STFERR", 10, 1, "Stuffing Error Flag", [
                    EnumVal("stuffing_error_no", "0", "No error"),
                    EnumVal("stuffing_error_yes", "0x1", "Error occurred since last read of this register."),
                ]),
                Field("TXWRN", 9, 1, "TX Error Warning Flag", [
                    EnumVal("TXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("TXERRCNT_GTE_96", "0x1", "TXERRCNT is 96 or greater."),
                ]),
                Field("RXWRN", 8, 1, "RX Error Warning Flag", [
                    EnumVal("RXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("RXERRCNT_GTE_96", "0x1", "RXERRCNT is greater than or equal to 96."),
                ]),
                Field("IDLE", 7, 1, "Idle", [
                    EnumVal("can_bus_not_idle", "0", "Not IDLE"),
                    EnumVal("can_bus_idle", "0x1", "IDLE"),
                ]),
                Field("TX", 6, 1, "FlexCAN In Transmission", [
                    EnumVal("transmit_message_no", "0", "Not transmitting"),
                    EnumVal("transmit_message_yes", "0x1", "Transmitting"),
                ]),
                Field("FLTCONF", 4, 2, "Fault Confinement State", [
                    EnumVal("error_active", "0", "Error Active"),
                    EnumVal("error_passive", "0x1", "Error Passive"),
                    EnumVal("bus_off", "#1x", "Bus Off"),
                ]),
                Field("RX", 3, 1, "FlexCAN in Reception Flag", [
                    EnumVal("DISABLE", "0", "Not receiving"),
                    EnumVal("ENABLE", "0x1", "Receiving"),
                ]),
                Field("BOFFINT", 2, 1, "Bus Off Interrupt Flag", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "FlexCAN module entered Bus Off state."),
                ]),
                Field("ERRINT", 1, 1, "Error Interrupt Flag", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "Indicates setting of any error flag in the Error and Status register."),
                ]),
            ]),
            Register("IMASK2", 0x40308024, 32, "Interrupt Masks 2", [
                Field("BUF63TO32M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IMASK1", 0x40308028, 32, "Interrupt Masks 1", [
                Field("BUF31TO0M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IFLAG2", 0x4030802C, 32, "Interrupt Flags 2", [
                Field("BUF63TO32I", 0, 32, "Buffer MBi Interrupt", [
                ]),
            ]),
            Register("IFLAG1", 0x40308030, 32, "Interrupt Flags 1", [
                Field("BUF31TO8I", 8, 24, "Buffer MBi Interrupt", [
                ]),
                Field("BUF7I", 7, 1, "Buffer MB7 Interrupt or RX FIFO Overflow", [
                    EnumVal("id1", "0", "No occurrence of MB7 completing transmission or reception, or no FIFO overflow."),
                    EnumVal("id2", "0x1", "MB7 completed transmission or reception, or FIFO overflow."),
                ]),
                Field("BUF6I", 6, 1, "Buffer MB6 Interrupt or RX FIFO Warning", [
                    EnumVal("id1", "0", "No occurrence of MB6 completing transmission or reception, or FIFO not almost full."),
                    EnumVal("id2", "0x1", "MB6 completed transmission or reception, or FIFO almost full."),
                ]),
                Field("BUF5I", 5, 1, "Buffer MB5 Interrupt or Frames available in RX FIFO", [
                    EnumVal("id1", "0", "No occurrence of completed transmission or reception, or no frames available"),
                    EnumVal("id2", "0x1", "MB5 completed transmission or reception, or frames available"),
                ]),
                Field("BUF4TO1I", 1, 4, "Buffer MBi Interrupt or Reserved", [
                ]),
                Field("BUF0I", 0, 1, "Buffer MB0 Interrupt or Clear FIFO bit", [
                    EnumVal("buffer_Tx_Rx_not_complete", "0", "MB0 has no occurrence of successfully completed transmission or reception."),
                    EnumVal("buffer_Tx_Rx_complete", "0x1", "MB0 has successfully completed transmission or reception."),
                ]),
            ]),
            Register("CTRL2", 0x40308034, 32, "Control 2", [
                Field("ERRMSK_FAST", 31, 1, "Error Interrupt Mask for Errors Detected in the Data Phase of Fast CAN FD Frames", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("BOFFDONEMSK", 30, 1, "Bus Off Done Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ECRWRE", 29, 1, "Error Correction Configuration Register Write Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("WRMFRZ", 28, 1, "Write Access to Memory in Freeze Mode", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("RFFN", 24, 4, "Number of Receive FIFO Filters", [
                ]),
                Field("TASD", 19, 5, "Transmission Arbitration Start Delay", [
                ]),
                Field("MRP", 18, 1, "Message Buffers Reception Priority", [
                    EnumVal("id2", "0", "Matching starts from RX FIFO and continues on message buffers."),
                    EnumVal("id4", "0x1", "Matching starts from message buffers and continues on RX FIFO."),
                ]),
                Field("RRS", 17, 1, "Remote Request Storing", [
                    EnumVal("remote_response_frame_not_generated", "0", "Generated"),
                    EnumVal("remote_response_frame_generated", "0x1", "Stored"),
                ]),
                Field("EACEN", 16, 1, "Entire Frame Arbitration Field Comparison Enable for RX Message Buffers", [
                    EnumVal("RTR_compare_no", "0", "Disable"),
                    EnumVal("RTR_compare_yes", "0x1", "Enable"),
                ]),
                Field("TIMER_SRC", 15, 1, "Timer Source", [
                    EnumVal("CAN_bit_clock", "0", "CAN bit clock"),
                    EnumVal("external_clock", "0x1", "External time tick"),
                ]),
                Field("PREXCEN", 14, 1, "Protocol Exception Enable", [
                    EnumVal("DISABLE", "0", "Disabled"),
                    EnumVal("ENABLE", "0x1", "Enabled"),
                ]),
                Field("BTE", 13, 1, "Bit Timing Expansion Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ISOCANFDEN", 12, 1, "ISO CAN FD Enable", [
                    EnumVal("non_ISO", "0", "Disable. FlexCAN operates using the non-ISO CAN FD protocol."),
                    EnumVal("ISO", "0x1", "Enable. FlexCAN operates using the ISO CAN FD protocol (ISO 11898-1:2015)."),
                ]),
                Field("EDFLTDIS", 11, 1, "Edge Filter Disable", [
                    EnumVal("ENABLE", "0", "Enabled"),
                    EnumVal("DISABLE", "0x1", "Disabled"),
                ]),
                Field("MBTSBASE", 8, 2, "Message Buffer Timestamp Base", [
                    EnumVal("base_TIMER", "0", "TIMER"),
                    EnumVal("base_lower_16", "0x1", "Lower 16 bits of high-resolution timer"),
                    EnumVal("base_upper_16", "0x2", "Upper 16 bits of high-resolution timer"),
                ]),
                Field("TSTAMPCAP", 6, 2, "Timestamp Capture Point", [
                    EnumVal("time_stamp_capture_disabled", "0", "Disabled"),
                    EnumVal("time_stamp_capture_frame_end_enabled", "0x1", "End of the CAN frame"),
                    EnumVal("time_stamp_capture_frame_start_enabled", "0x2", "Start of the CAN frame"),
                    EnumVal("time_stamp_capture_2_types_enabled", "0x3", "Start of frame for classical CAN frames; res bit for CAN FD frames"),
                ]),
            ]),
            Register("ESR2", 0x40308038, 32, "Error and Status 2", [
                Field("LPTM", 16, 7, "Lowest Priority TX Message Buffer", [
                ]),
                Field("VPS", 14, 1, "Valid Priority Status", [
                    EnumVal("invalid", "0", "Invalid"),
                    EnumVal("valid", "0x1", "Valid"),
                ]),
                Field("IMB", 13, 1, "Inactive Message Buffer", [
                    EnumVal("inactive_mailbox_no", "0", "Message buffer indicated by ESR2[LPTM] is not inactive."),
                    EnumVal("inactive_mailbox_yes", "0x1", "At least one message buffer is inactive."),
                ]),
            ]),
            Register("CRCR", 0x40308044, 32, "Cyclic Redundancy Check", [
                Field("MBCRC", 16, 7, "CRC Message Buffer", [
                ]),
                Field("TXCRC", 0, 15, "Transmitted CRC value", [
                ]),
            ]),
            Register("RXFGMASK", 0x40308048, 32, "RX FIFO Global Mask", [
                Field("FGM", 0, 32, "RX FIFO Global Mask Bits", [
                ]),
            ]),
            Register("RXFIR", 0x4030804C, 32, "RX FIFO Information", [
                Field("IDHIT", 0, 9, "Identifier Acceptance Filter Hit Indicator", [
                ]),
            ]),
            Register("CBT", 0x40308050, 32, "CAN Bit Timing", [
                Field("BTF", 31, 1, "Bit Timing Format Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("EPRESDIV", 21, 10, "Extended Prescaler Division Factor", [
                ]),
                Field("ERJW", 16, 5, "Extended Resync Jump Width", [
                ]),
                Field("EPROPSEG", 10, 6, "Extended Propagation Segment", [
                ]),
                Field("EPSEG1", 5, 5, "Extended Phase Segment 1", [
                ]),
                Field("EPSEG2", 0, 5, "Extended Phase Segment 2", [
                ]),
            ]),
            Register("RXIMR[0]", 0x40308880, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[1]", 0x40308884, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[2]", 0x40308888, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[3]", 0x4030888C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[4]", 0x40308890, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[5]", 0x40308894, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[6]", 0x40308898, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[7]", 0x4030889C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[8]", 0x403088A0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[9]", 0x403088A4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[10]", 0x403088A8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[11]", 0x403088AC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[12]", 0x403088B0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[13]", 0x403088B4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[14]", 0x403088B8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[15]", 0x403088BC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[16]", 0x403088C0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[17]", 0x403088C4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[18]", 0x403088C8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[19]", 0x403088CC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[20]", 0x403088D0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[21]", 0x403088D4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[22]", 0x403088D8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[23]", 0x403088DC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[24]", 0x403088E0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[25]", 0x403088E4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[26]", 0x403088E8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[27]", 0x403088EC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[28]", 0x403088F0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[29]", 0x403088F4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[30]", 0x403088F8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[31]", 0x403088FC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[32]", 0x40308900, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[33]", 0x40308904, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[34]", 0x40308908, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[35]", 0x4030890C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[36]", 0x40308910, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[37]", 0x40308914, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[38]", 0x40308918, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[39]", 0x4030891C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[40]", 0x40308920, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[41]", 0x40308924, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[42]", 0x40308928, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[43]", 0x4030892C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[44]", 0x40308930, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[45]", 0x40308934, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[46]", 0x40308938, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[47]", 0x4030893C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[48]", 0x40308940, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[49]", 0x40308944, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[50]", 0x40308948, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[51]", 0x4030894C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[52]", 0x40308950, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[53]", 0x40308954, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[54]", 0x40308958, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[55]", 0x4030895C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[56]", 0x40308960, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[57]", 0x40308964, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[58]", 0x40308968, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[59]", 0x4030896C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[60]", 0x40308970, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[61]", 0x40308974, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[62]", 0x40308978, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[63]", 0x4030897C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("MECR", 0x40308AE0, 32, "Memory Error Control", [
                Field("ECRWRDIS", 31, 1, "Error Configuration Register Write Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("HANCEI_MSK", 19, 1, "Host Access with Non-Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FANCEI_MSK", 18, 1, "FlexCAN Access with Non-Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("CEI_MSK", 16, 1, "Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("HAERRIE", 15, 1, "Host Access Error Injection Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FAERRIE", 14, 1, "FlexCAN Access Error Injection Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("EXTERRIE", 13, 1, "Extended Error Injection Enable", [
                    EnumVal("inject_32_bit", "0", "Disable. Apply error injection only to the 32-bit word."),
                    EnumVal("inject_64_bit", "0x1", "Enable. Apply error injection to the 64-bit word."),
                ]),
                Field("RERRDIS", 9, 1, "Error Report Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("ECCDIS", 8, 1, "Error Correction Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("NCEFAFRZ", 7, 1, "Non-Correctable Errors in FlexCAN Access Put Device in Freeze Mode", [
                    EnumVal("normal", "0", "Keep normal operation."),
                    EnumVal("freeze", "0x1", "Put FlexCAN in Freeze mode (see section \"Freeze mode\")."),
                ]),
            ]),
            Register("ERRIAR", 0x40308AE4, 32, "Error Injection Address", [
                Field("INJADDR_H", 2, 12, "Error Injection Address High", [
                ]),
                Field("INJADDR_L", 0, 2, "Error Injection Address Low", [
                ]),
            ]),
            Register("ERRIDPR", 0x40308AE8, 32, "Error Injection Data Pattern", [
                Field("DFLIP", 0, 32, "Data Flip Pattern", [
                ]),
            ]),
            Register("ERRIPPR", 0x40308AEC, 32, "Error Injection Parity Pattern", [
                Field("PFLIP3", 24, 5, "Parity Flip Pattern for Byte 3 (Most Significant)", [
                ]),
                Field("PFLIP2", 16, 5, "Parity Flip Pattern for Byte 2", [
                ]),
                Field("PFLIP1", 8, 5, "Parity Flip Pattern for Byte 1", [
                ]),
                Field("PFLIP0", 0, 5, "Parity Flip Pattern for Byte 0 (Least Significant)", [
                ]),
            ]),
            Register("RERRAR", 0x40308AF0, 32, "Error Report Address", [
                Field("NCE", 24, 1, "Non-Correctable Error", [
                    EnumVal("correctable", "0", "Reporting a correctable error"),
                    EnumVal("non_correctable", "0x1", "Reporting a non-correctable error"),
                ]),
                Field("SAID", 16, 3, "SAID", [
                ]),
                Field("ERRADDR", 0, 14, "Address Where Error Detected", [
                ]),
            ]),
            Register("RERRDR", 0x40308AF4, 32, "Error Report Data", [
                Field("RDATA", 0, 32, "Raw Data Word Read from Memory with Error", [
                ]),
            ]),
            Register("RERRSYNR", 0x40308AF8, 32, "Error Report Syndrome", [
                Field("BE3", 31, 1, "Byte Enabled for Byte 3 (Most Significant)", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND3", 24, 5, "Error Syndrome for Byte 3 (Most Significant)", [
                ]),
                Field("BE2", 23, 1, "Byte Enabled for Byte 2", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND2", 16, 5, "Error Syndrome for Byte 2", [
                ]),
                Field("BE1", 15, 1, "Byte Enabled for Byte 1", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND1", 8, 5, "Error Syndrome for Byte 1", [
                ]),
                Field("BE0", 7, 1, "Byte Enabled for Byte 0 (Least Significant)", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND0", 0, 5, "Error Syndrome for Byte 0 (Least Significant)", [
                ]),
            ]),
            Register("ERRSR", 0x40308AFC, 32, "Error Status", [
                Field("HANCEIF", 19, 1, "Host Access with Noncorrectable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("FANCEIF", 18, 1, "FlexCAN Access with Non-Correctable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("CEIF", 16, 1, "Correctable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("HANCEIOF", 3, 1, "Host Access With Non-Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("FANCEIOF", 2, 1, "FlexCAN Access with Non-Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("CEIOF", 0, 1, "Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
            ]),
            Register("EPRS", 0x40308BF0, 32, "Enhanced CAN Bit Timing Prescalers", [
                Field("EDPRESDIV", 16, 10, "Extended Data Phase Prescaler Division Factor", [
                ]),
                Field("ENPRESDIV", 0, 10, "Extended Nominal Prescaler Division Factor", [
                ]),
            ]),
            Register("ENCBT", 0x40308BF4, 32, "Enhanced Nominal CAN Bit Timing", [
                Field("NRJW", 22, 7, "Nominal Resynchronization Jump Width", [
                ]),
                Field("NTSEG2", 12, 7, "Nominal Time Segment 2", [
                ]),
                Field("NTSEG1", 0, 8, "Nominal Time Segment 1", [
                ]),
            ]),
            Register("EDCBT", 0x40308BF8, 32, "Enhanced Data Phase CAN Bit Timing", [
                Field("DRJW", 22, 4, "Data Phase Resynchronization Jump Width", [
                ]),
                Field("DTSEG2", 12, 4, "Data Phase Time Segment 2", [
                ]),
                Field("DTSEG1", 0, 5, "Data Phase Segment 1", [
                ]),
            ]),
            Register("ETDC", 0x40308BFC, 32, "Enhanced Transceiver Delay Compensation", [
                Field("ETDCEN", 31, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDMDIS", 30, 1, "Transceiver Delay Measurement Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("ETDCOFF", 16, 7, "Enhanced Transceiver Delay Compensation Offset", [
                ]),
                Field("ETDCFAIL", 15, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "In range"),
                    EnumVal("out_of_range", "0x1", "Out of range"),
                ]),
                Field("ETDCVAL", 0, 8, "Enhanced Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCTRL", 0x40308C00, 32, "CAN FD Control", [
                Field("FDRATE", 31, 1, "Bit Rate Switch Enable", [
                    EnumVal("nominal", "0", "Disable"),
                    EnumVal("bit_rate_switching", "0x1", "Enable"),
                ]),
                Field("MBDSR1", 19, 2, "Message Buffer Data Size for Region 1", [
                    EnumVal("R1_8_bytes", "0", "8 bytes"),
                    EnumVal("R1_16_bytes", "0x1", "16 bytes"),
                    EnumVal("R1_32_bytes", "0x2", "32 bytes"),
                    EnumVal("R1_64_bytes", "0x3", "64 bytes"),
                ]),
                Field("MBDSR0", 16, 2, "Message Buffer Data Size for Region 0", [
                    EnumVal("R0_8_bytes", "0", "8 bytes"),
                    EnumVal("R0_16_bytes", "0x1", "16 bytes"),
                    EnumVal("R0_32_bytes", "0x2", "32 bytes"),
                    EnumVal("R0_64_bytes", "0x3", "64 bytes"),
                ]),
                Field("TDCEN", 15, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDCFAIL", 14, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "In range"),
                    EnumVal("out_of_range", "0x1", "Out of range"),
                ]),
                Field("TDCOFF", 8, 5, "Transceiver Delay Compensation Offset", [
                ]),
                Field("TDCVAL", 0, 6, "Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCBT", 0x40308C04, 32, "CAN FD Bit Timing", [
                Field("FPRESDIV", 20, 10, "Fast Prescaler Division Factor", [
                ]),
                Field("FRJW", 16, 3, "Fast Resync Jump Width", [
                ]),
                Field("FPROPSEG", 10, 5, "Fast Propagation Segment", [
                ]),
                Field("FPSEG1", 5, 3, "Fast Phase Segment 1", [
                ]),
                Field("FPSEG2", 0, 3, "Fast Phase Segment 2", [
                ]),
            ]),
            Register("FDCRC", 0x40308C08, 32, "CAN FD CRC", [
                Field("FD_MBCRC", 24, 7, "CRC Message Buffer Number for FD_TXCRC", [
                ]),
                Field("FD_TXCRC", 0, 21, "Extended Transmitted CRC value", [
                ]),
            ]),
            Register("HR_TIME_STAMP[0]", 0x40308C30, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[1]", 0x40308C34, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[2]", 0x40308C38, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[3]", 0x40308C3C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[4]", 0x40308C40, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[5]", 0x40308C44, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[6]", 0x40308C48, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[7]", 0x40308C4C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[8]", 0x40308C50, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[9]", 0x40308C54, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[10]", 0x40308C58, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[11]", 0x40308C5C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[12]", 0x40308C60, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[13]", 0x40308C64, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[14]", 0x40308C68, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[15]", 0x40308C6C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[16]", 0x40308C70, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[17]", 0x40308C74, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[18]", 0x40308C78, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[19]", 0x40308C7C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[20]", 0x40308C80, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[21]", 0x40308C84, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[22]", 0x40308C88, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[23]", 0x40308C8C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[24]", 0x40308C90, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[25]", 0x40308C94, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[26]", 0x40308C98, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[27]", 0x40308C9C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[28]", 0x40308CA0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[29]", 0x40308CA4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[30]", 0x40308CA8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[31]", 0x40308CAC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[32]", 0x40308CB0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[33]", 0x40308CB4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[34]", 0x40308CB8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[35]", 0x40308CBC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[36]", 0x40308CC0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[37]", 0x40308CC4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[38]", 0x40308CC8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[39]", 0x40308CCC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[40]", 0x40308CD0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[41]", 0x40308CD4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[42]", 0x40308CD8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[43]", 0x40308CDC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[44]", 0x40308CE0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[45]", 0x40308CE4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[46]", 0x40308CE8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[47]", 0x40308CEC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[48]", 0x40308CF0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[49]", 0x40308CF4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[50]", 0x40308CF8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[51]", 0x40308CFC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[52]", 0x40308D00, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[53]", 0x40308D04, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[54]", 0x40308D08, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[55]", 0x40308D0C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[56]", 0x40308D10, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[57]", 0x40308D14, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[58]", 0x40308D18, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[59]", 0x40308D1C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[60]", 0x40308D20, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[61]", 0x40308D24, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[62]", 0x40308D28, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[63]", 0x40308D2C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
        ])

class Module_CAN_2(Peripheral):
    def __init__(self):
        super().__init__("CAN_2", 0x4030C000, 0xD30, [
            Register("MCR", 0x4030C000, 32, "Module Configuration", [
                Field("MDIS", 31, 1, "Module Disable", [
                    EnumVal("flexcan_enabled", "0", "Enable"),
                    EnumVal("flexcan_disabled", "0x1", "Disable"),
                ]),
                Field("FRZ", 30, 1, "Freeze Enable", [
                    EnumVal("freeze_mode_disabled", "0", "Disable"),
                    EnumVal("freeze_mode_enabled", "0x1", "Enable"),
                ]),
                Field("RFEN", 29, 1, "RX FIFO Enable", [
                    EnumVal("id1", "0", "Disable"),
                    EnumVal("id2", "0x1", "Enable"),
                ]),
                Field("HALT", 28, 1, "Halt FlexCAN", [
                    EnumVal("HALT_disable", "0", "No request"),
                    EnumVal("HALT_enable", "0x1", "Enter Freeze mode, if MCR[FRZ] = 1."),
                ]),
                Field("NOTRDY", 27, 1, "FlexCAN Not Ready", [
                    EnumVal("id1", "0", "FlexCAN is in Normal mode, Listen-Only mode, or Loopback mode."),
                    EnumVal("id5", "0x1", "FlexCAN is in Disable mode or Freeze mode."),
                ]),
                Field("SOFTRST", 25, 1, "Soft Reset", [
                    EnumVal("SOFTRST_no_reset_request", "0", "No reset"),
                    EnumVal("SOFTRST_reset_registers", "0x1", "Soft reset affects reset registers"),
                ]),
                Field("FRZACK", 24, 1, "Freeze Mode Acknowledge", [
                    EnumVal("freeze_mode_no", "0", "Not in Freeze mode, prescaler running."),
                    EnumVal("freeze_mode_yes", "0x1", "In Freeze mode, prescaler stopped."),
                ]),
                Field("SUPV", 23, 1, "Supervisor Mode", [
                    EnumVal("id1", "0", "User mode"),
                    EnumVal("id2", "0x1", "Supervisor mode"),
                ]),
                Field("WRNEN", 21, 1, "Warning Interrupt Enable", [
                    EnumVal("TWRNINT_RWRNINT_inactive", "0", "Disable"),
                    EnumVal("TWRNINT_RWRNINT_active", "0x1", "Enable"),
                ]),
                Field("LPMACK", 20, 1, "Low-Power Mode Acknowledge", [
                    EnumVal("low_power_no", "0", "Not in a low-power mode"),
                    EnumVal("low_power_yes", "0x1", "In a low-power mode"),
                ]),
                Field("SRXDIS", 17, 1, "Self-Reception Disable", [
                    EnumVal("self_reception_enabled", "0", "Enable"),
                    EnumVal("self_reception_disabled", "0x1", "Disable"),
                ]),
                Field("IRMQ", 16, 1, "Individual RX Masking and Queue Enable", [
                    EnumVal("individual_rx_masking_disabled", "0", "Disable"),
                    EnumVal("individual_rx_masking_enabled", "0x1", "Enable"),
                ]),
                Field("DMA", 15, 1, "DMA Enable", [
                    EnumVal("id1", "0", "Disable"),
                    EnumVal("id2", "0x1", "Enable"),
                ]),
                Field("LPRIOEN", 13, 1, "Local Priority Enable", [
                    EnumVal("local_priority_disabled", "0", "Disable"),
                    EnumVal("local_priority_enabled", "0x1", "Enable"),
                ]),
                Field("AEN", 12, 1, "Abort Enable", [
                    EnumVal("abort_disabled", "0", "Disabled"),
                    EnumVal("abort_enabled", "0x1", "Enabled"),
                ]),
                Field("FDEN", 11, 1, "CAN FD Operation Enable", [
                    EnumVal("CAN_FD_disabled", "0", "Disable"),
                    EnumVal("CAN_FD_enabled", "0x1", "Enable"),
                ]),
                Field("IDAM", 8, 2, "ID Acceptance Mode", [
                    EnumVal("one_full_ID", "0", "Format A: One full ID (standard and extended) per ID filter table element."),
                    EnumVal("two_full_ID", "0x1", "Format B: Two full standard IDs or two partial 14-bit (standard and extended) IDs per ID filter table element."),
                    EnumVal("four_partial_ID", "0x2", "Format C: Four partial 8-bit standard IDs per ID filter table element."),
                    EnumVal("all_frames_rejected", "0x3", "Format D: All frames rejected."),
                ]),
                Field("MAXMB", 0, 7, "Number of the Last Message Buffer", [
                ]),
            ]),
            Register("CTRL1", 0x4030C004, 32, "Control 1", [
                Field("PRESDIV", 24, 8, "Prescaler Division Factor", [
                ]),
                Field("RJW", 22, 2, "Resync Jump Width", [
                ]),
                Field("PSEG1", 19, 3, "Phase Segment 1", [
                ]),
                Field("PSEG2", 16, 3, "Phase Segment 2", [
                ]),
                Field("BOFFMSK", 15, 1, "Bus Off Interrupt Mask", [
                    EnumVal("bus_off_int_disabled", "0", "Interrupt disabled"),
                    EnumVal("bus_off_int_enabled", "0x1", "Interrupt enabled"),
                ]),
                Field("ERRMSK", 14, 1, "Error Interrupt Mask", [
                    EnumVal("error_int_disabled", "0", "Interrupt disabled"),
                    EnumVal("error_int_enabled", "0x1", "Interrupt enabled"),
                ]),
                Field("LPB", 12, 1, "Loopback Mode", [
                    EnumVal("loopback_disabled", "0", "Disabled"),
                    EnumVal("loopback_enabled", "0x1", "Enabled"),
                ]),
                Field("TWRNMSK", 11, 1, "TX Warning Interrupt Mask", [
                    EnumVal("tx_warning_int_disabled", "0", "Disabled"),
                    EnumVal("tx_warning_int_enabled", "0x1", "Enabled"),
                ]),
                Field("RWRNMSK", 10, 1, "RX Warning Interrupt Mask", [
                    EnumVal("rx_warning_int_disabled", "0", "Disabled"),
                    EnumVal("rx_warning_int_enabled", "0x1", "Enabled"),
                ]),
                Field("SMP", 7, 1, "CAN Bit Sampling", [
                    EnumVal("one_sample", "0", "One sample is used to determine the bit value."),
                    EnumVal("three_sample", "0x1", "Three samples are used to determine the value of the received bit: the regular one (sample point) and two preceding samples. A majority rule is used."),
                ]),
                Field("BOFFREC", 6, 1, "Bus Off Recovery", [
                    EnumVal("auto_recover_enabled", "0", "Enabled"),
                    EnumVal("auto_recover_disabled", "0x1", "Disabled"),
                ]),
                Field("TSYN", 5, 1, "Timer Sync", [
                    EnumVal("timer_sync_disabled", "0", "Disable"),
                    EnumVal("timer_sync_enabled", "0x1", "Enable"),
                ]),
                Field("LBUF", 4, 1, "Lowest Buffer Transmitted First", [
                    EnumVal("highest_buffer_first", "0", "Buffer with highest priority is transmitted first."),
                    EnumVal("lowest_buffer_first", "0x1", "Lowest number buffer is transmitted first."),
                ]),
                Field("LOM", 3, 1, "Listen-Only Mode", [
                    EnumVal("listen_only_mode_disabled", "0", "Listen-Only mode is deactivated."),
                    EnumVal("listen_only_mode_enabled", "0x1", "FlexCAN module operates in Listen-Only mode."),
                ]),
                Field("PROPSEG", 0, 3, "Propagation Segment", [
                ]),
            ]),
            Register("TIMER", 0x4030C008, 32, "Free-Running Timer", [
                Field("TIMER", 0, 16, "Timer Value", [
                ]),
            ]),
            Register("RXMGMASK", 0x4030C010, 32, "RX Message Buffers Global Mask", [
                Field("MG", 0, 32, "Global Mask for RX Message Buffers", [
                ]),
            ]),
            Register("RX14MASK", 0x4030C014, 32, "Receive 14 Mask", [
                Field("RX14M", 0, 32, "RX Buffer 14 Mask Bits", [
                ]),
            ]),
            Register("RX15MASK", 0x4030C018, 32, "Receive 15 Mask", [
                Field("RX15M", 0, 32, "RX Buffer 15 Mask Bits", [
                ]),
            ]),
            Register("ECR", 0x4030C01C, 32, "Error Counter", [
                Field("RXERRCNT_FAST", 24, 8, "Receive Error Counter for Fast Bits", [
                ]),
                Field("TXERRCNT_FAST", 16, 8, "Transmit Error Counter for Fast Bits", [
                ]),
                Field("RXERRCNT", 8, 8, "Receive Error Counter", [
                ]),
                Field("TXERRCNT", 0, 8, "Transmit Error Counter", [
                ]),
            ]),
            Register("ESR1", 0x4030C020, 32, "Error and Status 1", [
                Field("BIT1ERR_FAST", 31, 1, "Fast Bit1 Error Flag", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR_FAST", 30, 1, "Fast Bit0 Error Flag", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("CRCERR_FAST", 28, 1, "Fast Cyclic Redundancy Check Error Flag", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR_FAST", 27, 1, "Fast Form Error Flag", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A form error occurred since last read of this register."),
                ]),
                Field("STFERR_FAST", 26, 1, "Fast Stuffing Error Flag", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("ERROVR", 21, 1, "Error Overrun Flag", [
                    EnumVal("overrun_not_occurred", "0", "No overrun"),
                    EnumVal("overrun_occurred", "0x1", "Overrun"),
                ]),
                Field("ERRINT_FAST", 20, 1, "Fast Error Interrupt Flag", [
                    EnumVal("errors_data_phase_no", "0", "No such occurrence."),
                    EnumVal("errors_data_phase_yes", "0x1", "Error flag set in the data phase of CAN FD frames that have BRS = 1."),
                ]),
                Field("BOFFDONEINT", 19, 1, "Bus Off Done Interrupt Flag", [
                    EnumVal("bus_off_not_done", "0", "No such occurrence"),
                    EnumVal("bus_off_done", "0x1", "FlexCAN module has completed Bus Off process."),
                ]),
                Field("SYNCH", 18, 1, "CAN Synchronization Status Flag", [
                    EnumVal("CAN_bus_sync_no", "0", "Not synchronized"),
                    EnumVal("CAN_bus_sync_yes", "0x1", "Synchronized"),
                ]),
                Field("TWRNINT", 17, 1, "TX Warning Interrupt Flag", [
                    EnumVal("Tx_warning_int_no", "0", "No such occurrence"),
                    EnumVal("Tx_warning_int_yes", "0x1", "TX error counter changed from less than 96 to greater than or equal to 96."),
                ]),
                Field("RWRNINT", 16, 1, "RX Warning Interrupt Flag", [
                    EnumVal("Rx_warning_int_no", "0", "No such occurrence"),
                    EnumVal("Rx_warning_int_yes", "0x1", "RX error counter changed from less than 96 to greater than or equal to 96."),
                ]),
                Field("BIT1ERR", 15, 1, "Bit1 Error Flag", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR", 14, 1, "Bit0 Error Flag", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("ACKERR", 13, 1, "Acknowledge Error Flag", [
                    EnumVal("ACK_error_no", "0", "No error"),
                    EnumVal("ACK_error_yes", "0x1", "An ACK error occurred since last read of this register."),
                ]),
                Field("CRCERR", 12, 1, "Cyclic Redundancy Check Error Flag", [
                    EnumVal("CRC_error_no", "0", "No error"),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR", 11, 1, "Form Error Flag", [
                    EnumVal("form_error_no", "0", "No error"),
                    EnumVal("form_error_yes", "0x1", "A Form Error occurred since last read of this register."),
                ]),
                Field("STFERR", 10, 1, "Stuffing Error Flag", [
                    EnumVal("stuffing_error_no", "0", "No error"),
                    EnumVal("stuffing_error_yes", "0x1", "Error occurred since last read of this register."),
                ]),
                Field("TXWRN", 9, 1, "TX Error Warning Flag", [
                    EnumVal("TXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("TXERRCNT_GTE_96", "0x1", "TXERRCNT is 96 or greater."),
                ]),
                Field("RXWRN", 8, 1, "RX Error Warning Flag", [
                    EnumVal("RXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("RXERRCNT_GTE_96", "0x1", "RXERRCNT is greater than or equal to 96."),
                ]),
                Field("IDLE", 7, 1, "Idle", [
                    EnumVal("can_bus_not_idle", "0", "Not IDLE"),
                    EnumVal("can_bus_idle", "0x1", "IDLE"),
                ]),
                Field("TX", 6, 1, "FlexCAN In Transmission", [
                    EnumVal("transmit_message_no", "0", "Not transmitting"),
                    EnumVal("transmit_message_yes", "0x1", "Transmitting"),
                ]),
                Field("FLTCONF", 4, 2, "Fault Confinement State", [
                    EnumVal("error_active", "0", "Error Active"),
                    EnumVal("error_passive", "0x1", "Error Passive"),
                    EnumVal("bus_off", "#1x", "Bus Off"),
                ]),
                Field("RX", 3, 1, "FlexCAN in Reception Flag", [
                    EnumVal("DISABLE", "0", "Not receiving"),
                    EnumVal("ENABLE", "0x1", "Receiving"),
                ]),
                Field("BOFFINT", 2, 1, "Bus Off Interrupt Flag", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "FlexCAN module entered Bus Off state."),
                ]),
                Field("ERRINT", 1, 1, "Error Interrupt Flag", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "Indicates setting of any error flag in the Error and Status register."),
                ]),
            ]),
            Register("IMASK2", 0x4030C024, 32, "Interrupt Masks 2", [
                Field("BUF63TO32M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IMASK1", 0x4030C028, 32, "Interrupt Masks 1", [
                Field("BUF31TO0M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IFLAG2", 0x4030C02C, 32, "Interrupt Flags 2", [
                Field("BUF63TO32I", 0, 32, "Buffer MBi Interrupt", [
                ]),
            ]),
            Register("IFLAG1", 0x4030C030, 32, "Interrupt Flags 1", [
                Field("BUF31TO8I", 8, 24, "Buffer MBi Interrupt", [
                ]),
                Field("BUF7I", 7, 1, "Buffer MB7 Interrupt or RX FIFO Overflow", [
                    EnumVal("id1", "0", "No occurrence of MB7 completing transmission or reception, or no FIFO overflow."),
                    EnumVal("id2", "0x1", "MB7 completed transmission or reception, or FIFO overflow."),
                ]),
                Field("BUF6I", 6, 1, "Buffer MB6 Interrupt or RX FIFO Warning", [
                    EnumVal("id1", "0", "No occurrence of MB6 completing transmission or reception, or FIFO not almost full."),
                    EnumVal("id2", "0x1", "MB6 completed transmission or reception, or FIFO almost full."),
                ]),
                Field("BUF5I", 5, 1, "Buffer MB5 Interrupt or Frames available in RX FIFO", [
                    EnumVal("id1", "0", "No occurrence of completed transmission or reception, or no frames available"),
                    EnumVal("id2", "0x1", "MB5 completed transmission or reception, or frames available"),
                ]),
                Field("BUF4TO1I", 1, 4, "Buffer MBi Interrupt or Reserved", [
                ]),
                Field("BUF0I", 0, 1, "Buffer MB0 Interrupt or Clear FIFO bit", [
                    EnumVal("buffer_Tx_Rx_not_complete", "0", "MB0 has no occurrence of successfully completed transmission or reception."),
                    EnumVal("buffer_Tx_Rx_complete", "0x1", "MB0 has successfully completed transmission or reception."),
                ]),
            ]),
            Register("CTRL2", 0x4030C034, 32, "Control 2", [
                Field("ERRMSK_FAST", 31, 1, "Error Interrupt Mask for Errors Detected in the Data Phase of Fast CAN FD Frames", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("BOFFDONEMSK", 30, 1, "Bus Off Done Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ECRWRE", 29, 1, "Error Correction Configuration Register Write Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("WRMFRZ", 28, 1, "Write Access to Memory in Freeze Mode", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("RFFN", 24, 4, "Number of Receive FIFO Filters", [
                ]),
                Field("TASD", 19, 5, "Transmission Arbitration Start Delay", [
                ]),
                Field("MRP", 18, 1, "Message Buffers Reception Priority", [
                    EnumVal("id2", "0", "Matching starts from RX FIFO and continues on message buffers."),
                    EnumVal("id4", "0x1", "Matching starts from message buffers and continues on RX FIFO."),
                ]),
                Field("RRS", 17, 1, "Remote Request Storing", [
                    EnumVal("remote_response_frame_not_generated", "0", "Generated"),
                    EnumVal("remote_response_frame_generated", "0x1", "Stored"),
                ]),
                Field("EACEN", 16, 1, "Entire Frame Arbitration Field Comparison Enable for RX Message Buffers", [
                    EnumVal("RTR_compare_no", "0", "Disable"),
                    EnumVal("RTR_compare_yes", "0x1", "Enable"),
                ]),
                Field("TIMER_SRC", 15, 1, "Timer Source", [
                    EnumVal("CAN_bit_clock", "0", "CAN bit clock"),
                    EnumVal("external_clock", "0x1", "External time tick"),
                ]),
                Field("PREXCEN", 14, 1, "Protocol Exception Enable", [
                    EnumVal("DISABLE", "0", "Disabled"),
                    EnumVal("ENABLE", "0x1", "Enabled"),
                ]),
                Field("BTE", 13, 1, "Bit Timing Expansion Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("ISOCANFDEN", 12, 1, "ISO CAN FD Enable", [
                    EnumVal("non_ISO", "0", "Disable. FlexCAN operates using the non-ISO CAN FD protocol."),
                    EnumVal("ISO", "0x1", "Enable. FlexCAN operates using the ISO CAN FD protocol (ISO 11898-1:2015)."),
                ]),
                Field("EDFLTDIS", 11, 1, "Edge Filter Disable", [
                    EnumVal("ENABLE", "0", "Enabled"),
                    EnumVal("DISABLE", "0x1", "Disabled"),
                ]),
                Field("MBTSBASE", 8, 2, "Message Buffer Timestamp Base", [
                    EnumVal("base_TIMER", "0", "TIMER"),
                    EnumVal("base_lower_16", "0x1", "Lower 16 bits of high-resolution timer"),
                    EnumVal("base_upper_16", "0x2", "Upper 16 bits of high-resolution timer"),
                ]),
                Field("TSTAMPCAP", 6, 2, "Timestamp Capture Point", [
                    EnumVal("time_stamp_capture_disabled", "0", "Disabled"),
                    EnumVal("time_stamp_capture_frame_end_enabled", "0x1", "End of the CAN frame"),
                    EnumVal("time_stamp_capture_frame_start_enabled", "0x2", "Start of the CAN frame"),
                    EnumVal("time_stamp_capture_2_types_enabled", "0x3", "Start of frame for classical CAN frames; res bit for CAN FD frames"),
                ]),
            ]),
            Register("ESR2", 0x4030C038, 32, "Error and Status 2", [
                Field("LPTM", 16, 7, "Lowest Priority TX Message Buffer", [
                ]),
                Field("VPS", 14, 1, "Valid Priority Status", [
                    EnumVal("invalid", "0", "Invalid"),
                    EnumVal("valid", "0x1", "Valid"),
                ]),
                Field("IMB", 13, 1, "Inactive Message Buffer", [
                    EnumVal("inactive_mailbox_no", "0", "Message buffer indicated by ESR2[LPTM] is not inactive."),
                    EnumVal("inactive_mailbox_yes", "0x1", "At least one message buffer is inactive."),
                ]),
            ]),
            Register("CRCR", 0x4030C044, 32, "Cyclic Redundancy Check", [
                Field("MBCRC", 16, 7, "CRC Message Buffer", [
                ]),
                Field("TXCRC", 0, 15, "Transmitted CRC value", [
                ]),
            ]),
            Register("RXFGMASK", 0x4030C048, 32, "RX FIFO Global Mask", [
                Field("FGM", 0, 32, "RX FIFO Global Mask Bits", [
                ]),
            ]),
            Register("RXFIR", 0x4030C04C, 32, "RX FIFO Information", [
                Field("IDHIT", 0, 9, "Identifier Acceptance Filter Hit Indicator", [
                ]),
            ]),
            Register("CBT", 0x4030C050, 32, "CAN Bit Timing", [
                Field("BTF", 31, 1, "Bit Timing Format Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("EPRESDIV", 21, 10, "Extended Prescaler Division Factor", [
                ]),
                Field("ERJW", 16, 5, "Extended Resync Jump Width", [
                ]),
                Field("EPROPSEG", 10, 6, "Extended Propagation Segment", [
                ]),
                Field("EPSEG1", 5, 5, "Extended Phase Segment 1", [
                ]),
                Field("EPSEG2", 0, 5, "Extended Phase Segment 2", [
                ]),
            ]),
            Register("RXIMR[0]", 0x4030C880, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[1]", 0x4030C884, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[2]", 0x4030C888, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[3]", 0x4030C88C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[4]", 0x4030C890, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[5]", 0x4030C894, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[6]", 0x4030C898, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[7]", 0x4030C89C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[8]", 0x4030C8A0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[9]", 0x4030C8A4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[10]", 0x4030C8A8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[11]", 0x4030C8AC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[12]", 0x4030C8B0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[13]", 0x4030C8B4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[14]", 0x4030C8B8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[15]", 0x4030C8BC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[16]", 0x4030C8C0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[17]", 0x4030C8C4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[18]", 0x4030C8C8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[19]", 0x4030C8CC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[20]", 0x4030C8D0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[21]", 0x4030C8D4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[22]", 0x4030C8D8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[23]", 0x4030C8DC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[24]", 0x4030C8E0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[25]", 0x4030C8E4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[26]", 0x4030C8E8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[27]", 0x4030C8EC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[28]", 0x4030C8F0, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[29]", 0x4030C8F4, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[30]", 0x4030C8F8, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[31]", 0x4030C8FC, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[32]", 0x4030C900, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[33]", 0x4030C904, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[34]", 0x4030C908, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[35]", 0x4030C90C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[36]", 0x4030C910, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[37]", 0x4030C914, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[38]", 0x4030C918, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[39]", 0x4030C91C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[40]", 0x4030C920, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[41]", 0x4030C924, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[42]", 0x4030C928, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[43]", 0x4030C92C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[44]", 0x4030C930, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[45]", 0x4030C934, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[46]", 0x4030C938, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[47]", 0x4030C93C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[48]", 0x4030C940, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[49]", 0x4030C944, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[50]", 0x4030C948, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[51]", 0x4030C94C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[52]", 0x4030C950, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[53]", 0x4030C954, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[54]", 0x4030C958, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[55]", 0x4030C95C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[56]", 0x4030C960, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[57]", 0x4030C964, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[58]", 0x4030C968, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[59]", 0x4030C96C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[60]", 0x4030C970, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[61]", 0x4030C974, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[62]", 0x4030C978, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[63]", 0x4030C97C, 32, "Receive Individual Mask", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("MECR", 0x4030CAE0, 32, "Memory Error Control", [
                Field("ECRWRDIS", 31, 1, "Error Configuration Register Write Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("HANCEI_MSK", 19, 1, "Host Access with Non-Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FANCEI_MSK", 18, 1, "FlexCAN Access with Non-Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("CEI_MSK", 16, 1, "Correctable Errors Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("HAERRIE", 15, 1, "Host Access Error Injection Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FAERRIE", 14, 1, "FlexCAN Access Error Injection Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("EXTERRIE", 13, 1, "Extended Error Injection Enable", [
                    EnumVal("inject_32_bit", "0", "Disable. Apply error injection only to the 32-bit word."),
                    EnumVal("inject_64_bit", "0x1", "Enable. Apply error injection to the 64-bit word."),
                ]),
                Field("RERRDIS", 9, 1, "Error Report Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("ECCDIS", 8, 1, "Error Correction Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("NCEFAFRZ", 7, 1, "Non-Correctable Errors in FlexCAN Access Put Device in Freeze Mode", [
                    EnumVal("normal", "0", "Keep normal operation."),
                    EnumVal("freeze", "0x1", "Put FlexCAN in Freeze mode (see section \"Freeze mode\")."),
                ]),
            ]),
            Register("ERRIAR", 0x4030CAE4, 32, "Error Injection Address", [
                Field("INJADDR_H", 2, 12, "Error Injection Address High", [
                ]),
                Field("INJADDR_L", 0, 2, "Error Injection Address Low", [
                ]),
            ]),
            Register("ERRIDPR", 0x4030CAE8, 32, "Error Injection Data Pattern", [
                Field("DFLIP", 0, 32, "Data Flip Pattern", [
                ]),
            ]),
            Register("ERRIPPR", 0x4030CAEC, 32, "Error Injection Parity Pattern", [
                Field("PFLIP3", 24, 5, "Parity Flip Pattern for Byte 3 (Most Significant)", [
                ]),
                Field("PFLIP2", 16, 5, "Parity Flip Pattern for Byte 2", [
                ]),
                Field("PFLIP1", 8, 5, "Parity Flip Pattern for Byte 1", [
                ]),
                Field("PFLIP0", 0, 5, "Parity Flip Pattern for Byte 0 (Least Significant)", [
                ]),
            ]),
            Register("RERRAR", 0x4030CAF0, 32, "Error Report Address", [
                Field("NCE", 24, 1, "Non-Correctable Error", [
                    EnumVal("correctable", "0", "Reporting a correctable error"),
                    EnumVal("non_correctable", "0x1", "Reporting a non-correctable error"),
                ]),
                Field("SAID", 16, 3, "SAID", [
                ]),
                Field("ERRADDR", 0, 14, "Address Where Error Detected", [
                ]),
            ]),
            Register("RERRDR", 0x4030CAF4, 32, "Error Report Data", [
                Field("RDATA", 0, 32, "Raw Data Word Read from Memory with Error", [
                ]),
            ]),
            Register("RERRSYNR", 0x4030CAF8, 32, "Error Report Syndrome", [
                Field("BE3", 31, 1, "Byte Enabled for Byte 3 (Most Significant)", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND3", 24, 5, "Error Syndrome for Byte 3 (Most Significant)", [
                ]),
                Field("BE2", 23, 1, "Byte Enabled for Byte 2", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND2", 16, 5, "Error Syndrome for Byte 2", [
                ]),
                Field("BE1", 15, 1, "Byte Enabled for Byte 1", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND1", 8, 5, "Error Syndrome for Byte 1", [
                ]),
                Field("BE0", 7, 1, "Byte Enabled for Byte 0 (Least Significant)", [
                    EnumVal("not_read", "0", "Byte was not read."),
                    EnumVal("read", "0x1", "Byte was read."),
                ]),
                Field("SYND0", 0, 5, "Error Syndrome for Byte 0 (Least Significant)", [
                ]),
            ]),
            Register("ERRSR", 0x4030CAFC, 32, "Error Status", [
                Field("HANCEIF", 19, 1, "Host Access with Noncorrectable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("FANCEIF", 18, 1, "FlexCAN Access with Non-Correctable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("CEIF", 16, 1, "Correctable Error Interrupt Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("HANCEIOF", 3, 1, "Host Access With Non-Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("FANCEIOF", 2, 1, "FlexCAN Access with Non-Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
                Field("CEIOF", 0, 1, "Correctable Error Interrupt Overrun Flag", [
                    EnumVal("not_found", "0", "No errors detected"),
                    EnumVal("found", "0x1", "Error detected"),
                ]),
            ]),
            Register("EPRS", 0x4030CBF0, 32, "Enhanced CAN Bit Timing Prescalers", [
                Field("EDPRESDIV", 16, 10, "Extended Data Phase Prescaler Division Factor", [
                ]),
                Field("ENPRESDIV", 0, 10, "Extended Nominal Prescaler Division Factor", [
                ]),
            ]),
            Register("ENCBT", 0x4030CBF4, 32, "Enhanced Nominal CAN Bit Timing", [
                Field("NRJW", 22, 7, "Nominal Resynchronization Jump Width", [
                ]),
                Field("NTSEG2", 12, 7, "Nominal Time Segment 2", [
                ]),
                Field("NTSEG1", 0, 8, "Nominal Time Segment 1", [
                ]),
            ]),
            Register("EDCBT", 0x4030CBF8, 32, "Enhanced Data Phase CAN Bit Timing", [
                Field("DRJW", 22, 4, "Data Phase Resynchronization Jump Width", [
                ]),
                Field("DTSEG2", 12, 4, "Data Phase Time Segment 2", [
                ]),
                Field("DTSEG1", 0, 5, "Data Phase Segment 1", [
                ]),
            ]),
            Register("ETDC", 0x4030CBFC, 32, "Enhanced Transceiver Delay Compensation", [
                Field("ETDCEN", 31, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDMDIS", 30, 1, "Transceiver Delay Measurement Disable", [
                    EnumVal("ENABLE", "0", "Enable"),
                    EnumVal("DISABLE", "0x1", "Disable"),
                ]),
                Field("ETDCOFF", 16, 7, "Enhanced Transceiver Delay Compensation Offset", [
                ]),
                Field("ETDCFAIL", 15, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "In range"),
                    EnumVal("out_of_range", "0x1", "Out of range"),
                ]),
                Field("ETDCVAL", 0, 8, "Enhanced Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCTRL", 0x4030CC00, 32, "CAN FD Control", [
                Field("FDRATE", 31, 1, "Bit Rate Switch Enable", [
                    EnumVal("nominal", "0", "Disable"),
                    EnumVal("bit_rate_switching", "0x1", "Enable"),
                ]),
                Field("MBDSR1", 19, 2, "Message Buffer Data Size for Region 1", [
                    EnumVal("R1_8_bytes", "0", "8 bytes"),
                    EnumVal("R1_16_bytes", "0x1", "16 bytes"),
                    EnumVal("R1_32_bytes", "0x2", "32 bytes"),
                    EnumVal("R1_64_bytes", "0x3", "64 bytes"),
                ]),
                Field("MBDSR0", 16, 2, "Message Buffer Data Size for Region 0", [
                    EnumVal("R0_8_bytes", "0", "8 bytes"),
                    EnumVal("R0_16_bytes", "0x1", "16 bytes"),
                    EnumVal("R0_32_bytes", "0x2", "32 bytes"),
                    EnumVal("R0_64_bytes", "0x3", "64 bytes"),
                ]),
                Field("TDCEN", 15, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDCFAIL", 14, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "In range"),
                    EnumVal("out_of_range", "0x1", "Out of range"),
                ]),
                Field("TDCOFF", 8, 5, "Transceiver Delay Compensation Offset", [
                ]),
                Field("TDCVAL", 0, 6, "Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCBT", 0x4030CC04, 32, "CAN FD Bit Timing", [
                Field("FPRESDIV", 20, 10, "Fast Prescaler Division Factor", [
                ]),
                Field("FRJW", 16, 3, "Fast Resync Jump Width", [
                ]),
                Field("FPROPSEG", 10, 5, "Fast Propagation Segment", [
                ]),
                Field("FPSEG1", 5, 3, "Fast Phase Segment 1", [
                ]),
                Field("FPSEG2", 0, 3, "Fast Phase Segment 2", [
                ]),
            ]),
            Register("FDCRC", 0x4030CC08, 32, "CAN FD CRC", [
                Field("FD_MBCRC", 24, 7, "CRC Message Buffer Number for FD_TXCRC", [
                ]),
                Field("FD_TXCRC", 0, 21, "Extended Transmitted CRC value", [
                ]),
            ]),
            Register("HR_TIME_STAMP[0]", 0x4030CC30, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[1]", 0x4030CC34, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[2]", 0x4030CC38, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[3]", 0x4030CC3C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[4]", 0x4030CC40, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[5]", 0x4030CC44, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[6]", 0x4030CC48, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[7]", 0x4030CC4C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[8]", 0x4030CC50, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[9]", 0x4030CC54, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[10]", 0x4030CC58, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[11]", 0x4030CC5C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[12]", 0x4030CC60, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[13]", 0x4030CC64, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[14]", 0x4030CC68, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[15]", 0x4030CC6C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[16]", 0x4030CC70, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[17]", 0x4030CC74, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[18]", 0x4030CC78, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[19]", 0x4030CC7C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[20]", 0x4030CC80, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[21]", 0x4030CC84, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[22]", 0x4030CC88, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[23]", 0x4030CC8C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[24]", 0x4030CC90, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[25]", 0x4030CC94, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[26]", 0x4030CC98, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[27]", 0x4030CC9C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[28]", 0x4030CCA0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[29]", 0x4030CCA4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[30]", 0x4030CCA8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[31]", 0x4030CCAC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[32]", 0x4030CCB0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[33]", 0x4030CCB4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[34]", 0x4030CCB8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[35]", 0x4030CCBC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[36]", 0x4030CCC0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[37]", 0x4030CCC4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[38]", 0x4030CCC8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[39]", 0x4030CCCC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[40]", 0x4030CCD0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[41]", 0x4030CCD4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[42]", 0x4030CCD8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[43]", 0x4030CCDC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[44]", 0x4030CCE0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[45]", 0x4030CCE4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[46]", 0x4030CCE8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[47]", 0x4030CCEC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[48]", 0x4030CCF0, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[49]", 0x4030CCF4, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[50]", 0x4030CCF8, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[51]", 0x4030CCFC, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[52]", 0x4030CD00, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[53]", 0x4030CD04, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[54]", 0x4030CD08, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[55]", 0x4030CD0C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[56]", 0x4030CD10, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[57]", 0x4030CD14, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[58]", 0x4030CD18, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[59]", 0x4030CD1C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[60]", 0x4030CD20, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[61]", 0x4030CD24, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[62]", 0x4030CD28, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
            Register("HR_TIME_STAMP[63]", 0x4030CD2C, 32, "High-Resolution Timestamp", [
                Field("TS", 0, 32, "High-Resolution Timestamp", [
                ]),
            ]),
        ])

class Module_CMU_0(Peripheral):
    def __init__(self):
        super().__init__("CMU_0", 0x402BC000, 0x18, [
            Register("GCR", 0x402BC000, 32, "Global Configuration Register", [
                Field("FCE", 0, 1, "Frequency Check Enable", [
                    EnumVal("bfv_gcr_fce_0", "0", "Stops frequency checking"),
                    EnumVal("bfv_gcr_fce_1", "0x1", "Starts frequency checking"),
                ]),
            ]),
            Register("RCCR", 0x402BC004, 32, "Reference Count Configuration Register", [
                Field("REF_CNT", 0, 16, "Reference clock count", [
                ]),
            ]),
            Register("HTCR", 0x402BC008, 32, "High Threshold Configuration Register", [
                Field("HFREF", 0, 24, "High frequency reference threshold", [
                ]),
            ]),
            Register("LTCR", 0x402BC00C, 32, "Low Threshold Configuration Register", [
                Field("LFREF", 0, 24, "Low Frequency Reference Threshold", [
                ]),
            ]),
            Register("SR", 0x402BC010, 32, "Status Register", [
                Field("RS", 4, 1, "Run Status", [
                    EnumVal("bfv_sr_rs_0", "0", "Frequency check stopped"),
                    EnumVal("bfv_sr_rs_1", "0x1", "Frequency check running"),
                ]),
                Field("FHH", 1, 1, "Frequency higher than high frequency reference threshold event status", [
                    EnumVal("bfv_sr_fhh_0", "0", "No FHH event"),
                    EnumVal("bfv_sr_fhh_1", "0x1", "FHH event occurred"),
                ]),
                Field("FLL", 0, 1, "Frequency lower than low frequency reference threshold event status", [
                    EnumVal("bfv_sr_fll_0", "0", "No FLL event"),
                    EnumVal("bfv_sr_fll_1", "0x1", "FLL event occurred"),
                ]),
            ]),
            Register("IER", 0x402BC014, 32, "Interrupt Enable Register", [
                Field("FHHAIE", 3, 1, "Frequency Higher than High Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhaie_0", "0", "Asynchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhaie_1", "0x1", "Asynchronous FHH event interrupt enabled"),
                ]),
                Field("FLLAIE", 2, 1, "Frequency Lower than Low Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllaie_0", "0", "Asynchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllaie_1", "0x1", "Asynchronous FLL event interrupt enabled"),
                ]),
                Field("FHHIE", 1, 1, "Frequency Higher than High Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhie_0", "0", "Synchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhie_1", "0x1", "Synchronous FHH event interrupt enabled"),
                ]),
                Field("FLLIE", 0, 1, "Frequency Lower than Low Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllie_0", "0", "Synchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllie_1", "0x1", "Synchronous FLL event interrupt enabled"),
                ]),
            ]),
        ])

class Module_CMU_1(Peripheral):
    def __init__(self):
        super().__init__("CMU_1", 0x402BC020, 0x10, [
            Register("GCR", 0x402BC020, 32, "Global Configuration Register", [
                Field("FME", 0, 1, "Frequency Meter Enable", [
                    EnumVal("bfv_fme_0", "0", "Stops frequency metering"),
                    EnumVal("bfv_fme_1", "0x1", "Starts frequency metering"),
                ]),
            ]),
            Register("RCCR", 0x402BC024, 32, "Reference Count Configuration Register", [
                Field("REF_CNT", 0, 16, "Reference Clock Count", [
                ]),
            ]),
            Register("SR", 0x402BC028, 32, "Status Register", [
                Field("MET_CNT", 8, 24, "Meter Clock Count", [
                ]),
                Field("RS", 4, 1, "Run Status", [
                    EnumVal("bfv_rs_0", "0", "Frequency meter stopped"),
                    EnumVal("bfv_rs_1", "0x1", "Frequency meter running"),
                ]),
                Field("FMTO", 1, 1, "Frequency Meter Time Out", [
                ]),
                Field("FMC", 0, 1, "Frequency Meter Operation Complete", [
                ]),
            ]),
            Register("IER", 0x402BC02C, 32, "Interrupt Enable Register", [
                Field("FMCIE", 0, 1, "Frequency Meter Complete Interrupt Enable", [
                    EnumVal("bfv_fmcie_0", "0", "Frequency Meter complete interrupt is disabled"),
                    EnumVal("bfv_fmcie_1", "0x1", "Frequency Meter complete interrupt is enabled"),
                ]),
            ]),
        ])

class Module_CMU_2(Peripheral):
    def __init__(self):
        super().__init__("CMU_2", 0x402BC040, 0x10, [
            Register("GCR", 0x402BC040, 32, "Global Configuration Register", [
                Field("FME", 0, 1, "Frequency Meter Enable", [
                    EnumVal("bfv_fme_0", "0", "Stops frequency metering"),
                    EnumVal("bfv_fme_1", "0x1", "Starts frequency metering"),
                ]),
            ]),
            Register("RCCR", 0x402BC044, 32, "Reference Count Configuration Register", [
                Field("REF_CNT", 0, 16, "Reference Clock Count", [
                ]),
            ]),
            Register("SR", 0x402BC048, 32, "Status Register", [
                Field("MET_CNT", 8, 24, "Meter Clock Count", [
                ]),
                Field("RS", 4, 1, "Run Status", [
                    EnumVal("bfv_rs_0", "0", "Frequency meter stopped"),
                    EnumVal("bfv_rs_1", "0x1", "Frequency meter running"),
                ]),
                Field("FMTO", 1, 1, "Frequency Meter Time Out", [
                ]),
                Field("FMC", 0, 1, "Frequency Meter Operation Complete", [
                ]),
            ]),
            Register("IER", 0x402BC04C, 32, "Interrupt Enable Register", [
                Field("FMCIE", 0, 1, "Frequency Meter Complete Interrupt Enable", [
                    EnumVal("bfv_fmcie_0", "0", "Frequency Meter complete interrupt is disabled"),
                    EnumVal("bfv_fmcie_1", "0x1", "Frequency Meter complete interrupt is enabled"),
                ]),
            ]),
        ])

class Module_CMU_3(Peripheral):
    def __init__(self):
        super().__init__("CMU_3", 0x402BC060, 0x18, [
            Register("GCR", 0x402BC060, 32, "Global Configuration Register", [
                Field("FCE", 0, 1, "Frequency Check Enable", [
                    EnumVal("bfv_gcr_fce_0", "0", "Stops frequency checking"),
                    EnumVal("bfv_gcr_fce_1", "0x1", "Starts frequency checking"),
                ]),
            ]),
            Register("RCCR", 0x402BC064, 32, "Reference Count Configuration Register", [
                Field("REF_CNT", 0, 16, "Reference clock count", [
                ]),
            ]),
            Register("HTCR", 0x402BC068, 32, "High Threshold Configuration Register", [
                Field("HFREF", 0, 24, "High frequency reference threshold", [
                ]),
            ]),
            Register("LTCR", 0x402BC06C, 32, "Low Threshold Configuration Register", [
                Field("LFREF", 0, 24, "Low Frequency Reference Threshold", [
                ]),
            ]),
            Register("SR", 0x402BC070, 32, "Status Register", [
                Field("RS", 4, 1, "Run Status", [
                    EnumVal("bfv_sr_rs_0", "0", "Frequency check stopped"),
                    EnumVal("bfv_sr_rs_1", "0x1", "Frequency check running"),
                ]),
                Field("FHH", 1, 1, "Frequency higher than high frequency reference threshold event status", [
                    EnumVal("bfv_sr_fhh_0", "0", "No FHH event"),
                    EnumVal("bfv_sr_fhh_1", "0x1", "FHH event occurred"),
                ]),
                Field("FLL", 0, 1, "Frequency lower than low frequency reference threshold event status", [
                    EnumVal("bfv_sr_fll_0", "0", "No FLL event"),
                    EnumVal("bfv_sr_fll_1", "0x1", "FLL event occurred"),
                ]),
            ]),
            Register("IER", 0x402BC074, 32, "Interrupt Enable Register", [
                Field("FHHAIE", 3, 1, "Frequency Higher than High Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhaie_0", "0", "Asynchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhaie_1", "0x1", "Asynchronous FHH event interrupt enabled"),
                ]),
                Field("FLLAIE", 2, 1, "Frequency Lower than Low Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllaie_0", "0", "Asynchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllaie_1", "0x1", "Asynchronous FLL event interrupt enabled"),
                ]),
                Field("FHHIE", 1, 1, "Frequency Higher than High Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhie_0", "0", "Synchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhie_1", "0x1", "Synchronous FHH event interrupt enabled"),
                ]),
                Field("FLLIE", 0, 1, "Frequency Lower than Low Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllie_0", "0", "Synchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllie_1", "0x1", "Synchronous FLL event interrupt enabled"),
                ]),
            ]),
        ])

class Module_CMU_4(Peripheral):
    def __init__(self):
        super().__init__("CMU_4", 0x402BC080, 0x18, [
            Register("GCR", 0x402BC080, 32, "Global Configuration Register", [
                Field("FCE", 0, 1, "Frequency Check Enable", [
                    EnumVal("bfv_gcr_fce_0", "0", "Stops frequency checking"),
                    EnumVal("bfv_gcr_fce_1", "0x1", "Starts frequency checking"),
                ]),
            ]),
            Register("RCCR", 0x402BC084, 32, "Reference Count Configuration Register", [
                Field("REF_CNT", 0, 16, "Reference clock count", [
                ]),
            ]),
            Register("HTCR", 0x402BC088, 32, "High Threshold Configuration Register", [
                Field("HFREF", 0, 24, "High frequency reference threshold", [
                ]),
            ]),
            Register("LTCR", 0x402BC08C, 32, "Low Threshold Configuration Register", [
                Field("LFREF", 0, 24, "Low Frequency Reference Threshold", [
                ]),
            ]),
            Register("SR", 0x402BC090, 32, "Status Register", [
                Field("RS", 4, 1, "Run Status", [
                    EnumVal("bfv_sr_rs_0", "0", "Frequency check stopped"),
                    EnumVal("bfv_sr_rs_1", "0x1", "Frequency check running"),
                ]),
                Field("FHH", 1, 1, "Frequency higher than high frequency reference threshold event status", [
                    EnumVal("bfv_sr_fhh_0", "0", "No FHH event"),
                    EnumVal("bfv_sr_fhh_1", "0x1", "FHH event occurred"),
                ]),
                Field("FLL", 0, 1, "Frequency lower than low frequency reference threshold event status", [
                    EnumVal("bfv_sr_fll_0", "0", "No FLL event"),
                    EnumVal("bfv_sr_fll_1", "0x1", "FLL event occurred"),
                ]),
            ]),
            Register("IER", 0x402BC094, 32, "Interrupt Enable Register", [
                Field("FHHAIE", 3, 1, "Frequency Higher than High Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhaie_0", "0", "Asynchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhaie_1", "0x1", "Asynchronous FHH event interrupt enabled"),
                ]),
                Field("FLLAIE", 2, 1, "Frequency Lower than Low Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllaie_0", "0", "Asynchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllaie_1", "0x1", "Asynchronous FLL event interrupt enabled"),
                ]),
                Field("FHHIE", 1, 1, "Frequency Higher than High Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhie_0", "0", "Synchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhie_1", "0x1", "Synchronous FHH event interrupt enabled"),
                ]),
                Field("FLLIE", 0, 1, "Frequency Lower than Low Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllie_0", "0", "Synchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllie_1", "0x1", "Synchronous FLL event interrupt enabled"),
                ]),
            ]),
        ])

class Module_CMU_5(Peripheral):
    def __init__(self):
        super().__init__("CMU_5", 0x402BC0A0, 0x18, [
            Register("GCR", 0x402BC0A0, 32, "Global Configuration Register", [
                Field("FCE", 0, 1, "Frequency Check Enable", [
                    EnumVal("bfv_gcr_fce_0", "0", "Stops frequency checking"),
                    EnumVal("bfv_gcr_fce_1", "0x1", "Starts frequency checking"),
                ]),
            ]),
            Register("RCCR", 0x402BC0A4, 32, "Reference Count Configuration Register", [
                Field("REF_CNT", 0, 16, "Reference clock count", [
                ]),
            ]),
            Register("HTCR", 0x402BC0A8, 32, "High Threshold Configuration Register", [
                Field("HFREF", 0, 24, "High frequency reference threshold", [
                ]),
            ]),
            Register("LTCR", 0x402BC0AC, 32, "Low Threshold Configuration Register", [
                Field("LFREF", 0, 24, "Low Frequency Reference Threshold", [
                ]),
            ]),
            Register("SR", 0x402BC0B0, 32, "Status Register", [
                Field("RS", 4, 1, "Run Status", [
                    EnumVal("bfv_sr_rs_0", "0", "Frequency check stopped"),
                    EnumVal("bfv_sr_rs_1", "0x1", "Frequency check running"),
                ]),
                Field("FHH", 1, 1, "Frequency higher than high frequency reference threshold event status", [
                    EnumVal("bfv_sr_fhh_0", "0", "No FHH event"),
                    EnumVal("bfv_sr_fhh_1", "0x1", "FHH event occurred"),
                ]),
                Field("FLL", 0, 1, "Frequency lower than low frequency reference threshold event status", [
                    EnumVal("bfv_sr_fll_0", "0", "No FLL event"),
                    EnumVal("bfv_sr_fll_1", "0x1", "FLL event occurred"),
                ]),
            ]),
            Register("IER", 0x402BC0B4, 32, "Interrupt Enable Register", [
                Field("FHHAIE", 3, 1, "Frequency Higher than High Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhaie_0", "0", "Asynchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhaie_1", "0x1", "Asynchronous FHH event interrupt enabled"),
                ]),
                Field("FLLAIE", 2, 1, "Frequency Lower than Low Frequency Reference Threshold Asynchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllaie_0", "0", "Asynchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllaie_1", "0x1", "Asynchronous FLL event interrupt enabled"),
                ]),
                Field("FHHIE", 1, 1, "Frequency Higher than High Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fhhie_0", "0", "Synchronous FHH event interrupt disabled"),
                    EnumVal("bfv_ier_fhhie_1", "0x1", "Synchronous FHH event interrupt enabled"),
                ]),
                Field("FLLIE", 0, 1, "Frequency Lower than Low Frequency Reference Threshold Synchronous Interrupt Enable", [
                    EnumVal("bfv_ier_fllie_0", "0", "Synchronous FLL event interrupt disabled"),
                    EnumVal("bfv_ier_fllie_1", "0x1", "Synchronous FLL event interrupt enabled"),
                ]),
            ]),
        ])

class Module_CONFIGURATION_GPR(Peripheral):
    def __init__(self):
        super().__init__("CONFIGURATION_GPR", 0x4039C000, 0x44, [
            Register("CONFIG_REG0", 0x4039C01C, 32, "General Purpose Configuration 0", [
                Field("EDB", 6, 1, "Hardware Debugger Attached", [
                    EnumVal("EDB_0", "0", "Debugger not connected"),
                    EnumVal("EDB_1", "0x1", "Debugger connected"),
                ]),
            ]),
            Register("CONFIG_REG6", 0x4039C034, 32, "General Purpose Configuration 6", [
                Field("HL", 31, 1, "Hard Lock", [
                    EnumVal("HL_0", "0", "Write access to this register is allowed"),
                    EnumVal("HL_1", "0x1", "Write access to this register is not allowed"),
                ]),
                Field("FLEXIO_CLOCK_GATE", 4, 1, "FlexIO Clock Gating", [
                    EnumVal("FLEXIO_CLOCK_GATE_0", "0", "Clock is off (gated)"),
                    EnumVal("FLEXIO_CLOCK_GATE_1", "0x1", "Clock is on"),
                ]),
            ]),
            Register("CONFIG_CFPRH", 0x4039C040, 32, "Configuration Code Flash Memory Passive Block", [
                Field("HARD_LOCK", 31, 1, "Hard Lock", [
                    EnumVal("HARD_LOCK_0", "0", "Write access is allowed"),
                    EnumVal("HARD_LOCK_1", "0x1", "Write access is not allowed until next functional reset"),
                ]),
                Field("SOFT_LOCK", 30, 1, "Soft Lock", [
                    EnumVal("SOFT_LOCK_0", "0", "Write access is allowed"),
                    EnumVal("SOFT_LOCK_1", "0x1", "Write access is not allowed"),
                ]),
                Field("SECURE_SIZE", 13, 8, "Secure Size", [
                ]),
            ]),
        ])

class Module_CRC(Peripheral):
    def __init__(self):
        super().__init__("CRC", 0x40380000, 0xC, [
            Register("DATA", 0x40380000, 32, "CRC Data", [
                Field("HU", 24, 8, "CRC High Upper Byte", [
                ]),
                Field("HL", 16, 8, "CRC High Lower Byte", [
                ]),
                Field("LU", 8, 8, "CRC Low Upper Byte", [
                ]),
                Field("LL", 0, 8, "CRC Low Lower Byte", [
                ]),
            ]),
            Register("GPOLY", 0x40380004, 32, "CRC Polynomial", [
                Field("HIGH", 16, 16, "High Polynomial Half-Word", [
                ]),
                Field("LOW", 0, 16, "Low Polynomial Half-Word", [
                ]),
            ]),
            Register("CTRL", 0x40380008, 32, "CRC Control", [
                Field("TOT", 30, 2, "Transpose Type for Writes", [
                    EnumVal("NOTRNPS", "0", "No transposition"),
                    EnumVal("BTS_TRNPS", "0x1", "Bits in bytes are transposed; bytes are not transposed"),
                    EnumVal("BYTS_BTS_TRNPS", "0x2", "Both bits in bytes and bytes are transposed"),
                    EnumVal("BYTS_TRNPS", "0x3", "Only bytes are transposed; no bits in a byte are transposed"),
                ]),
                Field("TOTR", 28, 2, "Transpose Type for Read", [
                    EnumVal("NOTRNPS", "0", "No transposition"),
                    EnumVal("BTS_TRNPS", "0x1", "Bits in bytes are transposed; bytes are not transposed"),
                    EnumVal("BYTS_BTS_TRNPS", "0x2", "Both bits in bytes and bytes are transposed"),
                    EnumVal("BYTS_TRNPS", "0x3", "Only bytes are transposed; no bits in a byte are transposed"),
                ]),
                Field("FXOR", 26, 1, "Complement Read of CRC Data Register", [
                    EnumVal("NOXOR", "0", "No XOR on reading"),
                    EnumVal("INVERT", "0x1", "Inverts or complements the read value of the CRC Data"),
                ]),
                Field("WAS", 25, 1, "Write as Seed", [
                    EnumVal("DATA", "0", "Data values"),
                    EnumVal("SEED", "0x1", "Seed values"),
                ]),
                Field("TCRC", 24, 1, "TCRC", [
                    EnumVal("B16", "0", "16-bit"),
                    EnumVal("B32", "0x1", "32-bit"),
                ]),
            ]),
        ])

class Module_DCM(Peripheral):
    def __init__(self):
        super().__init__("DCM", 0x402AC000, 0x4000, [
            Register("DCMSTAT", 0x402AC000, 32, "DCM Status", [
                Field("DCMDBGPS", 10, 1, "Debug Password Scanning Status", [
                    EnumVal("DCMDBGPS_0", "0", "Completed with errors"),
                    EnumVal("DCMDBGPS_1", "0x1", "Completed successfully"),
                ]),
                Field("DCMOTAS", 9, 1, "DCM OTA Scanning Status (valid only when the value of the DCMDONE field is 1)", [
                    EnumVal("DCMOTAS_0", "0", "Completed with errors"),
                    EnumVal("DCMOTAS_1", "0x1", "Completed successfully"),
                ]),
                Field("DCMUTS", 8, 1, "DCM Utest DCF Scanning Status (valid only if DCMDONE bit is set)", [
                    EnumVal("DCMUTS_0", "0", "DCM Utest DCF completed with errors."),
                    EnumVal("DCMUTS_1", "0x1", "DCM Utest DCF completed successfully."),
                ]),
                Field("DCMLCST", 4, 1, "LC Scanning Status", [
                    EnumVal("DCMLCST_0", "0", "Completed with errors"),
                    EnumVal("DCMLCST_1", "0x1", "Completed successfully"),
                ]),
                Field("DCMERR", 1, 1, "DCM completion with error status (valid only if DCMDONE bit is set)", [
                    EnumVal("DCMERR_0", "0", "DCM completed with success."),
                    EnumVal("DCMERR_1", "0x1", "DCM completed with error."),
                ]),
                Field("DCMDONE", 0, 1, "DCM Scanning Status", [
                    EnumVal("DCMDONE_0", "0", "Running"),
                    EnumVal("DCMDONE_1", "0x1", "Completed"),
                ]),
            ]),
            Register("DCMLCC", 0x402AC004, 32, "LC and LC Control", [
                Field("DCMRLC", 4, 3, "Real LC", [
                    EnumVal("DCMRLC_0", "0", "FA"),
                    EnumVal("DCMRLC_1", "0x1", "Pre-FA"),
                    EnumVal("DCMRLC_2", "0x2", "OEM_PROD"),
                    EnumVal("DCMRLC_7", "0x7", "IN_FIELD"),
                ]),
                Field("DCMCLC", 0, 3, "Current LC", [
                    EnumVal("DCMCLC_0", "0", "FA"),
                    EnumVal("DCMCLC_1", "0x1", "Pre-FA"),
                    EnumVal("DCMCLC_2", "0x2", "OEM_PROD"),
                    EnumVal("DCMCLC_7", "0x7", "IN_FIELD"),
                ]),
            ]),
            Register("DCMLCS", 0x402AC008, 32, "LC Scan Status", [
                Field("DCMLCFE5", 29, 1, "Pre-FA Flash Memory Error Check", [
                    EnumVal("DCMLCFE5_0", "0", "Successful"),
                    EnumVal("DCMLCFE5_1", "0x1", "Failed"),
                ]),
                Field("DCMLCE5", 28, 1, "Pre-FA ECC Errors", [
                    EnumVal("DCMLCE5_0", "0", "No errors"),
                    EnumVal("DCMLCE5_1", "0x1", "Marking error"),
                ]),
                Field("DCMLCC5", 25, 3, "Pre-FA Marking Status", [
                    EnumVal("DCMLCC5_0", "0", "Not scanned yet"),
                    EnumVal("DCMLCC5_1", "0x1", "Marked as active"),
                    EnumVal("DCMLCC5_2", "0x2", "Marked as inactive"),
                    EnumVal("DCMLCC5_3", "0x3", "Region is erased/virgin"),
                    EnumVal("DCMLCC5_5", "0x5", "Marked as inactive by an unknown pattern"),
                    EnumVal("DCMLCC5_6", "0x6", "Scanning timed out"),
                ]),
                Field("DCMLCSS5", 24, 1, "Pre-FA Scan Status", [
                    EnumVal("DCMLCSS5_0", "0", "Successful"),
                    EnumVal("DCMLCSS5_1", "0x1", "Errors exist"),
                ]),
                Field("DCMLCFE4", 23, 1, "IN_FIELD Flash Memory Error Check", [
                    EnumVal("DCMLCFE4_0", "0", "Successful"),
                    EnumVal("DCMLCFE4_1", "0x1", "Failed"),
                ]),
                Field("DCMLCE4", 22, 1, "IN_FIELD ECC Errors", [
                    EnumVal("DCMLCE4_0", "0", "No errors"),
                    EnumVal("DCMLCE4_1", "0x1", "Errors exist"),
                ]),
                Field("DCMLCC4", 19, 3, "IN_FIELD Marking Status", [
                    EnumVal("DCMLCC4_0", "0", "Not scanned yet"),
                    EnumVal("DCMLCC4_1", "0x1", "Marked as active"),
                    EnumVal("DCMLCC4_2", "0x2", "Marked as inactive"),
                    EnumVal("DCMLCC4_3", "0x3", "Region is erased/virgin"),
                    EnumVal("DCMLCC4_5", "0x5", "Marked as inactive by an unknown pattern"),
                    EnumVal("DCMLCC4_6", "0x6", "Scanning timed out"),
                ]),
                Field("DCMLCSS4", 18, 1, "IN_FIELD Scan Status", [
                    EnumVal("DCMLCSS4_0", "0", "No errors"),
                    EnumVal("DCMLCSS4_1", "0x1", "Errors exist"),
                ]),
                Field("DCMLCFE3", 17, 1, "OEM_PROD Flash Memory Error Check", [
                    EnumVal("DCMLCFE3_0", "0", "Successful"),
                    EnumVal("DCMLCFE3_1", "0x1", "Failed"),
                ]),
                Field("DCMLCE3", 16, 1, "OEM_PROD ECC Errors", [
                    EnumVal("DCMLCE3_0", "0", "No errors"),
                    EnumVal("DCMLCE3_1", "0x1", "Errors exist"),
                ]),
                Field("DCMLCC3", 13, 3, "OEM_PROD Marking", [
                    EnumVal("DCMLCC3_0", "0", "Not scanned yet"),
                    EnumVal("DCMLCC3_1", "0x1", "Marked as active"),
                    EnumVal("DCMLCC3_2", "0x2", "Marked as inactive"),
                    EnumVal("DCMLCC3_3", "0x3", "Region is erased/virgin"),
                    EnumVal("DCMLCC3_5", "0x5", "Marked as inactive by an unknown pattern"),
                    EnumVal("DCMLCC3_6", "0x6", "Scanning timed out"),
                ]),
                Field("DCMLCSS3", 12, 1, "OEM_PROD Scan Status", [
                    EnumVal("DCMLCSS3_0", "0", "No errors"),
                    EnumVal("DCMLCSS3_1", "0x1", "Errors exist"),
                ]),
            ]),
            Register("DCMMISC", 0x402AC01C, 32, "DCM Miscellaneous", [
                Field("DCMCERS", 28, 1, "DCF Client Errors", [
                    EnumVal("DCMCERS_0", "0", "No errors on any of the DCF clients"),
                    EnumVal("DCMCERS_1", "0x1", "Atleast one safety DCF client has an error"),
                ]),
                Field("DCMDBGE", 11, 1, "DCM ECC error on DBG sections", [
                    EnumVal("DCMDBGE_0", "0", "No error on DBG section"),
                    EnumVal("DCMDBGE_1", "0x1", "DBG section error"),
                ]),
                Field("DCMDBGT", 10, 1, "DBG Section Error", [
                    EnumVal("DCMDBGT_0", "0", "No error"),
                    EnumVal("DCMDBGT_1", "0x1", "Error exists"),
                ]),
            ]),
            Register("DCMDEB", 0x402AC020, 32, "Debug Status and Configuration", [
                Field("APPDBG_STAT_SOC", 16, 1, "Application Debug Status", [
                    EnumVal("APPDBG_STAT_SOC_0", "0", "Disabled"),
                    EnumVal("APPDBG_STAT_SOC_1", "0x1", "Enabled"),
                ]),
                Field("DCM_APPDBG_STAT", 1, 1, "DCM Authentication Engine Status", [
                    EnumVal("DCM_APPDBG_STAT_0", "0", "Disabled"),
                    EnumVal("DCM_APPDBG_STAT_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("DCMEC", 0x402AC02C, 32, "DCF Error Count", [
                Field("DCMECT", 0, 16, "Error Count", [
                ]),
            ]),
            Register("DCMSRR0", 0x402AC030, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR1", 0x402AC034, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR2", 0x402AC038, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR3", 0x402AC03C, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR4", 0x402AC040, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR5", 0x402AC044, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR6", 0x402AC048, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR7", 0x402AC04C, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR8", 0x402AC050, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR9", 0x402AC054, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR10", 0x402AC058, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR11", 0x402AC05C, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR12", 0x402AC060, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR13", 0x402AC064, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR14", 0x402AC068, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMSRR15", 0x402AC06C, 32, "DCF Scan Report", [
                Field("DCMDCFT1", 29, 1, "Scanning Timeout On Flash Memory", [
                    EnumVal("DCMDCFT1_0", "0", "Does not exist"),
                    EnumVal("DCMDCFT1_1", "0x1", "Exists"),
                ]),
                Field("DCMESD1", 28, 1, "Chip Side Error", [
                    EnumVal("DCMESD1_0", "0", "No errors"),
                    EnumVal("DCMESD1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMESF1", 27, 1, "Flash Memory Error", [
                    EnumVal("DCMESF1_0", "0", "No errors"),
                    EnumVal("DCMESF1_1", "0x1", "Errors exist"),
                ]),
                Field("DCMDCFF1", 24, 3, "DCF Record Location", [
                    EnumVal("DCMDCFF1_2", "0x2", "Utest region"),
                    EnumVal("DCMDCFF1_5", "0x5", "Others: Reserved"),
                ]),
                Field("DCMDCFE1", 0, 21, "Flash Memory Address", [
                ]),
            ]),
            Register("DCMLCS_2", 0x402AC080, 32, "LC Scan Status 2", [
                Field("DCMLCFE6", 5, 1, "Flash Memory Error Check", [
                    EnumVal("DCMLCFE6_0", "0", "Successful"),
                    EnumVal("DCMLCFE6_1", "0x1", "Failed"),
                ]),
                Field("DCMLCE6", 4, 1, "FA ECC Errors", [
                    EnumVal("DCMLCE6_0", "0", "No errors"),
                    EnumVal("DCMLCE6_1", "0x1", "Errors exist"),
                ]),
                Field("DCMLCC6", 1, 3, "FA Marking", [
                    EnumVal("DCMLCC6_0", "0", "Not scanned yet"),
                    EnumVal("DCMLCC6_1", "0x1", "Marked as active"),
                    EnumVal("DCMLCC6_2", "0x2", "Marked as inactive"),
                    EnumVal("DCMLCC6_3", "0x3", "Region is erased/virgin"),
                    EnumVal("DCMLCC6_5", "0x5", "Marked as inactive by an unknown pattern"),
                    EnumVal("DCMLCC6_6", "0x6", "Scanning timed out"),
                ]),
                Field("DCMLCSS6", 0, 1, "FA Scan Status", [
                    EnumVal("DCMLCSS6_0", "0", "No errors"),
                    EnumVal("DCMLCSS6_1", "0x1", "Errors exist"),
                ]),
            ]),
        ])

class Module_DCM_GPR(Peripheral):
    def __init__(self):
        super().__init__("DCM_GPR", 0x402AC000, 0x4000, [
            Register("DCMROD1", 0x402AC200, 32, "Read-Only GPR On Destructive Reset 1", [
                Field("PCU_ISO_STATUS", 0, 1, "PCU Input Isolation Status On Previous Standby Entry", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMROD3", 0x402AC208, 32, "Read-Only GPR On Destructive Reset 3", [
                Field("CM7_0_ICDATA_ECC_ERR", 30, 1, "Cortex-M7_0 I-cache Data ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DCTAG_ECC_ERR", 28, 1, "Cortex-M7_0 D-cache Tag ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DCDATA_ECC_ERR", 26, 1, "Cortex-M7_0 D-cache Data Memory ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PRAM0_ECC_ERR", 25, 1, "Multi-Bit ECC Error From PRAM0", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("LC_ERR", 22, 1, "Error In Life Cycle Scanning", [
                    EnumVal("NO_ERR_SCAN", "0", "No error while lifecycle scanning."),
                    EnumVal("ERR_SCAN", "0x1", "Error while lifecycle scanning"),
                ]),
                Field("DATA_EDC_ERR", 16, 1, "Data EDC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("ADDR_EDC_ERR", 15, 1, "Address EDC Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("AIPS1_GSKT_ALARM", 13, 1, "AIPS1 IAHB Gasket Alarm Status. Read this bit to identify the reason for a fault in case of FCCU NCF 1.", [
                    EnumVal("NO_ALARM_IND", "0", "No alarm indicated by AIPS1 IAHB gasket."),
                    EnumVal("ALARM_IND", "0x1", "Alarm indicated by AIPS1 IAHB gasket."),
                ]),
                Field("HSE_GSKT_ALARM", 11, 1, "HSE IAHB Gasket Alarm Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("SYS_AXBS_ALARM", 8, 1, "System AXBS Safety Alarm Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("TCM_GSKT_ALARM", 5, 1, "TCM IAHB Gasket Monitor Alarm Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("HSE_LOCKUP", 2, 1, "HSE_B Core Lockup Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_LOCKUP", 0, 1, "Cortex-M7_0 Core Lockup Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMROD4", 0x402AC20C, 32, "Read-Only GPR On Destructive Reset 4", [
                Field("TEST_ACTIVATION_1_ERR", 30, 1, "Accidental Partial Test Activation 1 Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("TEST_ACTIVATION_0_ERR", 29, 1, "Accidental Partial Test Activation 0 Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("VDD2P5_GNG_ERR", 27, 1, "Go/No-go Indicator For VDD_HV_FLA", [
                    EnumVal("YES", "0", "Yes"),
                    EnumVal("NO", "0x1", "No"),
                ]),
                Field("VDD1P1_GNG_ERR", 26, 1, "Go/No-go Indicator For VDD1PD1", [
                    EnumVal("YES", "0", "Yes"),
                    EnumVal("NO", "0x1", "No"),
                ]),
                Field("FLASH_ECC_ERR", 25, 1, "ECC Error From Flash Controller", [
                    EnumVal("NO_ECC_ERR", "0", "No ECC error from flash controller."),
                    EnumVal("ECC_ERR", "0x1", "ECC error from flash controller."),
                ]),
                Field("FLASH_SCAN_ERR", 22, 1, "Flash Memory Scan Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_RST_ERR", 21, 1, "Flash Reset Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_REF_ERR", 20, 1, "Flash Memory Reference Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_ADDR_ENC_ERR", 19, 1, "Flash Memory Address Encode Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_EDC_ERR", 18, 1, "Flash Memory EDC Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF1_DATA_ECC_ERR", 15, 1, "Program Flash Memory 1 Data ECC Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF1_CODE_ECC_ERR", 14, 1, "Program Flash Memory 1 Code ECC Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF0_DATA_ECC_ERR", 13, 1, "Program Flash Memory 0 Data ECC Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF0_CODE_ECC_ERR", 12, 1, "Program Flash Memory 0 Code ECC Error Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("HSE_RAM_ECC_ERR", 11, 1, "HSE_B RAM Uncorrectable ECC Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PRAM0_FCCU_ALARM", 9, 1, "PRAM0 FCCU Alarm Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("DMA_TCD_RAM_ECC_ERR", 8, 1, "eDMA TCD RAM ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DTCM1_ECC_ERR", 4, 1, "Cortex-M7_0 DTCM 1 ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DTCM0_ECC_ERR", 3, 1, "Cortex-M7_0 DTCM 0 ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_ITCM_ECC_ERR", 2, 1, "Cortex-M7_0 ITCM ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_ICTAG_ECC_ERR", 0, 1, "Cortex-M7_0 I-cache Tag ECC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMROD5", 0x402AC210, 32, "Read-Only GPR On Destructive Reset 5", [
                Field("HSE_RDATA_EDC_ERR", 22, 1, "HSE_B Read Data EDC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_AHBM_RDATA_EDC_ERR", 21, 1, "Cortex-M7_0 AHBM Read Data EDC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_AHBP_RDATA_EDC_ERR", 20, 1, "Cortex-M7_0 AHBP Read Data EDC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("DMA_RDATA_EDC_ERR", 17, 1, "eDMA Read Data EDC Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("DEBUG_ACTIVATION_ERR", 13, 1, "Debug Activation Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("MCT_BUS_ERR", 12, 1, "MCT Bus Error", [
                    EnumVal("NO_TRSFR_ERR", "0", "No transfer error indicated from MCT."),
                    EnumVal("TRSFR_ERR", "0x1", "Transfer error indicated from MCT."),
                ]),
                Field("STCU_BIST_USER_CF", 11, 1, "STCU2 BIST User Critical Fault (CF)", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("MBIST_ACTIVATION_ERR", 10, 1, "MBIST Activation Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("STCU_NCF", 9, 1, "STCU2 NCF Result Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("SW_NCF_3", 8, 1, "Software NCF3 Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("SW_NCF_2", 7, 1, "Software NCF2 Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("SW_NCF_1", 6, 1, "Software NCF1 Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("SW_NCF_0", 5, 1, "Software NCF 0 Status", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("INTM_3_ERR", 4, 1, "INTM_3 Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("INTM_2_ERR", 3, 1, "INTM_2 Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("INTM_1_ERR", 2, 1, "INTM_1 Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("INTM_0_ERR", 1, 1, "INTM_0 Error", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMROF1", 0x402AC300, 32, "Read-Only GPR On Functional Reset 1", [
            ]),
            Register("DCMROF2", 0x402AC304, 32, "Read-Only GPR On Functional Reset 2", [
                Field("DCF_SDID0", 0, 32, "DCF Client SDID 0 Configuration", [
                ]),
            ]),
            Register("DCMROF3", 0x402AC308, 32, "Read-Only GPR On Functional Reset 3", [
                Field("DCF_SDID1", 0, 32, "DCF Client SDID 1 Configuration", [
                ]),
            ]),
            Register("DCMROF4", 0x402AC30C, 32, "Read-Only GPR On Functional Reset 4", [
                Field("DCF_SDID2", 0, 32, "DCF Client SDID 2 Configuration", [
                ]),
            ]),
            Register("DCMROF5", 0x402AC310, 32, "Read-Only GPR On Functional Reset 5", [
                Field("DCF_SDID3", 0, 32, "DCF Client SDID 3 Configuration", [
                ]),
            ]),
            Register("DCMROF6", 0x402AC314, 32, "Read-Only GPR On Functional Reset 6", [
                Field("DCF_SDID4", 0, 32, "DCF Client SDID 4 Configuration", [
                ]),
            ]),
            Register("DCMROF7", 0x402AC318, 32, "Read-Only GPR On Functional Reset 7", [
                Field("DCF_SDID5", 0, 32, "DCF Client SDID 5 Configuration", [
                ]),
            ]),
            Register("DCMROF8", 0x402AC31C, 32, "Read-Only GPR On Functional Reset 8", [
                Field("DCF_SDID6", 0, 32, "DCF Client SDID 6 Configuration", [
                ]),
            ]),
            Register("DCMROF9", 0x402AC320, 32, "Read-Only GPR On Functional Reset 9", [
                Field("DCF_SDID7", 0, 32, "DCF Client SDID 7 Configuration", [
                ]),
            ]),
            Register("DCMROF10", 0x402AC324, 32, "Read-Only GPR On Functional Reset 10", [
                Field("DCF_SDID8", 0, 32, "DCF Client SDID 8 Configuration", [
                ]),
            ]),
            Register("DCMROF11", 0x402AC328, 32, "Read-Only GPR On Functional Reset 11", [
                Field("DCF_SDID9", 0, 32, "DCF Client SDID 9 Configuration", [
                ]),
            ]),
            Register("DCMROF12", 0x402AC32C, 32, "Read-Only GPR On Functional Reset 12", [
                Field("DCF_SDID10", 0, 32, "DCF Client SDID 10 Configuration", [
                ]),
            ]),
            Register("DCMROF13", 0x402AC330, 32, "Read-Only GPR On Functional Reset 13", [
                Field("DCF_SDID11", 0, 32, "DCF Client SDID 11 Configuration", [
                ]),
            ]),
            Register("DCMROF14", 0x402AC334, 32, "Read-Only GPR On Functional Reset 14", [
                Field("DCF_SDID12", 0, 32, "DCF Client SDID 12 Configuration", [
                ]),
            ]),
            Register("DCMROF15", 0x402AC338, 32, "Read-Only GPR On Functional Reset 15", [
                Field("DCF_SDID13", 0, 32, "DCF Client SDID 13 Configuration", [
                ]),
            ]),
            Register("DCMROF16", 0x402AC33C, 32, "Read-Only GPR On Functional Reset 16", [
                Field("DCF_SDID14", 0, 32, "DCF Client SDID 14 Configuration", [
                ]),
            ]),
            Register("DCMROF17", 0x402AC340, 32, "Read-Only GPR On Functional Reset 17", [
                Field("DCF_SDID15", 0, 32, "DCF Client SDID 15 Configuration", [
                ]),
            ]),
            Register("DCMROF19", 0x402AC348, 32, "Read-Only GPR On Functional Reset 19", [
                Field("FCCU_EOUT_DEDICATED", 31, 1, "FCCU EOUT Status", [
                    EnumVal("GEN", "0", "General purpose, supporting all functions"),
                    EnumVal("DED_EOUT", "0x1", "Dedicated EOUT pins"),
                ]),
                Field("DCM_DONE", 30, 1, "Flash Memory Scanning Status", [
                    EnumVal("INCOMPLETE", "0", "Incomplete"),
                    EnumVal("COMPLETE", "0x1", "Complete"),
                ]),
            ]),
            Register("DCMROF20", 0x402AC34C, 32, "Read-Only GPR On Functional Reset 20", [
                Field("DCF_DEST_RST_ESC", 18, 14, "DCF Destructive Reset Escalation", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("AIPS_IAHB_BYP", 6, 1, "Status of AIPS1/2 IAHB gasket as configured in DCF record, UTEST_MISC[AIPS_IAHB_BYP].", [
                    EnumVal("ENABLE", "0", "Register wall enabled."),
                    EnumVal("BYPASS", "0x1", "Register wall bypassed."),
                ]),
                Field("POR_WDG_EN", 0, 1, "POR Watchdog (POR_WDG) Status", [
                    EnumVal("DISABLE", "0", "Disabled"),
                    EnumVal("ENABLE", "0x1", "Enabled"),
                ]),
            ]),
            Register("DCMROF21", 0x402AC350, 32, "Read-Only GPR On Functional Reset 21", [
                Field("HSE_CLK_MODE_OPTION", 19, 2, "HSE_B Clock Mode Option", [
                    EnumVal("OPTA", "0", "Option A"),
                    EnumVal("OPT_CDEG", "0x1", "Options C, D, E, E2, and F"),
                    EnumVal("OPTB", "0x2", "Option B"),
                    EnumVal("OPT_B", "0x3", "Option B"),
                ]),
                Field("DCF_DEST_RST_ESC", 0, 18, "DCF Destructive Reset Escalation", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("DCMRWP1", 0x402AC400, 32, "Read Write GPR On POR 1", [
                Field("SBAF_REC_DIS_DRST", 23, 1, "Disable Recovery Mode On Destructive Reset", [
                ]),
                Field("SBAF_REC_DIS_FRST", 22, 1, "Disable Recovery Mode On Functional Reset", [
                ]),
                Field("SYS_REC_COUNTER", 16, 5, "System Recovery Counter", [
                ]),
                Field("DEST_RESET_COUNT", 11, 4, "Destructive Reset Counts", [
                ]),
                Field("POR_WDOG_TRIM", 9, 2, "POR_WDG Trim", [
                    EnumVal("POR_WDG_TIME6", "0", "POR_WDG timeout = 06.25 ms"),
                    EnumVal("POR_WDG_TIME12", "0x1", "POR_WDG timeout = 12.50 ms"),
                    EnumVal("POR_WDG_TIME25", "0x2", "POR_WDG timeout = 25.00 ms"),
                    EnumVal("POR_WDG_TIME50", "0x3", "POR_WDG timeout = 50.00 ms"),
                ]),
                Field("STANBDY_PWDOG_DIS", 8, 1, "Standby POR_WDG Disable", [
                    EnumVal("ENABLE", "0", "Enables"),
                    EnumVal("DISABLE", "0x1", "Disables"),
                ]),
                Field("CLKOUT_STANDBY", 3, 1, "Clockout Standby Expose Over Functional And Destructive Reset", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMRWP3", 0x402AC408, 32, "Read Write GPR On POR 3", [
                Field("DEST_RST9_AS_IPI", 9, 1, "Destructive Reset 9", [
                    EnumVal("DESTRUCT", "0", "Destructive reset"),
                    EnumVal("PLL_LOL", "0x1", "PLL LOL interrupt"),
                ]),
            ]),
            Register("DCMRWD2", 0x402AC504, 32, "Read Write GPR On Destructive Reset 2", [
                Field("EOUT_STAT_DUR_STEST", 7, 1, "Controls the EOUT state during self-test", [
                    EnumVal("HGH_IMP", "0", "High impedance"),
                    EnumVal("FLT_STAT", "0x1", "Fault state"),
                ]),
            ]),
            Register("DCMRWD3", 0x402AC508, 32, "Read Write GPR On Destructive Reset 3", [
                Field("CM7_0_ICDATA_ECC_ERR_EN", 30, 1, "Cortex-M7_0 I-cache ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DCTAG_ECC_ERR_EN", 28, 1, "Cortex-M7_0 D-cache Tag ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DCDATA_ECC_ERR_EN", 26, 1, "Cortex-M7_0 D-cache Data ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PRAM0_ECC_ERR_EN", 25, 1, "PRAM0 ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("LC_ERR_EN", 22, 1, "Life Cycle Scanning Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("DATA_EDC_ERR_EN", 16, 1, "Data EDC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("ADDR_EDC_ERR_EN", 15, 1, "Address EDC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("AIPS1_GSKT_ALARM_EN", 13, 1, "Enable bit for enabling the fault monitoring at FCCU NCF 1 for the fault: AIPS1 IAHB gasket alarm.", [
                    EnumVal("NO_ALARM_IND", "0", "No alarm indicated by AIPS1 IAHB gasket."),
                    EnumVal("ALARM_IND", "0x1", "Alarm indicated by AIPS1 IAHB gasket."),
                ]),
                Field("HSE_GSKT_ALARM_EN", 11, 1, "HSE_B Gasket Alarm Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("SYS_AXBS_ALARM_EN", 8, 1, "System AXBS Alarm Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("TCM_GSKT_ALARM_EN", 5, 1, "TCM Gasket Alarm Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_LOCKUP_EN", 0, 1, "Cortex-M7 Lockup Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMRWD4", 0x402AC50C, 32, "Read Write GPR On Destructive Reset 4", [
                Field("TEST_ACTIVATION_1_ERR_EN", 30, 1, "Test Activation 1 Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("TEST_ACTIVATION_0_ERR_EN", 29, 1, "Test Activation 0 Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("VDD2P5_GNG_ERR_EN", 27, 1, "VDD2P5 Go/No-go Error Enable", [
                    EnumVal("CLEAN", "0", "Clean"),
                    EnumVal("UNCLEAN", "0x1", "Unclean"),
                ]),
                Field("VDD1P1_GNG_ERR_EN", 26, 1, "VDD1PD1 Go/No-go Error Enable", [
                    EnumVal("CLEAN", "0", "Clean"),
                    EnumVal("UNCLEAN", "0x1", "Unclean"),
                ]),
                Field("FLASH_ACCESS_ERR_EN", 24, 1, "Flash Memory Access Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_SCAN_ERR_EN", 22, 1, "Flash Memory Scanning Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_RST_ERR_EN", 21, 1, "Flash Memory Reset Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_REF_ERR_EN", 20, 1, "Flash Memory Reference Error Encode", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_ADDR_ENC_ERR_EN", 19, 1, "Flash Memory Address Encode Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("FLASH_EDC_ERR_EN", 18, 1, "Flash Memory EDC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF1_DATA_ECC_ERR_EN", 15, 1, "PF1 Data ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF1_CODE_ECC_ERR_EN", 14, 1, "PF1 Code ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF0_DATA_ECC_ERR_EN", 13, 1, "PF0 Data ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PF0_CODE_ECC_ERR_EN", 12, 1, "PF0 Code ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("PRAM0_FCCU_ALARM_EN", 9, 1, "PRAM0 FCCU Alarm Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("DMA_TCD_RAM_ECC_ERR_EN", 8, 1, "eDMA TCD RAM ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DTCM1_ECC_ERR_EN", 4, 1, "Cortex-M7_0 DTCM 1 ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_DTCM0_ECC_ERR_EN", 3, 1, "Cortex-M7_0 DTCM 0 ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_ITCM_ECC_ERR_EN", 2, 1, "Cortex-M7 ITCM ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_ICTAG_ECC_ERR_EN", 0, 1, "Cortex-M7_0 I-cache Tag ECC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMRWD5", 0x402AC510, 32, "Read Write GPR On Destructive Reset 5", [
                Field("CM7_0_AHBM_RDATA_EDC_ERR_EN", 21, 1, "Cortex-M7_0 AHBM Read Data EDC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("CM7_0_AHBP_RDATA_EDC_ERR_EN", 20, 1, "Cortex-M7_0 AHBP Read Data EDC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("DMA_RDATA_EDC_ERR_EN", 17, 1, "eDMA Read Data EDC Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("DEBUG_ACTIVATION_ERR_EN", 13, 1, "Debug Activation Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("MCT_BUS_ERR_EN", 12, 1, "MCT Bus Error Enable", [
                    EnumVal("NO_TRSFR_ERR", "0", "No transfer error indicated from MCT."),
                    EnumVal("TRSFR_ERR", "0x1", "Transfer error indicated from MCT."),
                ]),
                Field("STCU_BIST_USER_CF_EN", 11, 1, "STCU2 BIST User CF Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("MBIST_ACTIVATION_ERR_EN", 10, 1, "MBIST Activation Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("STCU_NCF_EN", 9, 1, "STCU2 NCF Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SW_NCF_3_EN", 8, 1, "Software NCF 3 Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SW_NCF_2_EN", 7, 1, "Software NCF 2 Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SW_NCF_1_EN", 6, 1, "Software NCF 1 Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SW_NCF_0_EN", 5, 1, "Software NCF 0 Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("INTM_3_ERR_EN", 4, 1, "INTM 3 Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("INTM_2_ERR_EN", 3, 1, "INTM 2 Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("INTM_1_ERR_EN", 2, 1, "INTM 1 Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
                Field("INTM_0_ERR_EN", 1, 1, "INTM 0 Error Enable", [
                    EnumVal("NO", "0", "No"),
                    EnumVal("YES", "0x1", "Yes"),
                ]),
            ]),
            Register("DCMRWD6", 0x402AC514, 32, "Read Write GPR On Destructive Reset 6", [
                Field("FLEXCAN2_DBG_DIS_CM7_0", 26, 1, "FlexCAN_2 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("FLEXCAN1_DBG_DIS_CM7_0", 25, 1, "FlexCAN_1 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("FLEXCAN0_DBG_DIS_CM7_0", 24, 1, "FlexCAN_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("FLEXIO_DBG_DIS_CM7_0", 23, 1, "FlexIO Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LPI2C1_DBG_DIS_CM7_0", 22, 1, "LPI2C_1 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LPI2C0_DBG_DIS_CM7_0", 21, 1, "LPI2C_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LPSPI3_DBG_DIS_CM7_0", 18, 1, "LPSPI_3 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LPSPI2_DBG_DIS_CM7_0", 17, 1, "LPSPI_2 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LPSPI1_DBG_DIS_CM7_0", 16, 1, "LPSPI_1 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LPSPI0_DBG_DIS_CM7_0", 15, 1, "LPSPI_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("PIT1_DBG_DIS_CM7_0", 13, 1, "PIT_1 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("PIT0_DBG_DIS_CM7_0", 12, 1, "PIT_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("STM0_DBG_DIS_CM7_0", 10, 1, "STM_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("SWT0_DBG_DIS_CM7_0", 8, 1, "SWT_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("RTC_DBG_DIS_CM7_0", 7, 1, "RTC Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("EMIOS1_DBG_DIS_CM7_0", 5, 1, "EMIOS1 debug disable bit for CM7_0. Set this bit 1 to disable the debug of IP.", [
                    EnumVal("DBG_MOD", "0", "eMIOS1 enters debug mode when CM7_0 enters debug mode."),
                    EnumVal("FUNC_UNIMPCT", "0x1", "eMIOS1 remains functional and is not impacted when CM7_0 enters debug mode."),
                ]),
                Field("EMIOS0_DBG_DIS_CM7_0", 4, 1, "eMIOS_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LCU1_DBG_DIS_CM7_0", 3, 1, "LCU_1 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("LCU0_DBG_DIS_CM7_0", 2, 1, "LCU_0 Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("FCCU_DBG_DIS_CM7_0", 1, 1, "FCCU Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
                Field("EDMA_DBG_DIS_CM7_0", 0, 1, "eDMA Debug Disable Cortex-M7_0", [
                    EnumVal("DBG_MOD", "0", "Enters Debug mode"),
                    EnumVal("FUNC_UNIMPCT", "0x1", "Remains functional and unimpacted"),
                ]),
            ]),
            Register("DCMRWD7", 0x402AC518, 32, "Read Write GPR On Destructive Reset 7", [
            ]),
            Register("DCMRWD8", 0x402AC51C, 32, "Read Write GPR On Destructive Reset 8", [
            ]),
            Register("DCMRWD9", 0x402AC520, 32, "Read Write GPR On Destructive Reset 9", [
            ]),
            Register("DCMRWF1", 0x402AC600, 32, "Read Write GPR On Functional Reset 1", [
                Field("VDD_HV_A_VLT_DVDR_EN", 25, 1, "VDD_HV_A Voltage Divider Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("VSS_LV_ANMUX_EN", 24, 1, "VSS_LV Monitoring Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SUPPLY_MON_SEL", 21, 3, "Supply Monitoring Select", [
                    EnumVal("VDD_HVA", "0", "VDD_HV_A_DIV"),
                    EnumVal("VDD_HVB", "0x1", "VDD_HV_B_DIV"),
                    EnumVal("VDD_DIV", "0x2", "VDD_1.5_DIV"),
                    EnumVal("VDD_OSC", "0x3", "VDD_2.5_OSC"),
                    EnumVal("VDD_PDH", "0x4", "VDD1.1_PD1_HOT_POINT"),
                    EnumVal("VDD_PDC", "0x5", "VDD1.1_PD1_COLD_POINT"),
                    EnumVal("VDD_PLL", "0x6", "VDD1.1_PLL"),
                    EnumVal("VDD_PD0", "0x7", "VDD1.1_PD0"),
                ]),
                Field("SUPPLY_MON_EN", 20, 1, "Supply Monitoring Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("STANDBY_IO_CONFIG", 16, 1, "Standby I/O Configuration", [
                    EnumVal("STDBY_ENTRY", "0", "Must be written as 0 before IO configurations are done in standby entry sequence."),
                    EnumVal("STDBY_EXIT", "0x1", "Must be written as 1 after IO configurations are done on standby exit."),
                ]),
                Field("FCCU_SW_NCF3", 5, 1, "FCCU Software NCF 3", [
                    EnumVal("NOT_GEN", "0", "Not generated"),
                    EnumVal("GEN", "0x1", "Generated"),
                ]),
                Field("FCCU_SW_NCF2", 4, 1, "FCCU Software NCF 2", [
                    EnumVal("NOT_GEN", "0", "Not generated"),
                    EnumVal("GEN", "0x1", "Generated"),
                ]),
                Field("FCCU_SW_NCF1", 3, 1, "FCCU Software NCF 1", [
                    EnumVal("NOT_GEN", "0", "Not generated"),
                    EnumVal("GEN", "0x1", "Generated"),
                ]),
                Field("FCCU_SW_NCF0", 2, 1, "FCCU Software NCF 0", [
                    EnumVal("NOT_GEN", "0", "Not generated"),
                    EnumVal("GEN", "0x1", "Generated"),
                ]),
            ]),
            Register("DCMRWF2", 0x402AC604, 32, "Read Write GPR On Functional Reset 2", [
                Field("HSE_GSKT_BYPASS", 16, 1, "HSE_B Gasket Bypass", [
                    EnumVal("NO_BYPASS", "0", "Not bypassed"),
                    EnumVal("BYPASS", "0x1", "Bypassed"),
                ]),
                Field("PMC_TRIM_RGM_DCF_BYP_STDBY_EXT", 5, 1, "PMC Trim MC_RGM DCF Bypass Standby Exit", [
                    EnumVal("NOT_BYPASS", "0", "Not bypassed"),
                    EnumVal("BYPASS", "0x1", "Bypassed"),
                ]),
                Field("FIRC_TRIM_BYP_STDBY_EXT", 4, 1, "FIRC Trim Bypass Standby Exit", [
                    EnumVal("NOT_BYPASS", "0", "Not bypassed"),
                    EnumVal("BYPASS", "0x1", "Bypassed"),
                ]),
                Field("DCM_SCAN_BYP_STDBY_EXT", 3, 1, "DCM Scan Bypass Standby Exit", [
                    EnumVal("NOT_BYPASS", "0", "Not bypassed"),
                    EnumVal("BYPASS", "0x1", "Bypassed"),
                ]),
            ]),
            Register("DCMRWF4", 0x402AC60C, 32, "Read Write GPR On Functional Reset 4", [
                Field("MUX_MODE_EN_ADC0_P2", 28, 1, "Mux Mode Enable ADC0 Precision Channel 2nd", [
                    EnumVal("GPIO_8", "0", "Selects GPIO_8 as the ADC0_P2."),
                    EnumVal("GPIO_10", "0x1", "Selects GPIO_10 as the ADC0_P2."),
                ]),
                Field("CM7_0_CPUWAIT", 17, 1, "Cortex-M7_0 CPU Wait", [
                    EnumVal("DISABLE", "0", "Disables CPUWAIT"),
                    EnumVal("ENABLE", "0x1", "Enables CPUWAIT"),
                ]),
                Field("GLITCH_FIL_TRG_IN3_BYP", 16, 1, "Glitch Filter TRGMUX Input 3 Bypass", [
                    EnumVal("ENABLE", "0", "Enables"),
                    EnumVal("BYPASS", "0x1", "Bypasses"),
                ]),
                Field("GLITCH_FIL_TRG_IN2_BYP", 15, 1, "Glitch Filter TRGMUX Input 2 Bypass", [
                    EnumVal("ENABLE", "0", "Enables"),
                    EnumVal("BYPASS", "0x1", "Bypasses"),
                ]),
                Field("GLITCH_FIL_TRG_IN1_BYP", 14, 1, "Glitch Filter TRGMUX Input 1 Bypass", [
                    EnumVal("ENABLE", "0", "Enables"),
                    EnumVal("BYPASS", "0x1", "Bypasses"),
                ]),
                Field("GLITCH_FIL_TRG_IN0_BYP", 13, 1, "Glitch Filter TRGMUX Input 0 Bypass", [
                    EnumVal("ENABLE", "0", "Enables"),
                    EnumVal("BYPASS", "0x1", "Bypasses"),
                ]),
                Field("MUX_MODE_EN_ADC0_S17", 12, 1, "Mux Mode Enable ADC_0 Standard Channel 17", [
                    EnumVal("GPIO_75", "0", "GPIO_75"),
                    EnumVal("GPIO_44", "0x1", "GPIO_44"),
                ]),
                Field("MUX_MODE_EN_ADC0_S14", 11, 1, "Mux Mode Enable ADC_0 Standard Channel 14", [
                    EnumVal("GPIO_32", "0", "GPIO_32"),
                    EnumVal("GPIO_80", "0x1", "GPIO_80"),
                ]),
                Field("MUX_MODE_EN_ADC0_S13", 8, 1, "Mux Mode Enable ADC_0 Standard Channel 13", [
                    EnumVal("GPIO_73", "0", "GPIO_73"),
                    EnumVal("GPIO_79", "0x1", "GPIO_79"),
                ]),
                Field("MUX_MODE_EN_ADC0_S12", 7, 1, "Mux Mode Enable ADC_0 Standard Channel 12", [
                    EnumVal("GPIO_72", "0", "GPIO_72"),
                    EnumVal("GPIO_78", "0x1", "GPIO_78"),
                ]),
                Field("MUX_MODE_EN_ADC1_S15", 4, 1, "Mux Mode Enable ADC_1 Standard Channel 15", [
                    EnumVal("GPIO_4", "0", "GPIO_4"),
                    EnumVal("GPIO_3", "0x1", "GPIO_33"),
                ]),
                Field("MUX_MODE_EN_ADC1_S14", 3, 1, "Mux Mode Enable ADC_1 Standard Channel 14", [
                    EnumVal("GPIO_69", "0", "GPIO_69"),
                    EnumVal("GPIO_32", "0x1", "GPIO_32"),
                ]),
                Field("MUX_MODE_EN_ADC0_S9", 2, 1, "Mux Mode Enable ADC_0 Standard Channel 9", [
                    EnumVal("GPIO_1", "0", "GPIO_1"),
                    EnumVal("GPIO_46", "0x1", "GPIO_46"),
                ]),
                Field("MUX_MODE_EN_ADC0_S8", 1, 1, "Mux Mode Enable ADC_0 Standard Channel 8", [
                    EnumVal("GPIO_0", "0", "GPIO_0"),
                    EnumVal("GPIO_45", "0x1", "GPIO_45"),
                ]),
                Field("MUX_MODE_EN_ADC1_S18", 0, 1, "Controls the selection of GPIOs to drive ADC1 standard channel 18th.", [
                    EnumVal("GPIO_70", "0", "Selects GPIO_70 as the ADC1_S18."),
                    EnumVal("GPIO_6", "0x1", "Selects GPIO_6 as the ADC1_S18."),
                ]),
            ]),
            Register("DCMRWF5", 0x402AC610, 32, "Read Write GPR On Functional Reset 5", [
                Field("BOOT_ADDRESS", 1, 31, "Boot Address", [
                ]),
                Field("BOOT_MODE", 0, 1, "Boot Mode", [
                    EnumVal("NORM", "0", "Normal"),
                    EnumVal("FST_STDBY", "0x1", "Fast Standby"),
                ]),
            ]),
            Register("DCMROPP1", 0x402AC700, 32, "Read-Only GPR On PMCPOR Reset 1", [
                Field("POR_WDG_STAT31", 31, 1, "POR_WDG Status 31", [
                    EnumVal("NO_DETECT", "0", "Not detected"),
                    EnumVal("DETECT", "0x1", "Detected"),
                ]),
                Field("POR_WDG_STAT30", 30, 1, "POR_WDG Status 30", [
                    EnumVal("NO_ACKNWLDG", "0", "Not acknowledged"),
                    EnumVal("ACKNWLDG", "0x1", "Acknowledged"),
                ]),
                Field("POR_WDG_STAT29", 29, 1, "POR_WDG Status 29", [
                    EnumVal("ACTIVE", "0", "Active"),
                    EnumVal("INACTIVE", "0x1", "Inactive"),
                ]),
                Field("POR_WDG_STAT20", 20, 1, "POR_WDG Status 20", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT17", 17, 1, "POR_WDG Status 17", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT14", 14, 1, "POR_WDG Status 14", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT11", 11, 1, "POR_WDG Status 11", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT10", 10, 1, "POR_WDG Status 10", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT6", 6, 1, "POR_WDG Status 6", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT5", 5, 1, "POR_WDG Status 5", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT4", 4, 1, "POR_WDG Status 4", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT3", 3, 1, "POR_WDG Status 3", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT2", 2, 1, "POR_WDG Status 2", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT1", 1, 1, "POR_WDG Status 1", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
                Field("POR_WDG_STAT0", 0, 1, "POR_WDG Status 0", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
            ]),
            Register("DCMROPP2", 0x402AC704, 32, "Read-Only GPR On PMCPOR Reset 2", [
                Field("POR_WDG_STAT62", 30, 1, "POR_WDG Status 62", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT61", 29, 1, "POR_WDG Status 61", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT52", 20, 1, "POR_WDG Status 52", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT48", 16, 1, "POR_WDG Status 48", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT44", 12, 1, "POR_WDG Status 44", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT41", 9, 1, "POR_WDG Status 41", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT40", 8, 1, "POR_WDG Status 40", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT39", 7, 1, "POR_WDG Status 39", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT38", 6, 1, "POR_WDG Status 38", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT36", 4, 1, "POR_WDG Status 36", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT35", 3, 1, "POR_WDG Status 35", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT32", 0, 1, "POR_WDG Status 32", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
            ]),
            Register("DCMROPP3", 0x402AC708, 32, "Read-Only GPR On PMCPOR Reset 3", [
                Field("POR_WDG_STAT94", 30, 1, "POR_WDG Status 94", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT93", 29, 1, "POR_WDG Status 93", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT82", 18, 1, "POR_WDG Status 82", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT81", 17, 1, "POR_WDG Status 81", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT80", 16, 1, "POR_WDG Status 80", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT79", 15, 1, "POR_WDG Status 79", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT78", 14, 1, "POR_WDG Status 78", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT76", 12, 1, "POR_WDG Status 76", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT74", 10, 1, "POR_WDG Status 74", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT73", 9, 1, "POR_WDG Status 73", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT72", 8, 1, "POR_WDG Status 72", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT70", 6, 1, "POR_WDG Status 70", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT68", 4, 1, "POR_WDG Status 68", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT67", 3, 1, "POR_WDG Status 67", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
                Field("POR_WDG_STAT64", 0, 1, "POR_WDG Status 64", [
                    EnumVal("DISABLE", "0", "0"),
                    EnumVal("ENABLE", "0x1", "1"),
                ]),
            ]),
            Register("DCMROPP4", 0x402AC70C, 32, "Read-Only GPR On PMCPOR Reset 4", [
                Field("POR_WDG_STAT96", 0, 1, "POR_WDG Status 96", [
                    EnumVal("INACTIVE", "0", "Inactive"),
                    EnumVal("ACTIVE", "0x1", "Active"),
                ]),
            ]),
        ])

class Module_DMAMUX_0(Peripheral):
    def __init__(self):
        super().__init__("DMAMUX_0", 0x40280000, 0x8, [
            Register("CHCFG0", 0x40280000, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG1", 0x40280001, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG2", 0x40280002, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG3", 0x40280003, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG4", 0x40280004, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG5", 0x40280005, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG6", 0x40280006, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG7", 0x40280007, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
        ])

class Module_DMAMUX_1(Peripheral):
    def __init__(self):
        super().__init__("DMAMUX_1", 0x40284000, 0x8, [
            Register("CHCFG0", 0x40284000, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG1", 0x40284001, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG2", 0x40284002, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG3", 0x40284003, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG4", 0x40284004, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG5", 0x40284005, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG6", 0x40284006, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG7", 0x40284007, 8, "Channel Configuration", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
        ])

class Module_DPGA_AE(Peripheral):
    def __init__(self):
        super().__init__("DPGA_AE", 0x140, 0x10, [
            Register("INTF", 0x140, 8, "Interrupt Flags", [
                Field("BTCFGIF", 5, 1, "BTCFG Interrupt Flag", [
                    EnumVal("PAR_GOOD", "0", "The parity check has been ok since the last clearing of this bit."),
                    EnumVal("PAR_FAIL", "0x1", "A failure in the parity check was detected since the last clearing of this bit."),
                ]),
                Field("AMPCFGIF", 4, 1, "AMPCFG Interrupt Flag", [
                    EnumVal("PAR_GOOD", "0", "The parity check has been ok since the last clearing of this bit."),
                    EnumVal("PAR_FAIL", "0x1", "A failure in the parity check was detected since the last clearing of this bit."),
                ]),
                Field("HDIF", 1, 1, "High detect interrupt flag", [
                    EnumVal("HDIF_LOW", "0", "No high voltage condition has been detected since the last clearing of this bit."),
                    EnumVal("HDIF_HIGH", "0x1", "A high voltage condition has been detected since the last clearing of this bit."),
                ]),
                Field("LDIF", 0, 1, "Low detect interrupt flag", [
                    EnumVal("LDIF_LOW", "0", "No low voltage condition has been detected since the last clearing of this bit."),
                    EnumVal("LDIF_HIGH", "0x1", "A low voltage condition has been detected since the last clearing of this bit."),
                ]),
            ]),
            Register("INTEN", 0x141, 8, "Interrupt enable", [
                Field("BTCFGIE", 5, 1, "BTCFG interrupt enable", [
                    EnumVal("DISABLED", "0", "The interrupt will not be created."),
                    EnumVal("ENABLED", "0x1", "The interrupt will be created."),
                ]),
                Field("AMPCFGIE", 4, 1, "AMPCFG interrupt enable", [
                    EnumVal("DISABLED", "0", "The interrupt will not be created."),
                    EnumVal("ENABLED", "0x1", "The interrupt will be created."),
                ]),
                Field("HDIE", 1, 1, "High detect interrupt enable", [
                    EnumVal("HDIE_DISABLED", "0", "The high detect interrupt flag INTF[HDIF] cannot assert any interrupt."),
                    EnumVal("HDIE_ENABLED", "0x1", "The high detect interrupt flag INTF[HDIF] can assert the high detect interrupt."),
                ]),
                Field("LDIE", 0, 1, "Low detect interrupt enable", [
                    EnumVal("LDIE_DISABLED", "0", "The low detect interrupt flag INTF[LDIF] cannot assert any interrupt."),
                    EnumVal("LDIE_ENABLED", "0x1", "The low detect interrupt flag INTF[LDIF] can assert the low detect interrupt."),
                ]),
            ]),
            Register("STAT", 0x142, 8, "Status", [
                Field("BTCFGS", 5, 1, "BTCFG status", [
                    EnumVal("EVEN", "0", "The count of bits set to 1 in the register is even."),
                    EnumVal("ODD", "0x1", "The count of bits set to 1 in the register is odd."),
                ]),
                Field("AMPCFGS", 4, 1, "AMPCFG status", [
                    EnumVal("EVEN", "0", "The count of bits set to 1 in the register is even."),
                    EnumVal("ODD", "0x1", "The count of bits set to 1 in the register is odd."),
                ]),
                Field("HDS", 1, 1, "High detect filtered status", [
                    EnumVal("HDFILTS_LOW", "0", "No high voltage condition is detected."),
                    EnumVal("HDFILTS_HIGH", "0x1", "A high voltage condition is detected, so the amplifier output voltage has been higher than the limit configured in VDCFG[HDLIM] for longer than the filter time defined in VDCFG[HDFILT] ."),
                ]),
                Field("LDS", 0, 1, "Low detect filtered status", [
                    EnumVal("LDFILTS_LOW", "0", "No low voltage condition is detected."),
                    EnumVal("LDFILTS_HIGH", "0x1", "A low voltage condition is detected, so the amplifier output voltage has been lower than the limit configured in VDCFG[LDLIM] for longer than the filter time defined in VDCFG[LDFILT] ."),
                ]),
            ]),
            Register("CTRL", 0x143, 8, "Control", [
                Field("FSTEN", 7, 1, "Functional Self-Test Enable", [
                    EnumVal("DISABLE", "0", "The functional self-tests cannot be activated."),
                    EnumVal("ENABLE", "0x1", "The functional self-tests can be activated."),
                ]),
                Field("VDTEN", 5, 1, "Voltage Detector Test Enable", [
                    EnumVal("VDTEN_DISABLED", "0", "The high and low detectors are in functional mode."),
                    EnumVal("VDTEN_ENABLED", "0x1", "If CTRL[FSTEN] is set, the functional self-test of the high and low detectors are active."),
                ]),
                Field("AMPTEN", 4, 1, "Amplifier test enable", [
                    EnumVal("AMPTEN_DISABLED", "0", "The amplifier is in functional mode."),
                    EnumVal("AMPTEN_ENABLE", "0x1", "If CTRL[FSTEN] is set, the functional self-test of the amplifier is active."),
                ]),
                Field("BIVDEN", 3, 1, "Bipolar Voltage Detector Enable", [
                    EnumVal("BIVDEN_DISABLED", "0", "disabled"),
                    EnumVal("BIVDEN_ENABLED", "0x1", "enabled"),
                ]),
                Field("CFGEN", 2, 1, "Configuration Mode Enable", [
                    EnumVal("DISABLED", "0", "The DPGA is in functional mode."),
                    EnumVal("ENABLED", "0x1", "The DPGA is in configuration mode."),
                ]),
                Field("VDEN", 1, 1, "Voltage Detector Enable", [
                    EnumVal("VDEN_DISABLED", "0", "disabled"),
                    EnumVal("VDEN_ENABLED", "0x1", "enabled"),
                ]),
                Field("EN", 0, 1, "Enable", [
                    EnumVal("DISABLED", "0", "The DPGA is disabled, all features are turned off. Select this when you do not want to utilize the DPGA."),
                    EnumVal("ENABLED", "0x1", "The DPGA is enabled, all features are used as configured."),
                ]),
            ]),
            Register("AMPCFG", 0x144, 32, "Amplifier Configuration", [
                Field("OCMSEL", 28, 2, "Output Common Mode Configuration", [
                    EnumVal("OCMSEL0", "0", "reference voltage divided by 12"),
                    EnumVal("OCMSEL1", "0x1", "reference voltage divided by 6"),
                    EnumVal("OCMSEL2", "0x2", "reference voltage divided by 4"),
                    EnumVal("OCMSEL3", "0x3", "reference voltage divided by 2"),
                ]),
                Field("OFFSEL", 20, 4, "Offset compensation configuration", [
                    EnumVal("OFFSEL0", "0", "no offset compensation"),
                    EnumVal("OFFSEL1", "0x1", "3 mV positive compensation"),
                    EnumVal("OFFSEL2", "0x2", "6 mV positive compensation"),
                    EnumVal("OFFSEL7", "0x7", "21 mV positive compensation"),
                    EnumVal("OFFSEL8", "0x8", "no offset compensation"),
                    EnumVal("OFFSEL9", "0x9", "3 mV negative compensation"),
                    EnumVal("OFFSEL10", "0xA", "6 mV negative compensation"),
                    EnumVal("OFFSEL15", "0xF", "21 mV negative compensation"),
                ]),
                Field("GAINSEL", 12, 3, "Gain selection", [
                    EnumVal("GAINSEL0", "0", "amplify by 8"),
                    EnumVal("GAINSEL1", "0x1", "amplify by 16"),
                    EnumVal("GAINSEL2", "0x2", "amplify by 24"),
                    EnumVal("GAINSEL3", "0x3", "amplify by 32"),
                    EnumVal("GAINSEL4", "0x4", "amplify by 40"),
                    EnumVal("GAINSEL5", "0x5", "amplify by 50"),
                    EnumVal("GAINSEL6", "0x6", "amplify by 65"),
                    EnumVal("GAINSEL7", "0x7", "amplify by 80"),
                ]),
                Field("IGND", 11, 1, "Input Grounded", [
                    EnumVal("FUNC", "0", "Functional connection"),
                    EnumVal("GND", "0x1", "Connection to ground"),
                ]),
                Field("ICMCSEL", 8, 2, "Input Common Mode Coarse Configuration", [
                    EnumVal("ICMCSEL0", "0", "no common mode shift"),
                    EnumVal("ICMCSEL1", "0x1", "common mode shift with 200 uA current out of both differential inputs"),
                    EnumVal("ICMCSEL2", "0x2", "common mode shift with 100 uA current out of both differential inputs"),
                    EnumVal("ICMCSEL3", "0x3", "common mode shift with 50 uA current out of both differential inputs"),
                ]),
                Field("ICMFSEL", 0, 6, "Input Common Mode Fine Configuration", [
                    EnumVal("ICMFSEL0", "0", "ICMCSEL*1.000 out of minus input"),
                    EnumVal("ICMFSEL1", "0x1", "ICMCSEL*1.0025 out of minus input"),
                    EnumVal("ICMFSEL2", "0x2", "ICMCSEL*1.005 out of minus input"),
                    EnumVal("ICMFSEL31", "0x1F", "ICMCSEL*1.0775 out of minus input"),
                    EnumVal("ICMFSEL32", "0x20", "ICMCSEL*1.000 out of plus input"),
                    EnumVal("ICMFSEL33", "0x21", "ICMCSEL*1.0025 out of plus input"),
                    EnumVal("ICMFSEL34", "0x22", "ICMCSEL*1.005 out of plus input"),
                    EnumVal("ICMFSEL63", "0x3F", "ICMCSEL*1.0775 out of plus input"),
                ]),
            ]),
            Register("BTCFG", 0x148, 32, "Blanking time configuration", [
                Field("SELTRG5", 26, 2, "Select Trigger 5", [
                    EnumVal("ZERO", "0", "The trigger n cannot start the blanking time counter"),
                    EnumVal("ONE", "0x1", "The falling edge of the trigger n starts the counting from 0."),
                    EnumVal("TWO", "0x2", "The rising edge of the trigger n starts the counting from 0."),
                    EnumVal("THREE", "0x3", "Any edge of the trigger n starts the counting from 0."),
                ]),
                Field("SELTRG4", 24, 2, "Select Trigger 4", [
                    EnumVal("ZERO", "0", "The trigger n cannot start the blanking time counter"),
                    EnumVal("ONE", "0x1", "The falling edge of the trigger n starts the counting from 0."),
                    EnumVal("TWO", "0x2", "The rising edge of the trigger n starts the counting from 0."),
                    EnumVal("THREE", "0x3", "Any edge of the trigger n starts the counting from 0."),
                ]),
                Field("SELTRG3", 22, 2, "Select Trigger 3", [
                    EnumVal("ZERO", "0", "The trigger n cannot start the blanking time counter"),
                    EnumVal("ONE", "0x1", "The falling edge of the trigger n starts the counting from 0."),
                    EnumVal("TWO", "0x2", "The rising edge of the trigger n starts the counting from 0."),
                    EnumVal("THREE", "0x3", "Any edge of the trigger n starts the counting from 0."),
                ]),
                Field("SELTRG2", 20, 2, "Select Trigger 2", [
                    EnumVal("ZERO", "0", "The trigger n cannot start the blanking time counter"),
                    EnumVal("ONE", "0x1", "The falling edge of the trigger n starts the counting from 0."),
                    EnumVal("TWO", "0x2", "The rising edge of the trigger n starts the counting from 0."),
                    EnumVal("THREE", "0x3", "Any edge of the trigger n starts the counting from 0."),
                ]),
                Field("SELTRG1", 18, 2, "Select Trigger 1", [
                    EnumVal("ZERO", "0", "The trigger n cannot start the blanking time counter"),
                    EnumVal("ONE", "0x1", "The falling edge of the trigger n starts the counting from 0."),
                    EnumVal("TWO", "0x2", "The rising edge of the trigger n starts the counting from 0."),
                    EnumVal("THREE", "0x3", "Any edge of the trigger n starts the counting from 0."),
                ]),
                Field("SELTRG0", 16, 2, "Select Trigger 0", [
                    EnumVal("ZERO", "0", "The trigger n cannot start the blanking time counter"),
                    EnumVal("ONE", "0x1", "The falling edge of the trigger n starts the counting from 0."),
                    EnumVal("TWO", "0x2", "The rising edge of the trigger n starts the counting from 0."),
                    EnumVal("THREE", "0x3", "Any edge of the trigger n starts the counting from 0."),
                ]),
                Field("BTDUR", 0, 8, "Blanking time duration", [
                ]),
            ]),
            Register("VDCFG", 0x14C, 32, "Voltage Detector Configuration", [
                Field("HDFDUR", 20, 10, "High Detect Filter Duration", [
                ]),
                Field("HDLIM", 16, 4, "High Detect Limit", [
                ]),
                Field("LDFDUR", 4, 10, "Low Detect Filter Duration", [
                ]),
                Field("LDLIM", 0, 4, "Low Detect Limit", [
                ]),
            ]),
        ])

class Module_EDMA(Peripheral):
    def __init__(self):
        super().__init__("EDMA", 0x4020C000, 0x130, [
            Register("CSR", 0x4020C000, 32, "Management Page Control", [
                Field("ACTIVE", 31, 1, "DMA Active Status", [
                    EnumVal("ACTIVE_0", "0", "eDMA is idle"),
                    EnumVal("ACTIVE_1", "0x1", "eDMA is executing a channel"),
                ]),
                Field("ACTIVE_ID", 24, 4, "Active Channel ID", [
                ]),
                Field("CX", 9, 1, "Cancel Transfer", [
                    EnumVal("CX_0", "0", "Normal operation"),
                    EnumVal("CX_1", "0x1", "Cancel the remaining data transfer"),
                ]),
                Field("ECX", 8, 1, "Cancel Transfer With Error", [
                    EnumVal("ECX_0", "0", "Normal operation"),
                    EnumVal("ECX_1", "0x1", "Cancel the remaining data transfer"),
                ]),
                Field("GMRC", 7, 1, "Global Master ID Replication Control", [
                    EnumVal("GMRC_0", "0", "Master ID replication disabled for all channels"),
                    EnumVal("GMRC_1", "0x1", "Master ID replication available and controlled by each channel's CHn_SBR[EMI] setting"),
                ]),
                Field("GCLC", 6, 1, "Global Channel Linking Control", [
                    EnumVal("GCLC_0", "0", "Channel linking disabled for all channels"),
                    EnumVal("GCLC_1", "0x1", "Channel linking available and controlled by each channel's link settings"),
                ]),
                Field("HALT", 5, 1, "Halt DMA Operations", [
                    EnumVal("HALT_0", "0", "Normal operation"),
                    EnumVal("HALT_1", "0x1", "Stall the start of any new channels"),
                ]),
                Field("HAE", 4, 1, "Halt After Error", [
                    EnumVal("HAE_0", "0", "Normal operation"),
                    EnumVal("HAE_1", "0x1", "Any error causes the HALT field to be set to 1"),
                ]),
                Field("ERCA", 2, 1, "Enable Round Robin Channel Arbitration", [
                    EnumVal("ERCA_0", "0", "Round-robin channel arbitration disabled"),
                    EnumVal("ERCA_1", "0x1", "Round-robin channel arbitration enabled"),
                ]),
                Field("EDBG", 1, 1, "Enable Debug", [
                    EnumVal("EDBG_0", "0", "Debug mode disabled"),
                    EnumVal("EDBG_1", "0x1", "Debug mode is enabled."),
                ]),
            ]),
            Register("ES", 0x4020C004, 32, "Management Page Error Status", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("VLD_0", "0", "No ERR fields are set to 1"),
                    EnumVal("VLD_1", "0x1", "At least one ERR field is set to 1, indicating a valid error exists that software has not cleared"),
                ]),
                Field("ERRCHN", 24, 4, "Error Channel Number or Canceled Channel Number", [
                ]),
                Field("UCE", 9, 1, "Uncorrectable TCD Error During Channel Execution", [
                    EnumVal("UCE_0", "0", "No uncorrectable ECC error"),
                    EnumVal("UCE_1", "0x1", "Last recorded error was an uncorrectable TCD RAM error"),
                ]),
                Field("ECX", 8, 1, "Transfer Canceled", [
                    EnumVal("ECX_0", "0", "No canceled transfers"),
                    EnumVal("ECX_1", "0x1", "Last recorded entry was a canceled transfer by the error cancel transfer input"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "The last recorded error was NBYTES equal to zero or a CITER not equal to BITER error"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was a bus error on a source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was a bus error on a destination write"),
                ]),
            ]),
            Register("INT", 0x4020C008, 32, "Management Page Interrupt Request Status", [
                Field("INT", 0, 12, "Interrupt Request Status", [
                ]),
            ]),
            Register("HRS", 0x4020C00C, 32, "Management Page Hardware Request Status", [
                Field("HRS", 0, 32, "Hardware Request Status", [
                ]),
            ]),
            Register("CH_GRPRI[0]", 0x4020C100, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[1]", 0x4020C104, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[2]", 0x4020C108, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[3]", 0x4020C10C, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[4]", 0x4020C110, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[5]", 0x4020C114, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[6]", 0x4020C118, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[7]", 0x4020C11C, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[8]", 0x4020C120, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[9]", 0x4020C124, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[10]", 0x4020C128, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
            Register("CH_GRPRI[11]", 0x4020C12C, 32, "Channel Arbitration Group", [
                Field("GRPRI", 0, 5, "Arbitration Group For Channel n", [
                ]),
            ]),
        ])

class Module_EIM(Peripheral):
    def __init__(self):
        super().__init__("EIM", 0x40258000, 0x888, [
            Register("EIMCR", 0x40258000, 32, "Error Injection Module Configuration Register", [
                Field("GEIEN", 0, 1, "Global Error Injection Enable", [
                    EnumVal("DISABLE", "0", "Disabled"),
                    EnumVal("ENABLE", "0x1", "Enabled"),
                ]),
            ]),
            Register("EICHEN", 0x40258004, 32, "Error Injection Channel Enable register", [
                Field("EICH0EN", 31, 1, "Error Injection Channel 0 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 0"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 0"),
                ]),
                Field("EICH2EN", 29, 1, "Error Injection Channel 2 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 2"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 2"),
                ]),
                Field("EICH3EN", 28, 1, "Error Injection Channel 3 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 3"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 3"),
                ]),
                Field("EICH4EN", 27, 1, "Error Injection Channel 4 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 4"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 4"),
                ]),
                Field("EICH5EN", 26, 1, "Error Injection Channel 5 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 5"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 5"),
                ]),
                Field("EICH6EN", 25, 1, "Error Injection Channel 6 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 6"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 6"),
                ]),
                Field("EICH7EN", 24, 1, "Error Injection Channel 7 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 7"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 7"),
                ]),
                Field("EICH13EN", 18, 1, "Error Injection Channel 13 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 13"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 13"),
                ]),
                Field("EICH14EN", 17, 1, "Error Injection Channel 14 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 14"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 14"),
                ]),
                Field("EICH15EN", 16, 1, "Error Injection Channel 15 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 15"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 15"),
                ]),
                Field("EICH20EN", 11, 1, "Error Injection Channel 20 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 20"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 20"),
                ]),
                Field("EICH23EN", 8, 1, "Error Injection Channel 23 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 23"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 23"),
                ]),
                Field("EICH25EN", 6, 1, "Error Injection Channel 25 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 25"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 25"),
                ]),
                Field("EICH28EN", 3, 1, "Error Injection Channel 28 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 28"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 28"),
                ]),
                Field("EICH29EN", 2, 1, "Error Injection Channel 29 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 29"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 29"),
                ]),
                Field("EICH30EN", 1, 1, "Error Injection Channel 30 Enable", [
                    EnumVal("DISABLE", "0", "Error injection is disabled on Error Injection Channel 30"),
                    EnumVal("ENABLE", "0x1", "Error injection is enabled on Error Injection Channel 30"),
                ]),
            ]),
            Register("EICHD0_WORD0", 0x40258100, 32, "Error Injection Channel Descriptor 0, Word0", [
                Field("CHKBIT_MASK", 24, 8, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD0_WORD1", 0x40258104, 32, "Error Injection Channel Descriptor 0, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD0_WORD2", 0x40258108, 32, "Error Injection Channel Descriptor 0, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD2_WORD0", 0x40258180, 32, "Error Injection Channel Descriptor 2, Word0", [
                Field("CHKBIT_MASK", 24, 8, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD2_WORD1", 0x40258184, 32, "Error Injection Channel Descriptor 2, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD2_WORD2", 0x40258188, 32, "Error Injection Channel Descriptor 2, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD3_WORD0", 0x402581C0, 32, "Error Injection Channel Descriptor 3, Word0", [
                Field("CHKBIT_MASK", 18, 14, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD3_WORD1", 0x402581C4, 32, "Error Injection Channel Descriptor 3, Word1", [
                Field("B0_3DATA_MASK", 0, 12, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD3_WORD2", 0x402581C8, 32, "Error Injection Channel Descriptor 3, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD4_WORD0", 0x40258200, 32, "Error Injection Channel Descriptor 4, Word0", [
                Field("CHKBIT_MASK", 16, 16, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD4_WORD1", 0x40258204, 32, "Error Injection Channel Descriptor 4, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD4_WORD2", 0x40258208, 32, "Error Injection Channel Descriptor 4, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD4_WORD3", 0x4025820C, 32, "Error Injection Channel Descriptor 4, Word3", [
                Field("B8_11DATA_MASK", 0, 32, "Data Mask Bytes 8-11", [
                ]),
            ]),
            Register("EICHD4_WORD4", 0x40258210, 32, "Error Injection Channel Descriptor 4, Word4", [
                Field("B12_15DATA_MASK", 0, 32, "Data Mask Bytes 12-15", [
                ]),
            ]),
            Register("EICHD5_WORD0", 0x40258240, 32, "Error Injection Channel Descriptor 5, Word0", [
                Field("CHKBIT_MASK", 4, 28, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD5_WORD1", 0x40258244, 32, "Error Injection Channel Descriptor 5, Word1", [
                Field("B0_3DATA_MASK", 0, 8, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD5_WORD2", 0x40258248, 32, "Error Injection Channel Descriptor 5, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD5_WORD3", 0x4025824C, 32, "Error Injection Channel Descriptor 5, Word3", [
                Field("B8_11DATA_MASK", 0, 32, "Data Mask Bytes 8-11", [
                ]),
            ]),
            Register("EICHD5_WORD4", 0x40258250, 32, "Error Injection Channel Descriptor 5, Word4", [
                Field("B12_15DATA_MASK", 0, 32, "Data Mask Bytes 12-15", [
                ]),
            ]),
            Register("EICHD6_WORD0", 0x40258280, 32, "Error Injection Channel Descriptor 6, Word0", [
                Field("CHKBIT_MASK", 4, 28, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD6_WORD1", 0x40258284, 32, "Error Injection Channel Descriptor 6, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD6_WORD2", 0x40258288, 32, "Error Injection Channel Descriptor 6, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD6_WORD3", 0x4025828C, 32, "Error Injection Channel Descriptor 6, Word3", [
                Field("B8_11DATA_MASK", 0, 32, "Data Mask Bytes 8-11", [
                ]),
            ]),
            Register("EICHD6_WORD4", 0x40258290, 32, "Error Injection Channel Descriptor 6, Word4", [
                Field("B12_15DATA_MASK", 0, 32, "Data Mask Bytes 12-15", [
                ]),
            ]),
            Register("EICHD7_WORD0", 0x402582C0, 32, "Error Injection Channel Descriptor 7, Word0", [
                Field("CHKBIT_MASK", 4, 28, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD7_WORD1", 0x402582C4, 32, "Error Injection Channel Descriptor 7, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD7_WORD2", 0x402582C8, 32, "Error Injection Channel Descriptor 7, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD7_WORD3", 0x402582CC, 32, "Error Injection Channel Descriptor 7, Word3", [
                Field("B8_11DATA_MASK", 0, 32, "Data Mask Bytes 8-11", [
                ]),
            ]),
            Register("EICHD7_WORD4", 0x402582D0, 32, "Error Injection Channel Descriptor 7, Word4", [
                Field("B12_15DATA_MASK", 0, 32, "Data Mask Bytes 12-15", [
                ]),
            ]),
            Register("EICHD13_WORD0", 0x40258440, 32, "Error Injection Channel Descriptor 13, Word0", [
                Field("CHKBIT_MASK", 24, 8, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD13_WORD1", 0x40258444, 32, "Error Injection Channel Descriptor 13, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD13_WORD2", 0x40258448, 32, "Error Injection Channel Descriptor 13, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD14_WORD0", 0x40258480, 32, "Error Injection Channel Descriptor 14, Word0", [
                Field("CHKBIT_MASK", 24, 8, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD14_WORD1", 0x40258484, 32, "Error Injection Channel Descriptor 14, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD15_WORD0", 0x402584C0, 32, "Error Injection Channel Descriptor 15, Word0", [
                Field("CHKBIT_MASK", 24, 8, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD15_WORD1", 0x402584C4, 32, "Error Injection Channel Descriptor 15, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD20_WORD1", 0x40258604, 32, "Error Injection Channel Descriptor 20, Word1", [
                Field("B0_3DATA_MASK", 0, 28, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD20_WORD2", 0x40258608, 32, "Error Injection Channel Descriptor 20, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD20_WORD3", 0x4025860C, 32, "Error Injection Channel Descriptor 20, Word3", [
                Field("B8_11DATA_MASK", 0, 32, "Data Mask Bytes 8-11", [
                ]),
            ]),
            Register("EICHD20_WORD4", 0x40258610, 32, "Error Injection Channel Descriptor 20, Word4", [
                Field("B12_15DATA_MASK", 0, 32, "Data Mask Bytes 12-15", [
                ]),
            ]),
            Register("EICHD20_WORD5", 0x40258614, 32, "Error Injection Channel Descriptor 20, Word5", [
                Field("B16_19DATA_MASK", 0, 32, "Data Mask Bytes 16-19", [
                ]),
            ]),
            Register("EICHD20_WORD6", 0x40258618, 32, "Error Injection Channel Descriptor 20, Word6", [
                Field("B20_23DATA_MASK", 0, 32, "Data Mask Bytes 20-23", [
                ]),
            ]),
            Register("EICHD23_WORD1", 0x402586C4, 32, "Error Injection Channel Descriptor 23, Word1", [
                Field("B0_3DATA_MASK", 0, 28, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD23_WORD2", 0x402586C8, 32, "Error Injection Channel Descriptor 23, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD25_WORD1", 0x40258744, 32, "Error Injection Channel Descriptor 25, Word1", [
                Field("B0_3DATA_MASK", 0, 28, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD25_WORD2", 0x40258748, 32, "Error Injection Channel Descriptor 25, Word2", [
                Field("B4_7DATA_MASK", 0, 32, "Data Mask Bytes 4-7", [
                ]),
            ]),
            Register("EICHD28_WORD1", 0x40258804, 32, "Error Injection Channel Descriptor 28, Word1", [
                Field("B0_3DATA_MASK", 0, 24, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD29_WORD1", 0x40258844, 32, "Error Injection Channel Descriptor 29, Word1", [
                Field("B0_3DATA_MASK", 0, 18, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD30_WORD1", 0x40258884, 32, "Error Injection Channel Descriptor 30, Word1", [
                Field("B0_3DATA_MASK", 0, 18, "Data Mask Bytes 0-3", [
                ]),
            ]),
        ])

class Module_EMIOS_0(Peripheral):
    def __init__(self):
        super().__init__("EMIOS_0", 0x40088000, 0x31C, [
            Register("MCR", 0x40088000, 32, "Module Configuration", [
                Field("MDIS", 30, 1, "Module Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("FRZ", 29, 1, "Freeze", [
                    EnumVal("EXIT_FREEZE", "0", "Exit Freeze state"),
                    EnumVal("ENTER_FREEZE", "0x1", "Enter Freeze state"),
                ]),
                Field("GTBE", 28, 1, "Global Timebase Enable", [
                    EnumVal("DEASSERTED", "0", "Deassert GTBE_OUT"),
                    EnumVal("ASSERTED", "0x1", "Assert GTBE_OUT"),
                ]),
                Field("GPREN", 26, 1, "Global Prescaler Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("GPRE", 8, 8, "Global Prescaler", [
                ]),
            ]),
            Register("GFLAG", 0x40088004, 32, "Global Flag", [
                Field("F23", 23, 1, "Mirror of UC 23 FLAG", [
                ]),
                Field("F22", 22, 1, "Mirror of UC 22 FLAG", [
                ]),
                Field("F21", 21, 1, "Mirror of UC 21 FLAG", [
                ]),
                Field("F20", 20, 1, "Mirror of UC 20 FLAG", [
                ]),
                Field("F19", 19, 1, "Mirror of UC 19 FLAG", [
                ]),
                Field("F18", 18, 1, "Mirror of UC 18 FLAG", [
                ]),
                Field("F17", 17, 1, "Mirror of UC 17 FLAG", [
                ]),
                Field("F16", 16, 1, "Mirror of UC 16 FLAG", [
                ]),
                Field("F15", 15, 1, "Mirror of UC 15 FLAG", [
                ]),
                Field("F14", 14, 1, "Mirror of UC 14 FLAG", [
                ]),
                Field("F13", 13, 1, "Mirror of UC 13 FLAG", [
                ]),
                Field("F12", 12, 1, "Mirror of UC 12 FLAG", [
                ]),
                Field("F11", 11, 1, "Mirror of UC 11 FLAG", [
                ]),
                Field("F10", 10, 1, "Mirror of UC 10 FLAG", [
                ]),
                Field("F9", 9, 1, "Mirror of UC 9 FLAG", [
                ]),
                Field("F8", 8, 1, "Mirror of UC 8 FLAG", [
                ]),
                Field("F7", 7, 1, "Mirror of UC 7 FLAG", [
                ]),
                Field("F6", 6, 1, "Mirror of UC 6 FLAG", [
                ]),
                Field("F5", 5, 1, "Mirror of UC 5 FLAG", [
                ]),
                Field("F4", 4, 1, "Mirror of UC 4 FLAG", [
                ]),
                Field("F3", 3, 1, "Mirror of UC 3 FLAG", [
                ]),
                Field("F2", 2, 1, "Mirror of UC 2 FLAG", [
                ]),
                Field("F1", 1, 1, "Mirror of UC 1 FLAG", [
                ]),
                Field("F0", 0, 1, "Mirror of UC 0 FLAG", [
                ]),
            ]),
            Register("OUDIS", 0x40088008, 32, "Output Update Disable", [
                Field("OU23", 23, 1, "Channel 23 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU22", 22, 1, "Channel 22 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU21", 21, 1, "Channel 21 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU20", 20, 1, "Channel 20 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU19", 19, 1, "Channel 19 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU18", 18, 1, "Channel 18 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU17", 17, 1, "Channel 17 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU16", 16, 1, "Channel 16 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU15", 15, 1, "Channel 15 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU14", 14, 1, "Channel 14 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU13", 13, 1, "Channel 13 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU12", 12, 1, "Channel 12 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU11", 11, 1, "Channel 11 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU10", 10, 1, "Channel 10 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU9", 9, 1, "Channel 9 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU8", 8, 1, "Channel 8 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU7", 7, 1, "Channel 7 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU6", 6, 1, "Channel 6 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU5", 5, 1, "Channel 5 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU4", 4, 1, "Channel 4 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU3", 3, 1, "Channel 3 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU2", 2, 1, "Channel 2 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU1", 1, 1, "Channel 1 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU0", 0, 1, "Channel 0 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
            ]),
            Register("UCDIS", 0x4008800C, 32, "Disable Channel", [
                Field("UCDIS23", 23, 1, "Disable UC 23", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS22", 22, 1, "Disable UC 22", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS21", 21, 1, "Disable UC 21", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS20", 20, 1, "Disable UC 20", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS19", 19, 1, "Disable UC 19", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS18", 18, 1, "Disable UC 18", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS17", 17, 1, "Disable UC 17", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS16", 16, 1, "Disable UC 16", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS15", 15, 1, "Disable UC 15", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS14", 14, 1, "Disable UC 14", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS13", 13, 1, "Disable UC 13", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS12", 12, 1, "Disable UC 12", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS11", 11, 1, "Disable UC 11", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS10", 10, 1, "Disable UC 10", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS9", 9, 1, "Disable UC 9", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS8", 8, 1, "Disable UC 8", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS7", 7, 1, "Disable UC 7", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS6", 6, 1, "Disable UC 6", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS5", 5, 1, "Disable UC 5", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS4", 4, 1, "Disable UC 4", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS3", 3, 1, "Disable UC 3", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS2", 2, 1, "Disable UC 2", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS1", 1, 1, "Disable UC 1", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS0", 0, 1, "Disable UC 0", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
            ]),
            Register("A0", 0x40088020, 32, "UC A 0", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B0", 0x40088024, 32, "UC B 0", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT0", 0x40088028, 32, "UC Counter 0", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C0", 0x4008802C, 32, "UC Control 0", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S0", 0x40088030, 32, "UC Status 0", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA0", 0x40088034, 32, "Alternate Address 0", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_0", 0x40088038, 32, "UC Control 2 0", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A1", 0x40088040, 32, "UC A 1", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B1", 0x40088044, 32, "UC B 1", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT1", 0x40088048, 32, "UC Counter 1", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C1", 0x4008804C, 32, "UC Control 1", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S1", 0x40088050, 32, "UC Status 1", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA1", 0x40088054, 32, "Alternate Address 1", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_1", 0x40088058, 32, "UC Control 2 1", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A2", 0x40088060, 32, "UC A 2", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B2", 0x40088064, 32, "UC B 2", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT2", 0x40088068, 32, "UC Counter 2", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C2", 0x4008806C, 32, "UC Control 2", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S2", 0x40088070, 32, "UC Status 2", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA2", 0x40088074, 32, "Alternate Address 2", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_2", 0x40088078, 32, "UC Control 2 2", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A3", 0x40088080, 32, "UC A 3", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B3", 0x40088084, 32, "UC B 3", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT3", 0x40088088, 32, "UC Counter 3", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C3", 0x4008808C, 32, "UC Control 3", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S3", 0x40088090, 32, "UC Status 3", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA3", 0x40088094, 32, "Alternate Address 3", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_3", 0x40088098, 32, "UC Control 2 3", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A4", 0x400880A0, 32, "UC A 4", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B4", 0x400880A4, 32, "UC B 4", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT4", 0x400880A8, 32, "UC Counter 4", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C4", 0x400880AC, 32, "UC Control 4", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S4", 0x400880B0, 32, "UC Status 4", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA4", 0x400880B4, 32, "Alternate Address 4", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_4", 0x400880B8, 32, "UC Control 2 4", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A5", 0x400880C0, 32, "UC A 5", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B5", 0x400880C4, 32, "UC B 5", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT5", 0x400880C8, 32, "UC Counter 5", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C5", 0x400880CC, 32, "UC Control 5", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S5", 0x400880D0, 32, "UC Status 5", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA5", 0x400880D4, 32, "Alternate Address 5", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_5", 0x400880D8, 32, "UC Control 2 5", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A6", 0x400880E0, 32, "UC A 6", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B6", 0x400880E4, 32, "UC B 6", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT6", 0x400880E8, 32, "UC Counter 6", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C6", 0x400880EC, 32, "UC Control 6", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S6", 0x400880F0, 32, "UC Status 6", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA6", 0x400880F4, 32, "Alternate Address 6", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_6", 0x400880F8, 32, "UC Control 2 6", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A7", 0x40088100, 32, "UC A 7", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B7", 0x40088104, 32, "UC B 7", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT7", 0x40088108, 32, "UC Counter 7", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C7", 0x4008810C, 32, "UC Control 7", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S7", 0x40088110, 32, "UC Status 7", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA7", 0x40088114, 32, "Alternate Address 7", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_7", 0x40088118, 32, "UC Control 2 7", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A8", 0x40088120, 32, "UC A 8", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B8", 0x40088124, 32, "UC B 8", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT8", 0x40088128, 32, "UC Counter 8", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C8", 0x4008812C, 32, "UC Control 8", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S8", 0x40088130, 32, "UC Status 8", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA8", 0x40088134, 32, "Alternate Address 8", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_8", 0x40088138, 32, "UC Control 2 8", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A9", 0x40088140, 32, "UC A 9", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B9", 0x40088144, 32, "UC B 9", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C9", 0x4008814C, 32, "UC Control 9", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S9", 0x40088150, 32, "UC Status 9", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA9", 0x40088154, 32, "Alternate Address 9", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_9", 0x40088158, 32, "UC Control 2 9", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A10", 0x40088160, 32, "UC A 10", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B10", 0x40088164, 32, "UC B 10", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C10", 0x4008816C, 32, "UC Control 10", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S10", 0x40088170, 32, "UC Status 10", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA10", 0x40088174, 32, "Alternate Address 10", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_10", 0x40088178, 32, "UC Control 2 10", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A11", 0x40088180, 32, "UC A 11", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B11", 0x40088184, 32, "UC B 11", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C11", 0x4008818C, 32, "UC Control 11", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S11", 0x40088190, 32, "UC Status 11", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA11", 0x40088194, 32, "Alternate Address 11", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_11", 0x40088198, 32, "UC Control 2 11", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A12", 0x400881A0, 32, "UC A 12", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B12", 0x400881A4, 32, "UC B 12", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C12", 0x400881AC, 32, "UC Control 12", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S12", 0x400881B0, 32, "UC Status 12", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA12", 0x400881B4, 32, "Alternate Address 12", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_12", 0x400881B8, 32, "UC Control 2 12", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A13", 0x400881C0, 32, "UC A 13", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B13", 0x400881C4, 32, "UC B 13", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C13", 0x400881CC, 32, "UC Control 13", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S13", 0x400881D0, 32, "UC Status 13", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA13", 0x400881D4, 32, "Alternate Address 13", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_13", 0x400881D8, 32, "UC Control 2 13", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A14", 0x400881E0, 32, "UC A 14", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B14", 0x400881E4, 32, "UC B 14", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C14", 0x400881EC, 32, "UC Control 14", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S14", 0x400881F0, 32, "UC Status 14", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA14", 0x400881F4, 32, "Alternate Address 14", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_14", 0x400881F8, 32, "UC Control 2 14", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A15", 0x40088200, 32, "UC A 15", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B15", 0x40088204, 32, "UC B 15", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C15", 0x4008820C, 32, "UC Control 15", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S15", 0x40088210, 32, "UC Status 15", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA15", 0x40088214, 32, "Alternate Address 15", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_15", 0x40088218, 32, "UC Control 2 15", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A16", 0x40088220, 32, "UC A 16", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B16", 0x40088224, 32, "UC B 16", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT16", 0x40088228, 32, "UC Counter 16", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C16", 0x4008822C, 32, "UC Control 16", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S16", 0x40088230, 32, "UC Status 16", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA16", 0x40088234, 32, "Alternate Address 16", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_16", 0x40088238, 32, "UC Control 2 16", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A17", 0x40088240, 32, "UC A 17", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B17", 0x40088244, 32, "UC B 17", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C17", 0x4008824C, 32, "UC Control 17", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S17", 0x40088250, 32, "UC Status 17", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA17", 0x40088254, 32, "Alternate Address 17", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_17", 0x40088258, 32, "UC Control 2 17", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A18", 0x40088260, 32, "UC A 18", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B18", 0x40088264, 32, "UC B 18", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C18", 0x4008826C, 32, "UC Control 18", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S18", 0x40088270, 32, "UC Status 18", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA18", 0x40088274, 32, "Alternate Address 18", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_18", 0x40088278, 32, "UC Control 2 18", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A19", 0x40088280, 32, "UC A 19", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B19", 0x40088284, 32, "UC B 19", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C19", 0x4008828C, 32, "UC Control 19", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S19", 0x40088290, 32, "UC Status 19", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA19", 0x40088294, 32, "Alternate Address 19", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_19", 0x40088298, 32, "UC Control 2 19", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A20", 0x400882A0, 32, "UC A 20", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B20", 0x400882A4, 32, "UC B 20", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C20", 0x400882AC, 32, "UC Control 20", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S20", 0x400882B0, 32, "UC Status 20", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA20", 0x400882B4, 32, "Alternate Address 20", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_20", 0x400882B8, 32, "UC Control 2 20", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A21", 0x400882C0, 32, "UC A 21", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B21", 0x400882C4, 32, "UC B 21", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C21", 0x400882CC, 32, "UC Control 21", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S21", 0x400882D0, 32, "UC Status 21", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA21", 0x400882D4, 32, "Alternate Address 21", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_21", 0x400882D8, 32, "UC Control 2 21", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A22", 0x400882E0, 32, "UC A 22", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B22", 0x400882E4, 32, "UC B 22", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT22", 0x400882E8, 32, "UC Counter 22", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C22", 0x400882EC, 32, "UC Control 22", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S22", 0x400882F0, 32, "UC Status 22", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA22", 0x400882F4, 32, "Alternate Address 22", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_22", 0x400882F8, 32, "UC Control 2 22", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A23", 0x40088300, 32, "UC A 23", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B23", 0x40088304, 32, "UC B 23", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT23", 0x40088308, 32, "UC Counter 23", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C23", 0x4008830C, 32, "UC Control 23", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S23", 0x40088310, 32, "UC Status 23", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA23", 0x40088314, 32, "Alternate Address 23", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_23", 0x40088318, 32, "UC Control 2 23", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
        ])

class Module_EMIOS_1(Peripheral):
    def __init__(self):
        super().__init__("EMIOS_1", 0x4008C000, 0x31C, [
            Register("MCR", 0x4008C000, 32, "Module Configuration", [
                Field("MDIS", 30, 1, "Module Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("FRZ", 29, 1, "Freeze", [
                    EnumVal("EXIT_FREEZE", "0", "Exit Freeze state"),
                    EnumVal("ENTER_FREEZE", "0x1", "Enter Freeze state"),
                ]),
                Field("GTBE", 28, 1, "Global Timebase Enable", [
                    EnumVal("DEASSERTED", "0", "Deassert GTBE_OUT"),
                    EnumVal("ASSERTED", "0x1", "Assert GTBE_OUT"),
                ]),
                Field("GPREN", 26, 1, "Global Prescaler Enable", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
                Field("GPRE", 8, 8, "Global Prescaler", [
                ]),
            ]),
            Register("GFLAG", 0x4008C004, 32, "Global Flag", [
                Field("F23", 23, 1, "Mirror of UC 23 FLAG", [
                ]),
                Field("F22", 22, 1, "Mirror of UC 22 FLAG", [
                ]),
                Field("F21", 21, 1, "Mirror of UC 21 FLAG", [
                ]),
                Field("F20", 20, 1, "Mirror of UC 20 FLAG", [
                ]),
                Field("F19", 19, 1, "Mirror of UC 19 FLAG", [
                ]),
                Field("F18", 18, 1, "Mirror of UC 18 FLAG", [
                ]),
                Field("F17", 17, 1, "Mirror of UC 17 FLAG", [
                ]),
                Field("F16", 16, 1, "Mirror of UC 16 FLAG", [
                ]),
                Field("F15", 15, 1, "Mirror of UC 15 FLAG", [
                ]),
                Field("F14", 14, 1, "Mirror of UC 14 FLAG", [
                ]),
                Field("F13", 13, 1, "Mirror of UC 13 FLAG", [
                ]),
                Field("F12", 12, 1, "Mirror of UC 12 FLAG", [
                ]),
                Field("F11", 11, 1, "Mirror of UC 11 FLAG", [
                ]),
                Field("F10", 10, 1, "Mirror of UC 10 FLAG", [
                ]),
                Field("F9", 9, 1, "Mirror of UC 9 FLAG", [
                ]),
                Field("F8", 8, 1, "Mirror of UC 8 FLAG", [
                ]),
                Field("F7", 7, 1, "Mirror of UC 7 FLAG", [
                ]),
                Field("F6", 6, 1, "Mirror of UC 6 FLAG", [
                ]),
                Field("F5", 5, 1, "Mirror of UC 5 FLAG", [
                ]),
                Field("F4", 4, 1, "Mirror of UC 4 FLAG", [
                ]),
                Field("F3", 3, 1, "Mirror of UC 3 FLAG", [
                ]),
                Field("F2", 2, 1, "Mirror of UC 2 FLAG", [
                ]),
                Field("F1", 1, 1, "Mirror of UC 1 FLAG", [
                ]),
                Field("F0", 0, 1, "Mirror of UC 0 FLAG", [
                ]),
            ]),
            Register("OUDIS", 0x4008C008, 32, "Output Update Disable", [
                Field("OU23", 23, 1, "Channel 23 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU22", 22, 1, "Channel 22 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU21", 21, 1, "Channel 21 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU20", 20, 1, "Channel 20 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU19", 19, 1, "Channel 19 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU18", 18, 1, "Channel 18 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU17", 17, 1, "Channel 17 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU16", 16, 1, "Channel 16 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU15", 15, 1, "Channel 15 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU14", 14, 1, "Channel 14 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU13", 13, 1, "Channel 13 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU12", 12, 1, "Channel 12 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU11", 11, 1, "Channel 11 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU10", 10, 1, "Channel 10 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU9", 9, 1, "Channel 9 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU8", 8, 1, "Channel 8 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU7", 7, 1, "Channel 7 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU6", 6, 1, "Channel 6 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU5", 5, 1, "Channel 5 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU4", 4, 1, "Channel 4 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU3", 3, 1, "Channel 3 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU2", 2, 1, "Channel 2 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU1", 1, 1, "Channel 1 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("OU0", 0, 1, "Channel 0 Output Update Disable", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
            ]),
            Register("UCDIS", 0x4008C00C, 32, "Disable Channel", [
                Field("UCDIS23", 23, 1, "Disable UC 23", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS22", 22, 1, "Disable UC 22", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS21", 21, 1, "Disable UC 21", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS20", 20, 1, "Disable UC 20", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS19", 19, 1, "Disable UC 19", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS18", 18, 1, "Disable UC 18", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS17", 17, 1, "Disable UC 17", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS16", 16, 1, "Disable UC 16", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS15", 15, 1, "Disable UC 15", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS14", 14, 1, "Disable UC 14", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS13", 13, 1, "Disable UC 13", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS12", 12, 1, "Disable UC 12", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS11", 11, 1, "Disable UC 11", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS10", 10, 1, "Disable UC 10", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS9", 9, 1, "Disable UC 9", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS8", 8, 1, "Disable UC 8", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS7", 7, 1, "Disable UC 7", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS6", 6, 1, "Disable UC 6", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS5", 5, 1, "Disable UC 5", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS4", 4, 1, "Disable UC 4", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS3", 3, 1, "Disable UC 3", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS2", 2, 1, "Disable UC 2", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS1", 1, 1, "Disable UC 1", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
                Field("UCDIS0", 0, 1, "Disable UC 0", [
                    EnumVal("ENABLED", "0", "Enable"),
                    EnumVal("DISABLED", "0x1", "Disable"),
                ]),
            ]),
            Register("A0", 0x4008C020, 32, "UC A 0", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B0", 0x4008C024, 32, "UC B 0", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT0", 0x4008C028, 32, "UC Counter 0", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C0", 0x4008C02C, 32, "UC Control 0", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S0", 0x4008C030, 32, "UC Status 0", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA0", 0x4008C034, 32, "Alternate Address 0", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_0", 0x4008C038, 32, "UC Control 2 0", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A1", 0x4008C040, 32, "UC A 1", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B1", 0x4008C044, 32, "UC B 1", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C1", 0x4008C04C, 32, "UC Control 1", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S1", 0x4008C050, 32, "UC Status 1", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA1", 0x4008C054, 32, "Alternate Address 1", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_1", 0x4008C058, 32, "UC Control 2 1", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A2", 0x4008C060, 32, "UC A 2", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B2", 0x4008C064, 32, "UC B 2", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C2", 0x4008C06C, 32, "UC Control 2", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S2", 0x4008C070, 32, "UC Status 2", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA2", 0x4008C074, 32, "Alternate Address 2", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_2", 0x4008C078, 32, "UC Control 2 2", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A3", 0x4008C080, 32, "UC A 3", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B3", 0x4008C084, 32, "UC B 3", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C3", 0x4008C08C, 32, "UC Control 3", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S3", 0x4008C090, 32, "UC Status 3", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA3", 0x4008C094, 32, "Alternate Address 3", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_3", 0x4008C098, 32, "UC Control 2 3", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A4", 0x4008C0A0, 32, "UC A 4", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B4", 0x4008C0A4, 32, "UC B 4", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C4", 0x4008C0AC, 32, "UC Control 4", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S4", 0x4008C0B0, 32, "UC Status 4", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA4", 0x4008C0B4, 32, "Alternate Address 4", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_4", 0x4008C0B8, 32, "UC Control 2 4", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A5", 0x4008C0C0, 32, "UC A 5", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B5", 0x4008C0C4, 32, "UC B 5", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C5", 0x4008C0CC, 32, "UC Control 5", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S5", 0x4008C0D0, 32, "UC Status 5", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA5", 0x4008C0D4, 32, "Alternate Address 5", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_5", 0x4008C0D8, 32, "UC Control 2 5", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A6", 0x4008C0E0, 32, "UC A 6", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B6", 0x4008C0E4, 32, "UC B 6", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C6", 0x4008C0EC, 32, "UC Control 6", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S6", 0x4008C0F0, 32, "UC Status 6", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA6", 0x4008C0F4, 32, "Alternate Address 6", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_6", 0x4008C0F8, 32, "UC Control 2 6", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A7", 0x4008C100, 32, "UC A 7", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B7", 0x4008C104, 32, "UC B 7", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C7", 0x4008C10C, 32, "UC Control 7", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S7", 0x4008C110, 32, "UC Status 7", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA7", 0x4008C114, 32, "Alternate Address 7", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_7", 0x4008C118, 32, "UC Control 2 7", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A8", 0x4008C120, 32, "UC A 8", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B8", 0x4008C124, 32, "UC B 8", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT8", 0x4008C128, 32, "UC Counter 8", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C8", 0x4008C12C, 32, "UC Control 8", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S8", 0x4008C130, 32, "UC Status 8", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA8", 0x4008C134, 32, "Alternate Address 8", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_8", 0x4008C138, 32, "UC Control 2 8", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A9", 0x4008C140, 32, "UC A 9", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B9", 0x4008C144, 32, "UC B 9", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C9", 0x4008C14C, 32, "UC Control 9", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S9", 0x4008C150, 32, "UC Status 9", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA9", 0x4008C154, 32, "Alternate Address 9", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_9", 0x4008C158, 32, "UC Control 2 9", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A10", 0x4008C160, 32, "UC A 10", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B10", 0x4008C164, 32, "UC B 10", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C10", 0x4008C16C, 32, "UC Control 10", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S10", 0x4008C170, 32, "UC Status 10", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA10", 0x4008C174, 32, "Alternate Address 10", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_10", 0x4008C178, 32, "UC Control 2 10", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A11", 0x4008C180, 32, "UC A 11", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B11", 0x4008C184, 32, "UC B 11", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C11", 0x4008C18C, 32, "UC Control 11", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S11", 0x4008C190, 32, "UC Status 11", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA11", 0x4008C194, 32, "Alternate Address 11", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_11", 0x4008C198, 32, "UC Control 2 11", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A12", 0x4008C1A0, 32, "UC A 12", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B12", 0x4008C1A4, 32, "UC B 12", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C12", 0x4008C1AC, 32, "UC Control 12", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S12", 0x4008C1B0, 32, "UC Status 12", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA12", 0x4008C1B4, 32, "Alternate Address 12", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_12", 0x4008C1B8, 32, "UC Control 2 12", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A13", 0x4008C1C0, 32, "UC A 13", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B13", 0x4008C1C4, 32, "UC B 13", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C13", 0x4008C1CC, 32, "UC Control 13", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S13", 0x4008C1D0, 32, "UC Status 13", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA13", 0x4008C1D4, 32, "Alternate Address 13", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_13", 0x4008C1D8, 32, "UC Control 2 13", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A14", 0x4008C1E0, 32, "UC A 14", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B14", 0x4008C1E4, 32, "UC B 14", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C14", 0x4008C1EC, 32, "UC Control 14", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S14", 0x4008C1F0, 32, "UC Status 14", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA14", 0x4008C1F4, 32, "Alternate Address 14", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_14", 0x4008C1F8, 32, "UC Control 2 14", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A15", 0x4008C200, 32, "UC A 15", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B15", 0x4008C204, 32, "UC B 15", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C15", 0x4008C20C, 32, "UC Control 15", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S15", 0x4008C210, 32, "UC Status 15", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA15", 0x4008C214, 32, "Alternate Address 15", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_15", 0x4008C218, 32, "UC Control 2 15", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A16", 0x4008C220, 32, "UC A 16", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B16", 0x4008C224, 32, "UC B 16", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT16", 0x4008C228, 32, "UC Counter 16", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C16", 0x4008C22C, 32, "UC Control 16", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S16", 0x4008C230, 32, "UC Status 16", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA16", 0x4008C234, 32, "Alternate Address 16", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_16", 0x4008C238, 32, "UC Control 2 16", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A17", 0x4008C240, 32, "UC A 17", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B17", 0x4008C244, 32, "UC B 17", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C17", 0x4008C24C, 32, "UC Control 17", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S17", 0x4008C250, 32, "UC Status 17", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA17", 0x4008C254, 32, "Alternate Address 17", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_17", 0x4008C258, 32, "UC Control 2 17", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A18", 0x4008C260, 32, "UC A 18", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B18", 0x4008C264, 32, "UC B 18", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C18", 0x4008C26C, 32, "UC Control 18", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S18", 0x4008C270, 32, "UC Status 18", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA18", 0x4008C274, 32, "Alternate Address 18", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_18", 0x4008C278, 32, "UC Control 2 18", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A19", 0x4008C280, 32, "UC A 19", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B19", 0x4008C284, 32, "UC B 19", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C19", 0x4008C28C, 32, "UC Control 19", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S19", 0x4008C290, 32, "UC Status 19", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA19", 0x4008C294, 32, "Alternate Address 19", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_19", 0x4008C298, 32, "UC Control 2 19", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A20", 0x4008C2A0, 32, "UC A 20", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B20", 0x4008C2A4, 32, "UC B 20", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C20", 0x4008C2AC, 32, "UC Control 20", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S20", 0x4008C2B0, 32, "UC Status 20", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA20", 0x4008C2B4, 32, "Alternate Address 20", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_20", 0x4008C2B8, 32, "UC Control 2 20", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A21", 0x4008C2C0, 32, "UC A 21", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B21", 0x4008C2C4, 32, "UC B 21", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("C21", 0x4008C2CC, 32, "UC Control 21", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S21", 0x4008C2D0, 32, "UC Status 21", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA21", 0x4008C2D4, 32, "Alternate Address 21", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_21", 0x4008C2D8, 32, "UC Control 2 21", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A22", 0x4008C2E0, 32, "UC A 22", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B22", 0x4008C2E4, 32, "UC B 22", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT22", 0x4008C2E8, 32, "UC Counter 22", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C22", 0x4008C2EC, 32, "UC Control 22", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S22", 0x4008C2F0, 32, "UC Status 22", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA22", 0x4008C2F4, 32, "Alternate Address 22", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_22", 0x4008C2F8, 32, "UC Control 2 22", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
            Register("A23", 0x4008C300, 32, "UC A 23", [
                Field("RISE_FALL", 31, 1, "Rising and falling edge detection", [
                ]),
                Field("A", 0, 16, "A", [
                ]),
            ]),
            Register("B23", 0x4008C304, 32, "UC B 23", [
                Field("B", 0, 16, "B", [
                ]),
            ]),
            Register("CNT23", 0x4008C308, 32, "UC Counter 23", [
                Field("C", 0, 16, "Internal Counter Value", [
                ]),
            ]),
            Register("C23", 0x4008C30C, 32, "UC Control 23", [
                Field("FREN", 31, 1, "Freeze Enable", [
                    EnumVal("FREEZE_NO", "0", "Disable"),
                    EnumVal("FREEZE_YES", "0x1", "Enable"),
                ]),
                Field("ODIS", 30, 1, "Output Disable", [
                    EnumVal("ENABLE", "0", "Enables output pin (the output pin operates normally)"),
                    EnumVal("DISABLE", "0x1", "Disables output pin"),
                ]),
                Field("ODISSL", 28, 2, "Output Disable Select", [
                    EnumVal("INPUT_0", "0", "0"),
                    EnumVal("INPUT_1", "0x1", "1"),
                    EnumVal("INPUT_2", "0x2", "2"),
                    EnumVal("INPUT_3", "0x3", "3"),
                ]),
                Field("UCPRE", 26, 2, "Prescaler", [
                    EnumVal("DIVIDE_1", "0", "1"),
                    EnumVal("DIVIDE_2", "0x1", "2"),
                    EnumVal("DIVIDE_3", "0x2", "3"),
                    EnumVal("DIVIDE_4", "0x3", "4"),
                ]),
                Field("UCPREN", 25, 1, "Prescaler Enable", [
                    EnumVal("DISABLED", "0", "Disable (no clock)"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("DMA", 24, 1, "Direct Memory Access", [
                    EnumVal("INTERRUPT", "0", "Interrupt request"),
                    EnumVal("DMA", "0x1", "DMA request"),
                ]),
                Field("IF", 19, 4, "Input Filter", [
                    EnumVal("BYPASSED", "0", "Bypassed; the input signal is synchronized before arriving at the digital filter"),
                    EnumVal("PERIODS_2", "0x1", "2 cycles"),
                    EnumVal("PERIODS_4", "0x2", "4 cycles"),
                    EnumVal("PERIODS_8", "0x4", "8 cycles"),
                    EnumVal("PERIODS_16", "0x8", "16 cycles"),
                ]),
                Field("FCK", 18, 1, "Filter Clock Select", [
                    EnumVal("PRESCALED", "0", "Prescaled clock"),
                    EnumVal("MODULE", "0x1", "eMIOS module clock"),
                ]),
                Field("FEN", 17, 1, "Flag Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FORCMA", 13, 1, "Force Match A", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator A"),
                ]),
                Field("FORCMB", 12, 1, "Force Match B", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("FORCE_MATCH", "0x1", "Force a match at comparator B"),
                ]),
                Field("BSL", 9, 2, "Bus Select", [
                ]),
                Field("EDSEL", 8, 1, "Edge Selection", [
                ]),
                Field("EDPOL", 7, 1, "Edge Polarity", [
                ]),
                Field("MODE", 0, 7, "Mode Selection", [
                ]),
            ]),
            Register("S23", 0x4008C310, 32, "UC Status 23", [
                Field("OVR", 31, 1, "Overrun", [
                    EnumVal("OVR_NO", "0", "No overrun"),
                    EnumVal("OVR_YES", "0x1", "Overrun"),
                    EnumVal("OVR_NO", "0", "No overrun"),
                ]),
                Field("OVFL", 15, 1, "Overflow", [
                    EnumVal("OVFL_NO", "0", "No overflow"),
                    EnumVal("OVFL_YES", "0x1", "Overflow"),
                    EnumVal("OVFL_NO", "0", "No overflow"),
                ]),
                Field("UCIN", 2, 1, "UC Input Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("UCOUT", 1, 1, "UC Output Pin", [
                    EnumVal("NEGATED", "0", "Negated"),
                    EnumVal("ASSERTED", "0x1", "Asserted"),
                ]),
                Field("FLAG", 0, 1, "Flag", [
                    EnumVal("EVENT_NO", "0", "No event"),
                    EnumVal("EVENT_YES", "0x1", "Event has occurred"),
                    EnumVal("EVENT_NO", "0", "No event"),
                ]),
            ]),
            Register("ALTA23", 0x4008C314, 32, "Alternate Address 23", [
                Field("ALTA", 0, 16, "Alternate Address", [
                ]),
            ]),
            Register("C2_23", 0x4008C318, 32, "UC Control 2 23", [
                Field("UCEXTPRE", 16, 4, "Extended Prescaler", [
                ]),
                Field("UCPRECLK", 14, 1, "Prescaler Clock Source", [
                    EnumVal("prescaled", "0", "Prescaled clock"),
                    EnumVal("module", "0x1", "eMIOS module clock"),
                ]),
                Field("UCRELDEL_INT", 0, 5, "Reload Signal Output Delay Interval", [
                ]),
            ]),
        ])

class Module_ERM(Peripheral):
    def __init__(self):
        super().__init__("ERM", 0x4025C000, 0x22C, [
            Register("CR0", 0x4025C000, 32, "ERM Configuration Register 0", [
                Field("ESCIE0", 31, 1, "ESCIE0", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 0 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 0 single-bit correction events is enabled."),
                ]),
                Field("ENCIE0", 30, 1, "ENCIE0", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 0 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 0 non-correctable error events is enabled."),
                ]),
                Field("ESCIE2", 23, 1, "ESCIE2", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 2 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 2 single-bit correction events is enabled."),
                ]),
                Field("ENCIE2", 22, 1, "ENCIE2", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 2 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 2 non-correctable error events is enabled."),
                ]),
                Field("ESCIE3", 19, 1, "ESCIE3", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 3 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 3 single-bit correction events is enabled."),
                ]),
                Field("ENCIE3", 18, 1, "ENCIE3", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 3 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 3 non-correctable error events is enabled."),
                ]),
                Field("ESCIE4", 15, 1, "ESCIE4", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 4 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 4 single-bit correction events is enabled."),
                ]),
                Field("ENCIE4", 14, 1, "ENCIE4", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 4 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 4 non-correctable error events is enabled."),
                ]),
                Field("ESCIE5", 11, 1, "ESCIE5", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 5 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 5 single-bit correction events is enabled."),
                ]),
                Field("ENCIE5", 10, 1, "ENCIE5", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 5 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 5 non-correctable error events is enabled."),
                ]),
            ]),
            Register("CR1", 0x4025C004, 32, "ERM Configuration Register 1", [
                Field("ESCIE10", 23, 1, "ESCIE10", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 10 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 10 single-bit correction events is enabled."),
                ]),
                Field("ENCIE10", 22, 1, "ENCIE10", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 10 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 10 non-correctable error events is enabled."),
                ]),
                Field("ESCIE11", 19, 1, "ESCIE11", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 11 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 11 single-bit correction events is enabled."),
                ]),
                Field("ENCIE11", 18, 1, "ENCIE11", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 11 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 11 non-correctable error events is enabled."),
                ]),
                Field("ESCIE12", 15, 1, "ESCIE12", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 12 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 12 single-bit correction events is enabled."),
                ]),
                Field("ENCIE12", 14, 1, "ENCIE12", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 12 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 12 non-correctable error events is enabled."),
                ]),
            ]),
            Register("CR2", 0x4025C008, 32, "ERM Configuration Register 2", [
                Field("ESCIE16", 31, 1, "ESCIE16", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 16 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 16 single-bit correction events is enabled."),
                ]),
                Field("ENCIE16", 30, 1, "ENCIE16", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 16 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 16 non-correctable error events is enabled."),
                ]),
                Field("ESCIE17", 27, 1, "ESCIE17", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 17 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 17 single-bit correction events is enabled."),
                ]),
                Field("ENCIE17", 26, 1, "ENCIE17", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 17 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 17 non-correctable error events is enabled."),
                ]),
                Field("ESCIE18", 23, 1, "ESCIE18", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 18 single-bit correction events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 18 single-bit correction events is enabled."),
                ]),
                Field("ENCIE18", 22, 1, "ENCIE18", [
                    EnumVal("DISABLE", "0", "Interrupt notification of Memory 18 non-correctable error events is disabled."),
                    EnumVal("ENABLE", "0x1", "Interrupt notification of Memory 18 non-correctable error events is enabled."),
                ]),
            ]),
            Register("SR0", 0x4025C010, 32, "ERM Status Register 0", [
                Field("SBC0", 31, 1, "SBC0", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 0 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 0 detected."),
                ]),
                Field("NCE0", 30, 1, "NCE0", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 0 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 0 detected."),
                ]),
                Field("SBC2", 23, 1, "SBC2", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 2 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 2 detected."),
                ]),
                Field("NCE2", 22, 1, "NCE2", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 2 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 2 detected."),
                ]),
                Field("SBC3", 19, 1, "SBC3", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 3 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 3 detected."),
                ]),
                Field("NCE3", 18, 1, "NCE3", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 3 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 3 detected."),
                ]),
                Field("SBC4", 15, 1, "SBC4", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 4 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 4 detected."),
                ]),
                Field("NCE4", 14, 1, "NCE4", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 4 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 4 detected."),
                ]),
                Field("SBC5", 11, 1, "SBC5", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 5 detected."),
                    EnumVal("CORR_EVENT", "0x1", "Single-bit correction event on Memory 5 detected."),
                ]),
                Field("NCE5", 10, 1, "NCE5", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 5 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 5 detected."),
                ]),
            ]),
            Register("SR1", 0x4025C014, 32, "ERM Status Register 1", [
                Field("SBC10", 23, 1, "SBC10", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 10 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 10 detected."),
                ]),
                Field("NCE10", 22, 1, "NCE10", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 10 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 10 detected."),
                ]),
                Field("SBC11", 19, 1, "SBC11", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 11 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 11 detected."),
                ]),
                Field("NCE11", 18, 1, "NCE11", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 11 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 11 detected."),
                ]),
                Field("SBC12", 15, 1, "SBC12", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 12 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 12 detected."),
                ]),
                Field("NCE12", 14, 1, "NCE12", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 12 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 12 detected."),
                ]),
            ]),
            Register("SR2", 0x4025C018, 32, "ERM Status Register 2", [
                Field("SBC16", 31, 1, "SBC16", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 16 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 16 detected."),
                ]),
                Field("NCE16", 30, 1, "NCE16", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 16 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 16 detected."),
                ]),
                Field("SBC17", 27, 1, "SBC17", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 17 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 17 detected."),
                ]),
                Field("NCE17", 26, 1, "NCE17", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 17 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 17 detected."),
                ]),
                Field("SBC18", 23, 1, "SBC18", [
                    EnumVal("NO_EVENT", "0", "No single-bit correction event on Memory 18 detected."),
                    EnumVal("EVENT", "0x1", "Single-bit correction event on Memory 18 detected."),
                ]),
                Field("NCE18", 22, 1, "NCE18", [
                    EnumVal("NO_ERROR", "0", "No non-correctable error event on Memory 18 detected."),
                    EnumVal("ERROR", "0x1", "Non-correctable error event on Memory 18 detected."),
                ]),
            ]),
            Register("EAR0", 0x4025C100, 32, "ERM Memory 0 Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("SYN0", 0x4025C104, 32, "ERM Memory 0 Syndrome Register", [
                Field("SYNDROME", 24, 8, "SYNDROME", [
                ]),
            ]),
            Register("CORR_ERR_CNT0", 0x4025C108, 32, "ERM Memory 0 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("CORR_ERR_CNT2", 0x4025C128, 32, "ERM Memory 2 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("CORR_ERR_CNT3", 0x4025C138, 32, "ERM Memory 3 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("CORR_ERR_CNT4", 0x4025C148, 32, "ERM Memory 4 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("CORR_ERR_CNT5", 0x4025C158, 32, "ERM Memory 5 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("EAR10", 0x4025C1A0, 32, "ERM Memory 10 Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("SYN10", 0x4025C1A4, 32, "ERM Memory 10 Syndrome Register", [
                Field("SYNDROME", 24, 8, "SYNDROME", [
                ]),
            ]),
            Register("CORR_ERR_CNT10", 0x4025C1A8, 32, "ERM Memory 10 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("EAR11", 0x4025C1B0, 32, "ERM Memory 11 Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("SYN11", 0x4025C1B4, 32, "ERM Memory 11 Syndrome Register", [
                Field("SYNDROME", 24, 8, "SYNDROME", [
                ]),
            ]),
            Register("CORR_ERR_CNT11", 0x4025C1B8, 32, "ERM Memory 11 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("EAR12", 0x4025C1C0, 32, "ERM Memory 12 Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("SYN12", 0x4025C1C4, 32, "ERM Memory 12 Syndrome Register", [
                Field("SYNDROME", 24, 8, "SYNDROME", [
                ]),
            ]),
            Register("CORR_ERR_CNT12", 0x4025C1C8, 32, "ERM Memory 12 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("EAR16", 0x4025C200, 32, "ERM Memory 16 Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("SYN16", 0x4025C204, 32, "ERM Memory 16 Syndrome Register", [
                Field("SYNDROME", 24, 8, "SYNDROME", [
                ]),
            ]),
            Register("CORR_ERR_CNT16", 0x4025C208, 32, "ERM Memory 16 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("EAR17", 0x4025C210, 32, "ERM Memory 17 Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("CORR_ERR_CNT17", 0x4025C218, 32, "ERM Memory 17 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
            Register("EAR18", 0x4025C220, 32, "ERM Memory 18 Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("CORR_ERR_CNT18", 0x4025C228, 32, "ERM Memory 18 Correctable Error Count Register", [
                Field("COUNT", 0, 8, "Memory n Correctable Error Count", [
                ]),
            ]),
        ])

class Module_FCCU(Peripheral):
    def __init__(self):
        super().__init__("FCCU", 0x40384000, 0x13C, [
            Register("CTRL", 0x40384000, 32, "Control", [
                Field("DEBUG", 9, 1, "Debug Mode Enable", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("OPS", 6, 2, "Operation Status", [
                    EnumVal("id0", "0", "Idle"),
                    EnumVal("id01", "0x1", "In progress"),
                    EnumVal("id10", "0x2", "Aborted"),
                    EnumVal("id11", "0x3", "Successful"),
                ]),
                Field("OPR", 0, 5, "Operation Run", [
                ]),
            ]),
            Register("CTRLK", 0x40384004, 32, "Control Key", [
                Field("CTRLK", 0, 32, "Locked-Operation Control Key", [
                ]),
            ]),
            Register("CFG", 0x40384008, 32, "Configuration", [
                Field("FCCU_SET_AFTER_RESET", 24, 1, "Fault-Output (EOUT) Activate", [
                    EnumVal("id0", "0", "Inactive (the EOUT signals are in a high-impedance state)"),
                    EnumVal("id1", "0x1", "Active (the EOUT signals indicate FCCU's condition)"),
                ]),
                Field("FCCU_SET_CLEAR", 22, 2, "Fault-Output (EOUT) Control", [
                    EnumVal("id00", "0", "Controlled by the FSM"),
                    EnumVal("id01", "0x1", "Always low"),
                    EnumVal("id10", "0x2", "Controlled by the FSM"),
                    EnumVal("id11", "0x3", "High until a fault occurs on a channel, regardless of whether that fault is disabled; thereafter, controlled by the FSM. Note: FCCU ignores an attempt to write this value if the fault-output (EOUT) timer is already running."),
                ]),
                Field("CM", 11, 1, "Fault-Output (EOUT) Configuration-Indication Mode", [
                    EnumVal("id0", "0", "Different"),
                    EnumVal("id1", "0x1", "Same"),
                ]),
                Field("PS", 9, 1, "Fault-Output (EOUT) Polarity Selection", [
                    EnumVal("id0", "0", "For the faulty indication, EOUT1 is high, and EOUT0 is low."),
                    EnumVal("id1", "0x1", "For the faulty indication, EOUT1 is low, and EOUT0 is high."),
                ]),
                Field("FOM", 6, 3, "Fault-Output (EOUT) Mode", [
                    EnumVal("id010", "0x2", "Bi-Stable"),
                    EnumVal("id101", "0x5", "Test 0 (controlled by the EINOUT register; EOUT1 is an output; EOUT0 is an input)"),
                    EnumVal("id110", "0x6", "Test 1 (controlled by the EINOUT register; EOUT1 and EOUT0 are both outputs)"),
                    EnumVal("id", "0x7", "Test 2 (controlled by the EINOUT register; EOUT1 is an input; EOUT0 is an output)"),
                ]),
            ]),
            Register("NCF_CFG0", 0x4038401C, 32, "Non-critical Fault Configuration", [
                Field("NCFC7", 7, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
                Field("NCFC6", 6, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
                Field("NCFC5", 5, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
                Field("NCFC4", 4, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
                Field("NCFC3", 3, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
                Field("NCFC2", 2, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
                Field("NCFC1", 1, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
                Field("NCFC0", 0, 1, "Non-critical Fault Configuration n", [
                    EnumVal("id0", "0", "Hardware-recoverable"),
                    EnumVal("id1", "0x1", "Software-recoverable"),
                ]),
            ]),
            Register("NCFS_CFG0", 0x4038404C, 32, "Non-critical Fault-State Configuration", [
                Field("NCFSC7", 14, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
                Field("NCFSC6", 12, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
                Field("NCFSC5", 10, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
                Field("NCFSC4", 8, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
                Field("NCFSC3", 6, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
                Field("NCFSC2", 4, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
                Field("NCFSC1", 2, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
                Field("NCFSC0", 0, 2, "Non-critical Fault-State Configuration n", [
                    EnumVal("id00", "0", "Disabled"),
                    EnumVal("id01", "0x1", "Enabled (rst_sfunc_b) (short)"),
                    EnumVal("id11", "0x3", "Disabled"),
                ]),
            ]),
            Register("NCF_S0", 0x40384080, 32, "Non-critical Fault Status", [
                Field("NCFS7", 7, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
                Field("NCFS6", 6, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
                Field("NCFS5", 5, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
                Field("NCFS4", 4, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
                Field("NCFS3", 3, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
                Field("NCFS2", 2, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
                Field("NCFS1", 1, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
                Field("NCFS0", 0, 1, "Non-critical Fault Status n", [
                    EnumVal("id0", "0", "No unrecovered fault"),
                    EnumVal("id1", "0x1", "Unrecovered fault"),
                ]),
            ]),
            Register("NCFK", 0x40384090, 32, "Non-critical Fault Key", [
                Field("NCFK", 0, 32, "Non-critical Fault Key", [
                ]),
            ]),
            Register("NCF_E0", 0x40384094, 32, "Non-critical Fault Enable", [
                Field("NCFE7", 7, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFE6", 6, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFE5", 5, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFE4", 4, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFE3", 3, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFE2", 2, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFE1", 1, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFE0", 0, 1, "Non-critical Fault Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
            ]),
            Register("NCF_TOE0", 0x403840A4, 32, "Non-critical-Fault Alarm-State Timeout Enable", [
                Field("NCFTOE7", 7, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFTOE6", 6, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFTOE5", 5, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFTOE4", 4, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFTOE3", 3, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFTOE2", 2, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFTOE1", 1, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NCFTOE0", 0, 1, "Non-critical-Fault Alarm-State Timeout Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
            ]),
            Register("NCF_TO", 0x403840B4, 32, "Non-critical-Fault Alarm-State Timeout Interval", [
                Field("TO", 0, 32, "Non-critical-Fault Alarm-State Timeout Interval", [
                ]),
            ]),
            Register("CFG_TO", 0x403840B8, 32, "Configuration-State Timeout Interval", [
                Field("TO", 0, 3, "Configuration-State Timeout Interval", [
                ]),
            ]),
            Register("EINOUT", 0x403840BC, 32, "IO Control", [
                Field("EIN1", 5, 1, "Error Input 1", [
                    EnumVal("id0", "0", "Low"),
                    EnumVal("id1", "0x1", "High"),
                ]),
                Field("EIN0", 4, 1, "Error Input 0", [
                    EnumVal("id0", "0", "Low"),
                    EnumVal("id1", "0x1", "High"),
                ]),
                Field("EOUT1", 1, 1, "EOUT1", [
                    EnumVal("id0", "0", "force EOUT[1] = 0"),
                    EnumVal("id1", "0x1", "force EOUT[1] = 1"),
                ]),
                Field("EOUT0", 0, 1, "EOUT0", [
                    EnumVal("id0", "0", "force EOUT[0] = 0"),
                    EnumVal("id1", "0x1", "force EOUT[0] = 1"),
                ]),
            ]),
            Register("STAT", 0x403840C0, 32, "Status", [
                Field("PhysicErrorPin", 4, 2, "EOUT Signal States", [
                    EnumVal("id00", "0", "EOUT1 is low; EOUT0 is low."),
                    EnumVal("id01", "0x1", "EOUT1 is low; EOUT0 is high."),
                    EnumVal("id10", "0x2", "EOUT1 is high; EOUT0 is low."),
                    EnumVal("id11", "0x3", "EOUT1 is high; EOUT0 is high."),
                ]),
                Field("ESTAT", 3, 1, "FCCU Faulty Condition", [
                    EnumVal("id0", "0", "Not in faulty condition (in non-faulty or configuration condition)"),
                    EnumVal("id1", "0x1", "In faulty condition"),
                ]),
                Field("STATUS", 0, 3, "FCCU State", [
                    EnumVal("id000", "0", "NORMAL"),
                    EnumVal("id001", "0x1", "CONFIG"),
                    EnumVal("id010", "0x2", "ALARM"),
                    EnumVal("id011", "0x3", "FAULT"),
                ]),
            ]),
            Register("N2AF_STATUS", 0x403840C4, 32, "Normal-to-Alarm Freeze Status", [
                Field("NAFS", 0, 8, "Normal-to-Alarm Freeze Status", [
                ]),
            ]),
            Register("A2FF_STATUS", 0x403840C8, 32, "Alarm-to-Fault Freeze Status", [
                Field("AF_SRC", 8, 2, "Alarm-to-Fault Source", [
                    EnumVal("id00", "0", "No Alarm-to-Fault-state fault"),
                    EnumVal("id10", "0x2", "Non-critical fault"),
                    EnumVal("id11", "0x3", "Multiple Alarm-to-Fault-state faults"),
                ]),
                Field("AFFS", 0, 8, "Alarm-to-Fault Freeze Status", [
                ]),
            ]),
            Register("N2FF_STATUS", 0x403840CC, 32, "Normal-to-Fault Freeze Status", [
                Field("NF_SRC", 8, 2, "Normal-to-Fault Source", [
                    EnumVal("id00", "0", "No Normal-to-Fault-state fault"),
                    EnumVal("id10", "0x2", "Non-critical fault"),
                    EnumVal("id11", "0x3", "Multiple Normal-to-Fault-state faults"),
                ]),
                Field("NFFS", 0, 8, "Normal-to-Fault Freeze Status", [
                ]),
            ]),
            Register("F2AF_STATUS", 0x403840D0, 32, "Fault-to-Alarm Freeze Status", [
                Field("FAFS", 0, 9, "Fault-to-Alarm Freeze Status", [
                ]),
            ]),
            Register("NCFF", 0x403840DC, 32, "Non-critical Fault Fake", [
                Field("FNCFC", 0, 7, "FNCFC", [
                ]),
            ]),
            Register("IRQ_STAT", 0x403840E0, 32, "IRQ Status", [
                Field("NMI_STAT", 2, 1, "NMI Interrupt Status", [
                    EnumVal("id0", "0", "NMI interrupt is OFF"),
                    EnumVal("id1", "0x1", "NMI interrupt is ON"),
                ]),
                Field("ALRM_STAT", 1, 1, "Alarm Interrupt Status", [
                    EnumVal("id0", "0", "Alarm interrupt is OFF"),
                    EnumVal("id1", "0x1", "Alarm interrupt is ON"),
                ]),
                Field("CFG_TO_STAT", 0, 1, "Configuration-State Timeout Status", [
                    EnumVal("id0", "0", "No configuration-stat timeout error"),
                    EnumVal("id1", "0x1", "Configuration-state timeout error"),
                ]),
            ]),
            Register("IRQ_EN", 0x403840E4, 32, "IRQ Enable", [
                Field("CFG_TO_IEN", 0, 1, "Configuration-State Timeout Interrupt Enable", [
                    EnumVal("id0", "0", "Configuration-state timeout interrupt disabled"),
                    EnumVal("id1", "0x1", "Configuration-state timeout interrupt enabled"),
                ]),
            ]),
            Register("TRANS_LOCK", 0x403840F0, 32, "Transient Configuration Lock", [
                Field("TRANSKEY", 0, 9, "Transient Configuration Lock", [
                ]),
            ]),
            Register("PERMNT_LOCK", 0x403840F4, 32, "Permanent Configuration Lock", [
                Field("PERMNTKEY", 0, 9, "Permanent Configuration Lock", [
                ]),
            ]),
            Register("DELTA_T", 0x403840F8, 32, "Delta T", [
                Field("DELTA_T", 0, 14, "Minimum Fault-Output (EOUT) Timer Interval", [
                ]),
            ]),
            Register("IRQ_ALARM_EN0", 0x403840FC, 32, "Non-critical Alarm-State Interrupt-Request Enable", [
                Field("IRQEN7", 7, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("IRQEN6", 6, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("IRQEN5", 5, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("IRQEN4", 4, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("IRQEN3", 3, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("IRQEN2", 2, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("IRQEN1", 1, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("IRQEN0", 0, 1, "Non-critical Alarm-State Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
            ]),
            Register("NMI_EN0", 0x4038410C, 32, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable", [
                Field("NMIEN7", 7, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NMIEN6", 6, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NMIEN5", 5, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NMIEN4", 4, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NMIEN3", 3, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NMIEN2", 2, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NMIEN1", 1, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
                Field("NMIEN0", 0, 1, "Non-critical Fault-State Non-maskable-Interrupt-Request Enable n", [
                    EnumVal("id0", "0", "Disabled"),
                    EnumVal("id1", "0x1", "Enabled"),
                ]),
            ]),
            Register("EOUT_SIG_EN0", 0x4038411C, 32, "Non-critical Fault-State EOUT Signaling Enable", [
                Field("EOUTEN7", 7, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
                Field("EOUTEN6", 6, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
                Field("EOUTEN5", 5, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
                Field("EOUTEN4", 4, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
                Field("EOUTEN3", 3, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
                Field("EOUTEN2", 2, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
                Field("EOUTEN1", 1, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
                Field("EOUTEN0", 0, 1, "Non-critical Fault-State EOUT Signaling Enable n", [
                    EnumVal("id0", "0", "In Bi-Stable fault-output mode, both EOUT signaling and FIF assertion are disabled; in other fault-output modes, EOUT signaling is enabled and FIF assertion is disabled."),
                    EnumVal("id1", "0x1", "Both EOUT signaling and FIF assertion are enabled in all fault-output modes."),
                ]),
            ]),
            Register("TMR_ALARM", 0x4038412C, 32, "Alarm-State Timer", [
                Field("COUNT", 0, 32, "Alarm-State Timer Count", [
                ]),
            ]),
            Register("TMR_CFG", 0x40384134, 32, "Configuration-State Timer", [
                Field("COUNT", 0, 32, "Configuration-State Timer Count", [
                ]),
            ]),
            Register("TMR_ETMR", 0x40384138, 32, "Fault-Output Timer", [
                Field("COUNT", 0, 32, "Fault-Output Timer Count", [
                ]),
            ]),
        ])

class Module_FIRC(Peripheral):
    def __init__(self):
        super().__init__("FIRC", 0x402D0000, 0xC, [
            Register("Status_Register", 0x402D0004, 32, "Status Register", [
                Field("STATUS", 0, 1, "Status bit for FIRC", [
                    EnumVal("status_0", "0", "FIRC is off or unstable."),
                    EnumVal("status_1", "0x1", "FIRC is on and stable."),
                ]),
            ]),
            Register("STDBY_ENABLE", 0x402D0008, 32, "Standby Enable Register", [
                Field("STDBY_EN", 0, 1, "Enables or disables FIRC in chip's Standby mode.", [
                    EnumVal("status_2", "0", "Disabled"),
                    EnumVal("status_3", "0x1", "Enabled"),
                ]),
            ]),
        ])

class Module_FLASH(Peripheral):
    def __init__(self):
        super().__init__("FLASH", 0x402EC000, 0x180, [
            Register("MCR", 0x402EC000, 32, "Module Configuration", [
                Field("PEID", 16, 8, "Program and Erase Master/Domain ID", [
                ]),
                Field("PECIE", 15, 1, "Program/Erase Complete Interrupt Enable", [
                    EnumVal("PECIE_0", "0", "Interrupt request not generated when MCRS[DONE] is 1"),
                    EnumVal("PECIE_1", "0x1", "Interrupt request generated when MCRS[DONE] is 1"),
                ]),
                Field("WDIE", 12, 1, "Watch Dog Interrupt Enable", [
                    EnumVal("WDIE_0", "0", "Watchdog interrupt not enabled"),
                    EnumVal("WDIE_1", "0x1", "Watchdog interrupt enabled"),
                ]),
                Field("PGM", 8, 1, "Program", [
                    EnumVal("PGM_0", "0", "Flash memory not executing a program sequence"),
                    EnumVal("PGM_1", "0x1", "Flash memory executing a program sequence"),
                ]),
                Field("ESS", 5, 1, "Erase Size Select", [
                    EnumVal("ESS_0", "0", "Flash memory erase is on a sector"),
                    EnumVal("ESS_1", "0x1", "Flash memory erase is on a block"),
                ]),
                Field("ERS", 4, 1, "Erase", [
                    EnumVal("ERS_0", "0", "Flash memory not executing an erase sequence"),
                    EnumVal("ERS_1", "0x1", "Flash memory executing an erase sequence"),
                ]),
                Field("EHV", 0, 1, "Enable High Voltage", [
                    EnumVal("EHV_0", "0", "Flash memory is not enabled to perform a high voltage operation."),
                    EnumVal("EHV_1", "0x1", "Flash memory is enabled to perform a high voltage operation."),
                ]),
            ]),
            Register("MCRS", 0x402EC004, 32, "Module Configuration Status", [
                Field("EER", 31, 1, "ECC Event Error", [
                    EnumVal("EER_0", "0", "Reads occurring normally"),
                    EnumVal("EER_1", "0x1", "ECC error occurred during a previous read"),
                ]),
                Field("SBC", 30, 1, "Single Bit Correction", [
                    EnumVal("SBC_0", "0", "Reads occurring without corrections"),
                    EnumVal("SBC_1", "0x1", "Single bit correction occurred during a previous read"),
                ]),
                Field("AEE", 29, 1, "Address Encode Error", [
                    EnumVal("AEE_0", "0", "Reads are occurring without address encode mismatches"),
                    EnumVal("AEE_1", "0x1", "Previous read may be corrupted based on address encode mismatch"),
                ]),
                Field("EEE", 28, 1, "EDC after ECC Error", [
                    EnumVal("EEE_0", "0", "Reads are occurring without EDC after ECC mismatches"),
                    EnumVal("EEE_1", "0x1", "Previous read may be corrupted based on ECC calculation errors"),
                ]),
                Field("RVE", 25, 1, "Read Voltage Error", [
                    EnumVal("RVE_0", "0", "Reads are occurring without voltage issues"),
                    EnumVal("RVE_1", "0x1", "A previous read may have been corrupted due to read voltage being out of range"),
                ]),
                Field("RRE", 24, 1, "Read Reference Error", [
                    EnumVal("RRE_0", "0", "Reads occur without reference issues"),
                    EnumVal("RRE_1", "0x1", "Previous read may be corrupted because of read reference being out of range"),
                ]),
                Field("RWE", 20, 1, "Read-While-Write Event Error", [
                    EnumVal("RWE_0", "0", "Reads occur normally"),
                    EnumVal("RWE_1", "0x1", "RWW error occurred during a previous read"),
                ]),
                Field("PEP", 17, 1, "Program and Erase Protection Error", [
                    EnumVal("PEP_0", "0", "Program and erase protection errors do not exist"),
                    EnumVal("PEP_1", "0x1", "Previous program or erase protection error encountered"),
                ]),
                Field("PES", 16, 1, "Program and Erase Sequence Error", [
                    EnumVal("PES_0", "0", "Program and erase sequence errors do not exist"),
                    EnumVal("PES_1", "0x1", "Previous program or erase sequence encountered an error"),
                ]),
                Field("DONE", 15, 1, "State Machine Status", [
                    EnumVal("DONE_0", "0", "Performing a high voltage operation"),
                    EnumVal("DONE_1", "0x1", "Not executing a high voltage operation"),
                ]),
                Field("PEG", 14, 1, "Program/Erase Good", [
                    EnumVal("PEG_0", "0", "Program or erase operation failed"),
                    EnumVal("PEG_1", "0x1", "Program or erase operation successful"),
                ]),
                Field("WDI", 12, 1, "Watch Dog Interrupt", [
                    EnumVal("WDI_0", "0", "Normal Operation, Watchdog Timer has not expired."),
                    EnumVal("WDI_1", "0x1", "Program Watchdog Timer has expired."),
                ]),
                Field("EPEG", 9, 1, "ECC Enabled Program/Erase Good", [
                    EnumVal("EPEG_0", "0", "Program or erase operation did not require ECC Enabled verifies."),
                    EnumVal("EPEG_1", "0x1", "Program or erase operation required ECC Enabled verifies to pass."),
                ]),
                Field("TSPELOCK", 8, 1, "UTest NVM Program and Erase Lock", [
                    EnumVal("TSPELOCK_0", "0", "Corresponding sector not locked, and may be programmed or erased"),
                    EnumVal("TSPELOCK_1", "0x1", "Corresponding sector protected from the program and erase sequences"),
                ]),
                Field("RE", 0, 1, "Reset Error", [
                    EnumVal("RE_0", "0", "Reset occurred without errors"),
                    EnumVal("RE_1", "0x1", "Reset error encountered"),
                ]),
            ]),
            Register("MCRE", 0x402EC008, 32, "Extended Module Configuration", [
                Field("n2M", 29, 3, "Number of 2 MB Blocks", [
                    EnumVal("n2M_0", "0", "Zero 2 MB blocks"),
                    EnumVal("n2M_1", "0x1", "One 2 MB block"),
                    EnumVal("n2M_2", "0x2", "Two 2 MB blocks"),
                    EnumVal("n2M_3", "0x3", "Three 2 MB blocks"),
                    EnumVal("n2M_4", "0x4", "Four 2 MB blocks"),
                ]),
                Field("n1M", 21, 3, "Number of 1 MB Blocks", [
                    EnumVal("n1M_0", "0", "Zero 1 MB blocks"),
                    EnumVal("n1M_1", "0x1", "One 1 MB block"),
                    EnumVal("n1M_2", "0x2", "Two 1 MB blocks"),
                    EnumVal("n1M_3", "0x3", "Three 1 MB blocks"),
                    EnumVal("n1M_4", "0x4", "Four 1 MB blocks"),
                ]),
                Field("n512K", 14, 2, "Number of 512 KB Blocks", [
                    EnumVal("n512K_0", "0", "Zero 512 KB blocks"),
                    EnumVal("n512K_1", "0x1", "One 512 KB block"),
                    EnumVal("n512K_2", "0x2", "Two 512 KB blocks"),
                    EnumVal("n512K_3", "0x3", "Four 512 KB blocks"),
                ]),
                Field("n256K", 6, 2, "Number of 256 KB Blocks", [
                    EnumVal("n256K_0", "0", "Zero 256 KB blocks"),
                    EnumVal("n256K_1", "0x1", "One 256 KB block"),
                    EnumVal("n256K_2", "0x2", "Two 256 KB blocks"),
                    EnumVal("n256K_3", "0x3", "Four 256 KB blocks"),
                ]),
            ]),
            Register("CTL", 0x402EC00C, 32, "Module Control", [
                Field("RWSL", 15, 1, "Read Wait State Lock", [
                    EnumVal("RWSL_0", "0", "RWSC not locked and available for writing"),
                    EnumVal("RWSL_1", "0x1", "RWSC locked and unavailable for writing"),
                ]),
                Field("RWSC", 8, 5, "Wait State Control", [
                    EnumVal("RWSC_1", "0x1", "One additional wait state is added."),
                    EnumVal("RWSC_2", "0x2", "Two additional wait states are added."),
                    EnumVal("RWSC_3", "0x3", "Three additional wait states are added."),
                    EnumVal("RWSC_4", "0x4", "Four additional wait states are added."),
                    EnumVal("RWSC_5", "0x5", "Five additional wait states are added."),
                    EnumVal("RWSC_6", "0x6", "Six additional wait states are added."),
                    EnumVal("RWSC_7", "0x7", "Seven additional wait states are added."),
                    EnumVal("RWSC_8", "0x8", "Eight additional wait states are added."),
                ]),
            ]),
            Register("ADR", 0x402EC010, 32, "Address", [
                Field("SAD", 31, 1, "UTest NVM Address", [
                    EnumVal("SAD_0", "0", "Address captured or to be accessed is from the main array space"),
                    EnumVal("SAD_1", "0x1", "Address captured or to be accessed is from the UTest NVM array space"),
                ]),
                Field("A5", 24, 1, "Address Region 5", [
                    EnumVal("A5_0", "0", "Address captured or to be accessed is not from region 5"),
                    EnumVal("A5_1", "0x1", "Address captured or to be accessed is from region 5"),
                ]),
                Field("A2", 21, 1, "Address Region 2", [
                    EnumVal("A2_0", "0", "Address captured or to be accessed is not from region 2"),
                    EnumVal("A2_1", "0x1", "Address captured or to be accessed is from region 2"),
                ]),
                Field("A1", 20, 1, "Address Region 1", [
                    EnumVal("A1_0", "0", "Address captured or to be accessed is not from region 1"),
                    EnumVal("A1_1", "0x1", "Address captured or to be accessed is from region 1"),
                ]),
                Field("A0", 19, 1, "Address Region 0", [
                    EnumVal("A0_0", "0", "Address captured or to be accessed is not from region 0"),
                    EnumVal("A0_1", "0x1", "Address captured or to be accessed is from region 0"),
                ]),
                Field("ADDR", 1, 18, "Address", [
                ]),
            ]),
            Register("PEADR", 0x402EC014, 32, "Program and Erase Address", [
                Field("PEASAD", 31, 1, "UTest NVM Program and Erase Address", [
                    EnumVal("PEASAD_0", "0", "Address accessed is from the main array space"),
                    EnumVal("PEASAD_1", "0x1", "Address accessed is from the UTest NVM array space"),
                ]),
                Field("PEA5", 24, 1, "Program and Erase Address Region 5", [
                    EnumVal("PEA5_0", "0", "Address accessed is not from region 5"),
                    EnumVal("PEA5_1", "0x1", "Address accessed is from region 5"),
                ]),
                Field("PEA4", 23, 1, "Program and Erase Address Region 4", [
                    EnumVal("PEA4_0", "0", "Address accessed is not from region 4"),
                    EnumVal("PEA4_1", "0x1", "Adrress accessed is from region 4"),
                ]),
                Field("PEA3", 22, 1, "Program and Erase Address Region 3", [
                    EnumVal("PEA3_0", "0", "Address accessed is not from region 3"),
                    EnumVal("PEA3_1", "0x1", "Address accessed is from region 3"),
                ]),
                Field("PEA2", 21, 1, "Program and Erase Address Region 2", [
                    EnumVal("PEA2_0", "0", "Address accessed is not from region 2"),
                    EnumVal("PEA2_1", "0x1", "Address accessed is from region 2"),
                ]),
                Field("PEA1", 20, 1, "Program and Erase Address Region 1", [
                    EnumVal("PEA1_0", "0", "Address accessed is not from region 1"),
                    EnumVal("PEA1_1", "0x1", "Address accessed is from region 1"),
                ]),
                Field("PEA0", 19, 1, "Program and Erase Address Region 0", [
                    EnumVal("PEA0_0", "0", "Address accessed is not from region 0"),
                    EnumVal("PEA0_1", "0x1", "Address accessed is from region 0"),
                ]),
                Field("PEADDR", 5, 14, "Program and Erase Address", [
                ]),
            ]),
            Register("SPELOCK", 0x402EC050, 32, "Sector Program and Erase Hardware Lock", [
                Field("SPELOCK", 0, 32, "Sector Program and Erase Lock [31:0]", [
                ]),
            ]),
            Register("SSPELOCK", 0x402EC054, 32, "Super Sector Program and Erase Hardware Lock", [
                Field("SSPELOCK", 0, 28, "Super Sector Program and Erase Lock [27:0]", [
                ]),
            ]),
            Register("XSPELOCK", 0x402EC070, 32, "Express Sector Program and Erase Hardware Lock", [
                Field("XSPELOCK", 0, 32, "Express Sector Program and Erase Lock [31:0]", [
                ]),
            ]),
            Register("XSSPELOCK", 0x402EC074, 32, "Express Super Sector Program and Erase Hardware Lock", [
                Field("XSSPELOCK", 0, 28, "Express Super Sector Program and Erase Lock [27:0]", [
                ]),
            ]),
            Register("TMD", 0x402EC090, 32, "Test Mode Disable Password Check", [
                Field("PWD", 0, 32, "Password Challenge", [
                ]),
            ]),
            Register("UT0", 0x402EC094, 32, "UTest 0", [
                Field("UTE", 31, 1, "UTest Enable", [
                    EnumVal("UTE_0", "0", "U-Test mode is not enabled."),
                    EnumVal("UTE_1", "0x1", "U-Test mode is enabled."),
                ]),
                Field("SBCE", 30, 1, "Single Bit Correction Enable", [
                    EnumVal("SBCE_0", "0", "Disabled"),
                    EnumVal("SBCE_1", "0x1", "Enabled"),
                ]),
                Field("RRIE", 15, 1, "Read Reference Input Enable", [
                    EnumVal("RRIE_0", "0", "Read reference input disabled"),
                    EnumVal("RRIE_1", "0x1", "Read reference input enabled"),
                ]),
                Field("AEIE", 14, 1, "Address Encode Invert Enable", [
                    EnumVal("AEIE_0", "0", "Address encode invert is disabled"),
                    EnumVal("AEIE_1", "0x1", "Address encode values are inverted based on UA0[AEI]"),
                ]),
                Field("EDIE", 13, 1, "EDC after ECC Data Input Enable", [
                    EnumVal("EDIE_0", "0", "EDC after ECC data input is disabled"),
                    EnumVal("EDIE_1", "0x1", "Data read is from UD3[EDDATA] and UD5[EDDATAC]"),
                ]),
                Field("EIE", 12, 1, "ECC Data Input Enable", [
                    EnumVal("EIE_0", "0", "ECC data input is disabled"),
                    EnumVal("EIE_1", "0x1", "Data read is from UD0[EDATA] and UD2[EDATAC]"),
                ]),
                Field("NAIBP", 9, 1, "Next Array Integrity Break Point", [
                    EnumVal("NAIBP_0", "0", "Array integrity state machine is not currently at a breakpoint"),
                    EnumVal("NAIBP_1", "0x1", "Array integrity state machine is at a breakpoint"),
                ]),
                Field("AIBPE", 8, 1, "Array Integrity Break Point Enable", [
                    EnumVal("AIBPE_0", "0", "Array integrity breakpoints disabled"),
                    EnumVal("AIBPE_1", "0x1", "Array integrity breakpoints enabled during array integrity checks"),
                ]),
                Field("AISUS", 6, 1, "Array Integrity Suspend", [
                    EnumVal("AISUS_0", "0", "Array integrity sequence not suspended."),
                    EnumVal("AISUS_1", "0x1", "Array integrity sequence is suspended."),
                ]),
                Field("MRE", 5, 1, "Margin Read Enable", [
                    EnumVal("MRE_0", "0", "Margin reads are not enabled."),
                    EnumVal("MRE_1", "0x1", "Margin reads are enabled."),
                ]),
                Field("MRV", 4, 1, "Margin Read Value", [
                    EnumVal("MRV_0", "0", "Zero's margin reads are requested."),
                    EnumVal("MRV_1", "0x1", "One's margin reads are requested."),
                ]),
                Field("AIS", 2, 1, "Array Integrity Sequence", [
                    EnumVal("AIS_0", "0", "Array integrity sequence is proprietary sequence"),
                    EnumVal("AIS_1", "0x1", "Array integrity sequence is sequential"),
                ]),
                Field("AIE", 1, 1, "Array Integrity Enable", [
                    EnumVal("AIE_0", "0", "Array integrity checks not enabled"),
                    EnumVal("AIE_1", "0x1", "Array integrity checks enabled"),
                ]),
                Field("AID", 0, 1, "Array Integrity Done", [
                    EnumVal("AID_0", "0", "Array integrity check ongoing"),
                    EnumVal("AID_1", "0x1", "Array integrity check complete"),
                ]),
            ]),
            Register("UM[0]", 0x402EC098, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[1]", 0x402EC09C, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[2]", 0x402EC0A0, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[3]", 0x402EC0A4, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[4]", 0x402EC0A8, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[5]", 0x402EC0AC, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[6]", 0x402EC0B0, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[7]", 0x402EC0B4, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM[8]", 0x402EC0B8, 32, "UMISRn", [
                Field("MISR", 0, 32, "MISR[31:0]", [
                ]),
            ]),
            Register("UM9", 0x402EC0BC, 32, "UMISR9", [
                Field("MISR", 0, 1, "MISR[288]", [
                ]),
            ]),
            Register("UD0", 0x402EC0D0, 32, "UTest Data 0", [
                Field("EDATA", 0, 32, "ECC Data [31:0]", [
                ]),
            ]),
            Register("UD1", 0x402EC0D4, 32, "UTest Data 1", [
                Field("EDATA", 0, 32, "ECC Data [63:32]", [
                ]),
            ]),
            Register("UD2", 0x402EC0D8, 32, "UTest Data 2", [
                Field("ED3", 27, 1, "ECC Logic Check Double Word 3", [
                ]),
                Field("ED2", 26, 1, "ECC Logic Check Double Word 2", [
                ]),
                Field("ED1", 25, 1, "ECC Logic Check Double Word 1", [
                ]),
                Field("ED0", 24, 1, "ECC Logic Check Double Word 0", [
                ]),
                Field("EDATAC", 0, 8, "ECC Data Check Bits [7:0]", [
                ]),
            ]),
            Register("UD3", 0x402EC0DC, 32, "UTest Data 3", [
                Field("EDDATA", 0, 32, "EDC After ECC Data [31:0]", [
                ]),
            ]),
            Register("UD4", 0x402EC0E0, 32, "UTest Data 4", [
                Field("EDDATA", 0, 32, "EDC After ECC Data [63:31]", [
                ]),
            ]),
            Register("UD5", 0x402EC0E4, 32, "UTest Data 5", [
                Field("EDD3", 27, 1, "EDC After ECC Logic Check Double Word 3", [
                ]),
                Field("EDD2", 26, 1, "EDC after ECC Logic Check Double Word 2", [
                ]),
                Field("EDD1", 25, 1, "EDC After ECC Logic Check Double Word 1", [
                ]),
                Field("EDD0", 24, 1, "EDC After ECC Logic Check Double Word 0", [
                ]),
                Field("EDDATAC", 0, 8, "EDC After ECC Data Check Bits [7:0]", [
                ]),
            ]),
            Register("UA0", 0x402EC0E8, 32, "UTest Address 0", [
                Field("AEI", 0, 32, "Address Encode Invert [31:0]", [
                ]),
            ]),
            Register("UA1", 0x402EC0EC, 32, "UTest Address 1", [
                Field("AEI", 0, 20, "Address Encode Invert [51:32]", [
                ]),
            ]),
            Register("XMCR", 0x402EC0F0, 32, "Express Module Configuration", [
                Field("XPEID", 16, 8, "Express Program Master/Domain ID", [
                ]),
                Field("XDONE", 15, 1, "Express State Machine Status", [
                    EnumVal("XDONE_0", "0", "Executing an express program operation"),
                    EnumVal("XDONE_1", "0x1", "Not executing an express program operation"),
                ]),
                Field("XPEG", 14, 1, "Express Program Good", [
                    EnumVal("XPEG_0", "0", "Program operation failed"),
                    EnumVal("XPEG_1", "0x1", "Program operation successful"),
                ]),
                Field("XDOK", 13, 1, "Express Data OK", [
                    EnumVal("XDOK_0", "0", "Flash memory not ready to accept writes to the DATA registers"),
                    EnumVal("XDOK_1", "0x1", "Writes to DATA registers allowed"),
                ]),
                Field("XWDI", 12, 1, "Express Watch Dog Interrupt", [
                    EnumVal("XWDI_0", "0", "Normal Operation, Watchdog Timer has not expired."),
                    EnumVal("XWDI_1", "0x1", "Express Program Watchdog Timer has expired."),
                ]),
                Field("XWDIE", 11, 1, "Express Watch Dog Interrupt Enable", [
                    EnumVal("XWDIE_0", "0", "Express watchdog interrupt disabled"),
                    EnumVal("XWDIE_1", "0x1", "Express watchdog interrupt enabled"),
                ]),
                Field("XEPEG", 9, 1, "Express ECC Enabled Program Good", [
                    EnumVal("XEPEG_0", "0", "Program operation did not require ECC-enabled verifies"),
                    EnumVal("XEPEG_1", "0x1", "Program operation required ECC-enabled verifies to pass"),
                ]),
                Field("XPGM", 8, 1, "Express Program", [
                    EnumVal("XPGM_0", "0", "Flash memory not executing an express program sequence"),
                    EnumVal("XPGM_1", "0x1", "Flash memory executing an express program sequence"),
                ]),
                Field("XEHV", 0, 1, "Express Enable High Voltage", [
                    EnumVal("XEHV_0", "0", "Flash memory is not enabled to perform an express high voltage operation."),
                    EnumVal("XEHV_1", "0x1", "Flash memory is enabled to perform an express high voltage operation."),
                ]),
            ]),
            Register("XPEADR", 0x402EC0F4, 32, "Express Program Address", [
                Field("XPEA5", 24, 1, "Express Program Address Region 5", [
                    EnumVal("XPEA5_0", "0", "Address accessed is not from region 5"),
                    EnumVal("XPEA5_1", "0x1", "Address accessed is from region 5"),
                ]),
                Field("XPEA4", 23, 1, "Express Program Address Region 4", [
                    EnumVal("XPEA4_0", "0", "Address accessed is not from region 4"),
                    EnumVal("XPEA4_1", "0x1", "Address accessed is from region 4"),
                ]),
                Field("XPEA3", 22, 1, "Express Program Address Region 3", [
                    EnumVal("XPEA3_0", "0", "Address accessed is not from region 3"),
                    EnumVal("XPEA3_1", "0x1", "Address accessed is from region 3"),
                ]),
                Field("XPEA2", 21, 1, "Express Program Address Region 2", [
                    EnumVal("XPEA2_0", "0", "Address accessed is not from region 2"),
                    EnumVal("XPEA2_1", "0x1", "Address accessed is from region 2"),
                ]),
                Field("XPEA1", 20, 1, "Express Program Address Region 1", [
                    EnumVal("XPEA1_0", "0", "Address accessed is not from region 1"),
                    EnumVal("XPEA1_1", "0x1", "Address accessed is from region 1"),
                ]),
                Field("XPEA0", 19, 1, "Express Program Address Region 0", [
                    EnumVal("XPEA0_0", "0", "Address accessed is not from region 0"),
                    EnumVal("XPEA0_1", "0x1", "Address accessed is from region 0"),
                ]),
                Field("XPEADDR", 5, 14, "Express Program Address", [
                ]),
            ]),
            Register("DATA[0]", 0x402EC100, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[1]", 0x402EC104, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[2]", 0x402EC108, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[3]", 0x402EC10C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[4]", 0x402EC110, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[5]", 0x402EC114, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[6]", 0x402EC118, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[7]", 0x402EC11C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[8]", 0x402EC120, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[9]", 0x402EC124, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[10]", 0x402EC128, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[11]", 0x402EC12C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[12]", 0x402EC130, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[13]", 0x402EC134, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[14]", 0x402EC138, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[15]", 0x402EC13C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[16]", 0x402EC140, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[17]", 0x402EC144, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[18]", 0x402EC148, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[19]", 0x402EC14C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[20]", 0x402EC150, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[21]", 0x402EC154, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[22]", 0x402EC158, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[23]", 0x402EC15C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[24]", 0x402EC160, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[25]", 0x402EC164, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[26]", 0x402EC168, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[27]", 0x402EC16C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[28]", 0x402EC170, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[29]", 0x402EC174, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[30]", 0x402EC178, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
            Register("DATA[31]", 0x402EC17C, 32, "Program Data", [
                Field("PDATA", 0, 32, "Program Data", [
                ]),
            ]),
        ])

class Module_FLEXIO(Peripheral):
    def __init__(self):
        super().__init__("FLEXIO", 0x40324000, 0x920, [
            Register("VERID", 0x40324000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("standard", "0", "Standard features implemented."),
                    EnumVal("state_logic_parallel", "0x1", "Supports state, logic, and parallel modes."),
                    EnumVal("pinctrl", "0x2", "Supports pin control registers."),
                    EnumVal("state_logic_parallel_pinctrl", "0x3", "Supports state, logic, and parallel modes, plus pin control registers."),
                ]),
            ]),
            Register("PARAM", 0x40324004, 32, "Parameter", [
                Field("TRIGGER", 24, 8, "Trigger Number", [
                ]),
                Field("PIN", 16, 8, "Pin Number", [
                ]),
                Field("TIMER", 8, 8, "Timer Number", [
                ]),
                Field("SHIFTER", 0, 8, "Shifter Number", [
                ]),
            ]),
            Register("CTRL", 0x40324008, 32, "FLEXIO Control", [
                Field("DBGE", 30, 1, "Debug Enable", [
                    EnumVal("disable", "0", "FLEXIO is disabled in Debug modes."),
                    EnumVal("emable", "0x1", "FLEXIO is enabled in Debug modes."),
                ]),
                Field("FASTACC", 2, 1, "Fast Access", [
                    EnumVal("normal", "0", "Configures for normal register accesses to FLEXIO"),
                    EnumVal("fast", "0x1", "Configures for fast register accesses to FLEXIO"),
                ]),
                Field("SWRST", 1, 1, "Software Reset", [
                    EnumVal("disable", "0", "Software reset is disabled"),
                    EnumVal("enable", "0x1", "Software reset is enabled. All FLEXIO registers except the Control Register are reset."),
                ]),
                Field("FLEXEN", 0, 1, "FLEXIO Enable", [
                    EnumVal("disable", "0", "FLEXIO module is disabled."),
                    EnumVal("enable", "0x1", "FLEXIO module is enabled."),
                ]),
            ]),
            Register("PIN", 0x4032400C, 32, "Pin State", [
                Field("PDI", 0, 16, "Pin Data Input", [
                ]),
            ]),
            Register("SHIFTSTAT", 0x40324010, 32, "Shifter Status", [
                Field("SSF", 0, 8, "Shifter Status Flag", [
                ]),
            ]),
            Register("SHIFTERR", 0x40324014, 32, "Shifter Error", [
                Field("SEF", 0, 8, "Shifter Error Flags", [
                ]),
            ]),
            Register("TIMSTAT", 0x40324018, 32, "Timer Status", [
                Field("TSF", 0, 8, "Timer Status Flags", [
                ]),
            ]),
            Register("SHIFTSIEN", 0x40324020, 32, "Shifter Status Interrupt Enable", [
                Field("SSIE", 0, 8, "Shifter Status Interrupt Enable", [
                ]),
            ]),
            Register("SHIFTEIEN", 0x40324024, 32, "Shifter Error Interrupt Enable", [
                Field("SEIE", 0, 8, "Shifter Error Interrupt Enable", [
                ]),
            ]),
            Register("TIMIEN", 0x40324028, 32, "Timer Interrupt Enable", [
                Field("TEIE", 0, 8, "Timer Status Interrupt Enable", [
                ]),
            ]),
            Register("SHIFTSDEN", 0x40324030, 32, "Shifter Status DMA Enable", [
                Field("SSDE", 0, 8, "Shifter Status DMA Enable", [
                ]),
            ]),
            Register("TIMERSDEN", 0x40324038, 32, "Timer Status DMA Enable", [
                Field("TSDE", 0, 8, "Timer Status DMA Enable", [
                ]),
            ]),
            Register("SHIFTSTATE", 0x40324040, 32, "Shifter State", [
                Field("STATE", 0, 3, "Current State Pointer", [
                ]),
            ]),
            Register("TRGSTAT", 0x40324048, 32, "Trigger Status", [
                Field("ETSF", 0, 4, "External Trigger Status Flags", [
                ]),
            ]),
            Register("TRIGIEN", 0x4032404C, 32, "External Trigger Interrupt Enable", [
                Field("TRIE", 0, 4, "External Trigger Interrupt Enable", [
                ]),
            ]),
            Register("PINSTAT", 0x40324050, 32, "Pin Status", [
                Field("PSF", 0, 16, "Pin Status Flags", [
                ]),
            ]),
            Register("PINIEN", 0x40324054, 32, "Pin Interrupt Enable", [
                Field("PSIE", 0, 16, "Pin Status Interrupt Enable", [
                ]),
            ]),
            Register("PINREN", 0x40324058, 32, "Pin Rising Edge Enable", [
                Field("PRE", 0, 16, "Pin Rising Edge", [
                ]),
            ]),
            Register("PINFEN", 0x4032405C, 32, "Pin Falling Edge Enable", [
                Field("PFE", 0, 16, "Pin Falling Edge", [
                ]),
            ]),
            Register("PINOUTD", 0x40324060, 32, "Pin Output Data", [
                Field("OUTD", 0, 16, "Output Data", [
                ]),
            ]),
            Register("PINOUTE", 0x40324064, 32, "Pin Output Enable", [
                Field("OUTE", 0, 16, "Output Enable", [
                ]),
            ]),
            Register("PINOUTDIS", 0x40324068, 32, "Pin Output Disable", [
                Field("OUTDIS", 0, 16, "Output Disable", [
                ]),
            ]),
            Register("PINOUTCLR", 0x4032406C, 32, "Pin Output Clear", [
                Field("OUTCLR", 0, 16, "Output Clear", [
                ]),
            ]),
            Register("PINOUTSET", 0x40324070, 32, "Pin Output Set", [
                Field("OUTSET", 0, 16, "Output Set", [
                ]),
            ]),
            Register("PINOUTTOG", 0x40324074, 32, "Pin Output Toggle", [
                Field("OUTTOG", 0, 16, "Output Toggle", [
                ]),
            ]),
            Register("SHIFTCTL[0]", 0x40324080, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCTL[1]", 0x40324084, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCTL[2]", 0x40324088, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCTL[3]", 0x4032408C, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCTL[4]", 0x40324090, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCTL[5]", 0x40324094, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCTL[6]", 0x40324098, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCTL[7]", 0x4032409C, 32, "Shifter Control N", [
                Field("TIMSEL", 24, 3, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("posedge", "0", "Shift on posedge of shift clock"),
                    EnumVal("negedge", "0x1", "Shift on negedge of shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("disable", "0", "Shifter pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Shifter pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("output", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 4, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("disable", "0", "Disabled."),
                    EnumVal("receive", "0x1", "Receive mode. Captures the current shifter content into the SHIFTBUF on expiration of the timer."),
                    EnumVal("transmit", "0x2", "Transmit mode. Load SHIFTBUF contents into the shifter on expiration of the timer."),
                    EnumVal("matchstore", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the timer."),
                    EnumVal("matchcont", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                    EnumVal("state", "0x6", "State mode. SHIFTBUF contents are used for storing programmable state attributes."),
                    EnumVal("logic", "0x7", "Logic mode. SHIFTBUF contents are used for implementing programmable logic lookup table."),
                ]),
            ]),
            Register("SHIFTCFG[0]", 0x40324100, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTCFG[1]", 0x40324104, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTCFG[2]", 0x40324108, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTCFG[3]", 0x4032410C, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTCFG[4]", 0x40324110, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTCFG[5]", 0x40324114, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTCFG[6]", 0x40324118, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTCFG[7]", 0x4032411C, 32, "Shifter Configuration N", [
                Field("PWIDTH", 16, 4, "Parallel Width", [
                ]),
                Field("SSIZE", 12, 1, "Shifter Size", [
                    EnumVal("width32", "0", "Shift register is 32-bit."),
                    EnumVal("width24", "0x1", "Shift register is 24-bit."),
                ]),
                Field("LATST", 9, 1, "Late Store", [
                    EnumVal("preshift", "0", "Shift register stores the pre-shift register state."),
                    EnumVal("postshift", "0x1", "Shift register stores the post-shift register state."),
                ]),
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("pin", "0", "Pin"),
                    EnumVal("shifter_nplus1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("value00", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("value01", "0x1", "Stop bit disabled for transmitter/receiver/match store. When timer is in stop condition, receiver/match store stores receive data on the configured shift edge."),
                    EnumVal("value10", "0x2", "Transmitter outputs stop bit value 0 on store. If stop bit is not 0, receiver/match store sets error flag. When timer is in stop condition, receiver/match stores also store receive data on the configured shift edge."),
                    EnumVal("value11", "0x3", "Transmitter outputs stop bit value 1 on store. If stop bit is not 1, receiver/match store sets error flag. When timer is in stop condition, receiver/match store also stores receive data on the configured shift edge."),
                ]),
                Field("SSTART", 0, 2, "Shifter Start Bit", [
                    EnumVal("value00", "0", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on enable."),
                    EnumVal("value01", "0x1", "Start bit disabled for transmitter/receiver/match store. Transmitter loads data on first shift."),
                    EnumVal("value10", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift. If start bit is not 0, receiver/match store sets error flag."),
                    EnumVal("value11", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift. If start bit is not 1, receiver/match store sets error flag."),
                ]),
            ]),
            Register("SHIFTBUF[0]", 0x40324200, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[1]", 0x40324204, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[2]", 0x40324208, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[3]", 0x4032420C, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[4]", 0x40324210, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[5]", 0x40324214, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[6]", 0x40324218, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[7]", 0x4032421C, 32, "Shifter Buffer N", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[0]", 0x40324280, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[1]", 0x40324284, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[2]", 0x40324288, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[3]", 0x4032428C, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[4]", 0x40324290, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[5]", 0x40324294, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[6]", 0x40324298, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[7]", 0x4032429C, 32, "Shifter Buffer N Bit Swapped", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[0]", 0x40324300, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[1]", 0x40324304, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[2]", 0x40324308, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[3]", 0x4032430C, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[4]", 0x40324310, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[5]", 0x40324314, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[6]", 0x40324318, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[7]", 0x4032431C, 32, "Shifter Buffer N Byte Swapped", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[0]", 0x40324380, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[1]", 0x40324384, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[2]", 0x40324388, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[3]", 0x4032438C, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[4]", 0x40324390, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[5]", 0x40324394, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[6]", 0x40324398, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[7]", 0x4032439C, 32, "Shifter Buffer N Bit Byte Swapped", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("TIMCTL[0]", 0x40324400, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCTL[1]", 0x40324404, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCTL[2]", 0x40324408, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCTL[3]", 0x4032440C, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCTL[4]", 0x40324410, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCTL[5]", 0x40324414, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCTL[6]", 0x40324418, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCTL[7]", 0x4032441C, 32, "Timer Control N", [
                Field("TRGSEL", 24, 5, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("active_high", "0", "Trigger active high"),
                    EnumVal("active_low", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("ext_trig", "0", "External trigger selected"),
                    EnumVal("internal_trig", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("outdisable", "0", "Timer pin output disabled"),
                    EnumVal("opend_bidirouten", "0x1", "Timer pin open-drain or bidirectional output enable"),
                    EnumVal("bidir_outdata", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("output", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 4, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("active_high", "0", "Pin is active high"),
                    EnumVal("active_low", "0x1", "Pin is active low"),
                ]),
                Field("PININS", 6, 1, "Timer Pin Input Select", [
                    EnumVal("pinsel", "0", "Timer pin input and output are selected by PINSEL."),
                    EnumVal("pinselplus1", "0x1", "Timer pin input is selected by PINSEL+1. Timer pin output remains selected by PINSEL."),
                ]),
                Field("ONETIM", 5, 1, "Timer One Time Operation", [
                    EnumVal("not_blocked", "0", "The timer enable event is generated as normal."),
                    EnumVal("blocked", "0x1", "The timer enable event is blocked unless timer status flag is clear."),
                ]),
                Field("TIMOD", 0, 3, "Timer Mode", [
                    EnumVal("disable", "0", "Timer disabled."),
                    EnumVal("dual8bit_baud", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("dual8bit_pwm_h", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("single16bit", "0x3", "Single 16-bit counter mode."),
                    EnumVal("single16bit_disable", "0x4", "Single 16-bit counter disable mode."),
                    EnumVal("dual8bit_word", "0x5", "Dual 8-bit counters word mode."),
                    EnumVal("dual8bit_pwm_l", "0x6", "Dual 8-bit counters PWM low mode."),
                    EnumVal("single16bit_in_capture", "0x7", "Single 16-bit input capture mode."),
                ]),
            ]),
            Register("TIMCFG[0]", 0x40324480, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[1]", 0x40324484, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[2]", 0x40324488, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[3]", 0x4032448C, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[4]", 0x40324490, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[5]", 0x40324494, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[6]", 0x40324498, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[7]", 0x4032449C, 32, "Timer Configuration N", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("one", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("zero", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("one_tmrreset", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("zero_tmrreset", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 3, "Timer Decrement", [
                    EnumVal("flexio_clk_shiftclk_tmr_out", "0", "Decrement counter on FLEXIO clock. Shift clock equals timer output."),
                    EnumVal("trig_edge_shiftclk_tmr_out", "0x1", "Decrement counter on trigger input (both edges). Shift clock equals timer output."),
                    EnumVal("pin_edge_shiftclk_tmr_out", "0x2", "Decrement counter on pin input (both edges). Shift clock equals pin input."),
                    EnumVal("trig_edge_shiftclk_trig_in", "0x3", "Decrement counter on trigger input (both edges). Shift clock equals trigger input."),
                    EnumVal("flexio_clk_div16_shiftclk_tmr_out", "0x4", "Decrement counter on FLEXIO clock divided by 16. Shift clock equals timer output."),
                    EnumVal("flexio_clk_div256_shiftclk_tmr_out", "0x5", "Decrement counter on FLEXIO clock divided by 256. Shift clock equals timer output."),
                    EnumVal("pin_rise_shiftclk_pin_in", "0x6", "Decrement counter on pin input (rising edge). Shift clock equals pin input."),
                    EnumVal("trig_rise_shiftclk_trig_in", "0x7", "Decrement counter on trigger input (rising edge). Shift clock equals trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("never", "0", "Timer never reset"),
                    EnumVal("tmr_out_hi", "0x1", "Timer reset on timer output high."),
                    EnumVal("pin_eq_tmr_out", "0x2", "Timer reset on timer pin equal to timer output"),
                    EnumVal("trig_eq_tmr_out", "0x3", "Timer reset on timer trigger equal to timer output"),
                    EnumVal("pin_rise_edge", "0x4", "Timer reset on timer pin rising edge"),
                    EnumVal("trig_rise_edge", "0x6", "Timer reset on trigger rising edge"),
                    EnumVal("trig_edge", "0x7", "Timer reset on trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("never", "0", "Timer never disabled"),
                    EnumVal("tmr_nminus1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("tmr_cmp", "0x2", "Timer disabled on timer compare (upper 8-bits match and decrement)"),
                    EnumVal("tmr_cmp_triglow", "0x3", "Timer disabled on timer compare (upper 8-bits match and decrement) and trigger low"),
                    EnumVal("pin_edge", "0x4", "Timer disabled on pin rising or falling edge"),
                    EnumVal("pin_edge_trighi", "0x5", "Timer disabled on pin rising or falling edge provided trigger is high"),
                    EnumVal("trig_falledge", "0x6", "Timer disabled on trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("enable", "0", "Timer always enabled"),
                    EnumVal("tmr_nminus1_en", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("tmr_trighi_en", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("tmr_trig_pin_hi_en", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("tmr_pinrise_en", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("tmr_pinrise_trighi_en", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("tmr_trigrise_en", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("tmr_trigedge_en", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("stop_disable", "0", "Stop bit disabled"),
                    EnumVal("enable_tmrcmp", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("enable_tmrdisable", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("enable_tmr_cmp_dis", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("disable", "0", "Start bit disabled"),
                    EnumVal("enable", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCMP[0]", 0x40324500, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[1]", 0x40324504, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[2]", 0x40324508, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[3]", 0x4032450C, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[4]", 0x40324510, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[5]", 0x40324514, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[6]", 0x40324518, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[7]", 0x4032451C, 32, "Timer Compare N", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("SHIFTBUFNBS[0]", 0x40324680, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNBS[1]", 0x40324684, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNBS[2]", 0x40324688, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNBS[3]", 0x4032468C, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNBS[4]", 0x40324690, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNBS[5]", 0x40324694, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNBS[6]", 0x40324698, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNBS[7]", 0x4032469C, 32, "Shifter Buffer N Nibble Byte Swapped", [
                Field("SHIFTBUFNBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[0]", 0x40324700, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[1]", 0x40324704, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[2]", 0x40324708, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[3]", 0x4032470C, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[4]", 0x40324710, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[5]", 0x40324714, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[6]", 0x40324718, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHWS[7]", 0x4032471C, 32, "Shifter Buffer N Halfword Swapped", [
                Field("SHIFTBUFHWS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[0]", 0x40324780, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[1]", 0x40324784, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[2]", 0x40324788, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[3]", 0x4032478C, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[4]", 0x40324790, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[5]", 0x40324794, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[6]", 0x40324798, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFNIS[7]", 0x4032479C, 32, "Shifter Buffer N Nibble Swapped", [
                Field("SHIFTBUFNIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[0]", 0x40324800, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[1]", 0x40324804, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[2]", 0x40324808, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[3]", 0x4032480C, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[4]", 0x40324810, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[5]", 0x40324814, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[6]", 0x40324818, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFOES[7]", 0x4032481C, 32, "Shifter Buffer N Odd Even Swapped", [
                Field("SHIFTBUFOES", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[0]", 0x40324880, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[1]", 0x40324884, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[2]", 0x40324888, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[3]", 0x4032488C, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[4]", 0x40324890, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[5]", 0x40324894, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[6]", 0x40324898, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFEOS[7]", 0x4032489C, 32, "Shifter Buffer N Even Odd Swapped", [
                Field("SHIFTBUFEOS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[0]", 0x40324900, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[1]", 0x40324904, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[2]", 0x40324908, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[3]", 0x4032490C, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[4]", 0x40324910, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[5]", 0x40324914, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[6]", 0x40324918, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFHBS[7]", 0x4032491C, 32, "Shifter Buffer N Halfword Byte Swapped", [
                Field("SHIFTBUFHBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
        ])

class Module_FXOSC(Peripheral):
    def __init__(self):
        super().__init__("FXOSC", 0x402D4000, 0x8, [
            Register("CTRL", 0x402D4000, 32, "FXOSC Control Register", [
                Field("OSC_BYP", 31, 1, "Oscillator bypass", [
                    EnumVal("osc_byp_0", "0", "Internal oscillator not bypassed"),
                    EnumVal("osc_byp_1", "0x1", "Internal oscillator bypassed"),
                ]),
                Field("COMP_EN", 24, 1, "Comparator enable", [
                    EnumVal("comp_en_0", "0", "Comparator disabled"),
                    EnumVal("comp_en_1", "0x1", "Comparator enabled"),
                ]),
                Field("EOCV", 16, 8, "End of count value", [
                ]),
                Field("GM_SEL", 4, 4, "Crystal overdrive protection", [
                    EnumVal("gm_sel_0000", "0", "0x"),
                    EnumVal("gm_sel_0001", "0x1", "0.1004x"),
                    EnumVal("gm_sel_0010", "0x2", "0.2009x"),
                    EnumVal("gm_sel_0011", "0x3", "0.3013x"),
                    EnumVal("gm_sel_0100", "0x4", "0.2343x"),
                    EnumVal("gm_sel_0101", "0x5", "0.3348x"),
                    EnumVal("gm_sel_0110", "0x6", "0.4345x"),
                    EnumVal("gm_sel_0111", "0x7", "0.5349x"),
                    EnumVal("gm_sel_1000", "0x8", "0.4679x"),
                    EnumVal("gm_sel_1001", "0x9", "0.5684x"),
                    EnumVal("gm_sel_1010", "0xA", "0.6681x"),
                    EnumVal("gm_sel_1011", "0xB", "0.7678x"),
                    EnumVal("gm_sel_1100", "0xC", "0.7016x"),
                    EnumVal("gm_sel_1101", "0xD", "0.8013x"),
                    EnumVal("gm_sel_1110", "0xE", "0.9003x"),
                    EnumVal("gm_sel_1111", "0xF", "1x"),
                ]),
                Field("ALC_D", 2, 1, "Automatic level controller enable", [
                    EnumVal("alc_d_0", "0", "Enables automatic level controller"),
                    EnumVal("alc_d_1", "0x1", "Disables automatic level controller"),
                ]),
                Field("OSCON", 0, 1, "Crystal oscillator power-down control", [
                    EnumVal("oscon_0", "0", "Disables FXOSC"),
                    EnumVal("oscon_1", "0x1", "Enables FXOSC"),
                ]),
            ]),
            Register("STAT", 0x402D4004, 32, "Oscillator Status Register", [
                Field("OSC_STAT", 31, 1, "Crystal oscillator status", [
                    EnumVal("stat_0", "0", "Crystal oscillator is off or on but not stable."),
                    EnumVal("stat_1", "0x1", "Crystal oscillator is on and providing a stable clock."),
                ]),
            ]),
        ])

class Module_GDU_AE(Peripheral):
    def __init__(self):
        super().__init__("GDU_AE", 0x180, 0x190, [
            Register("INTF", 0x180, 8, "Interrupt Flag", [
                Field("HDHVDIF", 7, 1, "HD High Voltage Detect Interrupt Flag", [
                    EnumVal("BELOW", "0", "HD voltage below the threshold"),
                    EnumVal("ABOVE", "0x1", "HD voltage above the threshold"),
                ]),
                Field("DHSIF2", 6, 1, "Desaturation High-Side 2 Interrupt Flag", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DHSIF1", 5, 1, "Desaturation High-Side 1 Interrupt Flag", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DHSIF0", 4, 1, "Desaturation High-Side 0 Interrupt Flag", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DLSIF2", 2, 1, "Desaturation Low-Side 2 Interrupt Flag", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DLSIF1", 1, 1, "Desaturation Low-Side 1 Interrupt Flag", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DLSIF0", 0, 1, "Desaturation Low-Side 0 Interrupt Flag", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
            ]),
            Register("INTEN", 0x182, 8, "Interrupt Enable", [
                Field("HDHVDIE", 7, 1, "HD High Voltage Detect Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("DHSIE2", 6, 1, "Desaturation High-Side Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("DHSIE1", 5, 1, "Desaturation High-Side Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("DHSIE0", 4, 1, "Desaturation High-Side 0 Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("DLSIE2", 2, 1, "Desaturation Low-Side 2 Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("DLSIE1", 1, 1, "Desaturation Low-Side 1 Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("DLSIE0", 0, 1, "Desaturation Low-Side 0 Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("STAT", 0x184, 16, "Status", [
                Field("HDHVDS", 7, 1, "HD High Voltage Detect Status", [
                    EnumVal("BELOW", "0", "HD voltage below the threshold"),
                    EnumVal("ABOVE", "0x1", "HD voltage above the threshold"),
                ]),
                Field("DHSES2", 6, 1, "Desaturation High-Side 2 Error Status", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DHSES1", 5, 1, "Desaturation High-Side 1 Error Status", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DHSES0", 4, 1, "Desaturation High-Side 0 Error Status", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DLSES2", 2, 1, "Desaturation Low-Side 2 Error Status", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DLSES1", 1, 1, "Desaturation Low-Side 1 Error Status", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("DLSES0", 0, 1, "Desaturation Low-Side 0 Error Status", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
            ]),
            Register("CTL", 0x186, 16, "Control", [
                Field("CFGEN", 7, 1, "Configuration Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SSTEN", 6, 1, "Safe State Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RWEN", 5, 1, "Register Write Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("IRTSW", 4, 1, "Iref Trimming by Software", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("DMEN", 3, 1, "Delay Measurement Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("BOOSTEN", 2, 1, "Boost Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("CPEN", 1, 1, "Charge Pump Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("GDUEN", 0, 1, "Gate Driver Unit Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("CFG", 0x188, 8, "Configuration", [
                Field("SYNCEN", 7, 1, "Synchronization Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("HDHSDIV", 1, 1, "HD and High-Side Divider", [
                    EnumVal("LOW", "0", "Low"),
                    EnumVal("HIGH", "0x1", "High"),
                ]),
                Field("HDHVDCFG", 0, 1, "HD High Voltage Detect", [
                    EnumVal("LOW", "0", "Low voltage"),
                    EnumVal("HIGH", "0x1", "High voltage"),
                ]),
            ]),
            Register("EACFG", 0x18A, 8, "Error Reaction", [
                Field("DSA", 2, 1, "Desaturation Action", [
                    EnumVal("DISABLE", "0", "Turn off only the desaturated FET."),
                    EnumVal("ENABLE", "0x1", "Turn off all FETs"),
                ]),
                Field("OCA", 1, 1, "Overcurrent Action", [
                    EnumVal("LOWON", "0", "Low-side gate drivers on"),
                    EnumVal("LOWOFF", "0x1", "Low-side gate drivers off"),
                ]),
                Field("HVDA", 0, 1, "High Voltage Detection Action", [
                    EnumVal("LOWON", "0", "Turn on all low-side gate drivers"),
                    EnumVal("LOWOFF", "0x1", "Turn off all low-side gate drivers"),
                ]),
            ]),
            Register("BOOSTCFG", 0x18C, 16, "Boost", [
                Field("BOCL", 8, 3, "Boost Current Limit", [
                ]),
                Field("BOCD", 2, 3, "Boost Clock Divider", [
                ]),
                Field("BODC", 0, 2, "Boost Duty Cycle", [
                    EnumVal("DUTY50", "0", "50%"),
                    EnumVal("DUTY25", "0x1", "25%"),
                    EnumVal("DUTY75", "0x2", "75%"),
                ]),
            ]),
            Register("BTCFG", 0x18E, 16, "Blanking Time", [
                Field("BT", 0, 9, "Blanking Time Adjustment", [
                ]),
            ]),
            Register("HSSRON", 0x190, 32, "High-Side Slew Rate On", [
                Field("HSTONT_P2", 24, 7, "High-Side Turn On Time Point 2", [
                ]),
                Field("HSTONT_P1", 16, 7, "High-Side Turn On Time Point 1", [
                ]),
                Field("HSTONC_P3", 10, 5, "High-Side Turn On Current Time Point 3", [
                ]),
                Field("HSTONC_P2", 5, 5, "High-Side Turn On Current Time Point 2", [
                ]),
                Field("HSTONC_P1", 0, 5, "High-Side Turn On Current Time Point 1", [
                ]),
            ]),
            Register("HSSROFF", 0x194, 32, "High-Side Slew Rate Off", [
                Field("HSTOFFT_P2", 24, 7, "High-Side Turn Off Time Point 2", [
                ]),
                Field("HSTOFFT_P1", 16, 7, "High-Side Turn Off Time Point 1", [
                ]),
                Field("HSTOFFC_P3", 10, 5, "High-Side Turn Off Current Time Point 3", [
                ]),
                Field("HSTOFFC_P2", 5, 5, "High-Side Turn Off Current Time Point 2", [
                ]),
                Field("HSTOFFC_P1", 0, 5, "High-Side Turn Off Current Time Point 1", [
                ]),
            ]),
            Register("LSSRON", 0x198, 32, "Low-Side Slew Rate On", [
                Field("LSTONT_P2", 24, 7, "Low-Side Turn On Time Point 2", [
                ]),
                Field("LSTONT_P1", 16, 7, "Low-Side Turn On Time Point 1", [
                ]),
                Field("LSTONC_P3", 10, 5, "Low-Side Turn On Current Time Point 3", [
                ]),
                Field("LSTONC_P2", 5, 5, "Low-Side Turn On Current Time Point 2", [
                ]),
                Field("LSTONC_P1", 0, 5, "Low-Side Turn On Current Time Point 1", [
                ]),
            ]),
            Register("LSSROFF", 0x19C, 32, "Low-Side Slew Rate Off", [
                Field("LSTOFFT_P2", 24, 7, "Low-Side Turn On Time Point 2", [
                ]),
                Field("LSTOFFT_P1", 16, 7, "Low-Side Turn Off Time Point 1", [
                ]),
                Field("LSTOFFC_P3", 10, 5, "Low-Side Turn Off Current Time Point 3", [
                ]),
                Field("LSTOFFC_P2", 5, 5, "Low-Side Turn Off Current Time Point 2", [
                ]),
                Field("LSTOFFC_P1", 0, 5, "Low-Side Turn Off Current Time Point 1", [
                ]),
            ]),
            Register("OFFSDCFG", 0x1A0, 8, "Off-State Diagnostic", [
                Field("OSDPU2", 6, 1, "Off-State Diagnostic HS2 Pull Up", [
                    EnumVal("NOTUP", "0", "Does not pull up"),
                    EnumVal("UP", "0x1", "Pulls up"),
                ]),
                Field("OSDPU1", 5, 1, "Off-State Diagnostic HS1 Pull Up", [
                    EnumVal("NOTUP", "0", "Does not pull up"),
                    EnumVal("UP", "0x1", "Pulls up"),
                ]),
                Field("OSDPU0", 4, 1, "Off-State Diagnostic HS0 Pull Up", [
                    EnumVal("NOTUP", "0", "Does not pull up"),
                    EnumVal("UP", "0x1", "Pulls up"),
                ]),
                Field("OSDPD2", 2, 1, "Off-State Diagnostic HS2 Pull Down", [
                    EnumVal("NOTDOWN", "0", "Does not pull down"),
                    EnumVal("DOWN", "0x1", "Pulls down"),
                ]),
                Field("OSDPD1", 1, 1, "Off-State Diagnostic HS1 Pull Down", [
                    EnumVal("NOTDOWN", "0", "Does not pull down"),
                    EnumVal("DOWN", "0x1", "Pulls down"),
                ]),
                Field("OSDPD0", 0, 1, "Off-State Diagnostic HS0 Pull Down", [
                    EnumVal("NOTDOWN", "0", "Does not pull down"),
                    EnumVal("DOWN", "0x1", "Pulls down"),
                ]),
            ]),
            Register("DSCFG", 0x1A4, 16, "Desaturation Level", [
                Field("DSFHS", 12, 2, "Desaturation Filter High-Side", [
                    EnumVal("V0", "0", "200 ns"),
                    EnumVal("V1", "0x1", "600 ns"),
                    EnumVal("V2", "0x2", "1000 ns"),
                    EnumVal("V3", "0x3", "1400 ns"),
                ]),
                Field("DSFLS", 8, 2, "Desaturation Filter Low-Side", [
                    EnumVal("V0", "0", "200 ns"),
                    EnumVal("V1", "0x1", "600 ns"),
                    EnumVal("V2", "0x2", "1000 ns"),
                    EnumVal("V3", "0x3", "1400 ns"),
                ]),
                Field("DSLHS", 4, 3, "Desaturation Level High-Side", [
                    EnumVal("V0", "0", "0.15 V"),
                    EnumVal("V1", "0x1", "0.25 V"),
                    EnumVal("V2", "0x2", "0.35 V"),
                    EnumVal("V3", "0x3", "0.45 V"),
                    EnumVal("V4", "0x4", "0.7 V"),
                    EnumVal("V5", "0x5", "0.95 V"),
                    EnumVal("V6", "0x6", "1.2 V"),
                    EnumVal("V7", "0x7", "1.45 V"),
                ]),
                Field("DSLLS", 0, 3, "Desaturation Level Low-Side", [
                    EnumVal("V0", "0", "0.15 V"),
                    EnumVal("V1", "0x1", "0.25 V"),
                    EnumVal("V2", "0x2", "0.35 V"),
                    EnumVal("V3", "0x3", "0.45 V"),
                    EnumVal("V4", "0x4", "0.7 V"),
                    EnumVal("V5", "0x5", "0.95 V"),
                    EnumVal("V6", "0x6", "1.2 V"),
                    EnumVal("V7", "0x7", "1.45 V"),
                ]),
            ]),
            Register("CPCFG", 0x1A8, 32, "Charge Pump", [
                Field("CPCDT", 24, 2, "Charge Pump Charge Discharge Timing", [
                    EnumVal("v0", "0", "250 ns"),
                    EnumVal("v1", "0x1", "500 ns"),
                    EnumVal("v2", "0x2", "750 ns"),
                    EnumVal("v3", "0x3", "1 us"),
                ]),
                Field("CPT", 16, 6, "Charge Pump VCP On switch Timing", [
                ]),
                Field("CPCD", 0, 10, "Charge Pump Clock Divider", [
                ]),
            ]),
            Register("DLYMR", 0x1AC, 16, "Delay Measurement Result", [
                Field("DATAVAL", 15, 1, "Data Valid", [
                ]),
                Field("DELAY", 0, 7, "Delay", [
                ]),
            ]),
            Register("DLYMCFG", 0x1AE, 16, "Delay Measurement", [
                Field("EDGESEL", 3, 1, "Edge Selection", [
                    EnumVal("NEGEDGE", "0", "negedge"),
                    EnumVal("POSEDGE", "0x1", "posedge"),
                ]),
                Field("CHSEL", 0, 3, "Channel Selection", [
                    EnumVal("PWM0", "0", "0"),
                    EnumVal("PWM1", "0x1", "1"),
                    EnumVal("PWM2", "0x2", "2"),
                    EnumVal("PWM3", "0x3", "3"),
                    EnumVal("PWM4", "0x4", "4"),
                    EnumVal("PWM5", "0x5", "5"),
                ]),
            ]),
            Register("SUPCFG", 0x1B0, 8, "Startup Configuration", [
                Field("SUP", 0, 1, "Startup", [
                    EnumVal("ON", "0", "On"),
                    EnumVal("OFF", "0x1", "Off"),
                ]),
            ]),
            Register("IRT", 0x1B4, 32, "Iref Trimming", [
                Field("IRT1P2", 19, 3, "Iref Trimming HG2", [
                    EnumVal("T0", "0", "62.5% (minimum current)"),
                    EnumVal("T1", "0x1", "75%"),
                    EnumVal("T2", "0x2", "87.5%"),
                    EnumVal("T3", "0x3", "100% (10 uA at nominal process)"),
                    EnumVal("T4", "0x4", "112.5%"),
                    EnumVal("T5", "0x5", "125%"),
                    EnumVal("T6", "0x6", "137.5%"),
                    EnumVal("T7", "0x7", "150% (maximum current)"),
                ]),
                Field("IRT0P2", 16, 3, "Iref Trimming LG2", [
                    EnumVal("T0", "0", "62.5% (minimum current)"),
                    EnumVal("T1", "0x1", "75%"),
                    EnumVal("T2", "0x2", "87.5%"),
                    EnumVal("T3", "0x3", "100% (10 uA at nominal process)"),
                    EnumVal("T4", "0x4", "112.5%"),
                    EnumVal("T5", "0x5", "125%"),
                    EnumVal("T6", "0x6", "137.5%"),
                    EnumVal("T7", "0x7", "150% (maximum current)"),
                ]),
                Field("IRT1P1", 11, 3, "Iref Trimming HG1", [
                    EnumVal("T0", "0", "62.5% (minimum current)"),
                    EnumVal("T1", "0x1", "75%"),
                    EnumVal("T2", "0x2", "87.5%"),
                    EnumVal("T3", "0x3", "100% (10 uA at nominal process)"),
                    EnumVal("T4", "0x4", "112.5%"),
                    EnumVal("T5", "0x5", "125%"),
                    EnumVal("T6", "0x6", "137.5%"),
                    EnumVal("T7", "0x7", "150% (maximum current)"),
                ]),
                Field("IRT0P1", 8, 3, "Iref Trimming LG1", [
                    EnumVal("T0", "0", "62.5% (minimum current)"),
                    EnumVal("T1", "0x1", "75%"),
                    EnumVal("T2", "0x2", "87.5%"),
                    EnumVal("T3", "0x3", "100% (10 uA at nominal process)"),
                    EnumVal("T4", "0x4", "112.5%"),
                    EnumVal("T5", "0x5", "125%"),
                    EnumVal("T6", "0x6", "137.5%"),
                    EnumVal("T7", "0x7", "150% (maximum current)"),
                ]),
                Field("IRT1P0", 3, 3, "Iref Trimming HG0", [
                    EnumVal("T0", "0", "62.5% (minimum current)"),
                    EnumVal("T1", "0x1", "75%"),
                    EnumVal("T2", "0x2", "87.5%"),
                    EnumVal("T3", "0x3", "100% (10 uA at nominal process)"),
                    EnumVal("T4", "0x4", "112.5%"),
                    EnumVal("T5", "0x5", "125%"),
                    EnumVal("T6", "0x6", "137.5%"),
                    EnumVal("T7", "0x7", "150% (maximum current)"),
                ]),
                Field("IRT0P0", 0, 3, "Iref Trimming LG0", [
                    EnumVal("T0", "0", "62.5% (minimum current)"),
                    EnumVal("T1", "0x1", "75%"),
                    EnumVal("T2", "0x2", "87.5%"),
                    EnumVal("T3", "0x3", "100% (10 uA at nominal process)"),
                    EnumVal("T4", "0x4", "112.5%"),
                    EnumVal("T5", "0x5", "125%"),
                    EnumVal("T6", "0x6", "137.5%"),
                    EnumVal("T7", "0x7", "150% (maximum current)"),
                ]),
            ]),
        ])

class Module_HVI_AE(Peripheral):
    def __init__(self):
        super().__init__("HVI_AE", 0x200, 0x1B, [
            Register("INTF", 0x200, 32, "Interrupt Flags", [
                Field("DINIF1", 17, 1, "Digital Input Interrupt Flag 1", [
                    EnumVal("NO_DINIF", "0", "HVI n did not detect an event on its digital input."),
                    EnumVal("ACTIVE_DINIF", "0x1", "HVI n detected an event on its digital input."),
                ]),
                Field("DINIF0", 16, 1, "Digital Input Interrupt Flag 0", [
                    EnumVal("NO_DINIF", "0", "HVI n did not detect an event on its digital input."),
                    EnumVal("ACTIVE_DINIF", "0x1", "HVI n detected an event on its digital input."),
                ]),
                Field("HDIF0", 8, 1, "High Detect Interrupt Flag 0", [
                    EnumVal("NO_HVDBATS", "0", "VM n did not detect a high voltage since the last clearing of the bit."),
                    EnumVal("ACTIVE_HVDBATS", "0x1", "VM n detected a high voltage since the last clearing of the bit."),
                ]),
                Field("LDIF0", 0, 1, "Low Detect Interrupt Flag 0", [
                    EnumVal("NO_LVD", "0", "VM n did not detect a low voltage since the last clearing of the bit."),
                    EnumVal("ACTIVE_LVD", "0x1", "VM n detected a low voltage since the last clearing of this bit."),
                ]),
            ]),
            Register("INTEN", 0x204, 32, "Interrupt Enables", [
                Field("DINIE1", 17, 1, "Digital Input Interrupt Enable 1", [
                    EnumVal("disint", "0", "Disable interrupt"),
                    EnumVal("enint", "0x1", "Enable interrupt"),
                ]),
                Field("DINIE0", 16, 1, "Digital Input Interrupt Enable 0", [
                    EnumVal("disint", "0", "Disable interrupt"),
                    EnumVal("enint", "0x1", "Enable interrupt"),
                ]),
                Field("HDIE0", 8, 1, "High Detect Interrupt Enable 0", [
                    EnumVal("disint", "0", "Disable interrupt"),
                    EnumVal("enint", "0x1", "Enable interrupt"),
                ]),
                Field("LDIE0", 0, 1, "Low Detect Interrupt Enable 0", [
                    EnumVal("disint", "0", "Disable interrupt"),
                    EnumVal("enint", "0x1", "Enable interrupt"),
                ]),
            ]),
            Register("STAT", 0x208, 32, "Status", [
                Field("DINS1", 17, 1, "Digital Input Status 1", [
                    EnumVal("ZERO", "0", "The digital input is in the inactive state with respect to the defined polarity."),
                    EnumVal("ONE", "0x1", "The digital input is in the active state with respect to the defined polarity."),
                ]),
                Field("DINS0", 16, 1, "Digital Input Status 0", [
                    EnumVal("ZERO", "0", "The digital input is in the inactive state with respect to the defined polarity."),
                    EnumVal("ONE", "0x1", "The digital input is in the active state with respect to the defined polarity."),
                ]),
                Field("HDS0", 8, 1, "High Detect Status 0", [
                    EnumVal("ZERO", "0", "The high voltage monitor does not detect a voltage above the upper limit."),
                    EnumVal("ONE", "0x1", "The high voltage monitor does detect a voltage above the upper limit."),
                ]),
                Field("LDS0", 0, 1, "Low Detect Status 0", [
                    EnumVal("ZERO", "0", "The low voltage monitor does not detect a voltage below the lower limit."),
                    EnumVal("ONE", "0x1", "The low voltage monitor does detect a voltage below the lower limit."),
                ]),
            ]),
            Register("GCTRL", 0x20C, 32, "Global Control", [
                Field("AINSEL", 3, 2, "Analog Input Selection", [
                    EnumVal("ZERO", "0", "The analog output is high ohmic."),
                    EnumVal("ONE", "0x1", "The buffered input is the analog output signal."),
                    EnumVal("TWO", "0x2", "The down-divided, buffered high voltage input is the analog output signal."),
                    EnumVal("three", "0x3", "The unbuffered input is the analog output signal."),
                ]),
                Field("AINEN", 0, 3, "Analog Input Enable", [
                    EnumVal("ZERO", "0", "HVI0 is driving the analog output."),
                    EnumVal("ONE", "0x1", "HVI1 is driving the analog output."),
                ]),
            ]),
            Register("UCFG0", 0x214, 16, "Unit Configuration 0", [
                Field("DINPO", 9, 1, "Digital Input Polarity", [
                    EnumVal("falling_edge", "0", "An event is created when the digital input is logic low."),
                    EnumVal("rising_edge", "0x1", "An event is created when the digital input is logic high"),
                ]),
                Field("DINEN", 8, 1, "Digital Input Enable", [
                    EnumVal("din_disabled", "0", "Disable the digital input"),
                    EnumVal("din_enabled", "0x1", "Enable the digital input"),
                ]),
                Field("DIVSEL", 3, 2, "Divider Select", [
                    EnumVal("div_by_2", "0", "Divide input voltage by 2"),
                    EnumVal("div_by_6", "0x1", "Divide input voltage by 6"),
                    EnumVal("div_by_11", "0x2", "Divide input voltage by 11"),
                    EnumVal("div_by_16", "0x3", "Divide input voltage by 16"),
                ]),
                Field("PUEN", 2, 1, "Pull Up Enable", [
                    EnumVal("pu_disabled", "0", "Disable pull up"),
                    EnumVal("pu_enabled", "0x1", "Enable pull up"),
                ]),
                Field("PDEN", 1, 1, "Pull Down Enable", [
                    EnumVal("pd_disabled", "0", "Disable pull down. Voltage Division = 1"),
                    EnumVal("pd_enabled", "0x1", "Enable pull down"),
                ]),
            ]),
            Register("UCTRL0", 0x216, 8, "Unit Control 0", [
                Field("CFGEN", 1, 1, "Configuration Enable", [
                    EnumVal("disabled", "0", "instance 0 is out of configuration mode"),
                    EnumVal("enabled", "0x1", "instance 0 is in configuration mode"),
                ]),
                Field("EN", 0, 1, "Enable", [
                    EnumVal("disabled", "0", "Disabled. All features of HVI0 are turned-off."),
                    EnumVal("enabled", "0x1", "Enabled. All features of HVI0 are used as configured."),
                ]),
            ]),
            Register("VMCFG0", 0x217, 8, "Voltage Monitor Configuration 0", [
                Field("VMINSEL", 7, 1, "Voltage Monitor Input Select", [
                    EnumVal("internal", "0", "The high voltage input, divided down by the voltage divider, is monitored."),
                    EnumVal("external", "0x1", "The sense voltage is monitored."),
                ]),
                Field("HDREFSEL", 5, 1, "High Detect Reference Select", [
                    EnumVal("lowest_voltage_level_hd", "0", "Select the lowest reference voltage level (see \"HBI 1\" in the datasheet)"),
                    EnumVal("highest_voltage_level_hd", "0x1", "Select the highest reference voltage level (see \"HBI 2\" in the datasheet)"),
                ]),
                Field("LDREFSEL", 2, 2, "Low Detect Reference Voltage Select", [
                    EnumVal("lowest_level_ld", "0", "select the lowest reference voltage level (see \"LBI 1\" in the datasheet)"),
                    EnumVal("second_lowest_level_ld", "0x1", "select the second lowest reference voltage level (see \"LBI 2\" in the datasheet)"),
                    EnumVal("second_highest_level_ld", "0x2", "select the second highest reference voltage level (see \"LBI 3\" in the datasheet)"),
                    EnumVal("highest_level_ld", "0x3", "select the highest reference voltage level (see \"LBI 4\" in the datasheet)"),
                ]),
                Field("HDEN", 1, 1, "High Detect Enable", [
                    EnumVal("ibe_high_disable", "0", "Turn off the high voltage detect comparator"),
                    EnumVal("ibe_high_enable", "0x1", "Enable the high voltage detect comparator"),
                ]),
                Field("LDEN", 0, 1, "Low Detect Enable", [
                    EnumVal("ibe_low_disable", "0", "Turn off the low voltage detection"),
                    EnumVal("ibe_low_enable", "0x1", "Enable the low voltage detection"),
                ]),
            ]),
            Register("UCFG1", 0x218, 16, "Unit Configuration 1", [
                Field("DINPO", 9, 1, "Digital Input Polarity", [
                    EnumVal("falling_edge", "0", "An event is created when the digital input is logic low."),
                    EnumVal("rising_edge", "0x1", "An event is created when the digital input is logic high"),
                ]),
                Field("DINEN", 8, 1, "Digital Input Enable", [
                    EnumVal("din_disabled", "0", "Disable the digital input"),
                    EnumVal("din_enabled", "0x1", "Enable the digital input"),
                ]),
                Field("DIVSEL", 3, 2, "Divider Select", [
                    EnumVal("div_by_2", "0", "Divide input voltage by 2"),
                    EnumVal("div_by_6", "0x1", "Divide input voltage by 6"),
                    EnumVal("div_by_11", "0x2", "Divide input voltage by 11"),
                    EnumVal("div_by_16", "0x3", "Divide input voltage by 16"),
                ]),
                Field("PUEN", 2, 1, "Pull Up Enable", [
                    EnumVal("pu_disabled", "0", "Disable pull up"),
                    EnumVal("pu_enabled", "0x1", "Enable pull up"),
                ]),
                Field("PDEN", 1, 1, "Pull Down Enable", [
                    EnumVal("pd_disabled", "0", "Disable pull down. Voltage Division = 1"),
                    EnumVal("pd_enabled", "0x1", "Enable pull down"),
                ]),
            ]),
            Register("UCTRL1", 0x21A, 8, "Unit Control 1", [
                Field("CFGEN", 1, 1, "Configuration Enable", [
                    EnumVal("disabled", "0", "instance 1 is out of configuration mode"),
                    EnumVal("enabled", "0x1", "instance 1 is in configuration mode"),
                ]),
                Field("EN", 0, 1, "Enable", [
                    EnumVal("disabled", "0", "Disabled. All features of HVI1 are turned-off."),
                    EnumVal("enabled", "0x1", "Enabled. All features of HVI1 are used as configured."),
                ]),
            ]),
        ])

class Module_INTM(Peripheral):
    def __init__(self):
        super().__init__("INTM", 0x4027C000, 0x48, [
            Register("INTM_MM", 0x4027C000, 32, "Monitor Mode", [
                Field("MM", 0, 1, "Monitor Mode", [
                    EnumVal("disable", "0", "Disable"),
                    EnumVal("enable", "0x1", "Enable"),
                ]),
            ]),
            Register("INTM_IACK", 0x4027C004, 32, "Interrupt Acknowledge", [
                Field("IRQ", 0, 10, "Interrupt Request", [
                ]),
            ]),
        ])

class Module_JDC(Peripheral):
    def __init__(self):
        super().__init__("JDC", 0x40394000, 0x10, [
            Register("MCR", 0x40394000, 32, "Module Configuration Register", [
                Field("JIN_IEN", 16, 1, "JIN Interrupt Enable", [
                    EnumVal("JIN_IEN_0", "0", "Setting MSR[JIN_INT] bit does not assert the JIN interrupt"),
                    EnumVal("JIN_IEN_1", "0x1", "Setting MSR[JIN_INT] bit asserts the JIN interrupt"),
                ]),
                Field("JOUT_IEN", 0, 1, "JOUT Interrupt Enable", [
                    EnumVal("JOUT_IEN_0", "0", "Setting MSR[JOUT_INT] bit does not assert the JOUT interrupt"),
                    EnumVal("JOUT_IEN_1", "0x1", "Setting MSR[JOUT_INT] bit asserts the JOUT interrupt"),
                ]),
            ]),
            Register("MSR", 0x40394004, 32, "Module Status Register", [
                Field("JIN_RDY", 18, 1, "JIN Ready (read only)", [
                    EnumVal("JIN_RDY_0", "0", "Cleared upon software read of JIN_IPS contents via IPS"),
                    EnumVal("JIN_RDY_1", "0x1", "Set when new data is written to the JIN_IPS register"),
                ]),
                Field("JIN_INT", 16, 1, "JIN Interrupt", [
                    EnumVal("JIN_INT_0", "0", "Cleared by writing logic 1"),
                    EnumVal("JIN_INT_1", "0x1", "Set when new data is written to the JIN_IPS register"),
                ]),
                Field("JOUT_RDY", 2, 1, "JOUT Ready (read only)", [
                    EnumVal("JOUT_RDY_0", "0", "Cleared upon tool read of JOUT register via JTAG port"),
                    EnumVal("JOUT_RDY_1", "0x1", "Set when new data is written to the JOUT_IPS register"),
                ]),
                Field("JOUT_INT", 0, 1, "JOUT Interrupt", [
                    EnumVal("JOUT_INT_0", "0", "Cleared by writing logic 1"),
                    EnumVal("JOUT_INT_1", "0x1", "Set when JOUT_RDY bit is cleared by tool reading JOUT register"),
                ]),
            ]),
            Register("JOUT_IPS", 0x40394008, 32, "JTAG Output Data Register", [
                Field("Data", 0, 32, "JOUT_IPS Data", [
                ]),
            ]),
            Register("JIN_IPS", 0x4039400C, 32, "JTAG Input Data Register", [
                Field("Data", 0, 32, "JIN_IPS data", [
                ]),
            ]),
        ])

class Module_LCU_0(Peripheral):
    def __init__(self):
        super().__init__("LCU_0", 0x40098000, 0x2AC, [
            Register("MUXSEL[0]", 0x40098200, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[1]", 0x40098204, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[2]", 0x40098208, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[3]", 0x4009820C, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[4]", 0x40098210, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[5]", 0x40098214, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[6]", 0x40098218, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[7]", 0x4009821C, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[8]", 0x40098220, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[9]", 0x40098224, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[10]", 0x40098228, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[11]", 0x4009822C, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("CFG", 0x40098280, 32, "Configuration", [
                Field("NUM_LOGIC_CELLS", 24, 8, "LCs", [
                ]),
                Field("NUM_FORCES", 16, 8, "Force Inputs", [
                ]),
                Field("NUM_SYNCS", 8, 8, "Sync Inputs", [
                ]),
                Field("INCL_MUXES", 7, 1, "Input Muxing", [
                    EnumVal("no", "0", "Not supported"),
                    EnumVal("yes", "0x1", "Supported"),
                ]),
                Field("WP", 0, 1, "Write Protect", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("turnon_WP", "0x1", "Turn on write protection"),
                ]),
            ]),
            Register("SWEN", 0x40098284, 32, "Software Override Enable", [
                Field("SWEN", 0, 12, "Software Override Enable", [
                ]),
            ]),
            Register("SWVALUE", 0x40098288, 32, "Software Override Value", [
                Field("SWVALUE", 0, 12, "Software Override Value", [
                ]),
            ]),
            Register("OUTEN", 0x4009828C, 32, "Output Enable", [
                Field("OUTEN", 0, 12, "Output Enables", [
                ]),
            ]),
            Register("LCIN", 0x40098290, 32, "Logic Inputs", [
                Field("LC_INPUTS", 0, 12, "Logic Inputs", [
                ]),
            ]),
            Register("SWOUT", 0x40098294, 32, "Overridden Inputs", [
                Field("SWOUT", 0, 12, "Overridden Inputs", [
                ]),
            ]),
            Register("LCOUT", 0x40098298, 32, "Logic Outputs", [
                Field("LCOUT", 0, 12, "Logic Outputs", [
                ]),
            ]),
            Register("FORCEOUT", 0x4009829C, 32, "Forced Outputs", [
                Field("FORCEOUT", 0, 12, "Forced Outputs", [
                ]),
            ]),
            Register("FORCESTS", 0x400982A0, 32, "Force Status", [
                Field("FORCESTS", 0, 12, "Force Status", [
                ]),
            ]),
            Register("DBGEN", 0x400982A8, 32, "Debug Mode Enable", [
                Field("DBGEN", 0, 12, "Debug Mode Enable", [
                ]),
            ]),
        ])

class Module_LCU_1(Peripheral):
    def __init__(self):
        super().__init__("LCU_1", 0x4009C000, 0x2AC, [
            Register("MUXSEL[0]", 0x4009C200, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[1]", 0x4009C204, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[2]", 0x4009C208, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[3]", 0x4009C20C, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[4]", 0x4009C210, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[5]", 0x4009C214, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[6]", 0x4009C218, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[7]", 0x4009C21C, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[8]", 0x4009C220, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[9]", 0x4009C224, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[10]", 0x4009C228, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("MUXSEL[11]", 0x4009C22C, 32, "Mux Select", [
                Field("MUXSEL", 0, 8, "Mux Select", [
                    EnumVal("logic_0", "0", "Logic 0"),
                    EnumVal("lu_in_1", "0x1", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_2", "0x2", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_3", "0x3", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_4", "0x4", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_5", "0x5", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_6", "0x6", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_7", "0x7", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_8", "0x8", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_in_9", "0x9", "LU_IN0 to LU_IN11"),
                    EnumVal("lu_out_13", "0xD", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_14", "0xE", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_15", "0xF", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_16", "0x10", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_17", "0x11", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_18", "0x12", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_19", "0x13", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_20", "0x14", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_21", "0x15", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_22", "0x16", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_23", "0x17", "LU_OUT0 to LU_OUT11"),
                    EnumVal("lu_out_24", "0x18", "LU_OUT0 to LU_OUT11"),
                ]),
            ]),
            Register("CFG", 0x4009C280, 32, "Configuration", [
                Field("NUM_LOGIC_CELLS", 24, 8, "LCs", [
                ]),
                Field("NUM_FORCES", 16, 8, "Force Inputs", [
                ]),
                Field("NUM_SYNCS", 8, 8, "Sync Inputs", [
                ]),
                Field("INCL_MUXES", 7, 1, "Input Muxing", [
                    EnumVal("no", "0", "Not supported"),
                    EnumVal("yes", "0x1", "Supported"),
                ]),
                Field("WP", 0, 1, "Write Protect", [
                    EnumVal("no_effect", "0", "No effect"),
                    EnumVal("turnon_WP", "0x1", "Turn on write protection"),
                ]),
            ]),
            Register("SWEN", 0x4009C284, 32, "Software Override Enable", [
                Field("SWEN", 0, 12, "Software Override Enable", [
                ]),
            ]),
            Register("SWVALUE", 0x4009C288, 32, "Software Override Value", [
                Field("SWVALUE", 0, 12, "Software Override Value", [
                ]),
            ]),
            Register("OUTEN", 0x4009C28C, 32, "Output Enable", [
                Field("OUTEN", 0, 12, "Output Enables", [
                ]),
            ]),
            Register("LCIN", 0x4009C290, 32, "Logic Inputs", [
                Field("LC_INPUTS", 0, 12, "Logic Inputs", [
                ]),
            ]),
            Register("SWOUT", 0x4009C294, 32, "Overridden Inputs", [
                Field("SWOUT", 0, 12, "Overridden Inputs", [
                ]),
            ]),
            Register("LCOUT", 0x4009C298, 32, "Logic Outputs", [
                Field("LCOUT", 0, 12, "Logic Outputs", [
                ]),
            ]),
            Register("FORCEOUT", 0x4009C29C, 32, "Forced Outputs", [
                Field("FORCEOUT", 0, 12, "Forced Outputs", [
                ]),
            ]),
            Register("FORCESTS", 0x4009C2A0, 32, "Force Status", [
                Field("FORCESTS", 0, 12, "Force Status", [
                ]),
            ]),
            Register("DBGEN", 0x4009C2A8, 32, "Debug Mode Enable", [
                Field("DBGEN", 0, 12, "Debug Mode Enable", [
                ]),
            ]),
        ])

class Module_LPCMP_0(Peripheral):
    def __init__(self):
        super().__init__("LPCMP_0", 0x40370000, 0x34, [
            Register("VERID", 0x40370000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("ROUND_ROBIN", "0x1", "Round robin feature"),
                ]),
            ]),
            Register("PARAM", 0x40370004, 32, "Parameter", [
                Field("DAC_RES", 0, 4, "DAC Resolution", [
                    EnumVal("RESO_4", "0", "4-bit DAC"),
                    EnumVal("RESO_6", "0x1", "6-bit DAC"),
                    EnumVal("RESO_8", "0x2", "8-bit DAC"),
                    EnumVal("RESO_10", "0x3", "10-bit DAC"),
                    EnumVal("RESO_12", "0x4", "12-bit DAC"),
                    EnumVal("RESO_14", "0x5", "14-bit DAC"),
                    EnumVal("RESO_16", "0x6", "16-bit DAC"),
                ]),
            ]),
            Register("CCR0", 0x40370008, 32, "Comparator Control Register 0", [
                Field("LINKEN", 2, 1, "CMP-to-DAC Link Enable", [
                    EnumVal("DISABLE", "0", "Disable the CMP-to-DAC link: enabling or disabling the DAC is independent from enabling or disabling the CMP."),
                    EnumVal("ENABLE", "0x1", "Enable the CMP-to-DAC link: the DAC enable/disable is controlled by the CMP_EN bit instead of DCR[DAC_EN]. Also, when the CMP is auto-disabled because software selects the same signal for both the plus and minus comparator inputs, the DAC is disabled too."),
                ]),
                Field("CMP_STOP_EN", 1, 1, "Comparator STANDBY Mode Enable", [
                    EnumVal("DISABLE", "0", "Disable the analog comparator regardless of CMP_EN."),
                    EnumVal("ENABLE", "0x1", "Allows CMP_EN to enable the analog comparator."),
                ]),
                Field("CMP_EN", 0, 1, "Comparator Enable", [
                    EnumVal("DISABLE", "0", "Disables (The analog logic remains off and consumes no power.)"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("CCR1", 0x4037000C, 32, "Comparator Control Register 1", [
                Field("FILT_PER", 24, 8, "Filter Sample Period", [
                ]),
                Field("FILT_CNT", 16, 3, "Filter Sample Count", [
                    EnumVal("BYPASSED", "0", "Filter is bypassed: COUT = COUTA"),
                    EnumVal("SAMPLE_1", "0x1", "1 consecutive sample (Comparator output is simply sampled.)"),
                    EnumVal("SAMPLE_2", "0x2", "2 consecutive samples"),
                    EnumVal("SAMPLE_3", "0x3", "3 consecutive samples"),
                    EnumVal("SAMPLE_4", "0x4", "4 consecutive samples"),
                    EnumVal("SAMPLE_5", "0x5", "5 consecutive samples"),
                    EnumVal("SAMPLE_6", "0x6", "6 consecutive samples"),
                    EnumVal("SAMPLE_7", "0x7", "7 consecutive samples"),
                ]),
                Field("EVT_SEL", 10, 2, "CMPO Event Select", [
                    EnumVal("RISING", "0", "Rising edge"),
                    EnumVal("FALLING", "0x1", "Falling edge"),
                    EnumVal("BOTH", "#1x", "Both edges"),
                ]),
                Field("WINDOW_CLS", 9, 1, "CMPO Event Window Close", [
                    EnumVal("NO_CLOSE", "0", "CMPO event cannot close the window"),
                    EnumVal("CLOSE", "0x1", "CMPO event can close the window"),
                ]),
                Field("WINDOW_INV", 8, 1, "WINDOW/SAMPLE Signal Invert", [
                    EnumVal("NO_INVERT", "0", "Do not invert"),
                    EnumVal("INVERT", "0x1", "Invert"),
                ]),
                Field("COUTA_OW", 7, 1, "COUTA Output Level for Closed Window", [
                    EnumVal("COUTA_0", "0", "COUTA is 0"),
                    EnumVal("COUTA_1", "0x1", "COUTA is 1"),
                ]),
                Field("COUTA_OWEN", 6, 1, "COUTA_OW Enable", [
                    EnumVal("SAMPLED", "0", "COUTA holds the last sampled value."),
                    EnumVal("COUTA_OW", "0x1", "Enables the COUTA signal value to be defined by COUTA_OW."),
                ]),
                Field("COUT_PEN", 5, 1, "Comparator Output Pin Enable", [
                    EnumVal("UNAVAILABLE", "0", "Not available"),
                    EnumVal("AVAILABLE", "0x1", "Available"),
                ]),
                Field("COUT_SEL", 4, 1, "Comparator Output Select", [
                    EnumVal("COUT", "0", "Use COUT (filtered)"),
                    EnumVal("COUTA", "0x1", "Use COUTA (unfiltered)"),
                ]),
                Field("COUT_INV", 3, 1, "Comparator Invert", [
                    EnumVal("NO_INVERT", "0", "Do not invert"),
                    EnumVal("INVERT", "0x1", "Invert"),
                ]),
                Field("DMA_EN", 2, 1, "DMA Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SAMPLE_EN", 1, 1, "Sampling Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("WINDOW_EN", 0, 1, "Windowing Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("CCR2", 0x40370010, 32, "Comparator Control Register 2", [
                Field("INMSEL", 28, 2, "Input Minus Select", [
                    EnumVal("IN0", "0", "IN0: from the 8-bit DAC output"),
                    EnumVal("IN1", "0x1", "IN1: from the analog 8-1 mux"),
                ]),
                Field("INPSEL", 24, 2, "Input Plus Select", [
                    EnumVal("IN0", "0", "IN0: from the 8-bit DAC output"),
                    EnumVal("IN1", "0x1", "IN1: from the analog 8-1 mux"),
                ]),
                Field("MSEL", 20, 3, "Minus Input MUX Select", [
                    EnumVal("INPUT_0", "0", "Input channel 0"),
                    EnumVal("INPUT_1", "0x1", "Input channel 1"),
                    EnumVal("INPUT_2", "0x2", "Input channel 2"),
                    EnumVal("INPUT_3", "0x3", "Input channel 3"),
                    EnumVal("INPUT_4", "0x4", "Input channel 4"),
                    EnumVal("INPUT_5", "0x5", "Input channel 5"),
                    EnumVal("INPUT_6", "0x6", "Input channel 6"),
                    EnumVal("INPUT_7", "0x7", "Input channel 7"),
                ]),
                Field("PSEL", 16, 3, "Plus Input MUX Select", [
                    EnumVal("INPUT_0", "0", "Input channel 0"),
                    EnumVal("INPUT_1", "0x1", "Input channel 1"),
                    EnumVal("INPUT_2", "0x2", "Input channel 2"),
                    EnumVal("INPUT_3", "0x3", "Input channel 3"),
                    EnumVal("INPUT_4", "0x4", "Input channel 4"),
                    EnumVal("INPUT_5", "0x5", "Input channel 5"),
                    EnumVal("INPUT_6", "0x6", "Input channel 6"),
                    EnumVal("INPUT_7", "0x7", "Input channel 7"),
                ]),
                Field("HYSTCTR", 4, 2, "Comparator Hysteresis Control", [
                    EnumVal("LEVEL_0", "0", "Level 0"),
                    EnumVal("LEVEL_1", "0x1", "Level 1"),
                    EnumVal("LEVEL_2", "0x2", "Level 2"),
                    EnumVal("LEVEL_3", "0x3", "Level 3"),
                ]),
                Field("OFFSET", 2, 1, "Comparator Offset Control", [
                    EnumVal("LEVEL_0", "0", "Level 0: The hysteresis selected by HYSTCTR is valid for both directions (rising and falling)."),
                    EnumVal("LEVEL_1", "0x1", "Level 1: Hysteresis does not apply when INP (input-plus) crosses INM (input-minus) in the rising direction or when INM crosses INP in the falling direction. Hysteresis still applies for INP crossing INM in the falling direction."),
                ]),
                Field("CMP_HPMD", 0, 1, "CMP High Power Mode Select", [
                    EnumVal("LOW", "0", "Low power (speed) comparison mode"),
                    EnumVal("HIGH", "0x1", "High power (speed) comparison mode"),
                ]),
            ]),
            Register("DCR", 0x40370018, 32, "DAC Control", [
                Field("DAC_DATA", 16, 8, "DAC Output Voltage Select", [
                ]),
                Field("VRSEL", 8, 1, "DAC Reference High Voltage Source Select", [
                    EnumVal("VREF0", "0", "vrefh0"),
                    EnumVal("VREF1", "0x1", "vrefh1"),
                ]),
                Field("DAC_EN", 0, 1, "DAC Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("IER", 0x4037001C, 32, "Interrupt Enable", [
                Field("RRF_IE", 2, 1, "Round-Robin Flag Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables the round-robin flag interrupt."),
                    EnumVal("ENABLE", "0x1", "Enables the round-robin flag interrupt when the comparison result changes for a given channel."),
                ]),
                Field("CFF_IE", 1, 1, "Comparator Flag Falling Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables the comparator flag falling interrupt."),
                    EnumVal("ENABLE", "0x1", "Enables the comparator flag falling interrupt when CFF is set."),
                ]),
                Field("CFR_IE", 0, 1, "Comparator Flag Rising Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables the comparator flag rising interrupt."),
                    EnumVal("ENABLE", "0x1", "Enables the comparator flag rising interrupt when CFR is set."),
                ]),
            ]),
            Register("CSR", 0x40370020, 32, "Comparator Status", [
                Field("COUT", 8, 1, "Analog Comparator Output", [
                ]),
                Field("RRF", 2, 1, "Round-Robin Flag", [
                    EnumVal("NOT_DETECTED", "0", "Not detected"),
                    EnumVal("DETECTED", "0x1", "Detected"),
                ]),
                Field("CFF", 1, 1, "Analog Comparator Flag Falling", [
                    EnumVal("NOT_DETECTED", "0", "Not detected"),
                    EnumVal("DETECTED", "0x1", "Detected"),
                ]),
                Field("CFR", 0, 1, "Analog Comparator Flag Rising", [
                    EnumVal("NOT_DETECTED", "0", "Not detected"),
                    EnumVal("DETECTED", "0x1", "Detected"),
                ]),
            ]),
            Register("RRCR0", 0x40370024, 32, "Round Robin Control Register 0", [
                Field("RR_INITMOD", 16, 6, "Initialization Delay Modulus", [
                    EnumVal("MOD_63", "0", "63 cycles (same as 111111b)"),
                    EnumVal("MOD_1_63_1", "0x1", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_2", "0x2", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_3", "0x3", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_4", "0x4", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_5", "0x5", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_6", "0x6", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_7", "0x7", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_8", "0x8", "1 to 63 cycles"),
                    EnumVal("MOD_1_63_9", "0x9", "1 to 63 cycles"),
                ]),
                Field("RR_NSAM", 8, 2, "Number of Sample Clocks", [
                    EnumVal("WAIT_0", "0", "0 clock"),
                    EnumVal("WAIT_1", "0x1", "1 clock"),
                    EnumVal("WAIT_2", "0x2", "2 clocks"),
                    EnumVal("WAIT_3", "0x3", "3 clocks"),
                ]),
                Field("RR_EN", 0, 1, "Round-Robin Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("RRCR1", 0x40370028, 32, "Round Robin Control Register 1", [
                Field("FIXCH", 20, 3, "Fixed Channel Select", [
                    EnumVal("FIX_CH0", "0", "Channel 0"),
                    EnumVal("FIX_CH1", "0x1", "Channel 1"),
                    EnumVal("FIX_CH2", "0x2", "Channel 2"),
                    EnumVal("FIX_CH3", "0x3", "Channel 3"),
                    EnumVal("FIX_CH4", "0x4", "Channel 4"),
                    EnumVal("FIX_CH5", "0x5", "Channel 5"),
                    EnumVal("FIX_CH6", "0x6", "Channel 6"),
                    EnumVal("FIX_CH7", "0x7", "Channel 7"),
                ]),
                Field("FIXP", 16, 1, "Fixed Port", [
                    EnumVal("FIX_PLUS", "0", "Fix the plus port. Sweep only the inputs to the minus port."),
                    EnumVal("FIX_MINUS", "0x1", "Fix the minus port. Sweep only the inputs to the plus port."),
                ]),
                Field("RR_CH7EN", 7, 1, "Channel 7 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RR_CH6EN", 6, 1, "Channel 6 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RR_CH5EN", 5, 1, "Channel 5 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RR_CH4EN", 4, 1, "Channel 4 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RR_CH3EN", 3, 1, "Channel 3 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RR_CH2EN", 2, 1, "Channel 2 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RR_CH1EN", 1, 1, "Channel 1 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("RR_CH0EN", 0, 1, "Channel 0 Input Enable in Trigger Mode", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("RRCSR", 0x4037002C, 32, "Round Robin Control and Status", [
                Field("RR_CH7OUT", 7, 1, "Comparison Result for Channel 7", [
                ]),
                Field("RR_CH6OUT", 6, 1, "Comparison Result for Channel 6", [
                ]),
                Field("RR_CH5OUT", 5, 1, "Comparison Result for Channel 5", [
                ]),
                Field("RR_CH4OUT", 4, 1, "Comparison Result for Channel 4", [
                ]),
                Field("RR_CH3OUT", 3, 1, "Comparison Result for Channel 3", [
                ]),
                Field("RR_CH2OUT", 2, 1, "Comparison Result for Channel 2", [
                ]),
                Field("RR_CH1OUT", 1, 1, "Comparison Result for Channel 1", [
                ]),
                Field("RR_CH0OUT", 0, 1, "Comparison Result for Channel 0", [
                ]),
            ]),
            Register("RRSR", 0x40370030, 32, "Round Robin Status", [
                Field("RR_CH7F", 7, 1, "Channel 7 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
                Field("RR_CH6F", 6, 1, "Channel 6 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
                Field("RR_CH5F", 5, 1, "Channel 5 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
                Field("RR_CH4F", 4, 1, "Channel 4 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
                Field("RR_CH3F", 3, 1, "Channel 3 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
                Field("RR_CH2F", 2, 1, "Channel 2 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
                Field("RR_CH1F", 1, 1, "Channel 1 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
                Field("RR_CH0F", 0, 1, "Channel 0 Input Changed Flag", [
                    EnumVal("NOT_DIFFERENT", "0", "Not different"),
                    EnumVal("DIFFERENT", "0x1", "Different"),
                ]),
            ]),
        ])

class Module_LPI2C_0(Peripheral):
    def __init__(self):
        super().__init__("LPI2C_0", 0x40350000, 0x174, [
            Register("VERID", 0x40350000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("MASTER_ONLY", "0x2", "Controller only, with standard feature set"),
                    EnumVal("MASTER_AND_SLAVE", "0x3", "Controller and target, with standard feature set"),
                ]),
            ]),
            Register("PARAM", 0x40350004, 32, "Parameter", [
                Field("MRXFIFO", 8, 4, "Controller Receive FIFO Size", [
                ]),
                Field("MTXFIFO", 0, 4, "Controller Transmit FIFO Size", [
                ]),
            ]),
            Register("MCR", 0x40350010, 32, "Controller Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RESET", "0x1", "Receive FIFO is reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RESET", "0x1", "Transmit FIFO is reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "Controller is disabled in debug mode"),
                    EnumVal("ENABLED", "0x1", "Controller is enabled in debug mode"),
                ]),
                Field("DOZEN", 2, 1, "Doze mode enable", [
                    EnumVal("ENABLED", "0", "Controller is enabled in doze mode"),
                    EnumVal("DISABLED", "0x1", "Controller is disabled in doze mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
                Field("MEN", 0, 1, "Controller Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("MSR", 0x40350014, 32, "Controller Status", [
                Field("BBF", 25, 1, "Bus Busy Flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("MBF", 24, 1, "Controller Busy Flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("DMF", 14, 1, "Data Match Flag", [
                    EnumVal("NO_FLAG", "0", "Have not received matching data"),
                    EnumVal("FLAG", "0x1", "Have received matching data"),
                ]),
                Field("PLTF", 13, 1, "Pin Low Timeout Flag", [
                    EnumVal("NO_FLAG", "0", "Pin low timeout has not occurred or is disabled"),
                    EnumVal("FLAG", "0x1", "Pin low timeout has occurred"),
                ]),
                Field("FEF", 12, 1, "FIFO Error Flag", [
                    EnumVal("NO_FLAG", "0", "No error"),
                    EnumVal("FLAG", "0x1", "Controller sending or receiving data without a START condition"),
                ]),
                Field("ALF", 11, 1, "Arbitration Lost Flag", [
                    EnumVal("NO_FLAG", "0", "Controller has not lost arbitration"),
                    EnumVal("FLAG", "0x1", "Controller has lost arbitration"),
                ]),
                Field("NDF", 10, 1, "NACK Detect Flag", [
                    EnumVal("NO_FLAG", "0", "Unexpected NACK was not detected"),
                    EnumVal("FLAG", "0x1", "Unexpected NACK was detected"),
                ]),
                Field("SDF", 9, 1, "STOP Detect Flag", [
                    EnumVal("NO_FLAG", "0", "Controller has not generated a STOP condition"),
                    EnumVal("FLAG", "0x1", "Controller has generated a STOP condition"),
                ]),
                Field("EPF", 8, 1, "End Packet Flag", [
                    EnumVal("NO_FLAG", "0", "Controller has not generated a STOP or Repeated START condition"),
                    EnumVal("FLAG", "0x1", "Controller has generated a STOP or Repeated START condition"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("DISABLED", "0", "Receive data is not ready"),
                    EnumVal("ENABLED", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("DISABLED", "0", "Transmit data is not requested"),
                    EnumVal("ENABLED", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("MIER", 0x40350018, 32, "Controller Interrupt Enable", [
                Field("DMIE", 14, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("PLTIE", 13, 1, "Pin Low Timeout Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("FEIE", 12, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("ALIE", 11, 1, "Arbitration Lost Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("NDIE", 10, 1, "NACK Detect Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP Detect Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("EPIE", 8, 1, "End Packet Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("MDER", 0x4035001C, 32, "Controller DMA Enable", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("MCFGR0", 0x40350020, 32, "Controller Configuration 0", [
                Field("RDMO", 9, 1, "Receive data match only", [
                    EnumVal("DISABLED", "0", "Received data is stored in the receive FIFO"),
                    EnumVal("ENABLED", "0x1", "Received data is discarded unless the Data Match Flag (MSR[DMF]) is 1"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO enable", [
                    EnumVal("DISABLED", "0", "Circular FIFO is disabled"),
                    EnumVal("ENABLED", "0x1", "Circular FIFO is enabled"),
                ]),
                Field("HRSEL", 2, 1, "Host request select", [
                    EnumVal("DISABLED", "0", "Host request input is pin HREQ"),
                    EnumVal("ENABLED", "0x1", "Host request input is input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host request polarity", [
                    EnumVal("ACTIVE_LOW", "0", "Active low"),
                    EnumVal("ACTIVE_HIGH", "0x1", "Active high"),
                ]),
                Field("HREN", 0, 1, "Host request enable", [
                    EnumVal("DISABLED", "0", "Host request input is disabled"),
                    EnumVal("ENABLED", "0x1", "Host request input is enabled"),
                ]),
            ]),
            Register("MCFGR1", 0x40350024, 32, "Controller Configuration 1", [
                Field("PINCFG", 24, 3, "Pin Configuration", [
                    EnumVal("OPEN_DRAIN_2_PIN", "0", "Two-pin open drain mode"),
                    EnumVal("OUTPUT_2_PIN_ONLY", "0x1", "Two-pin output only mode (ultra-fast mode)"),
                    EnumVal("PUSH_PULL_2_PIN", "0x2", "Two-pin push-pull mode"),
                    EnumVal("PUSH_PULL_4_PIN", "0x3", "Four-pin push-pull mode"),
                    EnumVal("OPEN_DRAIN_2_PIN_W_LPI2C_SLAVE", "0x4", "Two-pin open drain mode with separate LPI2C target"),
                    EnumVal("OUTPUT_2_PIN_ONLY_W_LPI2C_SLAVE", "0x5", "Two-pin output only mode (ultra-fast mode) with separate LPI2C target"),
                    EnumVal("PUSH_PULL_2_PIN_W_LPI2C_SLAVE", "0x6", "Two-pin push-pull mode with separate LPI2C target"),
                    EnumVal("PUSH_PULL_4_PIN_W_LPI2C_SLAVE", "0x7", "Four-pin push-pull mode (inverted outputs)"),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("FIRST_DATA_WORD_EQUALS_MATCH0_OR_MATCH1", "0x2", "Match is enabled (first data word equals MDMR[MATCH0] OR MDMR[MATCH1])"),
                    EnumVal("ANY_DATA_WORD_EQUALS_MATCH0_OR_MATCH1", "0x3", "Match is enabled (any data word equals MDMR[MATCH0] OR MDMR[MATCH1])"),
                    EnumVal("FIRST_DATA_WORD_MATCH0_AND_SECOND_DATA_WORD_MATCH1", "0x4", "Match is enabled (first data word equals MDMR[MATCH0] AND second data word equals MDMR[MATCH1)"),
                    EnumVal("ANY_DATA_WORD_MATCH0_NEXT_DATA_WORD_MATCH1", "0x5", "Match is enabled (any data word equals MDMR[MATCH0] AND next data word equals MDMR[MATCH1)"),
                    EnumVal("FIRST_DATA_WORD_AND_MATCH1_EQUALS_MATCH0_AND_MATCH1", "0x6", "Match is enabled (first data word AND MDMR[MATCH1] equals MDMR[MATCH0] AND MDMR[MATCH1])"),
                    EnumVal("ANY_DATA_WORD_AND_MATCH1_EQUALS_MATCH0_AND_MATCH1", "0x7", "Match is enabled (any data word AND MDMR[MATCH1] equals MDMR[MATCH0] AND MDMR[MATCH1])"),
                ]),
                Field("TIMECFG", 10, 1, "Timeout Configuration", [
                    EnumVal("IF_SCL_LOW", "0", "MSR[PLTF] becomes 1 if SCL is low for longer than the configured timeout."),
                    EnumVal("IF_SCL_OR_SDA_LOW", "0x1", "MSR[PLTF] becomes 1 if either SCL or SDA is low for longer than the configured timeout."),
                ]),
                Field("IGNACK", 9, 1, "Ignore NACK", [
                    EnumVal("DISABLED", "0", "No effect"),
                    EnumVal("ENABLED", "0x1", "LPI2C controller treats a received NACK as if it (NACK) was an ACK"),
                ]),
                Field("AUTOSTOP", 8, 1, "Automatic STOP Generation", [
                    EnumVal("DISABLED", "0", "No effect"),
                    EnumVal("ENABLED", "0x1", "STOP condition is automatically generated when the transmit FIFO is empty and the LPI2C controller is busy"),
                ]),
                Field("PRESCALE", 0, 3, "Prescaler", [
                    EnumVal("DIVIDE_BY_1", "0", "Divide by 1"),
                    EnumVal("DIVIDE_BY_2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDE_BY_4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDE_BY_8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDE_BY_16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDE_BY_32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDE_BY_64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDE_BY_128", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("MCFGR2", 0x40350028, 32, "Controller Configuration 2", [
                Field("FILTSDA", 24, 4, "Glitch Filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch Filter SCL", [
                ]),
                Field("BUSIDLE", 0, 12, "Bus Idle Timeout", [
                ]),
            ]),
            Register("MCFGR3", 0x4035002C, 32, "Controller Configuration 3", [
                Field("PINLOW", 8, 12, "Pin low timeout", [
                ]),
            ]),
            Register("MDMR", 0x40350040, 32, "Controller Data Match", [
                Field("MATCH1", 16, 8, "Match 1 Value", [
                ]),
                Field("MATCH0", 0, 8, "Match 0 Value", [
                ]),
            ]),
            Register("MCCR0", 0x40350048, 32, "Controller Clock Configuration 0", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MCCR1", 0x40350050, 32, "Controller Clock Configuration 1", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MFCR", 0x40350058, 32, "Controller FIFO Control", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("MFSR", 0x4035005C, 32, "Controller FIFO Status", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("MTDR", 0x40350060, 32, "Controller Transmit Data", [
                Field("CMD", 8, 3, "Command Data", [
                    EnumVal("TRANSMIT_DATA_7_THROUGH_0", "0", "Transmit DATA[7:0]"),
                    EnumVal("RECEIVE_DATA_7_THROUGH_0_PLUS_ONE", "0x1", "Receive (DATA[7:0] + 1) bytes"),
                    EnumVal("GENERATE_STOP_CONDITION", "0x2", "Generate STOP condition"),
                    EnumVal("RECEIVE_AND_DISCARD_DATA_7_THROUGH_0_PLUS_ONE", "0x3", "Receive and discard (DATA[7:0] + 1) bytes"),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0", "0x4", "Generate (repeated) START and transmit address in DATA[7:0]"),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0_EXPECT_NACK", "0x5", "Generate (repeated) START and transmit address in DATA[7:0]. This transfer expects a NACK to be returned."),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0_USING_HIGH_SPEED_MODE", "0x6", "Generate (repeated) START and transmit address in DATA[7:0] using high-speed mode"),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0_USING_HIGH_SPEED_MODE_EXPECT_NACK", "0x7", "Generate (repeated) START and transmit address in DATA[7:0] using high-speed mode. This transfer expects a NACK to be returned."),
                ]),
                Field("DATA", 0, 8, "Transmit Data", [
                ]),
            ]),
            Register("MRDR", 0x40350070, 32, "Controller Receive Data", [
                Field("RXEMPTY", 14, 1, "Receive Empty", [
                    EnumVal("NOT_EMPTY", "0", "Receive FIFO is not empty"),
                    EnumVal("EMPTY", "0x1", "Receive FIFO is empty"),
                ]),
                Field("DATA", 0, 8, "Receive Data", [
                ]),
            ]),
            Register("SCR", 0x40350110, 32, "Target Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("NOW_EMPTY", "0x1", "Receive Data Register is now empty."),
                ]),
                Field("RTF", 8, 1, "Reset transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("NOW_EMPTY", "0x1", "Transmit Data Register is now empty."),
                ]),
                Field("FILTDZ", 5, 1, "Filter doze enable", [
                    EnumVal("FILTER_ENABLED", "0", "Filter remains enabled in Doze mode"),
                    EnumVal("FILTER_DISABLED", "0x1", "Filter is disabled in Doze mode"),
                ]),
                Field("FILTEN", 4, 1, "Filter enable", [
                    EnumVal("DISABLE", "0", "Disable digital filter and output delay counter for target mode"),
                    EnumVal("ENABLE", "0x1", "Enable digital filter and output delay counter for target mode"),
                ]),
                Field("RST", 1, 1, "Software reset", [
                    EnumVal("NOT_RESET", "0", "Target mode logic is not reset"),
                    EnumVal("RESET", "0x1", "Target mode logic is reset"),
                ]),
                Field("SEN", 0, 1, "Target Enable", [
                    EnumVal("DISABLED", "0", "I2C Target mode is disabled"),
                    EnumVal("ENABLED", "0x1", "I2C Target mode is enabled"),
                ]),
            ]),
            Register("SSR", 0x40350114, 32, "Target Status", [
                Field("BBF", 25, 1, "Bus busy flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("SBF", 24, 1, "Target busy flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("SARF", 15, 1, "SMBus alert response flag", [
                    EnumVal("NO_FLAG", "0", "SMBus alert response is disabled or not detected"),
                    EnumVal("FLAG", "0x1", "SMBus alert response is enabled and detected"),
                ]),
                Field("GCF", 14, 1, "General call flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected the General Call Address or the General Call Address is disabled"),
                    EnumVal("FLAG", "0x1", "Target has detected the General Call Address"),
                ]),
                Field("AM1F", 13, 1, "Address match 1 flag", [
                    EnumVal("NO_FLAG", "0", "ADDR1 or ADDR0/ADDR1 range matching address not received"),
                    EnumVal("FLAG", "0x1", "ADDR1 or ADDR0/ADDR1 range matching address received"),
                ]),
                Field("AM0F", 12, 1, "Address match 0 flag", [
                    EnumVal("NO_FLAG", "0", "ADDR0 matching address not received"),
                    EnumVal("FLAG", "0x1", "ADDR0 matching address received"),
                ]),
                Field("FEF", 11, 1, "FIFO error flag", [
                    EnumVal("NO_FLAG", "0", "FIFO underflow or overflow was not detected"),
                    EnumVal("FLAG", "0x1", "FIFO underflow or overflow was detected"),
                ]),
                Field("BEF", 10, 1, "Bit error flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected a bit error"),
                    EnumVal("FLAG", "0x1", "Target has detected a bit error"),
                ]),
                Field("SDF", 9, 1, "STOP detect flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected a STOP condition"),
                    EnumVal("FLAG", "0x1", "Target has detected a STOP condition"),
                ]),
                Field("RSF", 8, 1, "Repeated start flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected a Repeated START condition"),
                    EnumVal("FLAG", "0x1", "Target has detected a Repeated START condition"),
                ]),
                Field("TAF", 3, 1, "Transmit ACK flag", [
                    EnumVal("NOT_REQUIRED", "0", "Transmit ACK/NACK is not required"),
                    EnumVal("REQUIRED", "0x1", "Transmit ACK/NACK is required"),
                ]),
                Field("AVF", 2, 1, "Address valid flag", [
                    EnumVal("NOT_VALID", "0", "Address Status Register is not valid"),
                    EnumVal("VALID", "0x1", "Address Status Register is valid"),
                ]),
                Field("RDF", 1, 1, "Receive data flag", [
                    EnumVal("NOT_READY", "0", "Receive data is not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit data flag", [
                    EnumVal("NO_FLAG", "0", "Transmit data not requested"),
                    EnumVal("FLAG", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("SIER", 0x40350118, 32, "Target interrupt enable", [
                Field("SARIE", 15, 1, "SMBus alert response interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("GCIE", 14, 1, "General call interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("AM1IE", 13, 1, "Address match 1 interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("AM0IE", 12, 1, "Address match 0 interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("FEIE", 11, 1, "FIFO error interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("BEIE", 10, 1, "Bit error interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP detect interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RSIE", 8, 1, "Repeated start interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TAIE", 3, 1, "Transmit ACK interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("AVIE", 2, 1, "Address valid interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive data interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit data interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("SDER", 0x4035011C, 32, "Target DMA Enable", [
                Field("AVDE", 2, 1, "Address valid DMA enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("RDDE", 1, 1, "Receive data DMA enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit data DMA enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("SCFGR1", 0x40350124, 32, "Target Configuration 1", [
                Field("ADDRCFG", 16, 3, "Address configuration", [
                    EnumVal("ADDRESS_MATCH0_7_BIT", "0", "Address match 0 (7-bit)"),
                    EnumVal("ADDRESS_MATCH0_10_BIT", "0x1", "Address match 0 (10-bit)"),
                    EnumVal("ADDRESS_MATCH0_7_BIT_OR_ADDRESS_MATCH1_7_BIT", "0x2", "Address match 0 (7-bit) or Address match 1 (7-bit)"),
                    EnumVal("ADDRESS_MATCH0_10_BIT_OR_ADDRESS_MATCH1_10_BIT", "0x3", "Address match 0 (10-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRESS_MATCH0_7_BIT_OR_ADDRESS_MATCH1_10_BIT", "0x4", "Address match 0 (7-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRESS_MATCH0_10_BIT_OR_ADDRESS_MATCH1_7_BIT", "0x5", "Address match 0 (10-bit) or Address match 1 (7-bit)"),
                    EnumVal("FROM_ADDRESS_MATCH0_7_BIT_TO_ADDRESS_MATCH1_7_BIT", "0x6", "From Address match 0 (7-bit) to Address match 1 (7-bit)"),
                    EnumVal("FROM_ADDRESS_MATCH0_10_BIT_TO_ADDRESS_MATCH1_10_BIT", "0x7", "From Address match 0 (10-bit) to Address match 1 (10-bit)"),
                ]),
                Field("HSMEN", 13, 1, "High-speed mode enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("IGNACK", 12, 1, "Ignore NACK", [
                    EnumVal("ENDS_TRANSFER_ON_NACK", "0", "Target ends transfer when NACK is detected"),
                    EnumVal("DOES_NOT_END_TRANSFER_ON_NACK", "0x1", "Target does not end transfer when NACK detected"),
                ]),
                Field("RXCFG", 11, 1, "Receive Data Configuration", [
                    EnumVal("RETURNS_RECEIVED_DATA_AND_CLEARS_RX_DATA_FLAG", "0", "Reading the Receive Data register returns received data and writes 0 to the Receive Data flag."),
                    EnumVal("WHEN_ADDRESS_VALID_FLAG_SET_RETURNS_ADDRESS_STATUS_AND_CLEARS_ADDRESS_VALID_FLAG", "0x1", "Reading the Receive Data register when the Address Valid flag (SSR[AVF]) is 1, returns the Address Status register and writes 0 to SSR[AVF]. Reading the Receive Data register when SSR[AVF] is 0, returns received data and writes 0 to the Receive Data flag (MSR[RDF])."),
                ]),
                Field("TXCFG", 10, 1, "Transmit flag configuration", [
                    EnumVal("ASSERTS_DURING_SLAVE_TRANSMIT_TRANSFER_WHEN_TX_DATA_EMPTY", "0", "MSR[TDF] becomes 1 only during a target-transmit transfer when the Transmit Data register is empty"),
                    EnumVal("ASSERTS_WHEN_TX_DATA_EMPTY", "0x1", "MSR[TDF] becomes 1 whenever the Transmit Data register is empty"),
                ]),
                Field("SAEN", 9, 1, "SMBus alert enable", [
                    EnumVal("DISABLE", "0", "Disables match on SMBus Alert"),
                    EnumVal("ENABLE", "0x1", "Enables match on SMBus Alert"),
                ]),
                Field("GCEN", 8, 1, "General call enable", [
                    EnumVal("DISABLED", "0", "General Call address is disabled"),
                    EnumVal("ENABLED", "0x1", "General Call address is enabled"),
                ]),
                Field("ACKSTALL", 3, 1, "ACK SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TXDSTALL", 2, 1, "Transmit data SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RXSTALL", 1, 1, "RX SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("ADRSTALL", 0, 1, "Address SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("SCFGR2", 0x40350128, 32, "Target Configuration 2", [
                Field("FILTSDA", 24, 4, "Glitch filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch filter SCL", [
                ]),
                Field("DATAVD", 8, 6, "Data valid delay", [
                ]),
                Field("CLKHOLD", 0, 4, "Clock hold time", [
                ]),
            ]),
            Register("SAMR", 0x40350140, 32, "Target Address Match", [
                Field("ADDR1", 17, 10, "Address 1 value", [
                ]),
                Field("ADDR0", 1, 10, "Address 0 value", [
                ]),
            ]),
            Register("SASR", 0x40350150, 32, "Target Address Status", [
                Field("ANV", 14, 1, "Address not valid", [
                    EnumVal("VALID", "0", "Received Address (RADDR) is valid"),
                    EnumVal("NOT_VALID", "0x1", "Received Address (RADDR) is not valid"),
                ]),
                Field("RADDR", 0, 11, "Received Address", [
                ]),
            ]),
            Register("STAR", 0x40350154, 32, "Target Transmit ACK", [
                Field("TXNACK", 0, 1, "Transmit NACK", [
                    EnumVal("TRANSMIT_ACK", "0", "Write a Transmit ACK for each received word"),
                    EnumVal("TRANSMIT_NACK", "0x1", "Write a Transmit NACK for each received word"),
                ]),
            ]),
            Register("STDR", 0x40350160, 32, "Target Transmit Data", [
                Field("DATA", 0, 8, "Transmit data", [
                ]),
            ]),
            Register("SRDR", 0x40350170, 32, "Target Receive Data", [
                Field("SOF", 15, 1, "Start of frame", [
                    EnumVal("NOT_FIRST_DATA_WORD", "0", "Not the first data word since a (repeated) START or STOP condition"),
                    EnumVal("FIRST_DATA_WORD", "0x1", "Is the first data word since a (repeated) START or STOP condition"),
                ]),
                Field("RXEMPTY", 14, 1, "Receive empty", [
                    EnumVal("NOT_EMPTY", "0", "The Receive Data Register is not empty"),
                    EnumVal("EMPTY", "0x1", "The Receive Data Register is empty"),
                ]),
                Field("RADDR", 8, 3, "Received address", [
                ]),
                Field("DATA", 0, 8, "Receive data", [
                ]),
            ]),
        ])

class Module_LPI2C_1(Peripheral):
    def __init__(self):
        super().__init__("LPI2C_1", 0x40354000, 0x174, [
            Register("VERID", 0x40354000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("MASTER_ONLY", "0x2", "Controller only, with standard feature set"),
                    EnumVal("MASTER_AND_SLAVE", "0x3", "Controller and target, with standard feature set"),
                ]),
            ]),
            Register("PARAM", 0x40354004, 32, "Parameter", [
                Field("MRXFIFO", 8, 4, "Controller Receive FIFO Size", [
                ]),
                Field("MTXFIFO", 0, 4, "Controller Transmit FIFO Size", [
                ]),
            ]),
            Register("MCR", 0x40354010, 32, "Controller Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RESET", "0x1", "Receive FIFO is reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RESET", "0x1", "Transmit FIFO is reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "Controller is disabled in debug mode"),
                    EnumVal("ENABLED", "0x1", "Controller is enabled in debug mode"),
                ]),
                Field("DOZEN", 2, 1, "Doze mode enable", [
                    EnumVal("ENABLED", "0", "Controller is enabled in doze mode"),
                    EnumVal("DISABLED", "0x1", "Controller is disabled in doze mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
                Field("MEN", 0, 1, "Controller Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("MSR", 0x40354014, 32, "Controller Status", [
                Field("BBF", 25, 1, "Bus Busy Flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("MBF", 24, 1, "Controller Busy Flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("DMF", 14, 1, "Data Match Flag", [
                    EnumVal("NO_FLAG", "0", "Have not received matching data"),
                    EnumVal("FLAG", "0x1", "Have received matching data"),
                ]),
                Field("PLTF", 13, 1, "Pin Low Timeout Flag", [
                    EnumVal("NO_FLAG", "0", "Pin low timeout has not occurred or is disabled"),
                    EnumVal("FLAG", "0x1", "Pin low timeout has occurred"),
                ]),
                Field("FEF", 12, 1, "FIFO Error Flag", [
                    EnumVal("NO_FLAG", "0", "No error"),
                    EnumVal("FLAG", "0x1", "Controller sending or receiving data without a START condition"),
                ]),
                Field("ALF", 11, 1, "Arbitration Lost Flag", [
                    EnumVal("NO_FLAG", "0", "Controller has not lost arbitration"),
                    EnumVal("FLAG", "0x1", "Controller has lost arbitration"),
                ]),
                Field("NDF", 10, 1, "NACK Detect Flag", [
                    EnumVal("NO_FLAG", "0", "Unexpected NACK was not detected"),
                    EnumVal("FLAG", "0x1", "Unexpected NACK was detected"),
                ]),
                Field("SDF", 9, 1, "STOP Detect Flag", [
                    EnumVal("NO_FLAG", "0", "Controller has not generated a STOP condition"),
                    EnumVal("FLAG", "0x1", "Controller has generated a STOP condition"),
                ]),
                Field("EPF", 8, 1, "End Packet Flag", [
                    EnumVal("NO_FLAG", "0", "Controller has not generated a STOP or Repeated START condition"),
                    EnumVal("FLAG", "0x1", "Controller has generated a STOP or Repeated START condition"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("DISABLED", "0", "Receive data is not ready"),
                    EnumVal("ENABLED", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("DISABLED", "0", "Transmit data is not requested"),
                    EnumVal("ENABLED", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("MIER", 0x40354018, 32, "Controller Interrupt Enable", [
                Field("DMIE", 14, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("PLTIE", 13, 1, "Pin Low Timeout Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("FEIE", 12, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("ALIE", 11, 1, "Arbitration Lost Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("NDIE", 10, 1, "NACK Detect Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP Detect Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("EPIE", 8, 1, "End Packet Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("MDER", 0x4035401C, 32, "Controller DMA Enable", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("MCFGR0", 0x40354020, 32, "Controller Configuration 0", [
                Field("RDMO", 9, 1, "Receive data match only", [
                    EnumVal("DISABLED", "0", "Received data is stored in the receive FIFO"),
                    EnumVal("ENABLED", "0x1", "Received data is discarded unless the Data Match Flag (MSR[DMF]) is 1"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO enable", [
                    EnumVal("DISABLED", "0", "Circular FIFO is disabled"),
                    EnumVal("ENABLED", "0x1", "Circular FIFO is enabled"),
                ]),
                Field("HRSEL", 2, 1, "Host request select", [
                    EnumVal("DISABLED", "0", "Host request input is pin HREQ"),
                    EnumVal("ENABLED", "0x1", "Host request input is input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host request polarity", [
                    EnumVal("ACTIVE_LOW", "0", "Active low"),
                    EnumVal("ACTIVE_HIGH", "0x1", "Active high"),
                ]),
                Field("HREN", 0, 1, "Host request enable", [
                    EnumVal("DISABLED", "0", "Host request input is disabled"),
                    EnumVal("ENABLED", "0x1", "Host request input is enabled"),
                ]),
            ]),
            Register("MCFGR1", 0x40354024, 32, "Controller Configuration 1", [
                Field("PINCFG", 24, 3, "Pin Configuration", [
                    EnumVal("OPEN_DRAIN_2_PIN", "0", "Two-pin open drain mode"),
                    EnumVal("OUTPUT_2_PIN_ONLY", "0x1", "Two-pin output only mode (ultra-fast mode)"),
                    EnumVal("PUSH_PULL_2_PIN", "0x2", "Two-pin push-pull mode"),
                    EnumVal("PUSH_PULL_4_PIN", "0x3", "Four-pin push-pull mode"),
                    EnumVal("OPEN_DRAIN_2_PIN_W_LPI2C_SLAVE", "0x4", "Two-pin open drain mode with separate LPI2C target"),
                    EnumVal("OUTPUT_2_PIN_ONLY_W_LPI2C_SLAVE", "0x5", "Two-pin output only mode (ultra-fast mode) with separate LPI2C target"),
                    EnumVal("PUSH_PULL_2_PIN_W_LPI2C_SLAVE", "0x6", "Two-pin push-pull mode with separate LPI2C target"),
                    EnumVal("PUSH_PULL_4_PIN_W_LPI2C_SLAVE", "0x7", "Four-pin push-pull mode (inverted outputs)"),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("FIRST_DATA_WORD_EQUALS_MATCH0_OR_MATCH1", "0x2", "Match is enabled (first data word equals MDMR[MATCH0] OR MDMR[MATCH1])"),
                    EnumVal("ANY_DATA_WORD_EQUALS_MATCH0_OR_MATCH1", "0x3", "Match is enabled (any data word equals MDMR[MATCH0] OR MDMR[MATCH1])"),
                    EnumVal("FIRST_DATA_WORD_MATCH0_AND_SECOND_DATA_WORD_MATCH1", "0x4", "Match is enabled (first data word equals MDMR[MATCH0] AND second data word equals MDMR[MATCH1)"),
                    EnumVal("ANY_DATA_WORD_MATCH0_NEXT_DATA_WORD_MATCH1", "0x5", "Match is enabled (any data word equals MDMR[MATCH0] AND next data word equals MDMR[MATCH1)"),
                    EnumVal("FIRST_DATA_WORD_AND_MATCH1_EQUALS_MATCH0_AND_MATCH1", "0x6", "Match is enabled (first data word AND MDMR[MATCH1] equals MDMR[MATCH0] AND MDMR[MATCH1])"),
                    EnumVal("ANY_DATA_WORD_AND_MATCH1_EQUALS_MATCH0_AND_MATCH1", "0x7", "Match is enabled (any data word AND MDMR[MATCH1] equals MDMR[MATCH0] AND MDMR[MATCH1])"),
                ]),
                Field("TIMECFG", 10, 1, "Timeout Configuration", [
                    EnumVal("IF_SCL_LOW", "0", "MSR[PLTF] becomes 1 if SCL is low for longer than the configured timeout."),
                    EnumVal("IF_SCL_OR_SDA_LOW", "0x1", "MSR[PLTF] becomes 1 if either SCL or SDA is low for longer than the configured timeout."),
                ]),
                Field("IGNACK", 9, 1, "Ignore NACK", [
                    EnumVal("DISABLED", "0", "No effect"),
                    EnumVal("ENABLED", "0x1", "LPI2C controller treats a received NACK as if it (NACK) was an ACK"),
                ]),
                Field("AUTOSTOP", 8, 1, "Automatic STOP Generation", [
                    EnumVal("DISABLED", "0", "No effect"),
                    EnumVal("ENABLED", "0x1", "STOP condition is automatically generated when the transmit FIFO is empty and the LPI2C controller is busy"),
                ]),
                Field("PRESCALE", 0, 3, "Prescaler", [
                    EnumVal("DIVIDE_BY_1", "0", "Divide by 1"),
                    EnumVal("DIVIDE_BY_2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDE_BY_4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDE_BY_8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDE_BY_16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDE_BY_32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDE_BY_64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDE_BY_128", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("MCFGR2", 0x40354028, 32, "Controller Configuration 2", [
                Field("FILTSDA", 24, 4, "Glitch Filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch Filter SCL", [
                ]),
                Field("BUSIDLE", 0, 12, "Bus Idle Timeout", [
                ]),
            ]),
            Register("MCFGR3", 0x4035402C, 32, "Controller Configuration 3", [
                Field("PINLOW", 8, 12, "Pin low timeout", [
                ]),
            ]),
            Register("MDMR", 0x40354040, 32, "Controller Data Match", [
                Field("MATCH1", 16, 8, "Match 1 Value", [
                ]),
                Field("MATCH0", 0, 8, "Match 0 Value", [
                ]),
            ]),
            Register("MCCR0", 0x40354048, 32, "Controller Clock Configuration 0", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MCCR1", 0x40354050, 32, "Controller Clock Configuration 1", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MFCR", 0x40354058, 32, "Controller FIFO Control", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("MFSR", 0x4035405C, 32, "Controller FIFO Status", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("MTDR", 0x40354060, 32, "Controller Transmit Data", [
                Field("CMD", 8, 3, "Command Data", [
                    EnumVal("TRANSMIT_DATA_7_THROUGH_0", "0", "Transmit DATA[7:0]"),
                    EnumVal("RECEIVE_DATA_7_THROUGH_0_PLUS_ONE", "0x1", "Receive (DATA[7:0] + 1) bytes"),
                    EnumVal("GENERATE_STOP_CONDITION", "0x2", "Generate STOP condition"),
                    EnumVal("RECEIVE_AND_DISCARD_DATA_7_THROUGH_0_PLUS_ONE", "0x3", "Receive and discard (DATA[7:0] + 1) bytes"),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0", "0x4", "Generate (repeated) START and transmit address in DATA[7:0]"),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0_EXPECT_NACK", "0x5", "Generate (repeated) START and transmit address in DATA[7:0]. This transfer expects a NACK to be returned."),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0_USING_HIGH_SPEED_MODE", "0x6", "Generate (repeated) START and transmit address in DATA[7:0] using high-speed mode"),
                    EnumVal("GENERATE_START_AND_TRANSMIT_ADDRESS_IN_DATA_7_THROUGH_0_USING_HIGH_SPEED_MODE_EXPECT_NACK", "0x7", "Generate (repeated) START and transmit address in DATA[7:0] using high-speed mode. This transfer expects a NACK to be returned."),
                ]),
                Field("DATA", 0, 8, "Transmit Data", [
                ]),
            ]),
            Register("MRDR", 0x40354070, 32, "Controller Receive Data", [
                Field("RXEMPTY", 14, 1, "Receive Empty", [
                    EnumVal("NOT_EMPTY", "0", "Receive FIFO is not empty"),
                    EnumVal("EMPTY", "0x1", "Receive FIFO is empty"),
                ]),
                Field("DATA", 0, 8, "Receive Data", [
                ]),
            ]),
            Register("SCR", 0x40354110, 32, "Target Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("NOW_EMPTY", "0x1", "Receive Data Register is now empty."),
                ]),
                Field("RTF", 8, 1, "Reset transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("NOW_EMPTY", "0x1", "Transmit Data Register is now empty."),
                ]),
                Field("FILTDZ", 5, 1, "Filter doze enable", [
                    EnumVal("FILTER_ENABLED", "0", "Filter remains enabled in Doze mode"),
                    EnumVal("FILTER_DISABLED", "0x1", "Filter is disabled in Doze mode"),
                ]),
                Field("FILTEN", 4, 1, "Filter enable", [
                    EnumVal("DISABLE", "0", "Disable digital filter and output delay counter for target mode"),
                    EnumVal("ENABLE", "0x1", "Enable digital filter and output delay counter for target mode"),
                ]),
                Field("RST", 1, 1, "Software reset", [
                    EnumVal("NOT_RESET", "0", "Target mode logic is not reset"),
                    EnumVal("RESET", "0x1", "Target mode logic is reset"),
                ]),
                Field("SEN", 0, 1, "Target Enable", [
                    EnumVal("DISABLED", "0", "I2C Target mode is disabled"),
                    EnumVal("ENABLED", "0x1", "I2C Target mode is enabled"),
                ]),
            ]),
            Register("SSR", 0x40354114, 32, "Target Status", [
                Field("BBF", 25, 1, "Bus busy flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("SBF", 24, 1, "Target busy flag", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("BUSY", "0x1", "Busy"),
                ]),
                Field("SARF", 15, 1, "SMBus alert response flag", [
                    EnumVal("NO_FLAG", "0", "SMBus alert response is disabled or not detected"),
                    EnumVal("FLAG", "0x1", "SMBus alert response is enabled and detected"),
                ]),
                Field("GCF", 14, 1, "General call flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected the General Call Address or the General Call Address is disabled"),
                    EnumVal("FLAG", "0x1", "Target has detected the General Call Address"),
                ]),
                Field("AM1F", 13, 1, "Address match 1 flag", [
                    EnumVal("NO_FLAG", "0", "ADDR1 or ADDR0/ADDR1 range matching address not received"),
                    EnumVal("FLAG", "0x1", "ADDR1 or ADDR0/ADDR1 range matching address received"),
                ]),
                Field("AM0F", 12, 1, "Address match 0 flag", [
                    EnumVal("NO_FLAG", "0", "ADDR0 matching address not received"),
                    EnumVal("FLAG", "0x1", "ADDR0 matching address received"),
                ]),
                Field("FEF", 11, 1, "FIFO error flag", [
                    EnumVal("NO_FLAG", "0", "FIFO underflow or overflow was not detected"),
                    EnumVal("FLAG", "0x1", "FIFO underflow or overflow was detected"),
                ]),
                Field("BEF", 10, 1, "Bit error flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected a bit error"),
                    EnumVal("FLAG", "0x1", "Target has detected a bit error"),
                ]),
                Field("SDF", 9, 1, "STOP detect flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected a STOP condition"),
                    EnumVal("FLAG", "0x1", "Target has detected a STOP condition"),
                ]),
                Field("RSF", 8, 1, "Repeated start flag", [
                    EnumVal("NO_FLAG", "0", "Target has not detected a Repeated START condition"),
                    EnumVal("FLAG", "0x1", "Target has detected a Repeated START condition"),
                ]),
                Field("TAF", 3, 1, "Transmit ACK flag", [
                    EnumVal("NOT_REQUIRED", "0", "Transmit ACK/NACK is not required"),
                    EnumVal("REQUIRED", "0x1", "Transmit ACK/NACK is required"),
                ]),
                Field("AVF", 2, 1, "Address valid flag", [
                    EnumVal("NOT_VALID", "0", "Address Status Register is not valid"),
                    EnumVal("VALID", "0x1", "Address Status Register is valid"),
                ]),
                Field("RDF", 1, 1, "Receive data flag", [
                    EnumVal("NOT_READY", "0", "Receive data is not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit data flag", [
                    EnumVal("NO_FLAG", "0", "Transmit data not requested"),
                    EnumVal("FLAG", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("SIER", 0x40354118, 32, "Target interrupt enable", [
                Field("SARIE", 15, 1, "SMBus alert response interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("GCIE", 14, 1, "General call interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("AM1IE", 13, 1, "Address match 1 interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("AM0IE", 12, 1, "Address match 0 interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("FEIE", 11, 1, "FIFO error interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("BEIE", 10, 1, "Bit error interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP detect interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RSIE", 8, 1, "Repeated start interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TAIE", 3, 1, "Transmit ACK interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("AVIE", 2, 1, "Address valid interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive data interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit data interrupt enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("SDER", 0x4035411C, 32, "Target DMA Enable", [
                Field("AVDE", 2, 1, "Address valid DMA enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("RDDE", 1, 1, "Receive data DMA enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit data DMA enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("SCFGR1", 0x40354124, 32, "Target Configuration 1", [
                Field("ADDRCFG", 16, 3, "Address configuration", [
                    EnumVal("ADDRESS_MATCH0_7_BIT", "0", "Address match 0 (7-bit)"),
                    EnumVal("ADDRESS_MATCH0_10_BIT", "0x1", "Address match 0 (10-bit)"),
                    EnumVal("ADDRESS_MATCH0_7_BIT_OR_ADDRESS_MATCH1_7_BIT", "0x2", "Address match 0 (7-bit) or Address match 1 (7-bit)"),
                    EnumVal("ADDRESS_MATCH0_10_BIT_OR_ADDRESS_MATCH1_10_BIT", "0x3", "Address match 0 (10-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRESS_MATCH0_7_BIT_OR_ADDRESS_MATCH1_10_BIT", "0x4", "Address match 0 (7-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRESS_MATCH0_10_BIT_OR_ADDRESS_MATCH1_7_BIT", "0x5", "Address match 0 (10-bit) or Address match 1 (7-bit)"),
                    EnumVal("FROM_ADDRESS_MATCH0_7_BIT_TO_ADDRESS_MATCH1_7_BIT", "0x6", "From Address match 0 (7-bit) to Address match 1 (7-bit)"),
                    EnumVal("FROM_ADDRESS_MATCH0_10_BIT_TO_ADDRESS_MATCH1_10_BIT", "0x7", "From Address match 0 (10-bit) to Address match 1 (10-bit)"),
                ]),
                Field("HSMEN", 13, 1, "High-speed mode enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("IGNACK", 12, 1, "Ignore NACK", [
                    EnumVal("ENDS_TRANSFER_ON_NACK", "0", "Target ends transfer when NACK is detected"),
                    EnumVal("DOES_NOT_END_TRANSFER_ON_NACK", "0x1", "Target does not end transfer when NACK detected"),
                ]),
                Field("RXCFG", 11, 1, "Receive Data Configuration", [
                    EnumVal("RETURNS_RECEIVED_DATA_AND_CLEARS_RX_DATA_FLAG", "0", "Reading the Receive Data register returns received data and writes 0 to the Receive Data flag."),
                    EnumVal("WHEN_ADDRESS_VALID_FLAG_SET_RETURNS_ADDRESS_STATUS_AND_CLEARS_ADDRESS_VALID_FLAG", "0x1", "Reading the Receive Data register when the Address Valid flag (SSR[AVF]) is 1, returns the Address Status register and writes 0 to SSR[AVF]. Reading the Receive Data register when SSR[AVF] is 0, returns received data and writes 0 to the Receive Data flag (MSR[RDF])."),
                ]),
                Field("TXCFG", 10, 1, "Transmit flag configuration", [
                    EnumVal("ASSERTS_DURING_SLAVE_TRANSMIT_TRANSFER_WHEN_TX_DATA_EMPTY", "0", "MSR[TDF] becomes 1 only during a target-transmit transfer when the Transmit Data register is empty"),
                    EnumVal("ASSERTS_WHEN_TX_DATA_EMPTY", "0x1", "MSR[TDF] becomes 1 whenever the Transmit Data register is empty"),
                ]),
                Field("SAEN", 9, 1, "SMBus alert enable", [
                    EnumVal("DISABLE", "0", "Disables match on SMBus Alert"),
                    EnumVal("ENABLE", "0x1", "Enables match on SMBus Alert"),
                ]),
                Field("GCEN", 8, 1, "General call enable", [
                    EnumVal("DISABLED", "0", "General Call address is disabled"),
                    EnumVal("ENABLED", "0x1", "General Call address is enabled"),
                ]),
                Field("ACKSTALL", 3, 1, "ACK SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TXDSTALL", 2, 1, "Transmit data SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RXSTALL", 1, 1, "RX SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("ADRSTALL", 0, 1, "Address SCL stall", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("SCFGR2", 0x40354128, 32, "Target Configuration 2", [
                Field("FILTSDA", 24, 4, "Glitch filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch filter SCL", [
                ]),
                Field("DATAVD", 8, 6, "Data valid delay", [
                ]),
                Field("CLKHOLD", 0, 4, "Clock hold time", [
                ]),
            ]),
            Register("SAMR", 0x40354140, 32, "Target Address Match", [
                Field("ADDR1", 17, 10, "Address 1 value", [
                ]),
                Field("ADDR0", 1, 10, "Address 0 value", [
                ]),
            ]),
            Register("SASR", 0x40354150, 32, "Target Address Status", [
                Field("ANV", 14, 1, "Address not valid", [
                    EnumVal("VALID", "0", "Received Address (RADDR) is valid"),
                    EnumVal("NOT_VALID", "0x1", "Received Address (RADDR) is not valid"),
                ]),
                Field("RADDR", 0, 11, "Received Address", [
                ]),
            ]),
            Register("STAR", 0x40354154, 32, "Target Transmit ACK", [
                Field("TXNACK", 0, 1, "Transmit NACK", [
                    EnumVal("TRANSMIT_ACK", "0", "Write a Transmit ACK for each received word"),
                    EnumVal("TRANSMIT_NACK", "0x1", "Write a Transmit NACK for each received word"),
                ]),
            ]),
            Register("STDR", 0x40354160, 32, "Target Transmit Data", [
                Field("DATA", 0, 8, "Transmit data", [
                ]),
            ]),
            Register("SRDR", 0x40354170, 32, "Target Receive Data", [
                Field("SOF", 15, 1, "Start of frame", [
                    EnumVal("NOT_FIRST_DATA_WORD", "0", "Not the first data word since a (repeated) START or STOP condition"),
                    EnumVal("FIRST_DATA_WORD", "0x1", "Is the first data word since a (repeated) START or STOP condition"),
                ]),
                Field("RXEMPTY", 14, 1, "Receive empty", [
                    EnumVal("NOT_EMPTY", "0", "The Receive Data Register is not empty"),
                    EnumVal("EMPTY", "0x1", "The Receive Data Register is empty"),
                ]),
                Field("RADDR", 8, 3, "Received address", [
                ]),
                Field("DATA", 0, 8, "Receive data", [
                ]),
            ]),
        ])

class Module_LPSPI_0(Peripheral):
    def __init__(self):
        super().__init__("LPSPI_0", 0x40358000, 0x800, [
            Register("VERID", 0x40358000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Module Identification Number", [
                    EnumVal("STANDARD", "0x4", "Standard feature set supporting a 32-bit shift register."),
                ]),
            ]),
            Register("PARAM", 0x40358004, 32, "Parameter", [
                Field("PCSNUM", 16, 8, "PCS Number", [
                ]),
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("CR", 0x40358010, 32, "Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
                Field("MEN", 0, 1, "Module Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
            ]),
            Register("SR", 0x40358014, 32, "Status", [
                Field("MBF", 24, 1, "Module Busy Flag", [
                    EnumVal("IDLE", "0", "LPSPI is idle"),
                    EnumVal("BUSY", "0x1", "LPSPI is busy"),
                ]),
                Field("DMF", 13, 1, "Data Match Flag", [
                    EnumVal("NO_MATCH", "0", "No match"),
                    EnumVal("MATCH", "0x1", "Match"),
                ]),
                Field("REF", 12, 1, "Receive Error Flag", [
                    EnumVal("NOT_OVERFLOWED", "0", "No overflow"),
                    EnumVal("OVERFLOWED", "0x1", "Overflow"),
                ]),
                Field("TEF", 11, 1, "Transmit Error Flag", [
                    EnumVal("NO_UNDERRUN", "0", "No underrun"),
                    EnumVal("UNDERRUN", "0x1", "Underrun"),
                ]),
                Field("TCF", 10, 1, "Transfer Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("FCF", 9, 1, "Frame Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("WCF", 8, 1, "Word Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("NOTREADY", "0", "Receive data not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TXDATA_NOT_REQST", "0", "Transmit data not requested"),
                    EnumVal("TXDATA_REQST", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("IER", 0x40358018, 32, "Interrupt Enable", [
                Field("DMIE", 13, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("REIE", 12, 1, "Receive Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TEIE", 11, 1, "Transmit Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TCIE", 10, 1, "Transfer Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FCIE", 9, 1, "Frame Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("WCIE", 8, 1, "Word Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("DER", 0x4035801C, 32, "DMA Enable", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR0", 0x40358020, 32, "Configuration 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("STORED", "0", "Disable"),
                    EnumVal("DISCARDED", "0x1", "Enable"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("HRDIR", 3, 1, "Host Request Direction", [
                    EnumVal("INPUT", "0", "Input"),
                    EnumVal("OUTPUT", "0x1", "Output"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HREQPIN", "0", "HREQ pin"),
                    EnumVal("INPUT_TRIGGER", "0x1", "Input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("DISABLED", "0", "Active high"),
                    EnumVal("ENABLED", "0x1", "Active low"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR1", 0x40358024, 32, "Configuration 1", [
                Field("PCSCFG", 27, 2, "Peripheral Chip Select Configuration", [
                    EnumVal("CHIP_SELECT", "0", "PCS[7:2] are configured for chip select function"),
                    EnumVal("HALFDUPLEX4BIT", "0x1", "PCS[3:2] are configured for half-duplex 4-bit transfers (PCS[3:2] = DATA[3:2])"),
                    EnumVal("HALFDUPLEX4AND8BIT", "0x3", "PCS[7:2] are configured for half-duplex 4-bit and 8-bit transfers (PCS[7:2] = DATA[7:2])"),
                ]),
                Field("OUTCFG", 26, 1, "Output Configuration", [
                    EnumVal("RETAIN_LASTVALUE", "0", "Output data retains last value."),
                    EnumVal("TRISTATED", "0x1", "Output data is 3-stated."),
                ]),
                Field("PINCFG", 24, 2, "Pin Configuration", [
                    EnumVal("SIN_IN_SOUT_OUT", "0", "SIN is used for input data; SOUT is used for output data."),
                    EnumVal("SIN_BOTH_IN_OUT", "0x1", "SIN is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_BOTH_IN_OUT", "0x2", "SOUT is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_IN_SIN_OUT", "0x3", "SOUT is used for input data; SIN is used for output data."),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("ENABLED_FIRSTDATAMATCH", "0x2", "Match first data word with compare word"),
                    EnumVal("ENABLED_ANYDATAMATCH", "0x3", "Match any data word with compare word"),
                    EnumVal("ENABLED_DATAMATCH_100", "0x4", "Sequential match, first data word"),
                    EnumVal("ENABLED_DATAMATCH_101", "0x5", "Sequential match, any data word"),
                    EnumVal("ENABLED_DATAMATCH_110", "0x6", "Match first data word (masked) with compare word (masked)"),
                    EnumVal("ENABLED_DATAMATCH_111", "0x7", "Match any data word (masked) with compare word (masked)"),
                ]),
                Field("PCSPOL", 8, 8, "Peripheral Chip Select Polarity", [
                ]),
                Field("PARTIAL", 4, 1, "Partial Enable", [
                    EnumVal("DISCARDED", "0", "Discard"),
                    EnumVal("STORED", "0x1", "Store"),
                ]),
                Field("NOSTALL", 3, 1, "No Stall", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("AUTOPCS", 2, 1, "Automatic PCS", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("SAMPLE", 1, 1, "Sample Point", [
                    EnumVal("ON_SCK_EDGE", "0", "SCK edge"),
                    EnumVal("ON_DELAYED_SCK_EDGE", "0x1", "Delayed SCK edge"),
                ]),
                Field("MASTER", 0, 1, "Master Mode", [
                    EnumVal("SLAVE_MODE", "0", "Slave mode"),
                    EnumVal("MASTER_MODE", "0x1", "Master mode"),
                ]),
            ]),
            Register("DMR0", 0x40358030, 32, "Data Match 0", [
                Field("MATCH0", 0, 32, "Match 0 Value", [
                ]),
            ]),
            Register("DMR1", 0x40358034, 32, "Data Match 1", [
                Field("MATCH1", 0, 32, "Match 1 Value", [
                ]),
            ]),
            Register("CCR", 0x40358040, 32, "Clock Configuration", [
                Field("SCKPCS", 24, 8, "SCK-to-PCS Delay", [
                ]),
                Field("PCSSCK", 16, 8, "PCS-to-SCK Delay", [
                ]),
                Field("DBT", 8, 8, "Delay Between Transfers", [
                ]),
                Field("SCKDIV", 0, 8, "SCK Divider", [
                ]),
            ]),
            Register("CCR1", 0x40358044, 32, "Clock Configuration 1", [
                Field("SCKSCK", 24, 8, "SCK Inter-Frame Delay", [
                ]),
                Field("PCSPCS", 16, 8, "PCS to PCS delay", [
                ]),
                Field("SCKHLD", 8, 8, "SCK Hold", [
                ]),
                Field("SCKSET", 0, 8, "SCK Setup", [
                ]),
            ]),
            Register("FCR", 0x40358058, 32, "FIFO Control", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("FSR", 0x4035805C, 32, "FIFO Status", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("TCR", 0x40358060, 32, "Transmit Command", [
                Field("CPOL", 31, 1, "Clock Polarity", [
                    EnumVal("INACTIVE_LOW", "0", "Inactive low"),
                    EnumVal("INACTIVE_HIGH", "0x1", "Inactive high"),
                ]),
                Field("CPHA", 30, 1, "Clock Phase", [
                    EnumVal("CAPTURED", "0", "Captured"),
                    EnumVal("CHANGED", "0x1", "Changed"),
                ]),
                Field("PRESCALE", 27, 3, "Prescaler Value", [
                    EnumVal("DIVIDEBY1", "0", "Divide by 1"),
                    EnumVal("DIVIDEBY2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDEBY4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDEBY8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDEBY16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDEBY32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDEBY64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDEBY128", "0x7", "Divide by 128"),
                ]),
                Field("PCS", 24, 3, "Peripheral Chip Select", [
                    EnumVal("TX_PCS0", "0", "Transfer using PCS[0]"),
                    EnumVal("TX_PCS1", "0x1", "Transfer using PCS[1]"),
                    EnumVal("TX_PCS2", "0x2", "Transfer using PCS[2]"),
                    EnumVal("TX_PCS3", "0x3", "Transfer using PCS[3]"),
                    EnumVal("TX_PCS4", "0x4", "Transfer using PCS[4]"),
                    EnumVal("TX_PCS5", "0x5", "Transfer using PCS[5]"),
                    EnumVal("TX_PCS6", "0x6", "Transfer using PCS[6]"),
                    EnumVal("TX_PCS7", "0x7", "Transfer using PCS[7]"),
                ]),
                Field("LSBF", 23, 1, "LSB First", [
                    EnumVal("MSB_FIRST", "0", "Data is transferred MSB first"),
                    EnumVal("LSB_FIRST", "0x1", "Data is transferred LSB first"),
                ]),
                Field("BYSW", 22, 1, "Byte Swap", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("CONT", 21, 1, "Continuous Transfer", [
                    EnumVal("DISABLED", "0", "Continuous transfer is disabled"),
                    EnumVal("ENABLED", "0x1", "Continuous transfer is enabled"),
                ]),
                Field("CONTC", 20, 1, "Continuing Command", [
                    EnumVal("START", "0", "Command word for start of new transfer"),
                    EnumVal("CONTINUE", "0x1", "Command word for continuing transfer"),
                ]),
                Field("RXMSK", 19, 1, "Receive Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Receive data is masked"),
                ]),
                Field("TXMSK", 18, 1, "Transmit Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Mask transmit data"),
                ]),
                Field("WIDTH", 16, 2, "Transfer Width", [
                    EnumVal("ONEBIT", "0", "1-bit transfer"),
                    EnumVal("TWOBIT", "0x1", "2-bit transfer"),
                    EnumVal("FOURBIT", "0x2", "4-bit transfer"),
                    EnumVal("EIGHTBIT", "0x3", "8-bit transfer"),
                ]),
                Field("FRAMESZ", 0, 12, "Frame Size", [
                ]),
            ]),
            Register("TDR", 0x40358064, 32, "Transmit Data", [
                Field("DATA", 0, 32, "Transmit Data", [
                ]),
            ]),
            Register("RSR", 0x40358070, 32, "Receive Status", [
                Field("RXEMPTY", 1, 1, "RX FIFO Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("SOF", 0, 1, "Start Of Frame", [
                    EnumVal("NEXT_DATAWORD", "0", "Subsequent data word"),
                    EnumVal("FIRST_DATAWORD", "0x1", "First data word"),
                ]),
            ]),
            Register("RDR", 0x40358074, 32, "Receive Data", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("RDROR", 0x40358078, 32, "Receive Data Read Only", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("TCBR", 0x403583FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 32, "Command Data", [
                ]),
            ]),
            Register("TDBR[0]", 0x40358400, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[1]", 0x40358404, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[2]", 0x40358408, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[3]", 0x4035840C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[4]", 0x40358410, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[5]", 0x40358414, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[6]", 0x40358418, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[7]", 0x4035841C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[8]", 0x40358420, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[9]", 0x40358424, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[10]", 0x40358428, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[11]", 0x4035842C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[12]", 0x40358430, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[13]", 0x40358434, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[14]", 0x40358438, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[15]", 0x4035843C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[16]", 0x40358440, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[17]", 0x40358444, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[18]", 0x40358448, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[19]", 0x4035844C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[20]", 0x40358450, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[21]", 0x40358454, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[22]", 0x40358458, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[23]", 0x4035845C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[24]", 0x40358460, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[25]", 0x40358464, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[26]", 0x40358468, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[27]", 0x4035846C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[28]", 0x40358470, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[29]", 0x40358474, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[30]", 0x40358478, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[31]", 0x4035847C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[32]", 0x40358480, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[33]", 0x40358484, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[34]", 0x40358488, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[35]", 0x4035848C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[36]", 0x40358490, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[37]", 0x40358494, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[38]", 0x40358498, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[39]", 0x4035849C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[40]", 0x403584A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[41]", 0x403584A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[42]", 0x403584A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[43]", 0x403584AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[44]", 0x403584B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[45]", 0x403584B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[46]", 0x403584B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[47]", 0x403584BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[48]", 0x403584C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[49]", 0x403584C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[50]", 0x403584C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[51]", 0x403584CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[52]", 0x403584D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[53]", 0x403584D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[54]", 0x403584D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[55]", 0x403584DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[56]", 0x403584E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[57]", 0x403584E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[58]", 0x403584E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[59]", 0x403584EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[60]", 0x403584F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[61]", 0x403584F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[62]", 0x403584F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[63]", 0x403584FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[64]", 0x40358500, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[65]", 0x40358504, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[66]", 0x40358508, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[67]", 0x4035850C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[68]", 0x40358510, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[69]", 0x40358514, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[70]", 0x40358518, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[71]", 0x4035851C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[72]", 0x40358520, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[73]", 0x40358524, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[74]", 0x40358528, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[75]", 0x4035852C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[76]", 0x40358530, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[77]", 0x40358534, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[78]", 0x40358538, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[79]", 0x4035853C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[80]", 0x40358540, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[81]", 0x40358544, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[82]", 0x40358548, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[83]", 0x4035854C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[84]", 0x40358550, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[85]", 0x40358554, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[86]", 0x40358558, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[87]", 0x4035855C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[88]", 0x40358560, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[89]", 0x40358564, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[90]", 0x40358568, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[91]", 0x4035856C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[92]", 0x40358570, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[93]", 0x40358574, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[94]", 0x40358578, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[95]", 0x4035857C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[96]", 0x40358580, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[97]", 0x40358584, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[98]", 0x40358588, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[99]", 0x4035858C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[100]", 0x40358590, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[101]", 0x40358594, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[102]", 0x40358598, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[103]", 0x4035859C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[104]", 0x403585A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[105]", 0x403585A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[106]", 0x403585A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[107]", 0x403585AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[108]", 0x403585B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[109]", 0x403585B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[110]", 0x403585B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[111]", 0x403585BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[112]", 0x403585C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[113]", 0x403585C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[114]", 0x403585C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[115]", 0x403585CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[116]", 0x403585D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[117]", 0x403585D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[118]", 0x403585D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[119]", 0x403585DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[120]", 0x403585E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[121]", 0x403585E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[122]", 0x403585E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[123]", 0x403585EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[124]", 0x403585F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[125]", 0x403585F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[126]", 0x403585F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[127]", 0x403585FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[0]", 0x40358600, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[1]", 0x40358604, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[2]", 0x40358608, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[3]", 0x4035860C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[4]", 0x40358610, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[5]", 0x40358614, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[6]", 0x40358618, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[7]", 0x4035861C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[8]", 0x40358620, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[9]", 0x40358624, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[10]", 0x40358628, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[11]", 0x4035862C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[12]", 0x40358630, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[13]", 0x40358634, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[14]", 0x40358638, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[15]", 0x4035863C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[16]", 0x40358640, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[17]", 0x40358644, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[18]", 0x40358648, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[19]", 0x4035864C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[20]", 0x40358650, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[21]", 0x40358654, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[22]", 0x40358658, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[23]", 0x4035865C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[24]", 0x40358660, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[25]", 0x40358664, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[26]", 0x40358668, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[27]", 0x4035866C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[28]", 0x40358670, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[29]", 0x40358674, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[30]", 0x40358678, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[31]", 0x4035867C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[32]", 0x40358680, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[33]", 0x40358684, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[34]", 0x40358688, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[35]", 0x4035868C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[36]", 0x40358690, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[37]", 0x40358694, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[38]", 0x40358698, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[39]", 0x4035869C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[40]", 0x403586A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[41]", 0x403586A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[42]", 0x403586A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[43]", 0x403586AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[44]", 0x403586B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[45]", 0x403586B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[46]", 0x403586B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[47]", 0x403586BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[48]", 0x403586C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[49]", 0x403586C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[50]", 0x403586C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[51]", 0x403586CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[52]", 0x403586D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[53]", 0x403586D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[54]", 0x403586D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[55]", 0x403586DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[56]", 0x403586E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[57]", 0x403586E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[58]", 0x403586E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[59]", 0x403586EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[60]", 0x403586F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[61]", 0x403586F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[62]", 0x403586F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[63]", 0x403586FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[64]", 0x40358700, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[65]", 0x40358704, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[66]", 0x40358708, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[67]", 0x4035870C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[68]", 0x40358710, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[69]", 0x40358714, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[70]", 0x40358718, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[71]", 0x4035871C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[72]", 0x40358720, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[73]", 0x40358724, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[74]", 0x40358728, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[75]", 0x4035872C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[76]", 0x40358730, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[77]", 0x40358734, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[78]", 0x40358738, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[79]", 0x4035873C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[80]", 0x40358740, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[81]", 0x40358744, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[82]", 0x40358748, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[83]", 0x4035874C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[84]", 0x40358750, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[85]", 0x40358754, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[86]", 0x40358758, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[87]", 0x4035875C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[88]", 0x40358760, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[89]", 0x40358764, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[90]", 0x40358768, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[91]", 0x4035876C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[92]", 0x40358770, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[93]", 0x40358774, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[94]", 0x40358778, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[95]", 0x4035877C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[96]", 0x40358780, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[97]", 0x40358784, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[98]", 0x40358788, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[99]", 0x4035878C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[100]", 0x40358790, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[101]", 0x40358794, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[102]", 0x40358798, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[103]", 0x4035879C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[104]", 0x403587A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[105]", 0x403587A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[106]", 0x403587A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[107]", 0x403587AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[108]", 0x403587B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[109]", 0x403587B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[110]", 0x403587B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[111]", 0x403587BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[112]", 0x403587C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[113]", 0x403587C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[114]", 0x403587C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[115]", 0x403587CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[116]", 0x403587D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[117]", 0x403587D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[118]", 0x403587D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[119]", 0x403587DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[120]", 0x403587E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[121]", 0x403587E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[122]", 0x403587E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[123]", 0x403587EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[124]", 0x403587F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[125]", 0x403587F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[126]", 0x403587F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[127]", 0x403587FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
        ])

class Module_LPSPI_1(Peripheral):
    def __init__(self):
        super().__init__("LPSPI_1", 0x4035C000, 0x800, [
            Register("VERID", 0x4035C000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Module Identification Number", [
                    EnumVal("STANDARD", "0x4", "Standard feature set supporting a 32-bit shift register."),
                ]),
            ]),
            Register("PARAM", 0x4035C004, 32, "Parameter", [
                Field("PCSNUM", 16, 8, "PCS Number", [
                ]),
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("CR", 0x4035C010, 32, "Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
                Field("MEN", 0, 1, "Module Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
            ]),
            Register("SR", 0x4035C014, 32, "Status", [
                Field("MBF", 24, 1, "Module Busy Flag", [
                    EnumVal("IDLE", "0", "LPSPI is idle"),
                    EnumVal("BUSY", "0x1", "LPSPI is busy"),
                ]),
                Field("DMF", 13, 1, "Data Match Flag", [
                    EnumVal("NO_MATCH", "0", "No match"),
                    EnumVal("MATCH", "0x1", "Match"),
                ]),
                Field("REF", 12, 1, "Receive Error Flag", [
                    EnumVal("NOT_OVERFLOWED", "0", "No overflow"),
                    EnumVal("OVERFLOWED", "0x1", "Overflow"),
                ]),
                Field("TEF", 11, 1, "Transmit Error Flag", [
                    EnumVal("NO_UNDERRUN", "0", "No underrun"),
                    EnumVal("UNDERRUN", "0x1", "Underrun"),
                ]),
                Field("TCF", 10, 1, "Transfer Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("FCF", 9, 1, "Frame Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("WCF", 8, 1, "Word Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("NOTREADY", "0", "Receive data not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TXDATA_NOT_REQST", "0", "Transmit data not requested"),
                    EnumVal("TXDATA_REQST", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("IER", 0x4035C018, 32, "Interrupt Enable", [
                Field("DMIE", 13, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("REIE", 12, 1, "Receive Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TEIE", 11, 1, "Transmit Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TCIE", 10, 1, "Transfer Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FCIE", 9, 1, "Frame Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("WCIE", 8, 1, "Word Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("DER", 0x4035C01C, 32, "DMA Enable", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR0", 0x4035C020, 32, "Configuration 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("STORED", "0", "Disable"),
                    EnumVal("DISCARDED", "0x1", "Enable"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("HRDIR", 3, 1, "Host Request Direction", [
                    EnumVal("INPUT", "0", "Input"),
                    EnumVal("OUTPUT", "0x1", "Output"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HREQPIN", "0", "HREQ pin"),
                    EnumVal("INPUT_TRIGGER", "0x1", "Input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("DISABLED", "0", "Active high"),
                    EnumVal("ENABLED", "0x1", "Active low"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR1", 0x4035C024, 32, "Configuration 1", [
                Field("PCSCFG", 27, 1, "Peripheral Chip Select Configuration", [
                    EnumVal("CHIP_SELECT", "0", "PCS[5:2] are configured for chip select function"),
                    EnumVal("HALFDUPLEX4BIT", "0x1", "PCS[3:2] are configured for half-duplex 4-bit transfers (PCS[3:2] = DATA[3:2])"),
                ]),
                Field("OUTCFG", 26, 1, "Output Configuration", [
                    EnumVal("RETAIN_LASTVALUE", "0", "Output data retains last value."),
                    EnumVal("TRISTATED", "0x1", "Output data is 3-stated."),
                ]),
                Field("PINCFG", 24, 2, "Pin Configuration", [
                    EnumVal("SIN_IN_SOUT_OUT", "0", "SIN is used for input data; SOUT is used for output data."),
                    EnumVal("SIN_BOTH_IN_OUT", "0x1", "SIN is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_BOTH_IN_OUT", "0x2", "SOUT is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_IN_SIN_OUT", "0x3", "SOUT is used for input data; SIN is used for output data."),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("ENABLED_FIRSTDATAMATCH", "0x2", "Match first data word with compare word"),
                    EnumVal("ENABLED_ANYDATAMATCH", "0x3", "Match any data word with compare word"),
                    EnumVal("ENABLED_DATAMATCH_100", "0x4", "Sequential match, first data word"),
                    EnumVal("ENABLED_DATAMATCH_101", "0x5", "Sequential match, any data word"),
                    EnumVal("ENABLED_DATAMATCH_110", "0x6", "Match first data word (masked) with compare word (masked)"),
                    EnumVal("ENABLED_DATAMATCH_111", "0x7", "Match any data word (masked) with compare word (masked)"),
                ]),
                Field("PCSPOL", 8, 6, "Peripheral Chip Select Polarity", [
                ]),
                Field("PARTIAL", 4, 1, "Partial Enable", [
                    EnumVal("DISCARDED", "0", "Discard"),
                    EnumVal("STORED", "0x1", "Store"),
                ]),
                Field("NOSTALL", 3, 1, "No Stall", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("AUTOPCS", 2, 1, "Automatic PCS", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("SAMPLE", 1, 1, "Sample Point", [
                    EnumVal("ON_SCK_EDGE", "0", "SCK edge"),
                    EnumVal("ON_DELAYED_SCK_EDGE", "0x1", "Delayed SCK edge"),
                ]),
                Field("MASTER", 0, 1, "Master Mode", [
                    EnumVal("SLAVE_MODE", "0", "Slave mode"),
                    EnumVal("MASTER_MODE", "0x1", "Master mode"),
                ]),
            ]),
            Register("DMR0", 0x4035C030, 32, "Data Match 0", [
                Field("MATCH0", 0, 32, "Match 0 Value", [
                ]),
            ]),
            Register("DMR1", 0x4035C034, 32, "Data Match 1", [
                Field("MATCH1", 0, 32, "Match 1 Value", [
                ]),
            ]),
            Register("CCR", 0x4035C040, 32, "Clock Configuration", [
                Field("SCKPCS", 24, 8, "SCK-to-PCS Delay", [
                ]),
                Field("PCSSCK", 16, 8, "PCS-to-SCK Delay", [
                ]),
                Field("DBT", 8, 8, "Delay Between Transfers", [
                ]),
                Field("SCKDIV", 0, 8, "SCK Divider", [
                ]),
            ]),
            Register("CCR1", 0x4035C044, 32, "Clock Configuration 1", [
                Field("SCKSCK", 24, 8, "SCK Inter-Frame Delay", [
                ]),
                Field("PCSPCS", 16, 8, "PCS to PCS delay", [
                ]),
                Field("SCKHLD", 8, 8, "SCK Hold", [
                ]),
                Field("SCKSET", 0, 8, "SCK Setup", [
                ]),
            ]),
            Register("FCR", 0x4035C058, 32, "FIFO Control", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("FSR", 0x4035C05C, 32, "FIFO Status", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("TCR", 0x4035C060, 32, "Transmit Command", [
                Field("CPOL", 31, 1, "Clock Polarity", [
                    EnumVal("INACTIVE_LOW", "0", "Inactive low"),
                    EnumVal("INACTIVE_HIGH", "0x1", "Inactive high"),
                ]),
                Field("CPHA", 30, 1, "Clock Phase", [
                    EnumVal("CAPTURED", "0", "Captured"),
                    EnumVal("CHANGED", "0x1", "Changed"),
                ]),
                Field("PRESCALE", 27, 3, "Prescaler Value", [
                    EnumVal("DIVIDEBY1", "0", "Divide by 1"),
                    EnumVal("DIVIDEBY2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDEBY4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDEBY8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDEBY16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDEBY32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDEBY64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDEBY128", "0x7", "Divide by 128"),
                ]),
                Field("PCS", 24, 3, "Peripheral Chip Select", [
                    EnumVal("TX_PCS0", "0", "Transfer using PCS[0]"),
                    EnumVal("TX_PCS1", "0x1", "Transfer using PCS[1]"),
                    EnumVal("TX_PCS2", "0x2", "Transfer using PCS[2]"),
                    EnumVal("TX_PCS3", "0x3", "Transfer using PCS[3]"),
                    EnumVal("TX_PCS4", "0x4", "Transfer using PCS[4]"),
                    EnumVal("TX_PCS5", "0x5", "Transfer using PCS[5]"),
                ]),
                Field("LSBF", 23, 1, "LSB First", [
                    EnumVal("MSB_FIRST", "0", "Data is transferred MSB first"),
                    EnumVal("LSB_FIRST", "0x1", "Data is transferred LSB first"),
                ]),
                Field("BYSW", 22, 1, "Byte Swap", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("CONT", 21, 1, "Continuous Transfer", [
                    EnumVal("DISABLED", "0", "Continuous transfer is disabled"),
                    EnumVal("ENABLED", "0x1", "Continuous transfer is enabled"),
                ]),
                Field("CONTC", 20, 1, "Continuing Command", [
                    EnumVal("START", "0", "Command word for start of new transfer"),
                    EnumVal("CONTINUE", "0x1", "Command word for continuing transfer"),
                ]),
                Field("RXMSK", 19, 1, "Receive Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Receive data is masked"),
                ]),
                Field("TXMSK", 18, 1, "Transmit Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Mask transmit data"),
                ]),
                Field("WIDTH", 16, 2, "Transfer Width", [
                    EnumVal("ONEBIT", "0", "1-bit transfer"),
                    EnumVal("TWOBIT", "0x1", "2-bit transfer"),
                    EnumVal("FOURBIT", "0x2", "4-bit transfer"),
                ]),
                Field("FRAMESZ", 0, 12, "Frame Size", [
                ]),
            ]),
            Register("TDR", 0x4035C064, 32, "Transmit Data", [
                Field("DATA", 0, 32, "Transmit Data", [
                ]),
            ]),
            Register("RSR", 0x4035C070, 32, "Receive Status", [
                Field("RXEMPTY", 1, 1, "RX FIFO Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("SOF", 0, 1, "Start Of Frame", [
                    EnumVal("NEXT_DATAWORD", "0", "Subsequent data word"),
                    EnumVal("FIRST_DATAWORD", "0x1", "First data word"),
                ]),
            ]),
            Register("RDR", 0x4035C074, 32, "Receive Data", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("RDROR", 0x4035C078, 32, "Receive Data Read Only", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("TCBR", 0x4035C3FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 32, "Command Data", [
                ]),
            ]),
            Register("TDBR[0]", 0x4035C400, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[1]", 0x4035C404, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[2]", 0x4035C408, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[3]", 0x4035C40C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[4]", 0x4035C410, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[5]", 0x4035C414, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[6]", 0x4035C418, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[7]", 0x4035C41C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[8]", 0x4035C420, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[9]", 0x4035C424, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[10]", 0x4035C428, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[11]", 0x4035C42C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[12]", 0x4035C430, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[13]", 0x4035C434, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[14]", 0x4035C438, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[15]", 0x4035C43C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[16]", 0x4035C440, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[17]", 0x4035C444, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[18]", 0x4035C448, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[19]", 0x4035C44C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[20]", 0x4035C450, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[21]", 0x4035C454, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[22]", 0x4035C458, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[23]", 0x4035C45C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[24]", 0x4035C460, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[25]", 0x4035C464, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[26]", 0x4035C468, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[27]", 0x4035C46C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[28]", 0x4035C470, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[29]", 0x4035C474, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[30]", 0x4035C478, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[31]", 0x4035C47C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[32]", 0x4035C480, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[33]", 0x4035C484, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[34]", 0x4035C488, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[35]", 0x4035C48C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[36]", 0x4035C490, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[37]", 0x4035C494, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[38]", 0x4035C498, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[39]", 0x4035C49C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[40]", 0x4035C4A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[41]", 0x4035C4A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[42]", 0x4035C4A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[43]", 0x4035C4AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[44]", 0x4035C4B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[45]", 0x4035C4B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[46]", 0x4035C4B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[47]", 0x4035C4BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[48]", 0x4035C4C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[49]", 0x4035C4C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[50]", 0x4035C4C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[51]", 0x4035C4CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[52]", 0x4035C4D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[53]", 0x4035C4D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[54]", 0x4035C4D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[55]", 0x4035C4DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[56]", 0x4035C4E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[57]", 0x4035C4E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[58]", 0x4035C4E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[59]", 0x4035C4EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[60]", 0x4035C4F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[61]", 0x4035C4F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[62]", 0x4035C4F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[63]", 0x4035C4FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[64]", 0x4035C500, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[65]", 0x4035C504, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[66]", 0x4035C508, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[67]", 0x4035C50C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[68]", 0x4035C510, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[69]", 0x4035C514, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[70]", 0x4035C518, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[71]", 0x4035C51C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[72]", 0x4035C520, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[73]", 0x4035C524, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[74]", 0x4035C528, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[75]", 0x4035C52C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[76]", 0x4035C530, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[77]", 0x4035C534, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[78]", 0x4035C538, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[79]", 0x4035C53C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[80]", 0x4035C540, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[81]", 0x4035C544, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[82]", 0x4035C548, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[83]", 0x4035C54C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[84]", 0x4035C550, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[85]", 0x4035C554, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[86]", 0x4035C558, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[87]", 0x4035C55C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[88]", 0x4035C560, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[89]", 0x4035C564, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[90]", 0x4035C568, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[91]", 0x4035C56C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[92]", 0x4035C570, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[93]", 0x4035C574, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[94]", 0x4035C578, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[95]", 0x4035C57C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[96]", 0x4035C580, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[97]", 0x4035C584, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[98]", 0x4035C588, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[99]", 0x4035C58C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[100]", 0x4035C590, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[101]", 0x4035C594, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[102]", 0x4035C598, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[103]", 0x4035C59C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[104]", 0x4035C5A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[105]", 0x4035C5A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[106]", 0x4035C5A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[107]", 0x4035C5AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[108]", 0x4035C5B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[109]", 0x4035C5B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[110]", 0x4035C5B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[111]", 0x4035C5BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[112]", 0x4035C5C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[113]", 0x4035C5C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[114]", 0x4035C5C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[115]", 0x4035C5CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[116]", 0x4035C5D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[117]", 0x4035C5D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[118]", 0x4035C5D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[119]", 0x4035C5DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[120]", 0x4035C5E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[121]", 0x4035C5E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[122]", 0x4035C5E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[123]", 0x4035C5EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[124]", 0x4035C5F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[125]", 0x4035C5F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[126]", 0x4035C5F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[127]", 0x4035C5FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[0]", 0x4035C600, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[1]", 0x4035C604, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[2]", 0x4035C608, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[3]", 0x4035C60C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[4]", 0x4035C610, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[5]", 0x4035C614, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[6]", 0x4035C618, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[7]", 0x4035C61C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[8]", 0x4035C620, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[9]", 0x4035C624, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[10]", 0x4035C628, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[11]", 0x4035C62C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[12]", 0x4035C630, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[13]", 0x4035C634, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[14]", 0x4035C638, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[15]", 0x4035C63C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[16]", 0x4035C640, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[17]", 0x4035C644, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[18]", 0x4035C648, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[19]", 0x4035C64C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[20]", 0x4035C650, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[21]", 0x4035C654, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[22]", 0x4035C658, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[23]", 0x4035C65C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[24]", 0x4035C660, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[25]", 0x4035C664, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[26]", 0x4035C668, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[27]", 0x4035C66C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[28]", 0x4035C670, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[29]", 0x4035C674, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[30]", 0x4035C678, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[31]", 0x4035C67C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[32]", 0x4035C680, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[33]", 0x4035C684, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[34]", 0x4035C688, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[35]", 0x4035C68C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[36]", 0x4035C690, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[37]", 0x4035C694, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[38]", 0x4035C698, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[39]", 0x4035C69C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[40]", 0x4035C6A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[41]", 0x4035C6A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[42]", 0x4035C6A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[43]", 0x4035C6AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[44]", 0x4035C6B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[45]", 0x4035C6B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[46]", 0x4035C6B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[47]", 0x4035C6BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[48]", 0x4035C6C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[49]", 0x4035C6C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[50]", 0x4035C6C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[51]", 0x4035C6CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[52]", 0x4035C6D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[53]", 0x4035C6D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[54]", 0x4035C6D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[55]", 0x4035C6DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[56]", 0x4035C6E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[57]", 0x4035C6E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[58]", 0x4035C6E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[59]", 0x4035C6EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[60]", 0x4035C6F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[61]", 0x4035C6F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[62]", 0x4035C6F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[63]", 0x4035C6FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[64]", 0x4035C700, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[65]", 0x4035C704, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[66]", 0x4035C708, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[67]", 0x4035C70C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[68]", 0x4035C710, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[69]", 0x4035C714, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[70]", 0x4035C718, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[71]", 0x4035C71C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[72]", 0x4035C720, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[73]", 0x4035C724, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[74]", 0x4035C728, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[75]", 0x4035C72C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[76]", 0x4035C730, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[77]", 0x4035C734, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[78]", 0x4035C738, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[79]", 0x4035C73C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[80]", 0x4035C740, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[81]", 0x4035C744, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[82]", 0x4035C748, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[83]", 0x4035C74C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[84]", 0x4035C750, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[85]", 0x4035C754, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[86]", 0x4035C758, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[87]", 0x4035C75C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[88]", 0x4035C760, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[89]", 0x4035C764, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[90]", 0x4035C768, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[91]", 0x4035C76C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[92]", 0x4035C770, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[93]", 0x4035C774, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[94]", 0x4035C778, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[95]", 0x4035C77C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[96]", 0x4035C780, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[97]", 0x4035C784, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[98]", 0x4035C788, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[99]", 0x4035C78C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[100]", 0x4035C790, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[101]", 0x4035C794, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[102]", 0x4035C798, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[103]", 0x4035C79C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[104]", 0x4035C7A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[105]", 0x4035C7A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[106]", 0x4035C7A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[107]", 0x4035C7AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[108]", 0x4035C7B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[109]", 0x4035C7B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[110]", 0x4035C7B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[111]", 0x4035C7BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[112]", 0x4035C7C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[113]", 0x4035C7C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[114]", 0x4035C7C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[115]", 0x4035C7CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[116]", 0x4035C7D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[117]", 0x4035C7D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[118]", 0x4035C7D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[119]", 0x4035C7DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[120]", 0x4035C7E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[121]", 0x4035C7E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[122]", 0x4035C7E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[123]", 0x4035C7EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[124]", 0x4035C7F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[125]", 0x4035C7F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[126]", 0x4035C7F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[127]", 0x4035C7FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
        ])

class Module_LPSPI_2(Peripheral):
    def __init__(self):
        super().__init__("LPSPI_2", 0x40360000, 0x800, [
            Register("VERID", 0x40360000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Module Identification Number", [
                    EnumVal("STANDARD", "0x4", "Standard feature set supporting a 32-bit shift register."),
                ]),
            ]),
            Register("PARAM", 0x40360004, 32, "Parameter", [
                Field("PCSNUM", 16, 8, "PCS Number", [
                ]),
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("CR", 0x40360010, 32, "Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
                Field("MEN", 0, 1, "Module Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
            ]),
            Register("SR", 0x40360014, 32, "Status", [
                Field("MBF", 24, 1, "Module Busy Flag", [
                    EnumVal("IDLE", "0", "LPSPI is idle"),
                    EnumVal("BUSY", "0x1", "LPSPI is busy"),
                ]),
                Field("DMF", 13, 1, "Data Match Flag", [
                    EnumVal("NO_MATCH", "0", "No match"),
                    EnumVal("MATCH", "0x1", "Match"),
                ]),
                Field("REF", 12, 1, "Receive Error Flag", [
                    EnumVal("NOT_OVERFLOWED", "0", "No overflow"),
                    EnumVal("OVERFLOWED", "0x1", "Overflow"),
                ]),
                Field("TEF", 11, 1, "Transmit Error Flag", [
                    EnumVal("NO_UNDERRUN", "0", "No underrun"),
                    EnumVal("UNDERRUN", "0x1", "Underrun"),
                ]),
                Field("TCF", 10, 1, "Transfer Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("FCF", 9, 1, "Frame Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("WCF", 8, 1, "Word Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("NOTREADY", "0", "Receive data not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TXDATA_NOT_REQST", "0", "Transmit data not requested"),
                    EnumVal("TXDATA_REQST", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("IER", 0x40360018, 32, "Interrupt Enable", [
                Field("DMIE", 13, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("REIE", 12, 1, "Receive Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TEIE", 11, 1, "Transmit Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TCIE", 10, 1, "Transfer Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FCIE", 9, 1, "Frame Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("WCIE", 8, 1, "Word Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("DER", 0x4036001C, 32, "DMA Enable", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR0", 0x40360020, 32, "Configuration 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("STORED", "0", "Disable"),
                    EnumVal("DISCARDED", "0x1", "Enable"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("HRDIR", 3, 1, "Host Request Direction", [
                    EnumVal("INPUT", "0", "Input"),
                    EnumVal("OUTPUT", "0x1", "Output"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HREQPIN", "0", "HREQ pin"),
                    EnumVal("INPUT_TRIGGER", "0x1", "Input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("DISABLED", "0", "Active high"),
                    EnumVal("ENABLED", "0x1", "Active low"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR1", 0x40360024, 32, "Configuration 1", [
                Field("PCSCFG", 27, 1, "Peripheral Chip Select Configuration", [
                    EnumVal("CHIP_SELECT", "0", "PCS[3:2] are configured for chip select function"),
                    EnumVal("HALFDUPLEX4BIT", "0x1", "PCS[3:2] are configured for half-duplex 4-bit transfers (PCS[3:2] = DATA[3:2])"),
                ]),
                Field("OUTCFG", 26, 1, "Output Configuration", [
                    EnumVal("RETAIN_LASTVALUE", "0", "Output data retains last value."),
                    EnumVal("TRISTATED", "0x1", "Output data is 3-stated."),
                ]),
                Field("PINCFG", 24, 2, "Pin Configuration", [
                    EnumVal("SIN_IN_SOUT_OUT", "0", "SIN is used for input data; SOUT is used for output data."),
                    EnumVal("SIN_BOTH_IN_OUT", "0x1", "SIN is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_BOTH_IN_OUT", "0x2", "SOUT is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_IN_SIN_OUT", "0x3", "SOUT is used for input data; SIN is used for output data."),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("ENABLED_FIRSTDATAMATCH", "0x2", "Match first data word with compare word"),
                    EnumVal("ENABLED_ANYDATAMATCH", "0x3", "Match any data word with compare word"),
                    EnumVal("ENABLED_DATAMATCH_100", "0x4", "Sequential match, first data word"),
                    EnumVal("ENABLED_DATAMATCH_101", "0x5", "Sequential match, any data word"),
                    EnumVal("ENABLED_DATAMATCH_110", "0x6", "Match first data word (masked) with compare word (masked)"),
                    EnumVal("ENABLED_DATAMATCH_111", "0x7", "Match any data word (masked) with compare word (masked)"),
                ]),
                Field("PCSPOL", 8, 4, "Peripheral Chip Select Polarity", [
                ]),
                Field("PARTIAL", 4, 1, "Partial Enable", [
                    EnumVal("DISCARDED", "0", "Discard"),
                    EnumVal("STORED", "0x1", "Store"),
                ]),
                Field("NOSTALL", 3, 1, "No Stall", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("AUTOPCS", 2, 1, "Automatic PCS", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("SAMPLE", 1, 1, "Sample Point", [
                    EnumVal("ON_SCK_EDGE", "0", "SCK edge"),
                    EnumVal("ON_DELAYED_SCK_EDGE", "0x1", "Delayed SCK edge"),
                ]),
                Field("MASTER", 0, 1, "Master Mode", [
                    EnumVal("SLAVE_MODE", "0", "Slave mode"),
                    EnumVal("MASTER_MODE", "0x1", "Master mode"),
                ]),
            ]),
            Register("DMR0", 0x40360030, 32, "Data Match 0", [
                Field("MATCH0", 0, 32, "Match 0 Value", [
                ]),
            ]),
            Register("DMR1", 0x40360034, 32, "Data Match 1", [
                Field("MATCH1", 0, 32, "Match 1 Value", [
                ]),
            ]),
            Register("CCR", 0x40360040, 32, "Clock Configuration", [
                Field("SCKPCS", 24, 8, "SCK-to-PCS Delay", [
                ]),
                Field("PCSSCK", 16, 8, "PCS-to-SCK Delay", [
                ]),
                Field("DBT", 8, 8, "Delay Between Transfers", [
                ]),
                Field("SCKDIV", 0, 8, "SCK Divider", [
                ]),
            ]),
            Register("CCR1", 0x40360044, 32, "Clock Configuration 1", [
                Field("SCKSCK", 24, 8, "SCK Inter-Frame Delay", [
                ]),
                Field("PCSPCS", 16, 8, "PCS to PCS delay", [
                ]),
                Field("SCKHLD", 8, 8, "SCK Hold", [
                ]),
                Field("SCKSET", 0, 8, "SCK Setup", [
                ]),
            ]),
            Register("FCR", 0x40360058, 32, "FIFO Control", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("FSR", 0x4036005C, 32, "FIFO Status", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("TCR", 0x40360060, 32, "Transmit Command", [
                Field("CPOL", 31, 1, "Clock Polarity", [
                    EnumVal("INACTIVE_LOW", "0", "Inactive low"),
                    EnumVal("INACTIVE_HIGH", "0x1", "Inactive high"),
                ]),
                Field("CPHA", 30, 1, "Clock Phase", [
                    EnumVal("CAPTURED", "0", "Captured"),
                    EnumVal("CHANGED", "0x1", "Changed"),
                ]),
                Field("PRESCALE", 27, 3, "Prescaler Value", [
                    EnumVal("DIVIDEBY1", "0", "Divide by 1"),
                    EnumVal("DIVIDEBY2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDEBY4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDEBY8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDEBY16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDEBY32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDEBY64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDEBY128", "0x7", "Divide by 128"),
                ]),
                Field("PCS", 24, 2, "Peripheral Chip Select", [
                    EnumVal("TX_PCS0", "0", "Transfer using PCS[0]"),
                    EnumVal("TX_PCS1", "0x1", "Transfer using PCS[1]"),
                    EnumVal("TX_PCS2", "0x2", "Transfer using PCS[2]"),
                    EnumVal("TX_PCS3", "0x3", "Transfer using PCS[3]"),
                ]),
                Field("LSBF", 23, 1, "LSB First", [
                    EnumVal("MSB_FIRST", "0", "Data is transferred MSB first"),
                    EnumVal("LSB_FIRST", "0x1", "Data is transferred LSB first"),
                ]),
                Field("BYSW", 22, 1, "Byte Swap", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("CONT", 21, 1, "Continuous Transfer", [
                    EnumVal("DISABLED", "0", "Continuous transfer is disabled"),
                    EnumVal("ENABLED", "0x1", "Continuous transfer is enabled"),
                ]),
                Field("CONTC", 20, 1, "Continuing Command", [
                    EnumVal("START", "0", "Command word for start of new transfer"),
                    EnumVal("CONTINUE", "0x1", "Command word for continuing transfer"),
                ]),
                Field("RXMSK", 19, 1, "Receive Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Receive data is masked"),
                ]),
                Field("TXMSK", 18, 1, "Transmit Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Mask transmit data"),
                ]),
                Field("WIDTH", 16, 2, "Transfer Width", [
                    EnumVal("ONEBIT", "0", "1-bit transfer"),
                    EnumVal("TWOBIT", "0x1", "2-bit transfer"),
                    EnumVal("FOURBIT", "0x2", "4-bit transfer"),
                ]),
                Field("FRAMESZ", 0, 12, "Frame Size", [
                ]),
            ]),
            Register("TDR", 0x40360064, 32, "Transmit Data", [
                Field("DATA", 0, 32, "Transmit Data", [
                ]),
            ]),
            Register("RSR", 0x40360070, 32, "Receive Status", [
                Field("RXEMPTY", 1, 1, "RX FIFO Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("SOF", 0, 1, "Start Of Frame", [
                    EnumVal("NEXT_DATAWORD", "0", "Subsequent data word"),
                    EnumVal("FIRST_DATAWORD", "0x1", "First data word"),
                ]),
            ]),
            Register("RDR", 0x40360074, 32, "Receive Data", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("RDROR", 0x40360078, 32, "Receive Data Read Only", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("TCBR", 0x403603FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 32, "Command Data", [
                ]),
            ]),
            Register("TDBR[0]", 0x40360400, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[1]", 0x40360404, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[2]", 0x40360408, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[3]", 0x4036040C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[4]", 0x40360410, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[5]", 0x40360414, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[6]", 0x40360418, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[7]", 0x4036041C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[8]", 0x40360420, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[9]", 0x40360424, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[10]", 0x40360428, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[11]", 0x4036042C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[12]", 0x40360430, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[13]", 0x40360434, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[14]", 0x40360438, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[15]", 0x4036043C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[16]", 0x40360440, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[17]", 0x40360444, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[18]", 0x40360448, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[19]", 0x4036044C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[20]", 0x40360450, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[21]", 0x40360454, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[22]", 0x40360458, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[23]", 0x4036045C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[24]", 0x40360460, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[25]", 0x40360464, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[26]", 0x40360468, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[27]", 0x4036046C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[28]", 0x40360470, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[29]", 0x40360474, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[30]", 0x40360478, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[31]", 0x4036047C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[32]", 0x40360480, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[33]", 0x40360484, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[34]", 0x40360488, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[35]", 0x4036048C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[36]", 0x40360490, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[37]", 0x40360494, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[38]", 0x40360498, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[39]", 0x4036049C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[40]", 0x403604A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[41]", 0x403604A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[42]", 0x403604A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[43]", 0x403604AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[44]", 0x403604B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[45]", 0x403604B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[46]", 0x403604B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[47]", 0x403604BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[48]", 0x403604C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[49]", 0x403604C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[50]", 0x403604C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[51]", 0x403604CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[52]", 0x403604D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[53]", 0x403604D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[54]", 0x403604D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[55]", 0x403604DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[56]", 0x403604E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[57]", 0x403604E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[58]", 0x403604E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[59]", 0x403604EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[60]", 0x403604F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[61]", 0x403604F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[62]", 0x403604F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[63]", 0x403604FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[64]", 0x40360500, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[65]", 0x40360504, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[66]", 0x40360508, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[67]", 0x4036050C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[68]", 0x40360510, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[69]", 0x40360514, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[70]", 0x40360518, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[71]", 0x4036051C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[72]", 0x40360520, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[73]", 0x40360524, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[74]", 0x40360528, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[75]", 0x4036052C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[76]", 0x40360530, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[77]", 0x40360534, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[78]", 0x40360538, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[79]", 0x4036053C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[80]", 0x40360540, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[81]", 0x40360544, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[82]", 0x40360548, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[83]", 0x4036054C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[84]", 0x40360550, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[85]", 0x40360554, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[86]", 0x40360558, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[87]", 0x4036055C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[88]", 0x40360560, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[89]", 0x40360564, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[90]", 0x40360568, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[91]", 0x4036056C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[92]", 0x40360570, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[93]", 0x40360574, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[94]", 0x40360578, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[95]", 0x4036057C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[96]", 0x40360580, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[97]", 0x40360584, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[98]", 0x40360588, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[99]", 0x4036058C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[100]", 0x40360590, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[101]", 0x40360594, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[102]", 0x40360598, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[103]", 0x4036059C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[104]", 0x403605A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[105]", 0x403605A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[106]", 0x403605A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[107]", 0x403605AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[108]", 0x403605B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[109]", 0x403605B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[110]", 0x403605B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[111]", 0x403605BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[112]", 0x403605C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[113]", 0x403605C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[114]", 0x403605C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[115]", 0x403605CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[116]", 0x403605D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[117]", 0x403605D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[118]", 0x403605D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[119]", 0x403605DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[120]", 0x403605E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[121]", 0x403605E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[122]", 0x403605E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[123]", 0x403605EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[124]", 0x403605F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[125]", 0x403605F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[126]", 0x403605F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[127]", 0x403605FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[0]", 0x40360600, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[1]", 0x40360604, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[2]", 0x40360608, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[3]", 0x4036060C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[4]", 0x40360610, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[5]", 0x40360614, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[6]", 0x40360618, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[7]", 0x4036061C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[8]", 0x40360620, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[9]", 0x40360624, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[10]", 0x40360628, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[11]", 0x4036062C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[12]", 0x40360630, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[13]", 0x40360634, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[14]", 0x40360638, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[15]", 0x4036063C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[16]", 0x40360640, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[17]", 0x40360644, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[18]", 0x40360648, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[19]", 0x4036064C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[20]", 0x40360650, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[21]", 0x40360654, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[22]", 0x40360658, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[23]", 0x4036065C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[24]", 0x40360660, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[25]", 0x40360664, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[26]", 0x40360668, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[27]", 0x4036066C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[28]", 0x40360670, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[29]", 0x40360674, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[30]", 0x40360678, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[31]", 0x4036067C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[32]", 0x40360680, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[33]", 0x40360684, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[34]", 0x40360688, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[35]", 0x4036068C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[36]", 0x40360690, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[37]", 0x40360694, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[38]", 0x40360698, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[39]", 0x4036069C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[40]", 0x403606A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[41]", 0x403606A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[42]", 0x403606A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[43]", 0x403606AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[44]", 0x403606B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[45]", 0x403606B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[46]", 0x403606B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[47]", 0x403606BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[48]", 0x403606C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[49]", 0x403606C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[50]", 0x403606C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[51]", 0x403606CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[52]", 0x403606D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[53]", 0x403606D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[54]", 0x403606D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[55]", 0x403606DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[56]", 0x403606E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[57]", 0x403606E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[58]", 0x403606E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[59]", 0x403606EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[60]", 0x403606F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[61]", 0x403606F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[62]", 0x403606F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[63]", 0x403606FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[64]", 0x40360700, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[65]", 0x40360704, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[66]", 0x40360708, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[67]", 0x4036070C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[68]", 0x40360710, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[69]", 0x40360714, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[70]", 0x40360718, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[71]", 0x4036071C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[72]", 0x40360720, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[73]", 0x40360724, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[74]", 0x40360728, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[75]", 0x4036072C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[76]", 0x40360730, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[77]", 0x40360734, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[78]", 0x40360738, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[79]", 0x4036073C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[80]", 0x40360740, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[81]", 0x40360744, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[82]", 0x40360748, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[83]", 0x4036074C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[84]", 0x40360750, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[85]", 0x40360754, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[86]", 0x40360758, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[87]", 0x4036075C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[88]", 0x40360760, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[89]", 0x40360764, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[90]", 0x40360768, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[91]", 0x4036076C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[92]", 0x40360770, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[93]", 0x40360774, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[94]", 0x40360778, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[95]", 0x4036077C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[96]", 0x40360780, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[97]", 0x40360784, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[98]", 0x40360788, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[99]", 0x4036078C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[100]", 0x40360790, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[101]", 0x40360794, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[102]", 0x40360798, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[103]", 0x4036079C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[104]", 0x403607A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[105]", 0x403607A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[106]", 0x403607A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[107]", 0x403607AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[108]", 0x403607B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[109]", 0x403607B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[110]", 0x403607B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[111]", 0x403607BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[112]", 0x403607C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[113]", 0x403607C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[114]", 0x403607C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[115]", 0x403607CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[116]", 0x403607D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[117]", 0x403607D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[118]", 0x403607D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[119]", 0x403607DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[120]", 0x403607E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[121]", 0x403607E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[122]", 0x403607E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[123]", 0x403607EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[124]", 0x403607F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[125]", 0x403607F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[126]", 0x403607F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[127]", 0x403607FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
        ])

class Module_LPSPI_3(Peripheral):
    def __init__(self):
        super().__init__("LPSPI_3", 0x40364000, 0x800, [
            Register("VERID", 0x40364000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Module Identification Number", [
                    EnumVal("STANDARD", "0x4", "Standard feature set supporting a 32-bit shift register."),
                ]),
            ]),
            Register("PARAM", 0x40364004, 32, "Parameter", [
                Field("PCSNUM", 16, 8, "PCS Number", [
                ]),
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("CR", 0x40364010, 32, "Control", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "Reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
                Field("MEN", 0, 1, "Module Enable", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
            ]),
            Register("SR", 0x40364014, 32, "Status", [
                Field("MBF", 24, 1, "Module Busy Flag", [
                    EnumVal("IDLE", "0", "LPSPI is idle"),
                    EnumVal("BUSY", "0x1", "LPSPI is busy"),
                ]),
                Field("DMF", 13, 1, "Data Match Flag", [
                    EnumVal("NO_MATCH", "0", "No match"),
                    EnumVal("MATCH", "0x1", "Match"),
                ]),
                Field("REF", 12, 1, "Receive Error Flag", [
                    EnumVal("NOT_OVERFLOWED", "0", "No overflow"),
                    EnumVal("OVERFLOWED", "0x1", "Overflow"),
                ]),
                Field("TEF", 11, 1, "Transmit Error Flag", [
                    EnumVal("NO_UNDERRUN", "0", "No underrun"),
                    EnumVal("UNDERRUN", "0x1", "Underrun"),
                ]),
                Field("TCF", 10, 1, "Transfer Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("FCF", 9, 1, "Frame Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("WCF", 8, 1, "Word Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Not complete"),
                    EnumVal("COMPLETED", "0x1", "Complete"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("NOTREADY", "0", "Receive data not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TXDATA_NOT_REQST", "0", "Transmit data not requested"),
                    EnumVal("TXDATA_REQST", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("IER", 0x40364018, 32, "Interrupt Enable", [
                Field("DMIE", 13, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("REIE", 12, 1, "Receive Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TEIE", 11, 1, "Transmit Error Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TCIE", 10, 1, "Transfer Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("FCIE", 9, 1, "Frame Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("WCIE", 8, 1, "Word Complete Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("DER", 0x4036401C, 32, "DMA Enable", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR0", 0x40364020, 32, "Configuration 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("STORED", "0", "Disable"),
                    EnumVal("DISCARDED", "0x1", "Enable"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("HRDIR", 3, 1, "Host Request Direction", [
                    EnumVal("INPUT", "0", "Input"),
                    EnumVal("OUTPUT", "0x1", "Output"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HREQPIN", "0", "HREQ pin"),
                    EnumVal("INPUT_TRIGGER", "0x1", "Input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("DISABLED", "0", "Active high"),
                    EnumVal("ENABLED", "0x1", "Active low"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
            ]),
            Register("CFGR1", 0x40364024, 32, "Configuration 1", [
                Field("PCSCFG", 27, 1, "Peripheral Chip Select Configuration", [
                    EnumVal("CHIP_SELECT", "0", "PCS[3:2] are configured for chip select function"),
                    EnumVal("HALFDUPLEX4BIT", "0x1", "PCS[3:2] are configured for half-duplex 4-bit transfers (PCS[3:2] = DATA[3:2])"),
                ]),
                Field("OUTCFG", 26, 1, "Output Configuration", [
                    EnumVal("RETAIN_LASTVALUE", "0", "Output data retains last value."),
                    EnumVal("TRISTATED", "0x1", "Output data is 3-stated."),
                ]),
                Field("PINCFG", 24, 2, "Pin Configuration", [
                    EnumVal("SIN_IN_SOUT_OUT", "0", "SIN is used for input data; SOUT is used for output data."),
                    EnumVal("SIN_BOTH_IN_OUT", "0x1", "SIN is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_BOTH_IN_OUT", "0x2", "SOUT is used for both input and output data. Only half-duplex serial transfers are supported."),
                    EnumVal("SOUT_IN_SIN_OUT", "0x3", "SOUT is used for input data; SIN is used for output data."),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("ENABLED_FIRSTDATAMATCH", "0x2", "Match first data word with compare word"),
                    EnumVal("ENABLED_ANYDATAMATCH", "0x3", "Match any data word with compare word"),
                    EnumVal("ENABLED_DATAMATCH_100", "0x4", "Sequential match, first data word"),
                    EnumVal("ENABLED_DATAMATCH_101", "0x5", "Sequential match, any data word"),
                    EnumVal("ENABLED_DATAMATCH_110", "0x6", "Match first data word (masked) with compare word (masked)"),
                    EnumVal("ENABLED_DATAMATCH_111", "0x7", "Match any data word (masked) with compare word (masked)"),
                ]),
                Field("PCSPOL", 8, 4, "Peripheral Chip Select Polarity", [
                ]),
                Field("PARTIAL", 4, 1, "Partial Enable", [
                    EnumVal("DISCARDED", "0", "Discard"),
                    EnumVal("STORED", "0x1", "Store"),
                ]),
                Field("NOSTALL", 3, 1, "No Stall", [
                    EnumVal("DISABLE", "0", "Disable"),
                    EnumVal("ENABLE", "0x1", "Enable"),
                ]),
                Field("AUTOPCS", 2, 1, "Automatic PCS", [
                    EnumVal("DISABLED", "0", "Disable"),
                    EnumVal("ENABLED", "0x1", "Enable"),
                ]),
                Field("SAMPLE", 1, 1, "Sample Point", [
                    EnumVal("ON_SCK_EDGE", "0", "SCK edge"),
                    EnumVal("ON_DELAYED_SCK_EDGE", "0x1", "Delayed SCK edge"),
                ]),
                Field("MASTER", 0, 1, "Master Mode", [
                    EnumVal("SLAVE_MODE", "0", "Slave mode"),
                    EnumVal("MASTER_MODE", "0x1", "Master mode"),
                ]),
            ]),
            Register("DMR0", 0x40364030, 32, "Data Match 0", [
                Field("MATCH0", 0, 32, "Match 0 Value", [
                ]),
            ]),
            Register("DMR1", 0x40364034, 32, "Data Match 1", [
                Field("MATCH1", 0, 32, "Match 1 Value", [
                ]),
            ]),
            Register("CCR", 0x40364040, 32, "Clock Configuration", [
                Field("SCKPCS", 24, 8, "SCK-to-PCS Delay", [
                ]),
                Field("PCSSCK", 16, 8, "PCS-to-SCK Delay", [
                ]),
                Field("DBT", 8, 8, "Delay Between Transfers", [
                ]),
                Field("SCKDIV", 0, 8, "SCK Divider", [
                ]),
            ]),
            Register("CCR1", 0x40364044, 32, "Clock Configuration 1", [
                Field("SCKSCK", 24, 8, "SCK Inter-Frame Delay", [
                ]),
                Field("PCSPCS", 16, 8, "PCS to PCS delay", [
                ]),
                Field("SCKHLD", 8, 8, "SCK Hold", [
                ]),
                Field("SCKSET", 0, 8, "SCK Setup", [
                ]),
            ]),
            Register("FCR", 0x40364058, 32, "FIFO Control", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("FSR", 0x4036405C, 32, "FIFO Status", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("TCR", 0x40364060, 32, "Transmit Command", [
                Field("CPOL", 31, 1, "Clock Polarity", [
                    EnumVal("INACTIVE_LOW", "0", "Inactive low"),
                    EnumVal("INACTIVE_HIGH", "0x1", "Inactive high"),
                ]),
                Field("CPHA", 30, 1, "Clock Phase", [
                    EnumVal("CAPTURED", "0", "Captured"),
                    EnumVal("CHANGED", "0x1", "Changed"),
                ]),
                Field("PRESCALE", 27, 3, "Prescaler Value", [
                    EnumVal("DIVIDEBY1", "0", "Divide by 1"),
                    EnumVal("DIVIDEBY2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDEBY4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDEBY8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDEBY16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDEBY32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDEBY64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDEBY128", "0x7", "Divide by 128"),
                ]),
                Field("PCS", 24, 2, "Peripheral Chip Select", [
                    EnumVal("TX_PCS0", "0", "Transfer using PCS[0]"),
                    EnumVal("TX_PCS1", "0x1", "Transfer using PCS[1]"),
                    EnumVal("TX_PCS2", "0x2", "Transfer using PCS[2]"),
                    EnumVal("TX_PCS3", "0x3", "Transfer using PCS[3]"),
                ]),
                Field("LSBF", 23, 1, "LSB First", [
                    EnumVal("MSB_FIRST", "0", "Data is transferred MSB first"),
                    EnumVal("LSB_FIRST", "0x1", "Data is transferred LSB first"),
                ]),
                Field("BYSW", 22, 1, "Byte Swap", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("CONT", 21, 1, "Continuous Transfer", [
                    EnumVal("DISABLED", "0", "Continuous transfer is disabled"),
                    EnumVal("ENABLED", "0x1", "Continuous transfer is enabled"),
                ]),
                Field("CONTC", 20, 1, "Continuing Command", [
                    EnumVal("START", "0", "Command word for start of new transfer"),
                    EnumVal("CONTINUE", "0x1", "Command word for continuing transfer"),
                ]),
                Field("RXMSK", 19, 1, "Receive Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Receive data is masked"),
                ]),
                Field("TXMSK", 18, 1, "Transmit Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Mask transmit data"),
                ]),
                Field("WIDTH", 16, 2, "Transfer Width", [
                    EnumVal("ONEBIT", "0", "1-bit transfer"),
                    EnumVal("TWOBIT", "0x1", "2-bit transfer"),
                    EnumVal("FOURBIT", "0x2", "4-bit transfer"),
                ]),
                Field("FRAMESZ", 0, 12, "Frame Size", [
                ]),
            ]),
            Register("TDR", 0x40364064, 32, "Transmit Data", [
                Field("DATA", 0, 32, "Transmit Data", [
                ]),
            ]),
            Register("RSR", 0x40364070, 32, "Receive Status", [
                Field("RXEMPTY", 1, 1, "RX FIFO Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("SOF", 0, 1, "Start Of Frame", [
                    EnumVal("NEXT_DATAWORD", "0", "Subsequent data word"),
                    EnumVal("FIRST_DATAWORD", "0x1", "First data word"),
                ]),
            ]),
            Register("RDR", 0x40364074, 32, "Receive Data", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("RDROR", 0x40364078, 32, "Receive Data Read Only", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
            Register("TCBR", 0x403643FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 32, "Command Data", [
                ]),
            ]),
            Register("TDBR[0]", 0x40364400, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[1]", 0x40364404, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[2]", 0x40364408, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[3]", 0x4036440C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[4]", 0x40364410, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[5]", 0x40364414, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[6]", 0x40364418, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[7]", 0x4036441C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[8]", 0x40364420, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[9]", 0x40364424, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[10]", 0x40364428, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[11]", 0x4036442C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[12]", 0x40364430, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[13]", 0x40364434, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[14]", 0x40364438, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[15]", 0x4036443C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[16]", 0x40364440, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[17]", 0x40364444, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[18]", 0x40364448, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[19]", 0x4036444C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[20]", 0x40364450, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[21]", 0x40364454, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[22]", 0x40364458, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[23]", 0x4036445C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[24]", 0x40364460, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[25]", 0x40364464, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[26]", 0x40364468, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[27]", 0x4036446C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[28]", 0x40364470, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[29]", 0x40364474, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[30]", 0x40364478, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[31]", 0x4036447C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[32]", 0x40364480, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[33]", 0x40364484, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[34]", 0x40364488, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[35]", 0x4036448C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[36]", 0x40364490, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[37]", 0x40364494, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[38]", 0x40364498, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[39]", 0x4036449C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[40]", 0x403644A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[41]", 0x403644A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[42]", 0x403644A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[43]", 0x403644AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[44]", 0x403644B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[45]", 0x403644B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[46]", 0x403644B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[47]", 0x403644BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[48]", 0x403644C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[49]", 0x403644C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[50]", 0x403644C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[51]", 0x403644CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[52]", 0x403644D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[53]", 0x403644D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[54]", 0x403644D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[55]", 0x403644DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[56]", 0x403644E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[57]", 0x403644E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[58]", 0x403644E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[59]", 0x403644EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[60]", 0x403644F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[61]", 0x403644F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[62]", 0x403644F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[63]", 0x403644FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[64]", 0x40364500, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[65]", 0x40364504, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[66]", 0x40364508, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[67]", 0x4036450C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[68]", 0x40364510, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[69]", 0x40364514, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[70]", 0x40364518, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[71]", 0x4036451C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[72]", 0x40364520, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[73]", 0x40364524, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[74]", 0x40364528, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[75]", 0x4036452C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[76]", 0x40364530, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[77]", 0x40364534, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[78]", 0x40364538, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[79]", 0x4036453C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[80]", 0x40364540, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[81]", 0x40364544, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[82]", 0x40364548, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[83]", 0x4036454C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[84]", 0x40364550, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[85]", 0x40364554, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[86]", 0x40364558, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[87]", 0x4036455C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[88]", 0x40364560, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[89]", 0x40364564, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[90]", 0x40364568, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[91]", 0x4036456C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[92]", 0x40364570, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[93]", 0x40364574, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[94]", 0x40364578, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[95]", 0x4036457C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[96]", 0x40364580, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[97]", 0x40364584, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[98]", 0x40364588, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[99]", 0x4036458C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[100]", 0x40364590, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[101]", 0x40364594, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[102]", 0x40364598, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[103]", 0x4036459C, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[104]", 0x403645A0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[105]", 0x403645A4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[106]", 0x403645A8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[107]", 0x403645AC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[108]", 0x403645B0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[109]", 0x403645B4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[110]", 0x403645B8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[111]", 0x403645BC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[112]", 0x403645C0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[113]", 0x403645C4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[114]", 0x403645C8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[115]", 0x403645CC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[116]", 0x403645D0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[117]", 0x403645D4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[118]", 0x403645D8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[119]", 0x403645DC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[120]", 0x403645E0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[121]", 0x403645E4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[122]", 0x403645E8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[123]", 0x403645EC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[124]", 0x403645F0, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[125]", 0x403645F4, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[126]", 0x403645F8, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("TDBR[127]", 0x403645FC, 32, "Transmit Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[0]", 0x40364600, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[1]", 0x40364604, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[2]", 0x40364608, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[3]", 0x4036460C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[4]", 0x40364610, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[5]", 0x40364614, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[6]", 0x40364618, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[7]", 0x4036461C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[8]", 0x40364620, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[9]", 0x40364624, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[10]", 0x40364628, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[11]", 0x4036462C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[12]", 0x40364630, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[13]", 0x40364634, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[14]", 0x40364638, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[15]", 0x4036463C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[16]", 0x40364640, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[17]", 0x40364644, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[18]", 0x40364648, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[19]", 0x4036464C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[20]", 0x40364650, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[21]", 0x40364654, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[22]", 0x40364658, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[23]", 0x4036465C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[24]", 0x40364660, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[25]", 0x40364664, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[26]", 0x40364668, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[27]", 0x4036466C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[28]", 0x40364670, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[29]", 0x40364674, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[30]", 0x40364678, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[31]", 0x4036467C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[32]", 0x40364680, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[33]", 0x40364684, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[34]", 0x40364688, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[35]", 0x4036468C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[36]", 0x40364690, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[37]", 0x40364694, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[38]", 0x40364698, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[39]", 0x4036469C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[40]", 0x403646A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[41]", 0x403646A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[42]", 0x403646A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[43]", 0x403646AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[44]", 0x403646B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[45]", 0x403646B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[46]", 0x403646B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[47]", 0x403646BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[48]", 0x403646C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[49]", 0x403646C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[50]", 0x403646C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[51]", 0x403646CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[52]", 0x403646D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[53]", 0x403646D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[54]", 0x403646D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[55]", 0x403646DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[56]", 0x403646E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[57]", 0x403646E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[58]", 0x403646E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[59]", 0x403646EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[60]", 0x403646F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[61]", 0x403646F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[62]", 0x403646F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[63]", 0x403646FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[64]", 0x40364700, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[65]", 0x40364704, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[66]", 0x40364708, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[67]", 0x4036470C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[68]", 0x40364710, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[69]", 0x40364714, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[70]", 0x40364718, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[71]", 0x4036471C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[72]", 0x40364720, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[73]", 0x40364724, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[74]", 0x40364728, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[75]", 0x4036472C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[76]", 0x40364730, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[77]", 0x40364734, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[78]", 0x40364738, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[79]", 0x4036473C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[80]", 0x40364740, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[81]", 0x40364744, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[82]", 0x40364748, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[83]", 0x4036474C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[84]", 0x40364750, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[85]", 0x40364754, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[86]", 0x40364758, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[87]", 0x4036475C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[88]", 0x40364760, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[89]", 0x40364764, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[90]", 0x40364768, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[91]", 0x4036476C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[92]", 0x40364770, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[93]", 0x40364774, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[94]", 0x40364778, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[95]", 0x4036477C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[96]", 0x40364780, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[97]", 0x40364784, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[98]", 0x40364788, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[99]", 0x4036478C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[100]", 0x40364790, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[101]", 0x40364794, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[102]", 0x40364798, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[103]", 0x4036479C, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[104]", 0x403647A0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[105]", 0x403647A4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[106]", 0x403647A8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[107]", 0x403647AC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[108]", 0x403647B0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[109]", 0x403647B4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[110]", 0x403647B8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[111]", 0x403647BC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[112]", 0x403647C0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[113]", 0x403647C4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[114]", 0x403647C8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[115]", 0x403647CC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[116]", 0x403647D0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[117]", 0x403647D4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[118]", 0x403647D8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[119]", 0x403647DC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[120]", 0x403647E0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[121]", 0x403647E4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[122]", 0x403647E8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[123]", 0x403647EC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[124]", 0x403647F0, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[125]", 0x403647F4, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[126]", 0x403647F8, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
            Register("RDBR[127]", 0x403647FC, 32, "Receive Data Burst", [
                Field("DATA", 0, 32, "Data", [
                ]),
            ]),
        ])

class Module_LPUART_0(Peripheral):
    def __init__(self):
        super().__init__("LPUART_0", 0x40328000, 0x800, [
            Register("VERID", 0x40328000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Identification Number", [
                    EnumVal("STANDARD", "0x1", "Standard feature set"),
                    EnumVal("MODEM", "0x3", "Standard feature set with MODEM and IrDA support"),
                    EnumVal("MODEM_IDLE", "0x7", "Enhanced feature set with full MODEM, IrDA, and enhanced idle detection"),
                ]),
            ]),
            Register("PARAM", 0x40328004, 32, "Parameter", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("GLOBAL", 0x40328008, 32, "Global", [
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NO_EFFECT", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
            ]),
            Register("PINCFG", 0x4032800C, 32, "Pin Configuration", [
                Field("TRGSEL", 0, 2, "Trigger Select", [
                    EnumVal("DISABLED", "0", "Input trigger disabled"),
                    EnumVal("TRG_RXD", "0x1", "Input trigger used instead of the RXD pin input"),
                    EnumVal("TRG_CTS", "0x2", "Input trigger used instead of the CTS_B pin input"),
                    EnumVal("TRG_TXD", "0x3", "Input trigger used to modulate the TXD pin output, which (after TXINV configuration) is internally ANDed with the input trigger"),
                ]),
            ]),
            Register("BAUD", 0x40328010, 32, "Baud Rate", [
                Field("MAEN1", 31, 1, "Match Address Mode Enable 1", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MAEN2", 30, 1, "Match Address Mode Enable 2", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M10", 29, 1, "10-Bit Mode Select", [
                    EnumVal("DISABLED", "0", "Receiver and transmitter use 7-bit to 9-bit data characters"),
                    EnumVal("ENABLED", "0x1", "Receiver and transmitter use 10-bit data characters"),
                ]),
                Field("OSR", 24, 5, "Oversampling Ratio (OSR)", [
                    EnumVal("DEFAULT", "0", "Results in an OSR of 16"),
                    EnumVal("OSR_4", "0x3", "Results in an OSR of 4 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_5", "0x4", "Results in an OSR of 5 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_6", "0x5", "Results in an OSR of 6 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_7", "0x6", "Results in an OSR of 7 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_8", "0x7", "Results in an OSR of 8"),
                    EnumVal("OSR_9", "0x8", "Results in an OSR of 9"),
                    EnumVal("OSR_10", "0x9", "Results in an OSR of 10"),
                    EnumVal("OSR_11", "0xA", "Results in an OSR of 11"),
                    EnumVal("OSR_12", "0xB", "Results in an OSR of 12"),
                    EnumVal("OSR_13", "0xC", "Results in an OSR of 13"),
                    EnumVal("OSR_14", "0xD", "Results in an OSR of 14"),
                    EnumVal("OSR_15", "0xE", "Results in an OSR of 15"),
                    EnumVal("OSR_16", "0xF", "Results in an OSR of 16"),
                    EnumVal("OSR_17", "0x10", "Results in an OSR of 17"),
                    EnumVal("OSR_18", "0x11", "Results in an OSR of 18"),
                    EnumVal("OSR_19", "0x12", "Results in an OSR of 19"),
                    EnumVal("OSR_20", "0x13", "Results in an OSR of 20"),
                    EnumVal("OSR_21", "0x14", "Results in an OSR of 21"),
                    EnumVal("OSR_22", "0x15", "Results in an OSR of 22"),
                    EnumVal("OSR_23", "0x16", "Results in an OSR of 23"),
                    EnumVal("OSR_24", "0x17", "Results in an OSR of 24"),
                    EnumVal("OSR_25", "0x18", "Results in an OSR of 25"),
                    EnumVal("OSR_26", "0x19", "Results in an OSR of 26"),
                    EnumVal("OSR_27", "0x1A", "Results in an OSR of 27"),
                    EnumVal("OSR_28", "0x1B", "Results in an OSR of 28"),
                    EnumVal("OSR_29", "0x1C", "Results in an OSR of 29"),
                    EnumVal("OSR_30", "0x1D", "Results in an OSR of 30"),
                    EnumVal("OSR_31", "0x1E", "Results in an OSR of 31"),
                    EnumVal("OSR_32", "0x1F", "Results in an OSR of 32"),
                ]),
                Field("TDMAE", 23, 1, "Transmitter DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("RDMAE", 21, 1, "Receiver Full DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("MATCFG", 18, 2, "Match Configuration", [
                    EnumVal("ADDR_MATCH", "0", "Address match wakeup"),
                    EnumVal("IDLE_MATCH", "0x1", "Idle match wakeup"),
                    EnumVal("ONOFF_MATCH", "0x2", "Match on and match off"),
                    EnumVal("RWU_MATCH", "0x3", "Enables RWU on data match and match on/off for the transmitter CTS input"),
                ]),
                Field("BOTHEDGE", 17, 1, "Both Edge Sampling", [
                    EnumVal("DISABLED", "0", "Receiver samples input data using the rising edge of the baud rate clock"),
                    EnumVal("ENABLED", "0x1", "Receiver samples input data using the rising and falling edges of the baud rate clock"),
                ]),
                Field("RESYNCDIS", 16, 1, "Resynchronization Disable", [
                    EnumVal("RESYNC", "0", "Enables resynchronization"),
                    EnumVal("NO_RESYNC", "0x1", "Disables resynchronization"),
                ]),
                Field("LBKDIE", 15, 1, "LIN Break Detect Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[LBKDIF] (uses polling)"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupt when STAT[LBKDIF] is 1"),
                ]),
                Field("RXEDGIE", 14, 1, "RX Input Active Edge Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[RXEDGIF]"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupts when STAT[RXEDGIF] is 1"),
                ]),
                Field("SBNS", 13, 1, "Stop Bit Number Select", [
                    EnumVal("ONE", "0", "One stop bit"),
                    EnumVal("TWO", "0x1", "Two stop bits"),
                ]),
                Field("SBR", 0, 13, "Baud Rate Modulo Divisor", [
                ]),
            ]),
            Register("STAT", 0x40328014, 32, "Status", [
                Field("LBKDIF", 31, 1, "LIN Break Detect Interrupt Flag", [
                    EnumVal("NOT_DETECTED", "0", "Not detected"),
                    EnumVal("DETECTED", "0x1", "Detected"),
                ]),
                Field("RXEDGIF", 30, 1, "RXD Pin Active Edge Interrupt Flag", [
                    EnumVal("NO_EDGE", "0", "Not occurred"),
                    EnumVal("EDGE", "0x1", "Occurred"),
                ]),
                Field("MSBF", 29, 1, "MSB First", [
                    EnumVal("LSB_FIRST", "0", "LSB"),
                    EnumVal("MSB_FIRST", "0x1", "MSB"),
                ]),
                Field("RXINV", 28, 1, "Receive Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Inverted"),
                    EnumVal("INVERTED", "0x1", "Not inverted"),
                ]),
                Field("RWUID", 27, 1, "Receive Wake Up Idle Detect", [
                    EnumVal("IDLE_NOTSET", "0", "STAT[IDLE] does not become 1"),
                    EnumVal("IDLE_SET", "0x1", "STAT[IDLE] becomes 1"),
                ]),
                Field("BRK13", 26, 1, "Break Character Generation Length", [
                    EnumVal("SHORT", "0", "9 to 13 bit times"),
                    EnumVal("LONG", "0x1", "12 to 15 bit times"),
                ]),
                Field("LBKDE", 25, 1, "LIN Break Detection Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RAF", 24, 1, "Receiver Active Flag", [
                    EnumVal("IDLE", "0", "Idle, waiting for a start bit"),
                    EnumVal("ACTIVE", "0x1", "Receiver active (RXD pin input not idle)"),
                ]),
                Field("TDRE", 23, 1, "Transmit Data Register Empty Flag", [
                    EnumVal("TXDATA", "0", "Greater than watermark"),
                    EnumVal("NO_TXDATA", "0x1", "Equal to or less than watermark"),
                ]),
                Field("TC", 22, 1, "Transmission Complete Flag", [
                    EnumVal("ACTIVE", "0", "Transmitter active (sending data, a preamble, or a break)"),
                    EnumVal("COMPLETE", "0x1", "Transmitter idle (transmission activity complete)"),
                ]),
                Field("RDRF", 21, 1, "Receive Data Register Full Flag", [
                    EnumVal("NO_RXDATA", "0", "Equal to or less than watermark"),
                    EnumVal("RXDATA", "0x1", "Greater than watermark"),
                ]),
                Field("IDLE", 20, 1, "Idle Line Flag", [
                    EnumVal("NOIDLE", "0", "No idle line detected"),
                    EnumVal("IDLE", "0x1", "Idle line detected"),
                ]),
                Field("OR", 19, 1, "Receiver Overrun Flag", [
                    EnumVal("NO_OVERRUN", "0", "No overrun"),
                    EnumVal("OVERRUN", "0x1", "Receive overrun (new LPUART data lost)"),
                ]),
                Field("NF", 18, 1, "Noise Flag (NF)", [
                    EnumVal("NONOISE", "0", "No noise detected"),
                    EnumVal("NOISE", "0x1", "Noise detected"),
                ]),
                Field("FE", 17, 1, "Framing Error Flag (FE)", [
                    EnumVal("NOERROR", "0", "No framing error detected (this does not guarantee that the framing is correct)"),
                    EnumVal("ERROR", "0x1", "Framing error detected"),
                ]),
                Field("PF", 16, 1, "Parity Error Flag (PF)", [
                    EnumVal("NOPARITY", "0", "No parity error detected"),
                    EnumVal("PARITY", "0x1", "Parity error detected"),
                ]),
                Field("MA1F", 15, 1, "Match 1 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA1"),
                    EnumVal("MATCH", "0x1", "Equal to MA1"),
                ]),
                Field("MA2F", 14, 1, "Match 2 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA2"),
                    EnumVal("MATCH", "0x1", "Equal to MA2"),
                ]),
                Field("TSF", 9, 1, "Timeout Status Flag", [
                    EnumVal("NOFLAG", "0", "Field is 0"),
                    EnumVal("FLAG", "0x1", "Field is 1"),
                ]),
                Field("MSF", 8, 1, "MODEM Status Flag", [
                    EnumVal("NOFLAG", "0", "Field is 0"),
                    EnumVal("FLAG", "0x1", "Field is 1"),
                ]),
                Field("AME", 1, 1, "Address Mark Enable", [
                    EnumVal("DISABLED", "0", "Address mark in character is MSB"),
                    EnumVal("ENABLED", "0x1", "Address mark in character is the last bit before the stop bit (or parity bit when enabled)"),
                ]),
                Field("LBKFE", 0, 1, "LIN Break Flag Enable", [
                    EnumVal("DISABLED", "0", "Disables LIN break detect"),
                    EnumVal("ENABLED", "0x1", "Enables LIN break detect"),
                ]),
            ]),
            Register("CTRL", 0x40328018, 32, "Control", [
                Field("R8T9", 31, 1, "Receive Bit 8 Transmit Bit 9", [
                ]),
                Field("R9T8", 30, 1, "Receive Bit 9 Transmit Bit 8", [
                ]),
                Field("TXDIR", 29, 1, "TXD Pin Direction in Single-Wire Mode", [
                    EnumVal("TX_INPUT", "0", "TXD pin is an input in Single-Wire mode"),
                    EnumVal("TX_OUTPUT", "0x1", "TXD pin is an output in Single-Wire mode"),
                ]),
                Field("TXINV", 28, 1, "Transmit Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Not inverted"),
                    EnumVal("INVERTED", "0x1", "Inverted"),
                ]),
                Field("ORIE", 27, 1, "Overrun Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("NEIE", 26, 1, "Noise Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("FEIE", 25, 1, "Framing Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PEIE", 24, 1, "Parity Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TIE", 23, 1, "Transmit Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TCIE", 22, 1, "Transmission Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RIE", 21, 1, "Receiver Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("ILIE", 20, 1, "Idle Line Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables hardware interrupts from STAT[IDLE]; use polling"),
                    EnumVal("ENABLED", "0x1", "Enables hardware interrupts when STAT[IDLE] = 1"),
                ]),
                Field("TE", 19, 1, "Transmitter Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RE", 18, 1, "Receiver Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RWU", 17, 1, "Receiver Wakeup Control", [
                    EnumVal("NO_EFFECT", "0", "Normal receiver operation"),
                    EnumVal("RX_WAKEUP", "0x1", "LPUART receiver in standby, waiting for a wakeup condition"),
                ]),
                Field("SBK", 16, 1, "Send Break", [
                    EnumVal("NO_EFFECT", "0", "Normal transmitter operation"),
                    EnumVal("TX_BREAK", "0x1", "Queue break character(s) to be sent"),
                ]),
                Field("MA1IE", 15, 1, "Match 1 (MA1F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MA2IE", 14, 1, "Match 2 (MA2F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M7", 11, 1, "7-Bit Mode Select", [
                    EnumVal("NO_EFFECT", "0", "8-bit to 10-bit data characters"),
                    EnumVal("DATA7", "0x1", "7-bit data characters"),
                ]),
                Field("IDLECFG", 8, 3, "Idle Configuration", [
                    EnumVal("IDLE_1", "0", "1"),
                    EnumVal("IDLE_2", "0x1", "2"),
                    EnumVal("IDLE_4", "0x2", "4"),
                    EnumVal("IDLE_8", "0x3", "8"),
                    EnumVal("IDLE_16", "0x4", "16"),
                    EnumVal("IDLE_32", "0x5", "32"),
                    EnumVal("IDLE_64", "0x6", "64"),
                    EnumVal("IDLE_128", "0x7", "128"),
                ]),
                Field("LOOPS", 7, 1, "Loop Mode Select", [
                    EnumVal("NOFFECT", "0", "Normal operation: RXD and TXD use separate pins"),
                    EnumVal("LOOPBACK", "0x1", "Loop mode or Single-Wire mode"),
                ]),
                Field("DOZEEN", 6, 1, "Enables LPUART in Doze mode.", [
                    EnumVal("ENABLED", "0", "Enables"),
                    EnumVal("DISABLED", "0x1", "Disables"),
                ]),
                Field("RSRC", 5, 1, "Receiver Source Select", [
                    EnumVal("NO_EFFECT", "0", "Internal Loopback mode"),
                    EnumVal("ONEWIRE", "0x1", "Single-wire mode"),
                ]),
                Field("M", 4, 1, "9-Bit Or 8-Bit Mode Select", [
                    EnumVal("DATA8", "0", "8-bit data characters"),
                    EnumVal("DATA9", "0x1", "9-bit data characters"),
                ]),
                Field("WAKE", 3, 1, "Receiver Wakeup Method Select", [
                    EnumVal("IDLE", "0", "Configures CTRL[RWU] for idle-line wakeup"),
                    EnumVal("MARK", "0x1", "Configures CTRL[RWU] with address-mark wakeup"),
                ]),
                Field("ILT", 2, 1, "Idle Line Type Select", [
                    EnumVal("FROM_START", "0", "After the start bit"),
                    EnumVal("FROM_STOP", "0x1", "After the stop bit"),
                ]),
                Field("PE", 1, 1, "Parity Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PT", 0, 1, "Parity Type", [
                    EnumVal("EVEN", "0", "Even parity"),
                    EnumVal("ODD", "0x1", "Odd parity"),
                ]),
            ]),
            Register("DATA", 0x4032801C, 32, "Data", [
                Field("NOISY", 15, 1, "Noisy Data Received", [
                    EnumVal("NO_NOISE", "0", "Received without noise"),
                    EnumVal("NOISE", "0x1", "Received with noise"),
                ]),
                Field("PARITYE", 14, 1, "Parity Error", [
                    EnumVal("NO_PARITY", "0", "Received without a parity error"),
                    EnumVal("PARITY", "0x1", "Received with a parity error"),
                ]),
                Field("FRETSC", 13, 1, "Frame Error Transmit Special Character", [
                    EnumVal("NO_ERROR", "0", "Received without a frame error on reads or transmits a normal character on writes"),
                    EnumVal("ERROR", "0x1", "Received with a frame error on reads or transmits an idle or break character on writes"),
                ]),
                Field("RXEMPT", 12, 1, "Receive Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Contains valid data"),
                    EnumVal("EMPTY", "0x1", "Contains invalid data and is empty"),
                ]),
                Field("IDLINE", 11, 1, "Idle Line", [
                    EnumVal("NO_IDLE", "0", "Received was not idle"),
                    EnumVal("IDLE", "0x1", "Receiver was idle"),
                ]),
                Field("LINBRK", 10, 1, "LIN Break", [
                    EnumVal("NO_BREAK", "0", "LIN break not detected or LIN break detect circuitry disabled"),
                    EnumVal("BREAK", "0x1", "LIN break detected"),
                ]),
                Field("R9T9", 9, 1, "Read Receive FIFO Bit 9 Or Write Transmit FIFO Bit 9", [
                ]),
                Field("R8T8", 8, 1, "Read Receive FIFO Bit 8 Or Write Transmit FIFO Bit 8", [
                ]),
                Field("R7T7", 7, 1, "Read Receive FIFO Bit 7 Or Write Transmit FIFO Bit 7", [
                ]),
                Field("R6T6", 6, 1, "Read Receive FIFO Bit 6 Or Write Transmit FIFO Bit 6", [
                ]),
                Field("R5T5", 5, 1, "Read Receive FIFO Bit 5 Or Write Transmit FIFO Bit 5", [
                ]),
                Field("R4T4", 4, 1, "Read Receive FIFO Bit 4 Or Write Transmit FIFO Bit 4", [
                ]),
                Field("R3T3", 3, 1, "Read Receive FIFO Bit 3 Or Write Transmit FIFO Bit 3", [
                ]),
                Field("R2T2", 2, 1, "Read Receive FIFO Bit 2 Or Write Transmit FIFO Bit 2", [
                ]),
                Field("R1T1", 1, 1, "Read Receive FIFO Bit 1 Or Write Transmit FIFO Bit 1", [
                ]),
                Field("R0T0", 0, 1, "Read Receive FIFO Bit 0 Or Write Transmit FIFO Bit 0", [
                ]),
            ]),
            Register("MATCH", 0x40328020, 32, "Match Address", [
                Field("MA2", 16, 10, "Match Address 2", [
                ]),
                Field("MA1", 0, 10, "Match Address 1", [
                ]),
            ]),
            Register("MODIR", 0x40328024, 32, "MODEM IrDA", [
                Field("IREN", 18, 1, "IR Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TNP", 16, 2, "Transmitter Narrow Pulse", [
                    EnumVal("ONE_SAMPLE", "0", "1 / OSR"),
                    EnumVal("TWO_SAMPLE", "0x1", "2 / OSR"),
                    EnumVal("THREE_SAMPLE", "0x2", "3 / OSR"),
                    EnumVal("FOUR_SAMPLE", "0x3", "4 / OSR"),
                ]),
                Field("RTSWATER", 8, 4, "Receive RTS Configuration", [
                ]),
                Field("TXCTSSRC", 5, 1, "Transmit CTS Source", [
                    EnumVal("CTS", "0", "The CTS_B pin"),
                    EnumVal("MATCH", "0x1", "An internal connection to the receiver address match result"),
                ]),
                Field("TXCTSC", 4, 1, "Transmit CTS Configuration", [
                    EnumVal("START", "0", "Sampled at the start of each character"),
                    EnumVal("IDLE", "0x1", "Sampled when the transmitter is idle"),
                ]),
                Field("RXRTSE", 3, 1, "Receiver RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXRTSPOL", 2, 1, "Transmitter RTS Polarity", [
                    EnumVal("LOW", "0", "Transmitter RTS is active low"),
                    EnumVal("HIGH", "0x1", "Transmitter RTS is active high"),
                ]),
                Field("TXRTSE", 1, 1, "Transmitter RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXCTSE", 0, 1, "Transmitter CTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
            ]),
            Register("FIFO", 0x40328028, 32, "FIFO", [
                Field("TXEMPT", 23, 1, "Transmit FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("RXEMPT", 22, 1, "Receive FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("TXOF", 17, 1, "Transmitter FIFO Overflow Flag", [
                    EnumVal("NO_OVERFLOW", "0", "No overflow"),
                    EnumVal("OVERFLOW", "0x1", "Overflow"),
                ]),
                Field("RXUF", 16, 1, "Receiver FIFO Underflow Flag", [
                    EnumVal("NO_UNDERFLOW", "0", "No underflow"),
                    EnumVal("UNDERFLOW", "0x1", "Underflow"),
                ]),
                Field("TXFLUSH", 15, 1, "Transmit FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXFLUSH", 14, 1, "Receive FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXIDEN", 10, 3, "Receiver Idle Empty Enable", [
                    EnumVal("DISABLED", "0", "Disables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle"),
                    EnumVal("IDLE_1", "0x1", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for one character"),
                    EnumVal("IDLE_2", "0x2", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for two characters"),
                    EnumVal("IDLE_4", "0x3", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for four characters"),
                    EnumVal("IDLE_8", "0x4", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for eight characters"),
                    EnumVal("IDLE_16", "0x5", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 16 characters"),
                    EnumVal("IDLE_32", "0x6", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 32 characters"),
                    EnumVal("IDLE_64", "0x7", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 64 characters"),
                ]),
                Field("TXOFE", 9, 1, "Transmit FIFO Overflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RXUFE", 8, 1, "Receive FIFO Underflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXFE", 7, 1, "Transmit FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[TXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("TXFIFOSIZE", 4, 3, "Transmit FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Transmit FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Transmit FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Transmit FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Transmit FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Transmit FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Transmit FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Transmit FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Transmit FIFO buffer depth = 256 datawords"),
                ]),
                Field("RXFE", 3, 1, "Receive FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[RXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("RXFIFOSIZE", 0, 3, "Receive FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Receive FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Receive FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Receive FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Receive FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Receive FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Receive FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Receive FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Receive FIFO buffer depth = 256 datawords"),
                ]),
            ]),
            Register("WATER", 0x4032802C, 32, "Watermark", [
                Field("RXCOUNT", 24, 5, "Receive Counter", [
                ]),
                Field("RXWATER", 16, 4, "Receive Watermark", [
                ]),
                Field("TXCOUNT", 8, 5, "Transmit Counter", [
                ]),
                Field("TXWATER", 0, 4, "Transmit Watermark", [
                ]),
            ]),
            Register("DATARO", 0x40328030, 32, "Data Read-Only", [
                Field("DATA", 0, 16, "Receive Data", [
                ]),
            ]),
            Register("MCR", 0x40328040, 32, "MODEM Control", [
                Field("RTS", 9, 1, "Request To Send", [
                    EnumVal("LOGIC_ONE", "0", "Default state is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "Default state is logic zero"),
                ]),
                Field("DTR", 8, 1, "Data Terminal Ready", [
                    EnumVal("LOGIC_ONE", "0", "Default state is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "Default state is logic zero"),
                ]),
                Field("DCD", 3, 1, "Data Carrier Detect", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
                Field("RIN", 2, 1, "Ring Indicator", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
                Field("DSR", 1, 1, "Data Set Ready", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
                Field("CTS", 0, 1, "Clear To Send", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
            ]),
            Register("MSR", 0x40328044, 32, "MODEM Status", [
                Field("DCD", 7, 1, "Data Carrier Detect", [
                    EnumVal("LOGIC_ONE", "0", "The DCD_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The DCD_B pin is logic zero"),
                ]),
                Field("RIN", 6, 1, "Ring Indicator", [
                    EnumVal("LOGIC_ONE", "0", "The RIN_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The RIN_B pin is logic zero"),
                ]),
                Field("DSR", 5, 1, "Data Set Ready", [
                    EnumVal("LOGIC_ONE", "0", "The DSR_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The DSR_B pin is logic zero"),
                ]),
                Field("CTS", 4, 1, "Clear To Send", [
                    EnumVal("LOGIC_ONE", "0", "The CTS_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The CTS_B pin is logic zero"),
                ]),
                Field("DDCD", 3, 1, "Delta Data Carrier Detect", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
                Field("DRI", 2, 1, "Delta Ring Indicator", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
                Field("DDSR", 1, 1, "Delta Data Set Ready", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
                Field("DCTS", 0, 1, "Delta Clear To Send", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
            ]),
            Register("REIR", 0x40328048, 32, "Receiver Extended Idle", [
                Field("IDTIME", 0, 14, "Idle Time", [
                ]),
            ]),
            Register("TEIR", 0x4032804C, 32, "Transmitter Extended Idle", [
                Field("IDTIME", 0, 14, "Idle Time", [
                ]),
            ]),
            Register("HDCR", 0x40328050, 32, "Half Duplex Control", [
                Field("RTSEXT", 8, 8, "RTS Extended", [
                ]),
                Field("RXMSK", 3, 1, "Receive Mask", [
                    EnumVal("NO_EFFECT", "0", "Does not mask"),
                    EnumVal("TX_RTS", "0x1", "Masks"),
                ]),
                Field("RXWRMSK", 2, 1, "Receive FIFO Write Mask", [
                    EnumVal("NO_EFFECT", "0", "Does not mask"),
                    EnumVal("TX_RTS", "0x1", "Masks"),
                ]),
                Field("RXSEL", 1, 1, "Receive Select", [
                    EnumVal("PIN_RXD", "0", "RXD"),
                    EnumVal("PIN_TXD", "0x1", "TXD"),
                ]),
                Field("TXSTALL", 0, 1, "Transmit Stall", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RX_ACTIVE", "0x1", "Does not become busy"),
                ]),
            ]),
            Register("TOCR", 0x40328058, 32, "Timeout Control", [
                Field("TOIE", 8, 4, "Timeout Interrupt Enable", [
                ]),
                Field("TOEN", 0, 4, "Timeout Enable", [
                ]),
            ]),
            Register("TOSR", 0x4032805C, 32, "Timeout Status", [
                Field("TOF", 8, 4, "Timeout Flag", [
                ]),
                Field("TOZ", 0, 4, "Timeout Zero", [
                ]),
            ]),
            Register("TIMEOUT[0]", 0x40328060, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TIMEOUT[1]", 0x40328064, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TIMEOUT[2]", 0x40328068, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TIMEOUT[3]", 0x4032806C, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TCBR[0]", 0x40328200, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[1]", 0x40328204, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[2]", 0x40328208, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[3]", 0x4032820C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[4]", 0x40328210, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[5]", 0x40328214, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[6]", 0x40328218, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[7]", 0x4032821C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[8]", 0x40328220, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[9]", 0x40328224, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[10]", 0x40328228, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[11]", 0x4032822C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[12]", 0x40328230, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[13]", 0x40328234, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[14]", 0x40328238, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[15]", 0x4032823C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[16]", 0x40328240, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[17]", 0x40328244, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[18]", 0x40328248, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[19]", 0x4032824C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[20]", 0x40328250, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[21]", 0x40328254, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[22]", 0x40328258, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[23]", 0x4032825C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[24]", 0x40328260, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[25]", 0x40328264, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[26]", 0x40328268, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[27]", 0x4032826C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[28]", 0x40328270, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[29]", 0x40328274, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[30]", 0x40328278, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[31]", 0x4032827C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[32]", 0x40328280, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[33]", 0x40328284, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[34]", 0x40328288, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[35]", 0x4032828C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[36]", 0x40328290, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[37]", 0x40328294, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[38]", 0x40328298, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[39]", 0x4032829C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[40]", 0x403282A0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[41]", 0x403282A4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[42]", 0x403282A8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[43]", 0x403282AC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[44]", 0x403282B0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[45]", 0x403282B4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[46]", 0x403282B8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[47]", 0x403282BC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[48]", 0x403282C0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[49]", 0x403282C4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[50]", 0x403282C8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[51]", 0x403282CC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[52]", 0x403282D0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[53]", 0x403282D4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[54]", 0x403282D8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[55]", 0x403282DC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[56]", 0x403282E0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[57]", 0x403282E4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[58]", 0x403282E8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[59]", 0x403282EC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[60]", 0x403282F0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[61]", 0x403282F4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[62]", 0x403282F8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[63]", 0x403282FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[64]", 0x40328300, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[65]", 0x40328304, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[66]", 0x40328308, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[67]", 0x4032830C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[68]", 0x40328310, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[69]", 0x40328314, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[70]", 0x40328318, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[71]", 0x4032831C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[72]", 0x40328320, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[73]", 0x40328324, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[74]", 0x40328328, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[75]", 0x4032832C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[76]", 0x40328330, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[77]", 0x40328334, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[78]", 0x40328338, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[79]", 0x4032833C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[80]", 0x40328340, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[81]", 0x40328344, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[82]", 0x40328348, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[83]", 0x4032834C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[84]", 0x40328350, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[85]", 0x40328354, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[86]", 0x40328358, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[87]", 0x4032835C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[88]", 0x40328360, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[89]", 0x40328364, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[90]", 0x40328368, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[91]", 0x4032836C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[92]", 0x40328370, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[93]", 0x40328374, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[94]", 0x40328378, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[95]", 0x4032837C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[96]", 0x40328380, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[97]", 0x40328384, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[98]", 0x40328388, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[99]", 0x4032838C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[100]", 0x40328390, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[101]", 0x40328394, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[102]", 0x40328398, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[103]", 0x4032839C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[104]", 0x403283A0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[105]", 0x403283A4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[106]", 0x403283A8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[107]", 0x403283AC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[108]", 0x403283B0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[109]", 0x403283B4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[110]", 0x403283B8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[111]", 0x403283BC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[112]", 0x403283C0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[113]", 0x403283C4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[114]", 0x403283C8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[115]", 0x403283CC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[116]", 0x403283D0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[117]", 0x403283D4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[118]", 0x403283D8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[119]", 0x403283DC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[120]", 0x403283E0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[121]", 0x403283E4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[122]", 0x403283E8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[123]", 0x403283EC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[124]", 0x403283F0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[125]", 0x403283F4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[126]", 0x403283F8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[127]", 0x403283FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TDBR[0]", 0x40328400, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[1]", 0x40328404, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[2]", 0x40328408, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[3]", 0x4032840C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[4]", 0x40328410, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[5]", 0x40328414, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[6]", 0x40328418, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[7]", 0x4032841C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[8]", 0x40328420, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[9]", 0x40328424, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[10]", 0x40328428, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[11]", 0x4032842C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[12]", 0x40328430, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[13]", 0x40328434, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[14]", 0x40328438, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[15]", 0x4032843C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[16]", 0x40328440, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[17]", 0x40328444, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[18]", 0x40328448, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[19]", 0x4032844C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[20]", 0x40328450, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[21]", 0x40328454, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[22]", 0x40328458, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[23]", 0x4032845C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[24]", 0x40328460, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[25]", 0x40328464, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[26]", 0x40328468, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[27]", 0x4032846C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[28]", 0x40328470, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[29]", 0x40328474, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[30]", 0x40328478, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[31]", 0x4032847C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[32]", 0x40328480, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[33]", 0x40328484, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[34]", 0x40328488, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[35]", 0x4032848C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[36]", 0x40328490, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[37]", 0x40328494, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[38]", 0x40328498, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[39]", 0x4032849C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[40]", 0x403284A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[41]", 0x403284A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[42]", 0x403284A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[43]", 0x403284AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[44]", 0x403284B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[45]", 0x403284B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[46]", 0x403284B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[47]", 0x403284BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[48]", 0x403284C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[49]", 0x403284C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[50]", 0x403284C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[51]", 0x403284CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[52]", 0x403284D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[53]", 0x403284D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[54]", 0x403284D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[55]", 0x403284DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[56]", 0x403284E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[57]", 0x403284E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[58]", 0x403284E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[59]", 0x403284EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[60]", 0x403284F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[61]", 0x403284F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[62]", 0x403284F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[63]", 0x403284FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[64]", 0x40328500, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[65]", 0x40328504, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[66]", 0x40328508, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[67]", 0x4032850C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[68]", 0x40328510, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[69]", 0x40328514, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[70]", 0x40328518, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[71]", 0x4032851C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[72]", 0x40328520, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[73]", 0x40328524, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[74]", 0x40328528, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[75]", 0x4032852C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[76]", 0x40328530, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[77]", 0x40328534, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[78]", 0x40328538, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[79]", 0x4032853C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[80]", 0x40328540, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[81]", 0x40328544, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[82]", 0x40328548, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[83]", 0x4032854C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[84]", 0x40328550, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[85]", 0x40328554, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[86]", 0x40328558, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[87]", 0x4032855C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[88]", 0x40328560, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[89]", 0x40328564, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[90]", 0x40328568, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[91]", 0x4032856C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[92]", 0x40328570, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[93]", 0x40328574, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[94]", 0x40328578, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[95]", 0x4032857C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[96]", 0x40328580, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[97]", 0x40328584, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[98]", 0x40328588, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[99]", 0x4032858C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[100]", 0x40328590, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[101]", 0x40328594, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[102]", 0x40328598, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[103]", 0x4032859C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[104]", 0x403285A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[105]", 0x403285A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[106]", 0x403285A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[107]", 0x403285AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[108]", 0x403285B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[109]", 0x403285B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[110]", 0x403285B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[111]", 0x403285BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[112]", 0x403285C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[113]", 0x403285C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[114]", 0x403285C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[115]", 0x403285CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[116]", 0x403285D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[117]", 0x403285D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[118]", 0x403285D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[119]", 0x403285DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[120]", 0x403285E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[121]", 0x403285E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[122]", 0x403285E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[123]", 0x403285EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[124]", 0x403285F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[125]", 0x403285F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[126]", 0x403285F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[127]", 0x403285FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[128]", 0x40328600, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[129]", 0x40328604, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[130]", 0x40328608, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[131]", 0x4032860C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[132]", 0x40328610, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[133]", 0x40328614, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[134]", 0x40328618, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[135]", 0x4032861C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[136]", 0x40328620, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[137]", 0x40328624, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[138]", 0x40328628, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[139]", 0x4032862C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[140]", 0x40328630, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[141]", 0x40328634, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[142]", 0x40328638, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[143]", 0x4032863C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[144]", 0x40328640, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[145]", 0x40328644, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[146]", 0x40328648, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[147]", 0x4032864C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[148]", 0x40328650, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[149]", 0x40328654, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[150]", 0x40328658, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[151]", 0x4032865C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[152]", 0x40328660, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[153]", 0x40328664, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[154]", 0x40328668, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[155]", 0x4032866C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[156]", 0x40328670, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[157]", 0x40328674, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[158]", 0x40328678, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[159]", 0x4032867C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[160]", 0x40328680, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[161]", 0x40328684, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[162]", 0x40328688, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[163]", 0x4032868C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[164]", 0x40328690, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[165]", 0x40328694, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[166]", 0x40328698, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[167]", 0x4032869C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[168]", 0x403286A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[169]", 0x403286A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[170]", 0x403286A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[171]", 0x403286AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[172]", 0x403286B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[173]", 0x403286B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[174]", 0x403286B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[175]", 0x403286BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[176]", 0x403286C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[177]", 0x403286C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[178]", 0x403286C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[179]", 0x403286CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[180]", 0x403286D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[181]", 0x403286D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[182]", 0x403286D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[183]", 0x403286DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[184]", 0x403286E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[185]", 0x403286E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[186]", 0x403286E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[187]", 0x403286EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[188]", 0x403286F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[189]", 0x403286F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[190]", 0x403286F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[191]", 0x403286FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[192]", 0x40328700, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[193]", 0x40328704, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[194]", 0x40328708, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[195]", 0x4032870C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[196]", 0x40328710, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[197]", 0x40328714, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[198]", 0x40328718, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[199]", 0x4032871C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[200]", 0x40328720, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[201]", 0x40328724, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[202]", 0x40328728, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[203]", 0x4032872C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[204]", 0x40328730, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[205]", 0x40328734, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[206]", 0x40328738, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[207]", 0x4032873C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[208]", 0x40328740, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[209]", 0x40328744, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[210]", 0x40328748, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[211]", 0x4032874C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[212]", 0x40328750, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[213]", 0x40328754, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[214]", 0x40328758, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[215]", 0x4032875C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[216]", 0x40328760, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[217]", 0x40328764, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[218]", 0x40328768, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[219]", 0x4032876C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[220]", 0x40328770, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[221]", 0x40328774, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[222]", 0x40328778, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[223]", 0x4032877C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[224]", 0x40328780, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[225]", 0x40328784, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[226]", 0x40328788, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[227]", 0x4032878C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[228]", 0x40328790, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[229]", 0x40328794, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[230]", 0x40328798, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[231]", 0x4032879C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[232]", 0x403287A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[233]", 0x403287A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[234]", 0x403287A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[235]", 0x403287AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[236]", 0x403287B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[237]", 0x403287B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[238]", 0x403287B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[239]", 0x403287BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[240]", 0x403287C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[241]", 0x403287C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[242]", 0x403287C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[243]", 0x403287CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[244]", 0x403287D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[245]", 0x403287D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[246]", 0x403287D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[247]", 0x403287DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[248]", 0x403287E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[249]", 0x403287E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[250]", 0x403287E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[251]", 0x403287EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[252]", 0x403287F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[253]", 0x403287F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[254]", 0x403287F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[255]", 0x403287FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
        ])

class Module_LPUART_1(Peripheral):
    def __init__(self):
        super().__init__("LPUART_1", 0x4032C000, 0x800, [
            Register("VERID", 0x4032C000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Identification Number", [
                    EnumVal("STANDARD", "0x1", "Standard feature set"),
                    EnumVal("MODEM", "0x3", "Standard feature set with MODEM and IrDA support"),
                    EnumVal("MODEM_IDLE", "0x7", "Enhanced feature set with full MODEM, IrDA, and enhanced idle detection"),
                ]),
            ]),
            Register("PARAM", 0x4032C004, 32, "Parameter", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("GLOBAL", 0x4032C008, 32, "Global", [
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NO_EFFECT", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
            ]),
            Register("PINCFG", 0x4032C00C, 32, "Pin Configuration", [
                Field("TRGSEL", 0, 2, "Trigger Select", [
                    EnumVal("DISABLED", "0", "Input trigger disabled"),
                    EnumVal("TRG_RXD", "0x1", "Input trigger used instead of the RXD pin input"),
                    EnumVal("TRG_CTS", "0x2", "Input trigger used instead of the CTS_B pin input"),
                    EnumVal("TRG_TXD", "0x3", "Input trigger used to modulate the TXD pin output, which (after TXINV configuration) is internally ANDed with the input trigger"),
                ]),
            ]),
            Register("BAUD", 0x4032C010, 32, "Baud Rate", [
                Field("MAEN1", 31, 1, "Match Address Mode Enable 1", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MAEN2", 30, 1, "Match Address Mode Enable 2", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M10", 29, 1, "10-Bit Mode Select", [
                    EnumVal("DISABLED", "0", "Receiver and transmitter use 7-bit to 9-bit data characters"),
                    EnumVal("ENABLED", "0x1", "Receiver and transmitter use 10-bit data characters"),
                ]),
                Field("OSR", 24, 5, "Oversampling Ratio (OSR)", [
                    EnumVal("DEFAULT", "0", "Results in an OSR of 16"),
                    EnumVal("OSR_4", "0x3", "Results in an OSR of 4 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_5", "0x4", "Results in an OSR of 5 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_6", "0x5", "Results in an OSR of 6 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_7", "0x6", "Results in an OSR of 7 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_8", "0x7", "Results in an OSR of 8"),
                    EnumVal("OSR_9", "0x8", "Results in an OSR of 9"),
                    EnumVal("OSR_10", "0x9", "Results in an OSR of 10"),
                    EnumVal("OSR_11", "0xA", "Results in an OSR of 11"),
                    EnumVal("OSR_12", "0xB", "Results in an OSR of 12"),
                    EnumVal("OSR_13", "0xC", "Results in an OSR of 13"),
                    EnumVal("OSR_14", "0xD", "Results in an OSR of 14"),
                    EnumVal("OSR_15", "0xE", "Results in an OSR of 15"),
                    EnumVal("OSR_16", "0xF", "Results in an OSR of 16"),
                    EnumVal("OSR_17", "0x10", "Results in an OSR of 17"),
                    EnumVal("OSR_18", "0x11", "Results in an OSR of 18"),
                    EnumVal("OSR_19", "0x12", "Results in an OSR of 19"),
                    EnumVal("OSR_20", "0x13", "Results in an OSR of 20"),
                    EnumVal("OSR_21", "0x14", "Results in an OSR of 21"),
                    EnumVal("OSR_22", "0x15", "Results in an OSR of 22"),
                    EnumVal("OSR_23", "0x16", "Results in an OSR of 23"),
                    EnumVal("OSR_24", "0x17", "Results in an OSR of 24"),
                    EnumVal("OSR_25", "0x18", "Results in an OSR of 25"),
                    EnumVal("OSR_26", "0x19", "Results in an OSR of 26"),
                    EnumVal("OSR_27", "0x1A", "Results in an OSR of 27"),
                    EnumVal("OSR_28", "0x1B", "Results in an OSR of 28"),
                    EnumVal("OSR_29", "0x1C", "Results in an OSR of 29"),
                    EnumVal("OSR_30", "0x1D", "Results in an OSR of 30"),
                    EnumVal("OSR_31", "0x1E", "Results in an OSR of 31"),
                    EnumVal("OSR_32", "0x1F", "Results in an OSR of 32"),
                ]),
                Field("TDMAE", 23, 1, "Transmitter DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("RDMAE", 21, 1, "Receiver Full DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("MATCFG", 18, 2, "Match Configuration", [
                    EnumVal("ADDR_MATCH", "0", "Address match wakeup"),
                    EnumVal("IDLE_MATCH", "0x1", "Idle match wakeup"),
                    EnumVal("ONOFF_MATCH", "0x2", "Match on and match off"),
                    EnumVal("RWU_MATCH", "0x3", "Enables RWU on data match and match on/off for the transmitter CTS input"),
                ]),
                Field("BOTHEDGE", 17, 1, "Both Edge Sampling", [
                    EnumVal("DISABLED", "0", "Receiver samples input data using the rising edge of the baud rate clock"),
                    EnumVal("ENABLED", "0x1", "Receiver samples input data using the rising and falling edges of the baud rate clock"),
                ]),
                Field("RESYNCDIS", 16, 1, "Resynchronization Disable", [
                    EnumVal("RESYNC", "0", "Enables resynchronization"),
                    EnumVal("NO_RESYNC", "0x1", "Disables resynchronization"),
                ]),
                Field("LBKDIE", 15, 1, "LIN Break Detect Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[LBKDIF] (uses polling)"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupt when STAT[LBKDIF] is 1"),
                ]),
                Field("RXEDGIE", 14, 1, "RX Input Active Edge Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[RXEDGIF]"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupts when STAT[RXEDGIF] is 1"),
                ]),
                Field("SBNS", 13, 1, "Stop Bit Number Select", [
                    EnumVal("ONE", "0", "One stop bit"),
                    EnumVal("TWO", "0x1", "Two stop bits"),
                ]),
                Field("SBR", 0, 13, "Baud Rate Modulo Divisor", [
                ]),
            ]),
            Register("STAT", 0x4032C014, 32, "Status", [
                Field("LBKDIF", 31, 1, "LIN Break Detect Interrupt Flag", [
                    EnumVal("NOT_DETECTED", "0", "Not detected"),
                    EnumVal("DETECTED", "0x1", "Detected"),
                ]),
                Field("RXEDGIF", 30, 1, "RXD Pin Active Edge Interrupt Flag", [
                    EnumVal("NO_EDGE", "0", "Not occurred"),
                    EnumVal("EDGE", "0x1", "Occurred"),
                ]),
                Field("MSBF", 29, 1, "MSB First", [
                    EnumVal("LSB_FIRST", "0", "LSB"),
                    EnumVal("MSB_FIRST", "0x1", "MSB"),
                ]),
                Field("RXINV", 28, 1, "Receive Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Inverted"),
                    EnumVal("INVERTED", "0x1", "Not inverted"),
                ]),
                Field("RWUID", 27, 1, "Receive Wake Up Idle Detect", [
                    EnumVal("IDLE_NOTSET", "0", "STAT[IDLE] does not become 1"),
                    EnumVal("IDLE_SET", "0x1", "STAT[IDLE] becomes 1"),
                ]),
                Field("BRK13", 26, 1, "Break Character Generation Length", [
                    EnumVal("SHORT", "0", "9 to 13 bit times"),
                    EnumVal("LONG", "0x1", "12 to 15 bit times"),
                ]),
                Field("LBKDE", 25, 1, "LIN Break Detection Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RAF", 24, 1, "Receiver Active Flag", [
                    EnumVal("IDLE", "0", "Idle, waiting for a start bit"),
                    EnumVal("ACTIVE", "0x1", "Receiver active (RXD pin input not idle)"),
                ]),
                Field("TDRE", 23, 1, "Transmit Data Register Empty Flag", [
                    EnumVal("TXDATA", "0", "Greater than watermark"),
                    EnumVal("NO_TXDATA", "0x1", "Equal to or less than watermark"),
                ]),
                Field("TC", 22, 1, "Transmission Complete Flag", [
                    EnumVal("ACTIVE", "0", "Transmitter active (sending data, a preamble, or a break)"),
                    EnumVal("COMPLETE", "0x1", "Transmitter idle (transmission activity complete)"),
                ]),
                Field("RDRF", 21, 1, "Receive Data Register Full Flag", [
                    EnumVal("NO_RXDATA", "0", "Equal to or less than watermark"),
                    EnumVal("RXDATA", "0x1", "Greater than watermark"),
                ]),
                Field("IDLE", 20, 1, "Idle Line Flag", [
                    EnumVal("NOIDLE", "0", "No idle line detected"),
                    EnumVal("IDLE", "0x1", "Idle line detected"),
                ]),
                Field("OR", 19, 1, "Receiver Overrun Flag", [
                    EnumVal("NO_OVERRUN", "0", "No overrun"),
                    EnumVal("OVERRUN", "0x1", "Receive overrun (new LPUART data lost)"),
                ]),
                Field("NF", 18, 1, "Noise Flag (NF)", [
                    EnumVal("NONOISE", "0", "No noise detected"),
                    EnumVal("NOISE", "0x1", "Noise detected"),
                ]),
                Field("FE", 17, 1, "Framing Error Flag (FE)", [
                    EnumVal("NOERROR", "0", "No framing error detected (this does not guarantee that the framing is correct)"),
                    EnumVal("ERROR", "0x1", "Framing error detected"),
                ]),
                Field("PF", 16, 1, "Parity Error Flag (PF)", [
                    EnumVal("NOPARITY", "0", "No parity error detected"),
                    EnumVal("PARITY", "0x1", "Parity error detected"),
                ]),
                Field("MA1F", 15, 1, "Match 1 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA1"),
                    EnumVal("MATCH", "0x1", "Equal to MA1"),
                ]),
                Field("MA2F", 14, 1, "Match 2 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA2"),
                    EnumVal("MATCH", "0x1", "Equal to MA2"),
                ]),
                Field("TSF", 9, 1, "Timeout Status Flag", [
                    EnumVal("NOFLAG", "0", "Field is 0"),
                    EnumVal("FLAG", "0x1", "Field is 1"),
                ]),
                Field("MSF", 8, 1, "MODEM Status Flag", [
                    EnumVal("NOFLAG", "0", "Field is 0"),
                    EnumVal("FLAG", "0x1", "Field is 1"),
                ]),
                Field("AME", 1, 1, "Address Mark Enable", [
                    EnumVal("DISABLED", "0", "Address mark in character is MSB"),
                    EnumVal("ENABLED", "0x1", "Address mark in character is the last bit before the stop bit (or parity bit when enabled)"),
                ]),
                Field("LBKFE", 0, 1, "LIN Break Flag Enable", [
                    EnumVal("DISABLED", "0", "Disables LIN break detect"),
                    EnumVal("ENABLED", "0x1", "Enables LIN break detect"),
                ]),
            ]),
            Register("CTRL", 0x4032C018, 32, "Control", [
                Field("R8T9", 31, 1, "Receive Bit 8 Transmit Bit 9", [
                ]),
                Field("R9T8", 30, 1, "Receive Bit 9 Transmit Bit 8", [
                ]),
                Field("TXDIR", 29, 1, "TXD Pin Direction in Single-Wire Mode", [
                    EnumVal("TX_INPUT", "0", "TXD pin is an input in Single-Wire mode"),
                    EnumVal("TX_OUTPUT", "0x1", "TXD pin is an output in Single-Wire mode"),
                ]),
                Field("TXINV", 28, 1, "Transmit Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Not inverted"),
                    EnumVal("INVERTED", "0x1", "Inverted"),
                ]),
                Field("ORIE", 27, 1, "Overrun Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("NEIE", 26, 1, "Noise Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("FEIE", 25, 1, "Framing Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PEIE", 24, 1, "Parity Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TIE", 23, 1, "Transmit Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TCIE", 22, 1, "Transmission Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RIE", 21, 1, "Receiver Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("ILIE", 20, 1, "Idle Line Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables hardware interrupts from STAT[IDLE]; use polling"),
                    EnumVal("ENABLED", "0x1", "Enables hardware interrupts when STAT[IDLE] = 1"),
                ]),
                Field("TE", 19, 1, "Transmitter Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RE", 18, 1, "Receiver Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RWU", 17, 1, "Receiver Wakeup Control", [
                    EnumVal("NO_EFFECT", "0", "Normal receiver operation"),
                    EnumVal("RX_WAKEUP", "0x1", "LPUART receiver in standby, waiting for a wakeup condition"),
                ]),
                Field("SBK", 16, 1, "Send Break", [
                    EnumVal("NO_EFFECT", "0", "Normal transmitter operation"),
                    EnumVal("TX_BREAK", "0x1", "Queue break character(s) to be sent"),
                ]),
                Field("MA1IE", 15, 1, "Match 1 (MA1F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MA2IE", 14, 1, "Match 2 (MA2F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M7", 11, 1, "7-Bit Mode Select", [
                    EnumVal("NO_EFFECT", "0", "8-bit to 10-bit data characters"),
                    EnumVal("DATA7", "0x1", "7-bit data characters"),
                ]),
                Field("IDLECFG", 8, 3, "Idle Configuration", [
                    EnumVal("IDLE_1", "0", "1"),
                    EnumVal("IDLE_2", "0x1", "2"),
                    EnumVal("IDLE_4", "0x2", "4"),
                    EnumVal("IDLE_8", "0x3", "8"),
                    EnumVal("IDLE_16", "0x4", "16"),
                    EnumVal("IDLE_32", "0x5", "32"),
                    EnumVal("IDLE_64", "0x6", "64"),
                    EnumVal("IDLE_128", "0x7", "128"),
                ]),
                Field("LOOPS", 7, 1, "Loop Mode Select", [
                    EnumVal("NOFFECT", "0", "Normal operation: RXD and TXD use separate pins"),
                    EnumVal("LOOPBACK", "0x1", "Loop mode or Single-Wire mode"),
                ]),
                Field("DOZEEN", 6, 1, "Enables LPUART in Doze mode.", [
                    EnumVal("ENABLED", "0", "Enables"),
                    EnumVal("DISABLED", "0x1", "Disables"),
                ]),
                Field("RSRC", 5, 1, "Receiver Source Select", [
                    EnumVal("NO_EFFECT", "0", "Internal Loopback mode"),
                    EnumVal("ONEWIRE", "0x1", "Single-wire mode"),
                ]),
                Field("M", 4, 1, "9-Bit Or 8-Bit Mode Select", [
                    EnumVal("DATA8", "0", "8-bit data characters"),
                    EnumVal("DATA9", "0x1", "9-bit data characters"),
                ]),
                Field("WAKE", 3, 1, "Receiver Wakeup Method Select", [
                    EnumVal("IDLE", "0", "Configures CTRL[RWU] for idle-line wakeup"),
                    EnumVal("MARK", "0x1", "Configures CTRL[RWU] with address-mark wakeup"),
                ]),
                Field("ILT", 2, 1, "Idle Line Type Select", [
                    EnumVal("FROM_START", "0", "After the start bit"),
                    EnumVal("FROM_STOP", "0x1", "After the stop bit"),
                ]),
                Field("PE", 1, 1, "Parity Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PT", 0, 1, "Parity Type", [
                    EnumVal("EVEN", "0", "Even parity"),
                    EnumVal("ODD", "0x1", "Odd parity"),
                ]),
            ]),
            Register("DATA", 0x4032C01C, 32, "Data", [
                Field("NOISY", 15, 1, "Noisy Data Received", [
                    EnumVal("NO_NOISE", "0", "Received without noise"),
                    EnumVal("NOISE", "0x1", "Received with noise"),
                ]),
                Field("PARITYE", 14, 1, "Parity Error", [
                    EnumVal("NO_PARITY", "0", "Received without a parity error"),
                    EnumVal("PARITY", "0x1", "Received with a parity error"),
                ]),
                Field("FRETSC", 13, 1, "Frame Error Transmit Special Character", [
                    EnumVal("NO_ERROR", "0", "Received without a frame error on reads or transmits a normal character on writes"),
                    EnumVal("ERROR", "0x1", "Received with a frame error on reads or transmits an idle or break character on writes"),
                ]),
                Field("RXEMPT", 12, 1, "Receive Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Contains valid data"),
                    EnumVal("EMPTY", "0x1", "Contains invalid data and is empty"),
                ]),
                Field("IDLINE", 11, 1, "Idle Line", [
                    EnumVal("NO_IDLE", "0", "Received was not idle"),
                    EnumVal("IDLE", "0x1", "Receiver was idle"),
                ]),
                Field("LINBRK", 10, 1, "LIN Break", [
                    EnumVal("NO_BREAK", "0", "LIN break not detected or LIN break detect circuitry disabled"),
                    EnumVal("BREAK", "0x1", "LIN break detected"),
                ]),
                Field("R9T9", 9, 1, "Read Receive FIFO Bit 9 Or Write Transmit FIFO Bit 9", [
                ]),
                Field("R8T8", 8, 1, "Read Receive FIFO Bit 8 Or Write Transmit FIFO Bit 8", [
                ]),
                Field("R7T7", 7, 1, "Read Receive FIFO Bit 7 Or Write Transmit FIFO Bit 7", [
                ]),
                Field("R6T6", 6, 1, "Read Receive FIFO Bit 6 Or Write Transmit FIFO Bit 6", [
                ]),
                Field("R5T5", 5, 1, "Read Receive FIFO Bit 5 Or Write Transmit FIFO Bit 5", [
                ]),
                Field("R4T4", 4, 1, "Read Receive FIFO Bit 4 Or Write Transmit FIFO Bit 4", [
                ]),
                Field("R3T3", 3, 1, "Read Receive FIFO Bit 3 Or Write Transmit FIFO Bit 3", [
                ]),
                Field("R2T2", 2, 1, "Read Receive FIFO Bit 2 Or Write Transmit FIFO Bit 2", [
                ]),
                Field("R1T1", 1, 1, "Read Receive FIFO Bit 1 Or Write Transmit FIFO Bit 1", [
                ]),
                Field("R0T0", 0, 1, "Read Receive FIFO Bit 0 Or Write Transmit FIFO Bit 0", [
                ]),
            ]),
            Register("MATCH", 0x4032C020, 32, "Match Address", [
                Field("MA2", 16, 10, "Match Address 2", [
                ]),
                Field("MA1", 0, 10, "Match Address 1", [
                ]),
            ]),
            Register("MODIR", 0x4032C024, 32, "MODEM IrDA", [
                Field("IREN", 18, 1, "IR Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TNP", 16, 2, "Transmitter Narrow Pulse", [
                    EnumVal("ONE_SAMPLE", "0", "1 / OSR"),
                    EnumVal("TWO_SAMPLE", "0x1", "2 / OSR"),
                    EnumVal("THREE_SAMPLE", "0x2", "3 / OSR"),
                    EnumVal("FOUR_SAMPLE", "0x3", "4 / OSR"),
                ]),
                Field("RTSWATER", 8, 4, "Receive RTS Configuration", [
                ]),
                Field("TXCTSSRC", 5, 1, "Transmit CTS Source", [
                    EnumVal("CTS", "0", "The CTS_B pin"),
                    EnumVal("MATCH", "0x1", "An internal connection to the receiver address match result"),
                ]),
                Field("TXCTSC", 4, 1, "Transmit CTS Configuration", [
                    EnumVal("START", "0", "Sampled at the start of each character"),
                    EnumVal("IDLE", "0x1", "Sampled when the transmitter is idle"),
                ]),
                Field("RXRTSE", 3, 1, "Receiver RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXRTSPOL", 2, 1, "Transmitter RTS Polarity", [
                    EnumVal("LOW", "0", "Transmitter RTS is active low"),
                    EnumVal("HIGH", "0x1", "Transmitter RTS is active high"),
                ]),
                Field("TXRTSE", 1, 1, "Transmitter RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXCTSE", 0, 1, "Transmitter CTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
            ]),
            Register("FIFO", 0x4032C028, 32, "FIFO", [
                Field("TXEMPT", 23, 1, "Transmit FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("RXEMPT", 22, 1, "Receive FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("TXOF", 17, 1, "Transmitter FIFO Overflow Flag", [
                    EnumVal("NO_OVERFLOW", "0", "No overflow"),
                    EnumVal("OVERFLOW", "0x1", "Overflow"),
                ]),
                Field("RXUF", 16, 1, "Receiver FIFO Underflow Flag", [
                    EnumVal("NO_UNDERFLOW", "0", "No underflow"),
                    EnumVal("UNDERFLOW", "0x1", "Underflow"),
                ]),
                Field("TXFLUSH", 15, 1, "Transmit FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXFLUSH", 14, 1, "Receive FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXIDEN", 10, 3, "Receiver Idle Empty Enable", [
                    EnumVal("DISABLED", "0", "Disables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle"),
                    EnumVal("IDLE_1", "0x1", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for one character"),
                    EnumVal("IDLE_2", "0x2", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for two characters"),
                    EnumVal("IDLE_4", "0x3", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for four characters"),
                    EnumVal("IDLE_8", "0x4", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for eight characters"),
                    EnumVal("IDLE_16", "0x5", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 16 characters"),
                    EnumVal("IDLE_32", "0x6", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 32 characters"),
                    EnumVal("IDLE_64", "0x7", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 64 characters"),
                ]),
                Field("TXOFE", 9, 1, "Transmit FIFO Overflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RXUFE", 8, 1, "Receive FIFO Underflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXFE", 7, 1, "Transmit FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[TXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("TXFIFOSIZE", 4, 3, "Transmit FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Transmit FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Transmit FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Transmit FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Transmit FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Transmit FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Transmit FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Transmit FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Transmit FIFO buffer depth = 256 datawords"),
                ]),
                Field("RXFE", 3, 1, "Receive FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[RXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("RXFIFOSIZE", 0, 3, "Receive FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Receive FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Receive FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Receive FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Receive FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Receive FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Receive FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Receive FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Receive FIFO buffer depth = 256 datawords"),
                ]),
            ]),
            Register("WATER", 0x4032C02C, 32, "Watermark", [
                Field("RXCOUNT", 24, 5, "Receive Counter", [
                ]),
                Field("RXWATER", 16, 4, "Receive Watermark", [
                ]),
                Field("TXCOUNT", 8, 5, "Transmit Counter", [
                ]),
                Field("TXWATER", 0, 4, "Transmit Watermark", [
                ]),
            ]),
            Register("DATARO", 0x4032C030, 32, "Data Read-Only", [
                Field("DATA", 0, 16, "Receive Data", [
                ]),
            ]),
            Register("MCR", 0x4032C040, 32, "MODEM Control", [
                Field("RTS", 9, 1, "Request To Send", [
                    EnumVal("LOGIC_ONE", "0", "Default state is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "Default state is logic zero"),
                ]),
                Field("DTR", 8, 1, "Data Terminal Ready", [
                    EnumVal("LOGIC_ONE", "0", "Default state is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "Default state is logic zero"),
                ]),
                Field("DCD", 3, 1, "Data Carrier Detect", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
                Field("RIN", 2, 1, "Ring Indicator", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
                Field("DSR", 1, 1, "Data Set Ready", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
                Field("CTS", 0, 1, "Clear To Send", [
                    EnumVal("DISABLED", "0", "Interrupt disabled"),
                    EnumVal("ENABLED", "0x1", "Interrupt enabled"),
                ]),
            ]),
            Register("MSR", 0x4032C044, 32, "MODEM Status", [
                Field("DCD", 7, 1, "Data Carrier Detect", [
                    EnumVal("LOGIC_ONE", "0", "The DCD_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The DCD_B pin is logic zero"),
                ]),
                Field("RIN", 6, 1, "Ring Indicator", [
                    EnumVal("LOGIC_ONE", "0", "The RIN_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The RIN_B pin is logic zero"),
                ]),
                Field("DSR", 5, 1, "Data Set Ready", [
                    EnumVal("LOGIC_ONE", "0", "The DSR_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The DSR_B pin is logic zero"),
                ]),
                Field("CTS", 4, 1, "Clear To Send", [
                    EnumVal("LOGIC_ONE", "0", "The CTS_B pin is logic one"),
                    EnumVal("LOGIC_ZERO", "0x1", "The CTS_B pin is logic zero"),
                ]),
                Field("DDCD", 3, 1, "Delta Data Carrier Detect", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
                Field("DRI", 2, 1, "Delta Ring Indicator", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
                Field("DDSR", 1, 1, "Delta Data Set Ready", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
                Field("DCTS", 0, 1, "Delta Clear To Send", [
                    EnumVal("NO_CHANGE", "0", "Did not change state"),
                    EnumVal("CHANGE", "0x1", "Changed state"),
                ]),
            ]),
            Register("REIR", 0x4032C048, 32, "Receiver Extended Idle", [
                Field("IDTIME", 0, 14, "Idle Time", [
                ]),
            ]),
            Register("TEIR", 0x4032C04C, 32, "Transmitter Extended Idle", [
                Field("IDTIME", 0, 14, "Idle Time", [
                ]),
            ]),
            Register("HDCR", 0x4032C050, 32, "Half Duplex Control", [
                Field("RTSEXT", 8, 8, "RTS Extended", [
                ]),
                Field("RXMSK", 3, 1, "Receive Mask", [
                    EnumVal("NO_EFFECT", "0", "Does not mask"),
                    EnumVal("TX_RTS", "0x1", "Masks"),
                ]),
                Field("RXWRMSK", 2, 1, "Receive FIFO Write Mask", [
                    EnumVal("NO_EFFECT", "0", "Does not mask"),
                    EnumVal("TX_RTS", "0x1", "Masks"),
                ]),
                Field("RXSEL", 1, 1, "Receive Select", [
                    EnumVal("PIN_RXD", "0", "RXD"),
                    EnumVal("PIN_TXD", "0x1", "TXD"),
                ]),
                Field("TXSTALL", 0, 1, "Transmit Stall", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RX_ACTIVE", "0x1", "Does not become busy"),
                ]),
            ]),
            Register("TOCR", 0x4032C058, 32, "Timeout Control", [
                Field("TOIE", 8, 4, "Timeout Interrupt Enable", [
                ]),
                Field("TOEN", 0, 4, "Timeout Enable", [
                ]),
            ]),
            Register("TOSR", 0x4032C05C, 32, "Timeout Status", [
                Field("TOF", 8, 4, "Timeout Flag", [
                ]),
                Field("TOZ", 0, 4, "Timeout Zero", [
                ]),
            ]),
            Register("TIMEOUT[0]", 0x4032C060, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TIMEOUT[1]", 0x4032C064, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TIMEOUT[2]", 0x4032C068, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TIMEOUT[3]", 0x4032C06C, 32, "Timeout N", [
                Field("CFG", 30, 2, "Idle Configuration", [
                    EnumVal("CNT_CHAR", "0", "Becomes 1 after timeout characters are received"),
                    EnumVal("CNT_IDLE", "0x1", "Becomes 1 when idle for timeout bit clocks"),
                    EnumVal("CNT_BUSY_IDLE", "0x2", "Becomes 1 when idle for timeout bit clocks following the next character"),
                    EnumVal("CNT_CHAR_IDLE", "0x3", "Becomes 1 when idle for at least timeout bit clocks, but a new character is detected before the extended idle timeout is reached"),
                ]),
                Field("TIMEOUT", 0, 14, "Timeout Value", [
                ]),
            ]),
            Register("TCBR[0]", 0x4032C200, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[1]", 0x4032C204, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[2]", 0x4032C208, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[3]", 0x4032C20C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[4]", 0x4032C210, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[5]", 0x4032C214, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[6]", 0x4032C218, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[7]", 0x4032C21C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[8]", 0x4032C220, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[9]", 0x4032C224, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[10]", 0x4032C228, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[11]", 0x4032C22C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[12]", 0x4032C230, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[13]", 0x4032C234, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[14]", 0x4032C238, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[15]", 0x4032C23C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[16]", 0x4032C240, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[17]", 0x4032C244, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[18]", 0x4032C248, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[19]", 0x4032C24C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[20]", 0x4032C250, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[21]", 0x4032C254, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[22]", 0x4032C258, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[23]", 0x4032C25C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[24]", 0x4032C260, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[25]", 0x4032C264, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[26]", 0x4032C268, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[27]", 0x4032C26C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[28]", 0x4032C270, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[29]", 0x4032C274, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[30]", 0x4032C278, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[31]", 0x4032C27C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[32]", 0x4032C280, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[33]", 0x4032C284, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[34]", 0x4032C288, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[35]", 0x4032C28C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[36]", 0x4032C290, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[37]", 0x4032C294, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[38]", 0x4032C298, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[39]", 0x4032C29C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[40]", 0x4032C2A0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[41]", 0x4032C2A4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[42]", 0x4032C2A8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[43]", 0x4032C2AC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[44]", 0x4032C2B0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[45]", 0x4032C2B4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[46]", 0x4032C2B8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[47]", 0x4032C2BC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[48]", 0x4032C2C0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[49]", 0x4032C2C4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[50]", 0x4032C2C8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[51]", 0x4032C2CC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[52]", 0x4032C2D0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[53]", 0x4032C2D4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[54]", 0x4032C2D8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[55]", 0x4032C2DC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[56]", 0x4032C2E0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[57]", 0x4032C2E4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[58]", 0x4032C2E8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[59]", 0x4032C2EC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[60]", 0x4032C2F0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[61]", 0x4032C2F4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[62]", 0x4032C2F8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[63]", 0x4032C2FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[64]", 0x4032C300, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[65]", 0x4032C304, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[66]", 0x4032C308, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[67]", 0x4032C30C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[68]", 0x4032C310, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[69]", 0x4032C314, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[70]", 0x4032C318, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[71]", 0x4032C31C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[72]", 0x4032C320, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[73]", 0x4032C324, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[74]", 0x4032C328, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[75]", 0x4032C32C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[76]", 0x4032C330, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[77]", 0x4032C334, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[78]", 0x4032C338, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[79]", 0x4032C33C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[80]", 0x4032C340, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[81]", 0x4032C344, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[82]", 0x4032C348, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[83]", 0x4032C34C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[84]", 0x4032C350, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[85]", 0x4032C354, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[86]", 0x4032C358, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[87]", 0x4032C35C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[88]", 0x4032C360, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[89]", 0x4032C364, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[90]", 0x4032C368, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[91]", 0x4032C36C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[92]", 0x4032C370, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[93]", 0x4032C374, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[94]", 0x4032C378, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[95]", 0x4032C37C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[96]", 0x4032C380, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[97]", 0x4032C384, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[98]", 0x4032C388, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[99]", 0x4032C38C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[100]", 0x4032C390, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[101]", 0x4032C394, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[102]", 0x4032C398, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[103]", 0x4032C39C, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[104]", 0x4032C3A0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[105]", 0x4032C3A4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[106]", 0x4032C3A8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[107]", 0x4032C3AC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[108]", 0x4032C3B0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[109]", 0x4032C3B4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[110]", 0x4032C3B8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[111]", 0x4032C3BC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[112]", 0x4032C3C0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[113]", 0x4032C3C4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[114]", 0x4032C3C8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[115]", 0x4032C3CC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[116]", 0x4032C3D0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[117]", 0x4032C3D4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[118]", 0x4032C3D8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[119]", 0x4032C3DC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[120]", 0x4032C3E0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[121]", 0x4032C3E4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[122]", 0x4032C3E8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[123]", 0x4032C3EC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[124]", 0x4032C3F0, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[125]", 0x4032C3F4, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[126]", 0x4032C3F8, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TCBR[127]", 0x4032C3FC, 32, "Transmit Command Burst", [
                Field("DATA", 0, 16, "Data", [
                ]),
            ]),
            Register("TDBR[0]", 0x4032C400, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[1]", 0x4032C404, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[2]", 0x4032C408, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[3]", 0x4032C40C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[4]", 0x4032C410, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[5]", 0x4032C414, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[6]", 0x4032C418, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[7]", 0x4032C41C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[8]", 0x4032C420, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[9]", 0x4032C424, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[10]", 0x4032C428, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[11]", 0x4032C42C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[12]", 0x4032C430, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[13]", 0x4032C434, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[14]", 0x4032C438, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[15]", 0x4032C43C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[16]", 0x4032C440, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[17]", 0x4032C444, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[18]", 0x4032C448, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[19]", 0x4032C44C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[20]", 0x4032C450, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[21]", 0x4032C454, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[22]", 0x4032C458, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[23]", 0x4032C45C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[24]", 0x4032C460, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[25]", 0x4032C464, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[26]", 0x4032C468, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[27]", 0x4032C46C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[28]", 0x4032C470, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[29]", 0x4032C474, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[30]", 0x4032C478, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[31]", 0x4032C47C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[32]", 0x4032C480, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[33]", 0x4032C484, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[34]", 0x4032C488, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[35]", 0x4032C48C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[36]", 0x4032C490, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[37]", 0x4032C494, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[38]", 0x4032C498, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[39]", 0x4032C49C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[40]", 0x4032C4A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[41]", 0x4032C4A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[42]", 0x4032C4A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[43]", 0x4032C4AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[44]", 0x4032C4B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[45]", 0x4032C4B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[46]", 0x4032C4B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[47]", 0x4032C4BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[48]", 0x4032C4C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[49]", 0x4032C4C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[50]", 0x4032C4C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[51]", 0x4032C4CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[52]", 0x4032C4D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[53]", 0x4032C4D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[54]", 0x4032C4D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[55]", 0x4032C4DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[56]", 0x4032C4E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[57]", 0x4032C4E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[58]", 0x4032C4E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[59]", 0x4032C4EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[60]", 0x4032C4F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[61]", 0x4032C4F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[62]", 0x4032C4F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[63]", 0x4032C4FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[64]", 0x4032C500, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[65]", 0x4032C504, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[66]", 0x4032C508, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[67]", 0x4032C50C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[68]", 0x4032C510, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[69]", 0x4032C514, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[70]", 0x4032C518, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[71]", 0x4032C51C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[72]", 0x4032C520, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[73]", 0x4032C524, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[74]", 0x4032C528, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[75]", 0x4032C52C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[76]", 0x4032C530, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[77]", 0x4032C534, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[78]", 0x4032C538, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[79]", 0x4032C53C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[80]", 0x4032C540, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[81]", 0x4032C544, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[82]", 0x4032C548, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[83]", 0x4032C54C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[84]", 0x4032C550, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[85]", 0x4032C554, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[86]", 0x4032C558, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[87]", 0x4032C55C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[88]", 0x4032C560, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[89]", 0x4032C564, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[90]", 0x4032C568, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[91]", 0x4032C56C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[92]", 0x4032C570, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[93]", 0x4032C574, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[94]", 0x4032C578, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[95]", 0x4032C57C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[96]", 0x4032C580, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[97]", 0x4032C584, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[98]", 0x4032C588, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[99]", 0x4032C58C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[100]", 0x4032C590, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[101]", 0x4032C594, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[102]", 0x4032C598, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[103]", 0x4032C59C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[104]", 0x4032C5A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[105]", 0x4032C5A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[106]", 0x4032C5A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[107]", 0x4032C5AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[108]", 0x4032C5B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[109]", 0x4032C5B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[110]", 0x4032C5B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[111]", 0x4032C5BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[112]", 0x4032C5C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[113]", 0x4032C5C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[114]", 0x4032C5C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[115]", 0x4032C5CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[116]", 0x4032C5D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[117]", 0x4032C5D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[118]", 0x4032C5D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[119]", 0x4032C5DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[120]", 0x4032C5E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[121]", 0x4032C5E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[122]", 0x4032C5E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[123]", 0x4032C5EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[124]", 0x4032C5F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[125]", 0x4032C5F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[126]", 0x4032C5F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[127]", 0x4032C5FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[128]", 0x4032C600, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[129]", 0x4032C604, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[130]", 0x4032C608, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[131]", 0x4032C60C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[132]", 0x4032C610, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[133]", 0x4032C614, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[134]", 0x4032C618, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[135]", 0x4032C61C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[136]", 0x4032C620, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[137]", 0x4032C624, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[138]", 0x4032C628, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[139]", 0x4032C62C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[140]", 0x4032C630, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[141]", 0x4032C634, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[142]", 0x4032C638, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[143]", 0x4032C63C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[144]", 0x4032C640, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[145]", 0x4032C644, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[146]", 0x4032C648, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[147]", 0x4032C64C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[148]", 0x4032C650, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[149]", 0x4032C654, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[150]", 0x4032C658, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[151]", 0x4032C65C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[152]", 0x4032C660, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[153]", 0x4032C664, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[154]", 0x4032C668, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[155]", 0x4032C66C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[156]", 0x4032C670, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[157]", 0x4032C674, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[158]", 0x4032C678, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[159]", 0x4032C67C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[160]", 0x4032C680, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[161]", 0x4032C684, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[162]", 0x4032C688, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[163]", 0x4032C68C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[164]", 0x4032C690, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[165]", 0x4032C694, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[166]", 0x4032C698, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[167]", 0x4032C69C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[168]", 0x4032C6A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[169]", 0x4032C6A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[170]", 0x4032C6A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[171]", 0x4032C6AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[172]", 0x4032C6B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[173]", 0x4032C6B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[174]", 0x4032C6B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[175]", 0x4032C6BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[176]", 0x4032C6C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[177]", 0x4032C6C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[178]", 0x4032C6C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[179]", 0x4032C6CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[180]", 0x4032C6D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[181]", 0x4032C6D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[182]", 0x4032C6D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[183]", 0x4032C6DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[184]", 0x4032C6E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[185]", 0x4032C6E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[186]", 0x4032C6E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[187]", 0x4032C6EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[188]", 0x4032C6F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[189]", 0x4032C6F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[190]", 0x4032C6F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[191]", 0x4032C6FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[192]", 0x4032C700, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[193]", 0x4032C704, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[194]", 0x4032C708, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[195]", 0x4032C70C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[196]", 0x4032C710, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[197]", 0x4032C714, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[198]", 0x4032C718, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[199]", 0x4032C71C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[200]", 0x4032C720, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[201]", 0x4032C724, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[202]", 0x4032C728, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[203]", 0x4032C72C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[204]", 0x4032C730, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[205]", 0x4032C734, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[206]", 0x4032C738, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[207]", 0x4032C73C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[208]", 0x4032C740, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[209]", 0x4032C744, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[210]", 0x4032C748, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[211]", 0x4032C74C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[212]", 0x4032C750, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[213]", 0x4032C754, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[214]", 0x4032C758, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[215]", 0x4032C75C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[216]", 0x4032C760, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[217]", 0x4032C764, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[218]", 0x4032C768, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[219]", 0x4032C76C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[220]", 0x4032C770, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[221]", 0x4032C774, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[222]", 0x4032C778, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[223]", 0x4032C77C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[224]", 0x4032C780, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[225]", 0x4032C784, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[226]", 0x4032C788, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[227]", 0x4032C78C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[228]", 0x4032C790, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[229]", 0x4032C794, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[230]", 0x4032C798, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[231]", 0x4032C79C, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[232]", 0x4032C7A0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[233]", 0x4032C7A4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[234]", 0x4032C7A8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[235]", 0x4032C7AC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[236]", 0x4032C7B0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[237]", 0x4032C7B4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[238]", 0x4032C7B8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[239]", 0x4032C7BC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[240]", 0x4032C7C0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[241]", 0x4032C7C4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[242]", 0x4032C7C8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[243]", 0x4032C7CC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[244]", 0x4032C7D0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[245]", 0x4032C7D4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[246]", 0x4032C7D8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[247]", 0x4032C7DC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[248]", 0x4032C7E0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[249]", 0x4032C7E4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[250]", 0x4032C7E8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[251]", 0x4032C7EC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[252]", 0x4032C7F0, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[253]", 0x4032C7F4, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[254]", 0x4032C7F8, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
            Register("TDBR[255]", 0x4032C7FC, 32, "Transmit Data Burst", [
                Field("DATA3", 24, 8, "Data3", [
                ]),
                Field("DATA2", 16, 8, "Data2", [
                ]),
                Field("DATA1", 8, 8, "Data1", [
                ]),
                Field("DATA0", 0, 8, "Data0", [
                ]),
            ]),
        ])

class Module_LPUART_2(Peripheral):
    def __init__(self):
        super().__init__("LPUART_2", 0x40330000, 0x34, [
            Register("VERID", 0x40330000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Identification Number", [
                    EnumVal("STANDARD", "0x1", "Standard feature set"),
                    EnumVal("MODEM", "0x3", "Standard feature set with MODEM and IrDA support"),
                ]),
            ]),
            Register("PARAM", 0x40330004, 32, "Parameter", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("GLOBAL", 0x40330008, 32, "Global", [
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NO_EFFECT", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
            ]),
            Register("PINCFG", 0x4033000C, 32, "Pin Configuration", [
                Field("TRGSEL", 0, 2, "Trigger Select", [
                    EnumVal("DISABLED", "0", "Input trigger disabled"),
                    EnumVal("TRG_RXD", "0x1", "Input trigger used instead of the RXD pin input"),
                    EnumVal("TRG_CTS", "0x2", "Input trigger used instead of the CTS_B pin input"),
                    EnumVal("TRG_TXD", "0x3", "Input trigger used to modulate the TXD pin output, which (after TXINV configuration) is internally ANDed with the input trigger"),
                ]),
            ]),
            Register("BAUD", 0x40330010, 32, "Baud Rate", [
                Field("MAEN1", 31, 1, "Match Address Mode Enable 1", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MAEN2", 30, 1, "Match Address Mode Enable 2", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M10", 29, 1, "10-Bit Mode Select", [
                    EnumVal("DISABLED", "0", "Receiver and transmitter use 7-bit to 9-bit data characters"),
                    EnumVal("ENABLED", "0x1", "Receiver and transmitter use 10-bit data characters"),
                ]),
                Field("OSR", 24, 5, "Oversampling Ratio (OSR)", [
                    EnumVal("DEFAULT", "0", "Results in an OSR of 16"),
                    EnumVal("OSR_4", "0x3", "Results in an OSR of 4 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_5", "0x4", "Results in an OSR of 5 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_6", "0x5", "Results in an OSR of 6 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_7", "0x6", "Results in an OSR of 7 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_8", "0x7", "Results in an OSR of 8"),
                    EnumVal("OSR_9", "0x8", "Results in an OSR of 9"),
                    EnumVal("OSR_10", "0x9", "Results in an OSR of 10"),
                    EnumVal("OSR_11", "0xA", "Results in an OSR of 11"),
                    EnumVal("OSR_12", "0xB", "Results in an OSR of 12"),
                    EnumVal("OSR_13", "0xC", "Results in an OSR of 13"),
                    EnumVal("OSR_14", "0xD", "Results in an OSR of 14"),
                    EnumVal("OSR_15", "0xE", "Results in an OSR of 15"),
                    EnumVal("OSR_16", "0xF", "Results in an OSR of 16"),
                    EnumVal("OSR_17", "0x10", "Results in an OSR of 17"),
                    EnumVal("OSR_18", "0x11", "Results in an OSR of 18"),
                    EnumVal("OSR_19", "0x12", "Results in an OSR of 19"),
                    EnumVal("OSR_20", "0x13", "Results in an OSR of 20"),
                    EnumVal("OSR_21", "0x14", "Results in an OSR of 21"),
                    EnumVal("OSR_22", "0x15", "Results in an OSR of 22"),
                    EnumVal("OSR_23", "0x16", "Results in an OSR of 23"),
                    EnumVal("OSR_24", "0x17", "Results in an OSR of 24"),
                    EnumVal("OSR_25", "0x18", "Results in an OSR of 25"),
                    EnumVal("OSR_26", "0x19", "Results in an OSR of 26"),
                    EnumVal("OSR_27", "0x1A", "Results in an OSR of 27"),
                    EnumVal("OSR_28", "0x1B", "Results in an OSR of 28"),
                    EnumVal("OSR_29", "0x1C", "Results in an OSR of 29"),
                    EnumVal("OSR_30", "0x1D", "Results in an OSR of 30"),
                    EnumVal("OSR_31", "0x1E", "Results in an OSR of 31"),
                    EnumVal("OSR_32", "0x1F", "Results in an OSR of 32"),
                ]),
                Field("TDMAE", 23, 1, "Transmitter DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("RDMAE", 21, 1, "Receiver Full DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("MATCFG", 18, 2, "Match Configuration", [
                    EnumVal("ADDR_MATCH", "0", "Address match wakeup"),
                    EnumVal("IDLE_MATCH", "0x1", "Idle match wakeup"),
                    EnumVal("ONOFF_MATCH", "0x2", "Match on and match off"),
                    EnumVal("RWU_MATCH", "0x3", "Enables RWU on data match and match on/off for the transmitter CTS input"),
                ]),
                Field("BOTHEDGE", 17, 1, "Both Edge Sampling", [
                    EnumVal("DISABLED", "0", "Receiver samples input data using the rising edge of the baud rate clock"),
                    EnumVal("ENABLED", "0x1", "Receiver samples input data using the rising and falling edges of the baud rate clock"),
                ]),
                Field("RESYNCDIS", 16, 1, "Resynchronization Disable", [
                    EnumVal("RESYNC", "0", "Enables resynchronization"),
                    EnumVal("NO_RESYNC", "0x1", "Disables resynchronization"),
                ]),
                Field("LBKDIE", 15, 1, "LIN Break Detect Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[LBKDIF] (uses polling)"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupt when STAT[LBKDIF] is 1"),
                ]),
                Field("RXEDGIE", 14, 1, "RX Input Active Edge Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[RXEDGIF]"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupts when STAT[RXEDGIF] is 1"),
                ]),
                Field("SBNS", 13, 1, "Stop Bit Number Select", [
                    EnumVal("ONE", "0", "One stop bit"),
                    EnumVal("TWO", "0x1", "Two stop bits"),
                ]),
                Field("SBR", 0, 13, "Baud Rate Modulo Divisor", [
                ]),
            ]),
            Register("STAT", 0x40330014, 32, "Status", [
                Field("LBKDIF", 31, 1, "LIN Break Detect Interrupt Flag", [
                    EnumVal("NOT_DETECTED", "0", "Not detected"),
                    EnumVal("DETECTED", "0x1", "Detected"),
                ]),
                Field("RXEDGIF", 30, 1, "RXD Pin Active Edge Interrupt Flag", [
                    EnumVal("NO_EDGE", "0", "Not occurred"),
                    EnumVal("EDGE", "0x1", "Occurred"),
                ]),
                Field("MSBF", 29, 1, "MSB First", [
                    EnumVal("LSB_FIRST", "0", "LSB"),
                    EnumVal("MSB_FIRST", "0x1", "MSB"),
                ]),
                Field("RXINV", 28, 1, "Receive Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Inverted"),
                    EnumVal("INVERTED", "0x1", "Not inverted"),
                ]),
                Field("RWUID", 27, 1, "Receive Wake Up Idle Detect", [
                    EnumVal("IDLE_NOTSET", "0", "STAT[IDLE] does not become 1"),
                    EnumVal("IDLE_SET", "0x1", "STAT[IDLE] becomes 1"),
                ]),
                Field("BRK13", 26, 1, "Break Character Generation Length", [
                    EnumVal("SHORT", "0", "9 to 13 bit times"),
                    EnumVal("LONG", "0x1", "12 to 15 bit times"),
                ]),
                Field("LBKDE", 25, 1, "LIN Break Detection Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RAF", 24, 1, "Receiver Active Flag", [
                    EnumVal("IDLE", "0", "Idle, waiting for a start bit"),
                    EnumVal("ACTIVE", "0x1", "Receiver active (RXD pin input not idle)"),
                ]),
                Field("TDRE", 23, 1, "Transmit Data Register Empty Flag", [
                    EnumVal("TXDATA", "0", "Greater than watermark"),
                    EnumVal("NO_TXDATA", "0x1", "Equal to or less than watermark"),
                ]),
                Field("TC", 22, 1, "Transmission Complete Flag", [
                    EnumVal("ACTIVE", "0", "Transmitter active (sending data, a preamble, or a break)"),
                    EnumVal("COMPLETE", "0x1", "Transmitter idle (transmission activity complete)"),
                ]),
                Field("RDRF", 21, 1, "Receive Data Register Full Flag", [
                    EnumVal("NO_RXDATA", "0", "Equal to or less than watermark"),
                    EnumVal("RXDATA", "0x1", "Greater than watermark"),
                ]),
                Field("IDLE", 20, 1, "Idle Line Flag", [
                    EnumVal("NOIDLE", "0", "No idle line detected"),
                    EnumVal("IDLE", "0x1", "Idle line detected"),
                ]),
                Field("OR", 19, 1, "Receiver Overrun Flag", [
                    EnumVal("NO_OVERRUN", "0", "No overrun"),
                    EnumVal("OVERRUN", "0x1", "Receive overrun (new LPUART data lost)"),
                ]),
                Field("NF", 18, 1, "Noise Flag (NF)", [
                    EnumVal("NONOISE", "0", "No noise detected"),
                    EnumVal("NOISE", "0x1", "Noise detected"),
                ]),
                Field("FE", 17, 1, "Framing Error Flag (FE)", [
                    EnumVal("NOERROR", "0", "No framing error detected (this does not guarantee that the framing is correct)"),
                    EnumVal("ERROR", "0x1", "Framing error detected"),
                ]),
                Field("PF", 16, 1, "Parity Error Flag (PF)", [
                    EnumVal("NOPARITY", "0", "No parity error detected"),
                    EnumVal("PARITY", "0x1", "Parity error detected"),
                ]),
                Field("MA1F", 15, 1, "Match 1 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA1"),
                    EnumVal("MATCH", "0x1", "Equal to MA1"),
                ]),
                Field("MA2F", 14, 1, "Match 2 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA2"),
                    EnumVal("MATCH", "0x1", "Equal to MA2"),
                ]),
                Field("AME", 1, 1, "Address Mark Enable", [
                    EnumVal("DISABLED", "0", "Address mark in character is MSB"),
                    EnumVal("ENABLED", "0x1", "Address mark in character is the last bit before the stop bit (or parity bit when enabled)"),
                ]),
                Field("LBKFE", 0, 1, "LIN Break Flag Enable", [
                    EnumVal("DISABLED", "0", "Disables LIN break detect"),
                    EnumVal("ENABLED", "0x1", "Enables LIN break detect"),
                ]),
            ]),
            Register("CTRL", 0x40330018, 32, "Control", [
                Field("R8T9", 31, 1, "Receive Bit 8 Transmit Bit 9", [
                ]),
                Field("R9T8", 30, 1, "Receive Bit 9 Transmit Bit 8", [
                ]),
                Field("TXDIR", 29, 1, "TXD Pin Direction in Single-Wire Mode", [
                    EnumVal("TX_INPUT", "0", "TXD pin is an input in Single-Wire mode"),
                    EnumVal("TX_OUTPUT", "0x1", "TXD pin is an output in Single-Wire mode"),
                ]),
                Field("TXINV", 28, 1, "Transmit Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Not inverted"),
                    EnumVal("INVERTED", "0x1", "Inverted"),
                ]),
                Field("ORIE", 27, 1, "Overrun Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("NEIE", 26, 1, "Noise Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("FEIE", 25, 1, "Framing Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PEIE", 24, 1, "Parity Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TIE", 23, 1, "Transmit Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TCIE", 22, 1, "Transmission Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RIE", 21, 1, "Receiver Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("ILIE", 20, 1, "Idle Line Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables hardware interrupts from STAT[IDLE]; use polling"),
                    EnumVal("ENABLED", "0x1", "Enables hardware interrupts when STAT[IDLE] = 1"),
                ]),
                Field("TE", 19, 1, "Transmitter Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RE", 18, 1, "Receiver Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RWU", 17, 1, "Receiver Wakeup Control", [
                    EnumVal("NO_EFFECT", "0", "Normal receiver operation"),
                    EnumVal("RX_WAKEUP", "0x1", "LPUART receiver in standby, waiting for a wakeup condition"),
                ]),
                Field("SBK", 16, 1, "Send Break", [
                    EnumVal("NO_EFFECT", "0", "Normal transmitter operation"),
                    EnumVal("TX_BREAK", "0x1", "Queue break character(s) to be sent"),
                ]),
                Field("MA1IE", 15, 1, "Match 1 (MA1F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MA2IE", 14, 1, "Match 2 (MA2F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M7", 11, 1, "7-Bit Mode Select", [
                    EnumVal("NO_EFFECT", "0", "8-bit to 10-bit data characters"),
                    EnumVal("DATA7", "0x1", "7-bit data characters"),
                ]),
                Field("IDLECFG", 8, 3, "Idle Configuration", [
                    EnumVal("IDLE_1", "0", "1"),
                    EnumVal("IDLE_2", "0x1", "2"),
                    EnumVal("IDLE_4", "0x2", "4"),
                    EnumVal("IDLE_8", "0x3", "8"),
                    EnumVal("IDLE_16", "0x4", "16"),
                    EnumVal("IDLE_32", "0x5", "32"),
                    EnumVal("IDLE_64", "0x6", "64"),
                    EnumVal("IDLE_128", "0x7", "128"),
                ]),
                Field("LOOPS", 7, 1, "Loop Mode Select", [
                    EnumVal("NOFFECT", "0", "Normal operation: RXD and TXD use separate pins"),
                    EnumVal("LOOPBACK", "0x1", "Loop mode or Single-Wire mode"),
                ]),
                Field("DOZEEN", 6, 1, "Enables LPUART in Doze mode.", [
                    EnumVal("ENABLED", "0", "Enables"),
                    EnumVal("DISABLED", "0x1", "Disables"),
                ]),
                Field("RSRC", 5, 1, "Receiver Source Select", [
                    EnumVal("NO_EFFECT", "0", "Internal Loopback mode"),
                    EnumVal("ONEWIRE", "0x1", "Single-wire mode"),
                ]),
                Field("M", 4, 1, "9-Bit Or 8-Bit Mode Select", [
                    EnumVal("DATA8", "0", "8-bit data characters"),
                    EnumVal("DATA9", "0x1", "9-bit data characters"),
                ]),
                Field("WAKE", 3, 1, "Receiver Wakeup Method Select", [
                    EnumVal("IDLE", "0", "Configures CTRL[RWU] for idle-line wakeup"),
                    EnumVal("MARK", "0x1", "Configures CTRL[RWU] with address-mark wakeup"),
                ]),
                Field("ILT", 2, 1, "Idle Line Type Select", [
                    EnumVal("FROM_START", "0", "After the start bit"),
                    EnumVal("FROM_STOP", "0x1", "After the stop bit"),
                ]),
                Field("PE", 1, 1, "Parity Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PT", 0, 1, "Parity Type", [
                    EnumVal("EVEN", "0", "Even parity"),
                    EnumVal("ODD", "0x1", "Odd parity"),
                ]),
            ]),
            Register("DATA", 0x4033001C, 32, "Data", [
                Field("NOISY", 15, 1, "Noisy Data Received", [
                    EnumVal("NO_NOISE", "0", "Received without noise"),
                    EnumVal("NOISE", "0x1", "Received with noise"),
                ]),
                Field("PARITYE", 14, 1, "Parity Error", [
                    EnumVal("NO_PARITY", "0", "Received without a parity error"),
                    EnumVal("PARITY", "0x1", "Received with a parity error"),
                ]),
                Field("FRETSC", 13, 1, "Frame Error Transmit Special Character", [
                    EnumVal("NO_ERROR", "0", "Received without a frame error on reads or transmits a normal character on writes"),
                    EnumVal("ERROR", "0x1", "Received with a frame error on reads or transmits an idle or break character on writes"),
                ]),
                Field("RXEMPT", 12, 1, "Receive Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Contains valid data"),
                    EnumVal("EMPTY", "0x1", "Contains invalid data and is empty"),
                ]),
                Field("IDLINE", 11, 1, "Idle Line", [
                    EnumVal("NO_IDLE", "0", "Received was not idle"),
                    EnumVal("IDLE", "0x1", "Receiver was idle"),
                ]),
                Field("LINBRK", 10, 1, "LIN Break", [
                    EnumVal("NO_BREAK", "0", "LIN break not detected or LIN break detect circuitry disabled"),
                    EnumVal("BREAK", "0x1", "LIN break detected"),
                ]),
                Field("R9T9", 9, 1, "Read Receive FIFO Bit 9 Or Write Transmit FIFO Bit 9", [
                ]),
                Field("R8T8", 8, 1, "Read Receive FIFO Bit 8 Or Write Transmit FIFO Bit 8", [
                ]),
                Field("R7T7", 7, 1, "Read Receive FIFO Bit 7 Or Write Transmit FIFO Bit 7", [
                ]),
                Field("R6T6", 6, 1, "Read Receive FIFO Bit 6 Or Write Transmit FIFO Bit 6", [
                ]),
                Field("R5T5", 5, 1, "Read Receive FIFO Bit 5 Or Write Transmit FIFO Bit 5", [
                ]),
                Field("R4T4", 4, 1, "Read Receive FIFO Bit 4 Or Write Transmit FIFO Bit 4", [
                ]),
                Field("R3T3", 3, 1, "Read Receive FIFO Bit 3 Or Write Transmit FIFO Bit 3", [
                ]),
                Field("R2T2", 2, 1, "Read Receive FIFO Bit 2 Or Write Transmit FIFO Bit 2", [
                ]),
                Field("R1T1", 1, 1, "Read Receive FIFO Bit 1 Or Write Transmit FIFO Bit 1", [
                ]),
                Field("R0T0", 0, 1, "Read Receive FIFO Bit 0 Or Write Transmit FIFO Bit 0", [
                ]),
            ]),
            Register("MATCH", 0x40330020, 32, "Match Address", [
                Field("MA2", 16, 10, "Match Address 2", [
                ]),
                Field("MA1", 0, 10, "Match Address 1", [
                ]),
            ]),
            Register("MODIR", 0x40330024, 32, "MODEM IrDA", [
                Field("IREN", 18, 1, "IR Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TNP", 16, 2, "Transmitter Narrow Pulse", [
                    EnumVal("ONE_SAMPLE", "0", "1 / OSR"),
                    EnumVal("TWO_SAMPLE", "0x1", "2 / OSR"),
                    EnumVal("THREE_SAMPLE", "0x2", "3 / OSR"),
                    EnumVal("FOUR_SAMPLE", "0x3", "4 / OSR"),
                ]),
                Field("RTSWATER", 8, 2, "Receive RTS Configuration", [
                ]),
                Field("TXCTSSRC", 5, 1, "Transmit CTS Source", [
                    EnumVal("CTS", "0", "The CTS_B pin"),
                    EnumVal("MATCH", "0x1", "An internal connection to the receiver address match result"),
                ]),
                Field("TXCTSC", 4, 1, "Transmit CTS Configuration", [
                    EnumVal("START", "0", "Sampled at the start of each character"),
                    EnumVal("IDLE", "0x1", "Sampled when the transmitter is idle"),
                ]),
                Field("RXRTSE", 3, 1, "Receiver RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXRTSPOL", 2, 1, "Transmitter RTS Polarity", [
                    EnumVal("LOW", "0", "Transmitter RTS is active low"),
                    EnumVal("HIGH", "0x1", "Transmitter RTS is active high"),
                ]),
                Field("TXRTSE", 1, 1, "Transmitter RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXCTSE", 0, 1, "Transmitter CTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
            ]),
            Register("FIFO", 0x40330028, 32, "FIFO", [
                Field("TXEMPT", 23, 1, "Transmit FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("RXEMPT", 22, 1, "Receive FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("TXOF", 17, 1, "Transmitter FIFO Overflow Flag", [
                    EnumVal("NO_OVERFLOW", "0", "No overflow"),
                    EnumVal("OVERFLOW", "0x1", "Overflow"),
                ]),
                Field("RXUF", 16, 1, "Receiver FIFO Underflow Flag", [
                    EnumVal("NO_UNDERFLOW", "0", "No underflow"),
                    EnumVal("UNDERFLOW", "0x1", "Underflow"),
                ]),
                Field("TXFLUSH", 15, 1, "Transmit FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXFLUSH", 14, 1, "Receive FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXIDEN", 10, 3, "Receiver Idle Empty Enable", [
                    EnumVal("DISABLED", "0", "Disables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle"),
                    EnumVal("IDLE_1", "0x1", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for one character"),
                    EnumVal("IDLE_2", "0x2", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for two characters"),
                    EnumVal("IDLE_4", "0x3", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for four characters"),
                    EnumVal("IDLE_8", "0x4", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for eight characters"),
                    EnumVal("IDLE_16", "0x5", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 16 characters"),
                    EnumVal("IDLE_32", "0x6", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 32 characters"),
                    EnumVal("IDLE_64", "0x7", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 64 characters"),
                ]),
                Field("TXOFE", 9, 1, "Transmit FIFO Overflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RXUFE", 8, 1, "Receive FIFO Underflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXFE", 7, 1, "Transmit FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[TXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("TXFIFOSIZE", 4, 3, "Transmit FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Transmit FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Transmit FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Transmit FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Transmit FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Transmit FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Transmit FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Transmit FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Transmit FIFO buffer depth = 256 datawords"),
                ]),
                Field("RXFE", 3, 1, "Receive FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[RXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("RXFIFOSIZE", 0, 3, "Receive FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Receive FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Receive FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Receive FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Receive FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Receive FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Receive FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Receive FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Receive FIFO buffer depth = 256 datawords"),
                ]),
            ]),
            Register("WATER", 0x4033002C, 32, "Watermark", [
                Field("RXCOUNT", 24, 3, "Receive Counter", [
                ]),
                Field("RXWATER", 16, 2, "Receive Watermark", [
                ]),
                Field("TXCOUNT", 8, 3, "Transmit Counter", [
                ]),
                Field("TXWATER", 0, 2, "Transmit Watermark", [
                ]),
            ]),
            Register("DATARO", 0x40330030, 32, "Data Read-Only", [
                Field("DATA", 0, 16, "Receive Data", [
                ]),
            ]),
        ])

class Module_LPUART_3(Peripheral):
    def __init__(self):
        super().__init__("LPUART_3", 0x40334000, 0x34, [
            Register("VERID", 0x40334000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Identification Number", [
                    EnumVal("STANDARD", "0x1", "Standard feature set"),
                    EnumVal("MODEM", "0x3", "Standard feature set with MODEM and IrDA support"),
                ]),
            ]),
            Register("PARAM", 0x40334004, 32, "Parameter", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("GLOBAL", 0x40334008, 32, "Global", [
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NO_EFFECT", "0", "Not reset"),
                    EnumVal("RESET", "0x1", "Reset"),
                ]),
            ]),
            Register("PINCFG", 0x4033400C, 32, "Pin Configuration", [
                Field("TRGSEL", 0, 2, "Trigger Select", [
                    EnumVal("DISABLED", "0", "Input trigger disabled"),
                    EnumVal("TRG_RXD", "0x1", "Input trigger used instead of the RXD pin input"),
                    EnumVal("TRG_CTS", "0x2", "Input trigger used instead of the CTS_B pin input"),
                    EnumVal("TRG_TXD", "0x3", "Input trigger used to modulate the TXD pin output, which (after TXINV configuration) is internally ANDed with the input trigger"),
                ]),
            ]),
            Register("BAUD", 0x40334010, 32, "Baud Rate", [
                Field("MAEN1", 31, 1, "Match Address Mode Enable 1", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MAEN2", 30, 1, "Match Address Mode Enable 2", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M10", 29, 1, "10-Bit Mode Select", [
                    EnumVal("DISABLED", "0", "Receiver and transmitter use 7-bit to 9-bit data characters"),
                    EnumVal("ENABLED", "0x1", "Receiver and transmitter use 10-bit data characters"),
                ]),
                Field("OSR", 24, 5, "Oversampling Ratio (OSR)", [
                    EnumVal("DEFAULT", "0", "Results in an OSR of 16"),
                    EnumVal("OSR_4", "0x3", "Results in an OSR of 4 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_5", "0x4", "Results in an OSR of 5 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_6", "0x5", "Results in an OSR of 6 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_7", "0x6", "Results in an OSR of 7 (requires BAUD[BOTHEDGE] to be 1)"),
                    EnumVal("OSR_8", "0x7", "Results in an OSR of 8"),
                    EnumVal("OSR_9", "0x8", "Results in an OSR of 9"),
                    EnumVal("OSR_10", "0x9", "Results in an OSR of 10"),
                    EnumVal("OSR_11", "0xA", "Results in an OSR of 11"),
                    EnumVal("OSR_12", "0xB", "Results in an OSR of 12"),
                    EnumVal("OSR_13", "0xC", "Results in an OSR of 13"),
                    EnumVal("OSR_14", "0xD", "Results in an OSR of 14"),
                    EnumVal("OSR_15", "0xE", "Results in an OSR of 15"),
                    EnumVal("OSR_16", "0xF", "Results in an OSR of 16"),
                    EnumVal("OSR_17", "0x10", "Results in an OSR of 17"),
                    EnumVal("OSR_18", "0x11", "Results in an OSR of 18"),
                    EnumVal("OSR_19", "0x12", "Results in an OSR of 19"),
                    EnumVal("OSR_20", "0x13", "Results in an OSR of 20"),
                    EnumVal("OSR_21", "0x14", "Results in an OSR of 21"),
                    EnumVal("OSR_22", "0x15", "Results in an OSR of 22"),
                    EnumVal("OSR_23", "0x16", "Results in an OSR of 23"),
                    EnumVal("OSR_24", "0x17", "Results in an OSR of 24"),
                    EnumVal("OSR_25", "0x18", "Results in an OSR of 25"),
                    EnumVal("OSR_26", "0x19", "Results in an OSR of 26"),
                    EnumVal("OSR_27", "0x1A", "Results in an OSR of 27"),
                    EnumVal("OSR_28", "0x1B", "Results in an OSR of 28"),
                    EnumVal("OSR_29", "0x1C", "Results in an OSR of 29"),
                    EnumVal("OSR_30", "0x1D", "Results in an OSR of 30"),
                    EnumVal("OSR_31", "0x1E", "Results in an OSR of 31"),
                    EnumVal("OSR_32", "0x1F", "Results in an OSR of 32"),
                ]),
                Field("TDMAE", 23, 1, "Transmitter DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("RDMAE", 21, 1, "Receiver Full DMA Enable", [
                    EnumVal("DISABLED", "0", "Disables DMA request"),
                    EnumVal("ENABLED", "0x1", "Enables DMA request"),
                ]),
                Field("MATCFG", 18, 2, "Match Configuration", [
                    EnumVal("ADDR_MATCH", "0", "Address match wakeup"),
                    EnumVal("IDLE_MATCH", "0x1", "Idle match wakeup"),
                    EnumVal("ONOFF_MATCH", "0x2", "Match on and match off"),
                    EnumVal("RWU_MATCH", "0x3", "Enables RWU on data match and match on/off for the transmitter CTS input"),
                ]),
                Field("BOTHEDGE", 17, 1, "Both Edge Sampling", [
                    EnumVal("DISABLED", "0", "Receiver samples input data using the rising edge of the baud rate clock"),
                    EnumVal("ENABLED", "0x1", "Receiver samples input data using the rising and falling edges of the baud rate clock"),
                ]),
                Field("RESYNCDIS", 16, 1, "Resynchronization Disable", [
                    EnumVal("RESYNC", "0", "Enables resynchronization"),
                    EnumVal("NO_RESYNC", "0x1", "Disables resynchronization"),
                ]),
                Field("LBKDIE", 15, 1, "LIN Break Detect Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[LBKDIF] (uses polling)"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupt when STAT[LBKDIF] is 1"),
                ]),
                Field("RXEDGIE", 14, 1, "RX Input Active Edge Interrupt Enable", [
                    EnumVal("DISABLE", "0", "Disables hardware interrupts from STAT[RXEDGIF]"),
                    EnumVal("ENABLE", "0x1", "Requests hardware interrupts when STAT[RXEDGIF] is 1"),
                ]),
                Field("SBNS", 13, 1, "Stop Bit Number Select", [
                    EnumVal("ONE", "0", "One stop bit"),
                    EnumVal("TWO", "0x1", "Two stop bits"),
                ]),
                Field("SBR", 0, 13, "Baud Rate Modulo Divisor", [
                ]),
            ]),
            Register("STAT", 0x40334014, 32, "Status", [
                Field("LBKDIF", 31, 1, "LIN Break Detect Interrupt Flag", [
                    EnumVal("NOT_DETECTED", "0", "Not detected"),
                    EnumVal("DETECTED", "0x1", "Detected"),
                ]),
                Field("RXEDGIF", 30, 1, "RXD Pin Active Edge Interrupt Flag", [
                    EnumVal("NO_EDGE", "0", "Not occurred"),
                    EnumVal("EDGE", "0x1", "Occurred"),
                ]),
                Field("MSBF", 29, 1, "MSB First", [
                    EnumVal("LSB_FIRST", "0", "LSB"),
                    EnumVal("MSB_FIRST", "0x1", "MSB"),
                ]),
                Field("RXINV", 28, 1, "Receive Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Inverted"),
                    EnumVal("INVERTED", "0x1", "Not inverted"),
                ]),
                Field("RWUID", 27, 1, "Receive Wake Up Idle Detect", [
                    EnumVal("IDLE_NOTSET", "0", "STAT[IDLE] does not become 1"),
                    EnumVal("IDLE_SET", "0x1", "STAT[IDLE] becomes 1"),
                ]),
                Field("BRK13", 26, 1, "Break Character Generation Length", [
                    EnumVal("SHORT", "0", "9 to 13 bit times"),
                    EnumVal("LONG", "0x1", "12 to 15 bit times"),
                ]),
                Field("LBKDE", 25, 1, "LIN Break Detection Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RAF", 24, 1, "Receiver Active Flag", [
                    EnumVal("IDLE", "0", "Idle, waiting for a start bit"),
                    EnumVal("ACTIVE", "0x1", "Receiver active (RXD pin input not idle)"),
                ]),
                Field("TDRE", 23, 1, "Transmit Data Register Empty Flag", [
                    EnumVal("TXDATA", "0", "Greater than watermark"),
                    EnumVal("NO_TXDATA", "0x1", "Equal to or less than watermark"),
                ]),
                Field("TC", 22, 1, "Transmission Complete Flag", [
                    EnumVal("ACTIVE", "0", "Transmitter active (sending data, a preamble, or a break)"),
                    EnumVal("COMPLETE", "0x1", "Transmitter idle (transmission activity complete)"),
                ]),
                Field("RDRF", 21, 1, "Receive Data Register Full Flag", [
                    EnumVal("NO_RXDATA", "0", "Equal to or less than watermark"),
                    EnumVal("RXDATA", "0x1", "Greater than watermark"),
                ]),
                Field("IDLE", 20, 1, "Idle Line Flag", [
                    EnumVal("NOIDLE", "0", "No idle line detected"),
                    EnumVal("IDLE", "0x1", "Idle line detected"),
                ]),
                Field("OR", 19, 1, "Receiver Overrun Flag", [
                    EnumVal("NO_OVERRUN", "0", "No overrun"),
                    EnumVal("OVERRUN", "0x1", "Receive overrun (new LPUART data lost)"),
                ]),
                Field("NF", 18, 1, "Noise Flag (NF)", [
                    EnumVal("NONOISE", "0", "No noise detected"),
                    EnumVal("NOISE", "0x1", "Noise detected"),
                ]),
                Field("FE", 17, 1, "Framing Error Flag (FE)", [
                    EnumVal("NOERROR", "0", "No framing error detected (this does not guarantee that the framing is correct)"),
                    EnumVal("ERROR", "0x1", "Framing error detected"),
                ]),
                Field("PF", 16, 1, "Parity Error Flag (PF)", [
                    EnumVal("NOPARITY", "0", "No parity error detected"),
                    EnumVal("PARITY", "0x1", "Parity error detected"),
                ]),
                Field("MA1F", 15, 1, "Match 1 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA1"),
                    EnumVal("MATCH", "0x1", "Equal to MA1"),
                ]),
                Field("MA2F", 14, 1, "Match 2 Flag", [
                    EnumVal("NOMATCH", "0", "Not equal to MA2"),
                    EnumVal("MATCH", "0x1", "Equal to MA2"),
                ]),
                Field("AME", 1, 1, "Address Mark Enable", [
                    EnumVal("DISABLED", "0", "Address mark in character is MSB"),
                    EnumVal("ENABLED", "0x1", "Address mark in character is the last bit before the stop bit (or parity bit when enabled)"),
                ]),
                Field("LBKFE", 0, 1, "LIN Break Flag Enable", [
                    EnumVal("DISABLED", "0", "Disables LIN break detect"),
                    EnumVal("ENABLED", "0x1", "Enables LIN break detect"),
                ]),
            ]),
            Register("CTRL", 0x40334018, 32, "Control", [
                Field("R8T9", 31, 1, "Receive Bit 8 Transmit Bit 9", [
                ]),
                Field("R9T8", 30, 1, "Receive Bit 9 Transmit Bit 8", [
                ]),
                Field("TXDIR", 29, 1, "TXD Pin Direction in Single-Wire Mode", [
                    EnumVal("TX_INPUT", "0", "TXD pin is an input in Single-Wire mode"),
                    EnumVal("TX_OUTPUT", "0x1", "TXD pin is an output in Single-Wire mode"),
                ]),
                Field("TXINV", 28, 1, "Transmit Data Inversion", [
                    EnumVal("NOT_INVERTED", "0", "Not inverted"),
                    EnumVal("INVERTED", "0x1", "Inverted"),
                ]),
                Field("ORIE", 27, 1, "Overrun Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("NEIE", 26, 1, "Noise Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("FEIE", 25, 1, "Framing Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PEIE", 24, 1, "Parity Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TIE", 23, 1, "Transmit Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TCIE", 22, 1, "Transmission Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RIE", 21, 1, "Receiver Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("ILIE", 20, 1, "Idle Line Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables hardware interrupts from STAT[IDLE]; use polling"),
                    EnumVal("ENABLED", "0x1", "Enables hardware interrupts when STAT[IDLE] = 1"),
                ]),
                Field("TE", 19, 1, "Transmitter Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RE", 18, 1, "Receiver Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RWU", 17, 1, "Receiver Wakeup Control", [
                    EnumVal("NO_EFFECT", "0", "Normal receiver operation"),
                    EnumVal("RX_WAKEUP", "0x1", "LPUART receiver in standby, waiting for a wakeup condition"),
                ]),
                Field("SBK", 16, 1, "Send Break", [
                    EnumVal("NO_EFFECT", "0", "Normal transmitter operation"),
                    EnumVal("TX_BREAK", "0x1", "Queue break character(s) to be sent"),
                ]),
                Field("MA1IE", 15, 1, "Match 1 (MA1F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("MA2IE", 14, 1, "Match 2 (MA2F) Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("M7", 11, 1, "7-Bit Mode Select", [
                    EnumVal("NO_EFFECT", "0", "8-bit to 10-bit data characters"),
                    EnumVal("DATA7", "0x1", "7-bit data characters"),
                ]),
                Field("IDLECFG", 8, 3, "Idle Configuration", [
                    EnumVal("IDLE_1", "0", "1"),
                    EnumVal("IDLE_2", "0x1", "2"),
                    EnumVal("IDLE_4", "0x2", "4"),
                    EnumVal("IDLE_8", "0x3", "8"),
                    EnumVal("IDLE_16", "0x4", "16"),
                    EnumVal("IDLE_32", "0x5", "32"),
                    EnumVal("IDLE_64", "0x6", "64"),
                    EnumVal("IDLE_128", "0x7", "128"),
                ]),
                Field("LOOPS", 7, 1, "Loop Mode Select", [
                    EnumVal("NOFFECT", "0", "Normal operation: RXD and TXD use separate pins"),
                    EnumVal("LOOPBACK", "0x1", "Loop mode or Single-Wire mode"),
                ]),
                Field("DOZEEN", 6, 1, "Enables LPUART in Doze mode.", [
                    EnumVal("ENABLED", "0", "Enables"),
                    EnumVal("DISABLED", "0x1", "Disables"),
                ]),
                Field("RSRC", 5, 1, "Receiver Source Select", [
                    EnumVal("NO_EFFECT", "0", "Internal Loopback mode"),
                    EnumVal("ONEWIRE", "0x1", "Single-wire mode"),
                ]),
                Field("M", 4, 1, "9-Bit Or 8-Bit Mode Select", [
                    EnumVal("DATA8", "0", "8-bit data characters"),
                    EnumVal("DATA9", "0x1", "9-bit data characters"),
                ]),
                Field("WAKE", 3, 1, "Receiver Wakeup Method Select", [
                    EnumVal("IDLE", "0", "Configures CTRL[RWU] for idle-line wakeup"),
                    EnumVal("MARK", "0x1", "Configures CTRL[RWU] with address-mark wakeup"),
                ]),
                Field("ILT", 2, 1, "Idle Line Type Select", [
                    EnumVal("FROM_START", "0", "After the start bit"),
                    EnumVal("FROM_STOP", "0x1", "After the stop bit"),
                ]),
                Field("PE", 1, 1, "Parity Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("PT", 0, 1, "Parity Type", [
                    EnumVal("EVEN", "0", "Even parity"),
                    EnumVal("ODD", "0x1", "Odd parity"),
                ]),
            ]),
            Register("DATA", 0x4033401C, 32, "Data", [
                Field("NOISY", 15, 1, "Noisy Data Received", [
                    EnumVal("NO_NOISE", "0", "Received without noise"),
                    EnumVal("NOISE", "0x1", "Received with noise"),
                ]),
                Field("PARITYE", 14, 1, "Parity Error", [
                    EnumVal("NO_PARITY", "0", "Received without a parity error"),
                    EnumVal("PARITY", "0x1", "Received with a parity error"),
                ]),
                Field("FRETSC", 13, 1, "Frame Error Transmit Special Character", [
                    EnumVal("NO_ERROR", "0", "Received without a frame error on reads or transmits a normal character on writes"),
                    EnumVal("ERROR", "0x1", "Received with a frame error on reads or transmits an idle or break character on writes"),
                ]),
                Field("RXEMPT", 12, 1, "Receive Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Contains valid data"),
                    EnumVal("EMPTY", "0x1", "Contains invalid data and is empty"),
                ]),
                Field("IDLINE", 11, 1, "Idle Line", [
                    EnumVal("NO_IDLE", "0", "Received was not idle"),
                    EnumVal("IDLE", "0x1", "Receiver was idle"),
                ]),
                Field("LINBRK", 10, 1, "LIN Break", [
                    EnumVal("NO_BREAK", "0", "LIN break not detected or LIN break detect circuitry disabled"),
                    EnumVal("BREAK", "0x1", "LIN break detected"),
                ]),
                Field("R9T9", 9, 1, "Read Receive FIFO Bit 9 Or Write Transmit FIFO Bit 9", [
                ]),
                Field("R8T8", 8, 1, "Read Receive FIFO Bit 8 Or Write Transmit FIFO Bit 8", [
                ]),
                Field("R7T7", 7, 1, "Read Receive FIFO Bit 7 Or Write Transmit FIFO Bit 7", [
                ]),
                Field("R6T6", 6, 1, "Read Receive FIFO Bit 6 Or Write Transmit FIFO Bit 6", [
                ]),
                Field("R5T5", 5, 1, "Read Receive FIFO Bit 5 Or Write Transmit FIFO Bit 5", [
                ]),
                Field("R4T4", 4, 1, "Read Receive FIFO Bit 4 Or Write Transmit FIFO Bit 4", [
                ]),
                Field("R3T3", 3, 1, "Read Receive FIFO Bit 3 Or Write Transmit FIFO Bit 3", [
                ]),
                Field("R2T2", 2, 1, "Read Receive FIFO Bit 2 Or Write Transmit FIFO Bit 2", [
                ]),
                Field("R1T1", 1, 1, "Read Receive FIFO Bit 1 Or Write Transmit FIFO Bit 1", [
                ]),
                Field("R0T0", 0, 1, "Read Receive FIFO Bit 0 Or Write Transmit FIFO Bit 0", [
                ]),
            ]),
            Register("MATCH", 0x40334020, 32, "Match Address", [
                Field("MA2", 16, 10, "Match Address 2", [
                ]),
                Field("MA1", 0, 10, "Match Address 1", [
                ]),
            ]),
            Register("MODIR", 0x40334024, 32, "MODEM IrDA", [
                Field("IREN", 18, 1, "IR Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TNP", 16, 2, "Transmitter Narrow Pulse", [
                    EnumVal("ONE_SAMPLE", "0", "1 / OSR"),
                    EnumVal("TWO_SAMPLE", "0x1", "2 / OSR"),
                    EnumVal("THREE_SAMPLE", "0x2", "3 / OSR"),
                    EnumVal("FOUR_SAMPLE", "0x3", "4 / OSR"),
                ]),
                Field("RTSWATER", 8, 2, "Receive RTS Configuration", [
                ]),
                Field("TXCTSSRC", 5, 1, "Transmit CTS Source", [
                    EnumVal("CTS", "0", "The CTS_B pin"),
                    EnumVal("MATCH", "0x1", "An internal connection to the receiver address match result"),
                ]),
                Field("TXCTSC", 4, 1, "Transmit CTS Configuration", [
                    EnumVal("START", "0", "Sampled at the start of each character"),
                    EnumVal("IDLE", "0x1", "Sampled when the transmitter is idle"),
                ]),
                Field("RXRTSE", 3, 1, "Receiver RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXRTSPOL", 2, 1, "Transmitter RTS Polarity", [
                    EnumVal("LOW", "0", "Transmitter RTS is active low"),
                    EnumVal("HIGH", "0x1", "Transmitter RTS is active high"),
                ]),
                Field("TXRTSE", 1, 1, "Transmitter RTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXCTSE", 0, 1, "Transmitter CTS Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
            ]),
            Register("FIFO", 0x40334028, 32, "FIFO", [
                Field("TXEMPT", 23, 1, "Transmit FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("RXEMPT", 22, 1, "Receive FIFO Or Buffer Empty", [
                    EnumVal("NOT_EMPTY", "0", "Not empty"),
                    EnumVal("EMPTY", "0x1", "Empty"),
                ]),
                Field("TXOF", 17, 1, "Transmitter FIFO Overflow Flag", [
                    EnumVal("NO_OVERFLOW", "0", "No overflow"),
                    EnumVal("OVERFLOW", "0x1", "Overflow"),
                ]),
                Field("RXUF", 16, 1, "Receiver FIFO Underflow Flag", [
                    EnumVal("NO_UNDERFLOW", "0", "No underflow"),
                    EnumVal("UNDERFLOW", "0x1", "Underflow"),
                ]),
                Field("TXFLUSH", 15, 1, "Transmit FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXFLUSH", 14, 1, "Receive FIFO Flush", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "All data is flushed out"),
                ]),
                Field("RXIDEN", 10, 3, "Receiver Idle Empty Enable", [
                    EnumVal("DISABLED", "0", "Disables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle"),
                    EnumVal("IDLE_1", "0x1", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for one character"),
                    EnumVal("IDLE_2", "0x2", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for two characters"),
                    EnumVal("IDLE_4", "0x3", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for four characters"),
                    EnumVal("IDLE_8", "0x4", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for eight characters"),
                    EnumVal("IDLE_16", "0x5", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 16 characters"),
                    EnumVal("IDLE_32", "0x6", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 32 characters"),
                    EnumVal("IDLE_64", "0x7", "Enables STAT[RDRF] to become 1 because of partially filled FIFO when the receiver is idle for 64 characters"),
                ]),
                Field("TXOFE", 9, 1, "Transmit FIFO Overflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("RXUFE", 8, 1, "Receive FIFO Underflow Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disables"),
                    EnumVal("ENABLED", "0x1", "Enables"),
                ]),
                Field("TXFE", 7, 1, "Transmit FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[TXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("TXFIFOSIZE", 4, 3, "Transmit FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Transmit FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Transmit FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Transmit FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Transmit FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Transmit FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Transmit FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Transmit FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Transmit FIFO buffer depth = 256 datawords"),
                ]),
                Field("RXFE", 3, 1, "Receive FIFO Enable", [
                    EnumVal("DISABLED", "0", "Disables; buffer depth is 1"),
                    EnumVal("ENABLED", "0x1", "Enables; FIFO[RXFIFOSIZE] indicates the buffer depth"),
                ]),
                Field("RXFIFOSIZE", 0, 3, "Receive FIFO Buffer Depth", [
                    EnumVal("FIFO_1", "0", "Receive FIFO buffer depth = 1 dataword"),
                    EnumVal("FIFO_4", "0x1", "Receive FIFO buffer depth = 4 datawords"),
                    EnumVal("FIFO_8", "0x2", "Receive FIFO buffer depth = 8 datawords"),
                    EnumVal("FIFO_16", "0x3", "Receive FIFO buffer depth = 16 datawords"),
                    EnumVal("FIFO_32", "0x4", "Receive FIFO buffer depth = 32 datawords"),
                    EnumVal("FIFO_64", "0x5", "Receive FIFO buffer depth = 64 datawords"),
                    EnumVal("FIFO_128", "0x6", "Receive FIFO buffer depth = 128 datawords"),
                    EnumVal("FIFO_256", "0x7", "Receive FIFO buffer depth = 256 datawords"),
                ]),
            ]),
            Register("WATER", 0x4033402C, 32, "Watermark", [
                Field("RXCOUNT", 24, 3, "Receive Counter", [
                ]),
                Field("RXWATER", 16, 2, "Receive Watermark", [
                ]),
                Field("TXCOUNT", 8, 3, "Transmit Counter", [
                ]),
                Field("TXWATER", 0, 2, "Transmit Watermark", [
                ]),
            ]),
            Register("DATARO", 0x40334030, 32, "Data Read-Only", [
                Field("DATA", 0, 16, "Receive Data", [
                ]),
            ]),
        ])

class Module_MCM_0_CM7(Peripheral):
    def __init__(self):
        super().__init__("MCM_0_CM7", 0xE0080000, 0x414, [
            Register("PLREV", 0xE0080000, 16, "SoC-defined Platform Revision", [
                Field("PLREV", 0, 16, "The PLREV[15:0] field is specified by a platform input signal to define a software-visible revision number.", [
                ]),
            ]),
            Register("PCT", 0xE0080002, 16, "Processor Core Type", [
                Field("PCT", 0, 16, "This MCM design supports the Arm Cortex M7 core. The following value identifies this core complex.", [
                    EnumVal("PCT_44144", "0xAC70", "Arm Cortex M7"),
                ]),
            ]),
            Register("CPCR", 0xE008000C, 32, "Core Platform Control", [
                Field("CM7_AHBSPRI", 27, 1, "AHB Slave Priority", [
                    EnumVal("CM7_AHBSPRI_0", "0", "Uses a round-robin arbitration scheme"),
                    EnumVal("CM7_AHBSPRI_1", "0x1", "AHB-slave access has priority over a core access"),
                ]),
            ]),
            Register("ISCR", 0xE0080010, 32, "Interrupt Status and Control", [
                Field("FIDCE", 31, 1, "FPU Input Denormal Interrupt Enable", [
                    EnumVal("FIDCE_0", "0", "Disable interrupt"),
                    EnumVal("FIDCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FIXCE", 28, 1, "FPU Inexact Interrupt Enable", [
                    EnumVal("FIXCE_0", "0", "Disable interrupt"),
                    EnumVal("FIXCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FUFCE", 27, 1, "FPU Underflow Interrupt Enable", [
                    EnumVal("FUFCE_0", "0", "Disable interrupt"),
                    EnumVal("FUFCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FOFCE", 26, 1, "FPU Overflow Interrupt Enable", [
                    EnumVal("FOFCE_0", "0", "Disable interrupt"),
                    EnumVal("FOFCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FDZCE", 25, 1, "FPU Divide-by-Zero Interrupt Enable", [
                    EnumVal("FDZCE_0", "0", "Disable interrupt"),
                    EnumVal("FDZCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FIOCE", 24, 1, "FPU Invalid Operation Interrupt Enable", [
                    EnumVal("FIOCE_0", "0", "Disable interrupt"),
                    EnumVal("FIOCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("WABE", 21, 1, "TCM Write Abort Interrupt Enable", [
                    EnumVal("WABE_0", "0", "Disable interrupt"),
                    EnumVal("WABE_1", "0x1", "Enable Interrupt"),
                ]),
                Field("FIDC", 15, 1, "FPU Input Denormal Interrupt Status", [
                    EnumVal("FIDC_0", "0", "No interrupt"),
                    EnumVal("FIDC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FIXC", 12, 1, "FPU Inexact Interrupt Status", [
                    EnumVal("FIXC_0", "0", "No interrupt"),
                    EnumVal("FIXC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FUFC", 11, 1, "FPU Underflow Interrupt Status", [
                    EnumVal("FUFC_0", "0", "No interrupt"),
                    EnumVal("FUFC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FOFC", 10, 1, "FPU Overflow Interrupt Status", [
                    EnumVal("FOFC_0", "0", "No interrupt"),
                    EnumVal("FOFC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FDZC", 9, 1, "FPU Divide-by-Zero Interrupt Status", [
                    EnumVal("FDZC_0", "0", "No interrupt"),
                    EnumVal("FDZC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FIOC", 8, 1, "FPU Invalid Operation Interrupt Status", [
                    EnumVal("FIOC_0", "0", "No interrupt"),
                    EnumVal("FIOC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("WABSO", 6, 1, "Write Abort on Slave Overrun", [
                    EnumVal("WABSO_0", "0", "No write abort overrun"),
                    EnumVal("WABSO_1", "0x1", "Write abort overrun occurred"),
                ]),
                Field("WABS", 5, 1, "Write Abort on Slave", [
                    EnumVal("WABS_0", "0", "No write abort occurred on AHBS interface"),
                    EnumVal("WABS_1", "0x1", "Write abort occurred on AHBS interface"),
                ]),
            ]),
            Register("LMEM_DESC_0", 0xE0080400, 32, "Local Memory Descriptor 0", [
                Field("LMV", 31, 1, "Local Memory Valid", [
                    EnumVal("NOT_PRESENT", "0", "LMEMn not present"),
                    EnumVal("PRESENT", "0x1", "LMEMn present"),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("PWR_OF_2", "0", "LMEMn is a power-of-2 capacity"),
                    EnumVal("NOT_PWR_OF_2", "0x1", "LMEMn is not a power-of-2, with capacity of 0.75 x LMSZ"),
                ]),
                Field("LMSZ", 24, 4, "Local Memory Size", [
                    EnumVal("LMSZ_0", "0", "0 KB"),
                    EnumVal("LMSZ_1", "0x1", "1 KB"),
                    EnumVal("LMSZ_2", "0x2", "2 KB"),
                    EnumVal("LMSZ_3", "0x3", "4 KB"),
                    EnumVal("LMSZ_4", "0x4", "8 KB"),
                    EnumVal("LMSZ_5", "0x5", "16 KB"),
                    EnumVal("LMSZ_6", "0x6", "32 KB"),
                    EnumVal("LMSZ_7", "0x7", "64 KB"),
                    EnumVal("LMSZ_8", "0x8", "128 KB"),
                    EnumVal("LMSZ_9", "0x9", "256 KB"),
                    EnumVal("LMSZ_10", "0xA", "512 KB"),
                    EnumVal("LMSZ_11", "0xB", "1024 KB"),
                    EnumVal("LMSZ_12", "0xC", "2048 KB"),
                    EnumVal("LMSZ_13", "0xD", "4096 KB"),
                    EnumVal("LMSZ_14", "0xE", "8192 KB"),
                    EnumVal("LMSZ_15", "0xF", "16384 KB"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No cache"),
                    EnumVal("WY_2", "0x2", "2-way set associative"),
                    EnumVal("WY_4", "0x4", "4-way set associative"),
                ]),
                Field("DPW", 17, 3, "Data Path Width", [
                    EnumVal("WIDE_32", "0x2", "LMEMn is 32-bits wide"),
                    EnumVal("WIDE_64", "0x3", "LMEMn is 64-bits wide"),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("ITCM", "0", "ITCM"),
                    EnumVal("DTCM", "0x1", "DTCM"),
                    EnumVal("ICACHE", "0x2", "ICACHE"),
                    EnumVal("DCACHE", "0x3", "DCACHE"),
                ]),
            ]),
            Register("LMEM_DESC_1", 0xE0080404, 32, "Local Memory Descriptor 1", [
                Field("LMV", 31, 1, "Local Memory Valid", [
                    EnumVal("NOT_PRESENT", "0", "LMEMn not present"),
                    EnumVal("PRESENT", "0x1", "LMEMn present"),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("PWR_OF_2", "0", "LMEMn is a power-of-2 capacity"),
                    EnumVal("NOT_PWR_OF_2", "0x1", "LMEMn is not a power-of-2, with capacity of 0.75 x LMSZ"),
                ]),
                Field("LMSZ", 24, 4, "Local Memory Size", [
                    EnumVal("LMSZ_0", "0", "0 KB"),
                    EnumVal("LMSZ_1", "0x1", "1 KB"),
                    EnumVal("LMSZ_2", "0x2", "2 KB"),
                    EnumVal("LMSZ_3", "0x3", "4 KB"),
                    EnumVal("LMSZ_4", "0x4", "8 KB"),
                    EnumVal("LMSZ_5", "0x5", "16 KB"),
                    EnumVal("LMSZ_6", "0x6", "32 KB"),
                    EnumVal("LMSZ_7", "0x7", "64 KB"),
                    EnumVal("LMSZ_8", "0x8", "128 KB"),
                    EnumVal("LMSZ_9", "0x9", "256 KB"),
                    EnumVal("LMSZ_10", "0xA", "512 KB"),
                    EnumVal("LMSZ_11", "0xB", "1024 KB"),
                    EnumVal("LMSZ_12", "0xC", "2048 KB"),
                    EnumVal("LMSZ_13", "0xD", "4096 KB"),
                    EnumVal("LMSZ_14", "0xE", "8192 KB"),
                    EnumVal("LMSZ_15", "0xF", "16384 KB"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No cache"),
                    EnumVal("WY_2", "0x2", "2-way set associative"),
                    EnumVal("WY_4", "0x4", "4-way set associative"),
                ]),
                Field("DPW", 17, 3, "Data Path Width", [
                    EnumVal("WIDE_32", "0x2", "LMEMn is 32-bits wide"),
                    EnumVal("WIDE_64", "0x3", "LMEMn is 64-bits wide"),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("ITCM", "0", "ITCM"),
                    EnumVal("DTCM", "0x1", "DTCM"),
                    EnumVal("ICACHE", "0x2", "ICACHE"),
                    EnumVal("DCACHE", "0x3", "DCACHE"),
                ]),
            ]),
            Register("LMEM_DESC_2", 0xE0080408, 32, "Local Memory Descriptor 2", [
                Field("LMV", 31, 1, "Local Memory Valid", [
                    EnumVal("NOT_PRESENT", "0", "LMEMn not present"),
                    EnumVal("PRESENT", "0x1", "LMEMn present"),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("PWR_OF_2", "0", "LMEMn is a power-of-2 capacity"),
                    EnumVal("NOT_PWR_OF_2", "0x1", "LMEMn is not a power-of-2, with capacity of 0.75 x LMSZ"),
                ]),
                Field("LMSZ", 24, 4, "Local Memory Size", [
                    EnumVal("LMSZ_0", "0", "0 KB"),
                    EnumVal("LMSZ_1", "0x1", "1 KB"),
                    EnumVal("LMSZ_2", "0x2", "2 KB"),
                    EnumVal("LMSZ_3", "0x3", "4 KB"),
                    EnumVal("LMSZ_4", "0x4", "8 KB"),
                    EnumVal("LMSZ_5", "0x5", "16 KB"),
                    EnumVal("LMSZ_6", "0x6", "32 KB"),
                    EnumVal("LMSZ_7", "0x7", "64 KB"),
                    EnumVal("LMSZ_8", "0x8", "128 KB"),
                    EnumVal("LMSZ_9", "0x9", "256 KB"),
                    EnumVal("LMSZ_10", "0xA", "512 KB"),
                    EnumVal("LMSZ_11", "0xB", "1024 KB"),
                    EnumVal("LMSZ_12", "0xC", "2048 KB"),
                    EnumVal("LMSZ_13", "0xD", "4096 KB"),
                    EnumVal("LMSZ_14", "0xE", "8192 KB"),
                    EnumVal("LMSZ_15", "0xF", "16384 KB"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No cache"),
                    EnumVal("WY_2", "0x2", "2-way set associative"),
                    EnumVal("WY_4", "0x4", "4-way set associative"),
                ]),
                Field("DPW", 17, 3, "Data Path Width", [
                    EnumVal("WIDE_32", "0x2", "LMEMn is 32-bits wide"),
                    EnumVal("WIDE_64", "0x3", "LMEMn is 64-bits wide"),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("ITCM", "0", "ITCM"),
                    EnumVal("DTCM", "0x1", "DTCM"),
                    EnumVal("ICACHE", "0x2", "ICACHE"),
                    EnumVal("DCACHE", "0x3", "DCACHE"),
                ]),
            ]),
            Register("LMEM_DESC_3", 0xE008040C, 32, "Local Memory Descriptor 3", [
                Field("LMV", 31, 1, "Local Memory Valid", [
                    EnumVal("NOT_PRESENT", "0", "LMEMn not present"),
                    EnumVal("PRESENT", "0x1", "LMEMn present"),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("PWR_OF_2", "0", "LMEMn is a power-of-2 capacity"),
                    EnumVal("NOT_PWR_OF_2", "0x1", "LMEMn is not a power-of-2, with capacity of 0.75 x LMSZ"),
                ]),
                Field("LMSZ", 24, 4, "Local Memory Size", [
                    EnumVal("LMSZ_0", "0", "0 KB"),
                    EnumVal("LMSZ_1", "0x1", "1 KB"),
                    EnumVal("LMSZ_2", "0x2", "2 KB"),
                    EnumVal("LMSZ_3", "0x3", "4 KB"),
                    EnumVal("LMSZ_4", "0x4", "8 KB"),
                    EnumVal("LMSZ_5", "0x5", "16 KB"),
                    EnumVal("LMSZ_6", "0x6", "32 KB"),
                    EnumVal("LMSZ_7", "0x7", "64 KB"),
                    EnumVal("LMSZ_8", "0x8", "128 KB"),
                    EnumVal("LMSZ_9", "0x9", "256 KB"),
                    EnumVal("LMSZ_10", "0xA", "512 KB"),
                    EnumVal("LMSZ_11", "0xB", "1024 KB"),
                    EnumVal("LMSZ_12", "0xC", "2048 KB"),
                    EnumVal("LMSZ_13", "0xD", "4096 KB"),
                    EnumVal("LMSZ_14", "0xE", "8192 KB"),
                    EnumVal("LMSZ_15", "0xF", "16384 KB"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No cache"),
                    EnumVal("WY_2", "0x2", "2-way set associative"),
                    EnumVal("WY_4", "0x4", "4-way set associative"),
                ]),
                Field("DPW", 17, 3, "Data Path Width", [
                    EnumVal("WIDE_32", "0x2", "LMEMn is 32-bits wide"),
                    EnumVal("WIDE_64", "0x3", "LMEMn is 64-bits wide"),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("ITCM", "0", "ITCM"),
                    EnumVal("DTCM", "0x1", "DTCM"),
                    EnumVal("ICACHE", "0x2", "ICACHE"),
                    EnumVal("DCACHE", "0x3", "DCACHE"),
                ]),
            ]),
            Register("LMEM_DESC_4", 0xE0080410, 32, "Local Memory Descriptor 4", [
                Field("LMV", 31, 1, "Local Memory Valid", [
                    EnumVal("NOT_PRESENT", "0", "LMEMn not present"),
                    EnumVal("PRESENT", "0x1", "LMEMn present"),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("PWR_OF_2", "0", "LMEMn is a power-of-2 capacity"),
                    EnumVal("NOT_PWR_OF_2", "0x1", "LMEMn is not a power-of-2, with capacity of 0.75 x LMSZ"),
                ]),
                Field("LMSZ", 24, 4, "Local Memory Size", [
                    EnumVal("LMSZ_0", "0", "0 KB"),
                    EnumVal("LMSZ_1", "0x1", "1 KB"),
                    EnumVal("LMSZ_2", "0x2", "2 KB"),
                    EnumVal("LMSZ_3", "0x3", "4 KB"),
                    EnumVal("LMSZ_4", "0x4", "8 KB"),
                    EnumVal("LMSZ_5", "0x5", "16 KB"),
                    EnumVal("LMSZ_6", "0x6", "32 KB"),
                    EnumVal("LMSZ_7", "0x7", "64 KB"),
                    EnumVal("LMSZ_8", "0x8", "128 KB"),
                    EnumVal("LMSZ_9", "0x9", "256 KB"),
                    EnumVal("LMSZ_10", "0xA", "512 KB"),
                    EnumVal("LMSZ_11", "0xB", "1024 KB"),
                    EnumVal("LMSZ_12", "0xC", "2048 KB"),
                    EnumVal("LMSZ_13", "0xD", "4096 KB"),
                    EnumVal("LMSZ_14", "0xE", "8192 KB"),
                    EnumVal("LMSZ_15", "0xF", "16384 KB"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No cache"),
                    EnumVal("WY_2", "0x2", "2-way set associative"),
                    EnumVal("WY_4", "0x4", "4-way set associative"),
                ]),
                Field("DPW", 17, 3, "Data Path Width", [
                    EnumVal("WIDE_32", "0x2", "LMEMn is 32-bits wide"),
                    EnumVal("WIDE_64", "0x3", "LMEMn is 64-bits wide"),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("ITCM", "0", "ITCM"),
                    EnumVal("DTCM", "0x1", "DTCM"),
                    EnumVal("ICACHE", "0x2", "ICACHE"),
                    EnumVal("DCACHE", "0x3", "DCACHE"),
                ]),
            ]),
        ])

class Module_MC_CGM(Peripheral):
    def __init__(self):
        super().__init__("MC_CGM", 0x402D8000, 0x600, [
            Register("PCFS_SDUR", 0x402D8000, 32, "PCFS Step Duration", [
                Field("SDUR", 0, 16, "Step duration", [
                ]),
            ]),
            Register("PCFS_DIVC8", 0x402D8058, 32, "PCFS Divider Change 8 Register", [
                Field("INIT", 16, 16, "Divider change initial value", [
                ]),
                Field("RATE", 0, 8, "Divider change rate", [
                ]),
            ]),
            Register("PCFS_DIVE8", 0x402D805C, 32, "PCFS Divider End 8 Register", [
                Field("DIVE", 0, 20, "Divider end value", [
                ]),
            ]),
            Register("PCFS_DIVS8", 0x402D8060, 32, "PCFS Divider Start 8 Register", [
                Field("DIVS", 0, 20, "Divider start value", [
                ]),
            ]),
            Register("MUX_0_CSC", 0x402D8300, 32, "Clock Mux 0 Select Control Register", [
                Field("SELCTL", 24, 4, "Clock source selection control", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_8", "0x8", "PLL_PHI0_CLK"),
                ]),
                Field("SAFE_SW", 3, 1, "Safe clock request", [
                ]),
                Field("CLK_SW", 2, 1, "Clock switch", [
                ]),
                Field("RAMPDOWN", 1, 1, "PCFS ramp-down", [
                ]),
                Field("RAMPUP", 0, 1, "PCFS ramp-up", [
                ]),
            ]),
            Register("MUX_0_CSS", 0x402D8304, 32, "Clock Mux 0 Select Status Register", [
                Field("SELSTAT", 24, 4, "Clock source selection status", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_8", "0x8", "PLL_PHI0_CLK"),
                ]),
                Field("SWTRG", 17, 3, "Switch trigger cause", [
                    EnumVal("SUCCESS", "0x1", "Switch after request succeeded."),
                    EnumVal("FAIL_TARGET_CLOCK", "0x2", "Switch after the request failed because of an inactive target clock and the current clock is FIRC."),
                    EnumVal("FAIL_CURRENT_CLOCK", "0x3", "Switch after the request failed because of an inactive current clock and the current clock is FIRC."),
                    EnumVal("REQ_SUCCEED", "0x4", "Switch to FIRC because of a safe clock request or reset succeeded."),
                    EnumVal("REQ_SUCCEED_INACTIVE", "0x5", "Switch to FIRC because of a safe clock request or reset succeeded, but the previous current clock source was inactive."),
                ]),
                Field("SWIP", 16, 1, "Switch in progress", [
                    EnumVal("COMPETE", "0", "Clock source switching is complete."),
                    EnumVal("IN_PROGRESS", "0x1", "Clock source switching is in progress."),
                ]),
                Field("SAFE_SW", 3, 1, "Safe clock request", [
                    EnumVal("NO_CLOCK", "0", "No safe clock switch operation was requested."),
                    EnumVal("CLOCK", "0x1", "Safe clock switch operation was requested."),
                ]),
                Field("CLK_SW", 2, 1, "Clock switch", [
                    EnumVal("NO_CLOCK", "0", "No clock switch operation was requested."),
                    EnumVal("CLOCK", "0x1", "Clock switch operation was requested."),
                ]),
                Field("RAMPDOWN", 1, 1, "PCFS ramp-down", [
                    EnumVal("NO_RAMPUP", "0", "No ramp-down operation was requested."),
                    EnumVal("RAMPUP", "0x1", "Ramp-down operation was requested."),
                ]),
                Field("RAMPUP", 0, 1, "PCFS ramp-up", [
                    EnumVal("NO_RAMP_UP", "0", "No ramp-up operation was requested."),
                    EnumVal("RAMP_UP", "0x1", "Ramp-up operation was requested."),
                ]),
            ]),
            Register("MUX_0_DC_0", 0x402D8308, 32, "Clock Mux 0 Divider 0 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Unused"),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 3, "Division value", [
                ]),
            ]),
            Register("MUX_0_DC_1", 0x402D830C, 32, "Clock Mux 0 Divider 1 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Unused"),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 3, "Division value", [
                ]),
            ]),
            Register("MUX_0_DC_2", 0x402D8310, 32, "Clock Mux 0 Divider 2 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Unused"),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 4, "Division value", [
                ]),
            ]),
            Register("MUX_0_DC_3", 0x402D8314, 32, "Clock Mux 0 Divider 3 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Unused"),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 3, "Division value", [
                ]),
            ]),
            Register("MUX_0_DC_4", 0x402D8318, 32, "Clock Mux 0 Divider 4 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Unused"),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 3, "Division value", [
                ]),
            ]),
            Register("MUX_0_DIV_TRIG_CTRL", 0x402D8334, 32, "Clock Mux 0 Divider Trigger Control Register", [
                Field("HHEN", 31, 1, "Halt handshake enable", [
                    EnumVal("NO_HALT", "0", "No halt handshake protocol is initiated."),
                    EnumVal("HALT", "0x1", "Halt handshake protocol is initiated."),
                ]),
                Field("TCTL", 0, 1, "Trigger control", [
                    EnumVal("IMMEDIATE", "0", "Immediate divider update"),
                    EnumVal("COMMON", "0x1", "Common trigger divider update"),
                ]),
            ]),
            Register("MUX_0_DIV_TRIG", 0x402D8338, 32, "Clock Mux 0 Divider Trigger Register", [
                Field("TRIGGER", 0, 32, "Trigger for divider update", [
                ]),
            ]),
            Register("MUX_0_DIV_UPD_STAT", 0x402D833C, 32, "Clock Mux 0 Divider Update Status Register", [
                Field("DIV_STAT", 0, 1, "Divider status for clock mux 0", [
                    EnumVal("NO_DIV_PENDING", "0", "No divider configuration update is pending."),
                    EnumVal("DIV_PENDING", "0x1", "Divider configuration update on at least one divider associated with this multiplexer is pending."),
                ]),
            ]),
            Register("MUX_1_CSC", 0x402D8340, 32, "Clock Mux 1 Select Control Register", [
                Field("SELCTL", 24, 5, "Clock source selection control", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_22", "0x16", "AIPS_PLAT_CLK"),
                ]),
                Field("SAFE_SW", 3, 1, "Safe clock request", [
                ]),
                Field("CLK_SW", 2, 1, "Clock switch", [
                ]),
            ]),
            Register("MUX_1_CSS", 0x402D8344, 32, "Clock Mux 1 Select Status Register", [
                Field("SELSTAT", 24, 5, "Clock source selection status", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_22", "0x16", "AIPS_PLAT_CLK"),
                ]),
                Field("SWTRG", 17, 3, "Switch trigger cause", [
                    EnumVal("SUCCESS", "0x1", "Switch after request succeeded."),
                    EnumVal("FAIL_TARGET_CLOCK", "0x2", "Switch after the request failed because of an inactive target clock and the current clock is FIRC."),
                    EnumVal("FAIL_CURRENT_CLOCK", "0x3", "Switch after the request failed because of an inactive current clock and the current clock is FIRC."),
                    EnumVal("REQ_SUCCEED", "0x4", "Switch to FIRC because of a safe clock request or reset succeeded."),
                    EnumVal("REQ_SUCCEED_INACTIVE", "0x5", "Switch to FIRC because of a safe clock request or reset succeeded, but the previous current clock source was inactive."),
                ]),
                Field("SWIP", 16, 1, "Switch in progress", [
                    EnumVal("COMPETE", "0", "Clock source switching is complete."),
                    EnumVal("IN_PROGRESS", "0x1", "Clock source switching is in progress."),
                ]),
                Field("SAFE_SW", 3, 1, "Safe clock request", [
                    EnumVal("NO_CLOCK", "0", "No safe clock switch operation was requested."),
                    EnumVal("CLOCK", "0x1", "Safe clock switch operation was requested."),
                ]),
                Field("CLK_SW", 2, 1, "Clock switch", [
                    EnumVal("NO_CLOCK", "0", "No clock switch operation was requested."),
                    EnumVal("CLOCK", "0x1", "Clock switch operation was requested."),
                ]),
            ]),
            Register("MUX_1_DC_0", 0x402D8348, 32, "Clock Mux 1 Divider 0 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Divider is disabled."),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 1, "Division value", [
                ]),
            ]),
            Register("MUX_1_DIV_UPD_STAT", 0x402D837C, 32, "Clock Mux 1 Divider Update Status Register", [
                Field("DIV_STAT", 0, 1, "Divider status for clock mux 1", [
                    EnumVal("NO_DIV_PENDING", "0", "No divider configuration update is pending."),
                    EnumVal("DIV_PENDING", "0x1", "Divider configuration update on at least one divider associated with this multiplexer is pending."),
                ]),
            ]),
            Register("MUX_3_CSC", 0x402D83C0, 32, "Clock Mux 3 Select Control Register", [
                Field("SELCTL", 24, 5, "Clock source selection control", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_22", "0x16", "AIPS_PLAT_CLK"),
                ]),
                Field("SAFE_SW", 3, 1, "Safe clock request", [
                ]),
                Field("CLK_SW", 2, 1, "Clock switch", [
                ]),
            ]),
            Register("MUX_3_CSS", 0x402D83C4, 32, "Clock Mux 3 Select Status Register", [
                Field("SELSTAT", 24, 5, "Clock source selection status", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_22", "0x16", "AIPS_PLAT_CLK"),
                ]),
                Field("SWTRG", 17, 3, "Switch trigger cause", [
                    EnumVal("SUCCESS", "0x1", "Switch after request succeeded."),
                    EnumVal("FAIL_TARGET_CLOCK", "0x2", "Switch after the request failed because of an inactive target clock and the current clock is FIRC."),
                    EnumVal("FAIL_CURRENT_CLOCK", "0x3", "Switch after the request failed because of an inactive current clock and the current clock is FIRC."),
                    EnumVal("REQ_SUCCEED", "0x4", "Switch to FIRC because of a safe clock request or reset succeeded."),
                    EnumVal("REQ_SUCCEED_INACTIVE", "0x5", "Switch to FIRC because of a safe clock request or reset succeeded, but the previous current clock source was inactive."),
                ]),
                Field("SWIP", 16, 1, "Switch in progress", [
                    EnumVal("COMPETE", "0", "Clock source switching is complete."),
                    EnumVal("IN_PROGRESS", "0x1", "Clock source switching is in progress."),
                ]),
                Field("SAFE_SW", 3, 1, "Safe clock request", [
                    EnumVal("NO_CLOCK", "0", "No safe clock switch operation was requested."),
                    EnumVal("CLOCK", "0x1", "Safe clock switch operation was requested."),
                ]),
                Field("CLK_SW", 2, 1, "Clock switch", [
                    EnumVal("NO_CLOCK", "0", "No clock switch operation was requested."),
                    EnumVal("CLOCK", "0x1", "Clock switch operation was requested."),
                ]),
            ]),
            Register("MUX_3_DC_0", 0x402D83C8, 32, "Clock Mux 3 Divider 0 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Divider is disabled."),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 2, "Division value", [
                ]),
            ]),
            Register("MUX_3_DIV_UPD_STAT", 0x402D83FC, 32, "Clock Mux 3 Divider Update Status Register", [
                Field("DIV_STAT", 0, 1, "Divider status for clock mux 3", [
                    EnumVal("NO_DIV_PENDING", "0", "No divider configuration update is pending."),
                    EnumVal("DIV_PENDING", "0x1", "Divider configuration update on at least one divider associated with this multiplexer is pending."),
                ]),
            ]),
            Register("MUX_5_CSC", 0x402D8440, 32, "Clock Mux 5 Select Control Register", [
                Field("SELCTL", 24, 6, "Clock source selection control", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_1", "0x1", "SIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_23", "0x17", "AIPS_SLOW_CLK"),
                ]),
                Field("FCG", 3, 1, "Force clock gate", [
                ]),
                Field("CG", 2, 1, "Clock gate", [
                ]),
            ]),
            Register("MUX_5_CSS", 0x402D8444, 32, "Clock Mux 5 Select Status Register", [
                Field("SELSTAT", 24, 6, "Clock source selection status", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_1", "0x1", "SIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_23", "0x17", "AIPS_SLOW_CLK"),
                ]),
                Field("CS", 17, 1, "Clock status", [
                    EnumVal("GATED", "0", "Clock is gated to logic-0 at output of clock mux"),
                    EnumVal("TRANSPARENTs", "0x1", "Clock mux is transparent. Active clock pulses at input of clock mux results in same number of pulses at its output"),
                ]),
                Field("GRIP", 16, 1, "Gating request is in progress.", [
                    EnumVal("COMPLETED", "0", "Clock source gating or ungating has completed."),
                    EnumVal("IN_PROGRESS", "0x1", "Clock source gating or ungating is in progress."),
                ]),
            ]),
            Register("MUX_5_DC_0", 0x402D8448, 32, "Clock Mux 5 Divider 0 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Divider is disabled."),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 3, "Division value", [
                ]),
            ]),
            Register("MUX_5_DIV_UPD_STAT", 0x402D847C, 32, "Clock Mux 5 Divider Update Status Register", [
                Field("DIV_STAT", 0, 1, "Divider status for clock mux 5", [
                    EnumVal("NO_DIV_PENDING", "0", "No divider configuration update is pending."),
                    EnumVal("DIV_PENDING", "0x1", "Divider configuration update on at least one divider associated with this multiplexer is pending."),
                ]),
            ]),
            Register("MUX_6_CSC", 0x402D8480, 32, "Clock Mux 6 Select Control Register", [
                Field("SELCTL", 24, 6, "Clock source selection control", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_1", "0x1", "SIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_8", "0x8", "PLL_PHI0_CLK"),
                    EnumVal("clk_src_9", "0x9", "PLL_PHI1_CLK"),
                    EnumVal("clk_src_16", "0x10", "CORE_CLK"),
                    EnumVal("clk_src_19", "0x13", "HSE_CLK"),
                    EnumVal("clk_src_22", "0x16", "AIPS_PLAT_CLK"),
                    EnumVal("clk_src_23", "0x17", "AIPS_SLOW_CLK"),
                ]),
                Field("FCG", 3, 1, "Force clock gate", [
                ]),
                Field("CG", 2, 1, "Clock gate", [
                ]),
            ]),
            Register("MUX_6_CSS", 0x402D8484, 32, "Clock Mux 6 Select Status Register", [
                Field("SELSTAT", 24, 6, "Clock source selection status", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_1", "0x1", "SIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_8", "0x8", "PLL_PHI0_CLK"),
                    EnumVal("clk_src_9", "0x9", "PLL_PHI1_CLK"),
                    EnumVal("clk_src_16", "0x10", "CORE_CLK"),
                    EnumVal("clk_src_19", "0x13", "HSE_CLK"),
                    EnumVal("clk_src_22", "0x16", "AIPS_PLAT_CLK"),
                    EnumVal("clk_src_23", "0x17", "AIPS_SLOW_CLK"),
                ]),
                Field("CS", 17, 1, "Clock status", [
                    EnumVal("GATED", "0", "Clock is gated to logic-0 at output of clock mux"),
                    EnumVal("TRANSPARENTs", "0x1", "Clock mux is transparent. Active clock pulses at input of clock mux results in same number of pulses at its output"),
                ]),
                Field("GRIP", 16, 1, "Gating request is in progress.", [
                    EnumVal("COMPLETED", "0", "Clock source gating or ungating has completed."),
                    EnumVal("IN_PROGRESS", "0x1", "Clock source gating or ungating is in progress."),
                ]),
            ]),
            Register("MUX_6_DC_0", 0x402D8488, 32, "Clock Mux 6 Divider 0 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Divider is disabled."),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 6, "Division value", [
                ]),
            ]),
            Register("MUX_6_DIV_UPD_STAT", 0x402D84BC, 32, "Clock Mux 6 Divider Update Status Register", [
                Field("DIV_STAT", 0, 1, "Divider status for clock mux 6", [
                    EnumVal("NO_DIV_PENDING", "0", "No divider configuration update is pending."),
                    EnumVal("DIV_PENDING", "0x1", "Divider configuration update on at least one divider associated with this multiplexer is pending."),
                ]),
            ]),
            Register("MUX_11_CSC", 0x402D85C0, 32, "Clock Mux 11 Select Control Register", [
                Field("SELCTL", 24, 4, "Clock source selection control", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_8", "0x8", "PLL_PHI0_CLK"),
                    EnumVal("clk_src_9", "0x9", "PLL_PHI1_CLK"),
                ]),
                Field("FCG", 3, 1, "Force clock gate", [
                ]),
                Field("CG", 2, 1, "Clock gate", [
                ]),
            ]),
            Register("MUX_11_CSS", 0x402D85C4, 32, "Clock Mux 11 Select Status Register", [
                Field("SELSTAT", 24, 4, "Clock source selection status", [
                    EnumVal("clk_src_0", "0", "FIRC"),
                    EnumVal("clk_src_2", "0x2", "FXOSC"),
                    EnumVal("clk_src_8", "0x8", "PLL_PHI0_CLK"),
                    EnumVal("clk_src_9", "0x9", "PLL_PHI1_CLK"),
                ]),
                Field("CS", 17, 1, "Clock status", [
                    EnumVal("GATED", "0", "Clock is gated to logic-0 at output of clock mux"),
                    EnumVal("TRANSPARENTs", "0x1", "Clock mux is transparent. Active clock pulses at input of clock mux results in same number of pulses at its output"),
                ]),
                Field("GRIP", 16, 1, "Gating request is in progress.", [
                    EnumVal("COMPLETED", "0", "Clock source gating or ungating has completed."),
                    EnumVal("IN_PROGRESS", "0x1", "Clock source gating or ungating is in progress."),
                ]),
            ]),
            Register("MUX_11_DC_0", 0x402D85C8, 32, "Clock Mux 11 Divider 0 Control Register", [
                Field("DE", 31, 1, "Divider enable", [
                    EnumVal("DISABLED", "0", "Divider is disabled."),
                    EnumVal("ENABLED", "0x1", "Divider is enabled."),
                ]),
                Field("DIV", 16, 3, "Division value", [
                ]),
            ]),
            Register("MUX_11_DIV_UPD_STAT", 0x402D85FC, 32, "Clock Mux 11 Divider Update Status Register", [
                Field("DIV_STAT", 0, 1, "Divider status for clock mux 11", [
                    EnumVal("NO_DIV_PENDING", "0", "No divider configuration update is pending."),
                    EnumVal("DIV_PENDING", "0x1", "Divider configuration update on at least one divider associated with this multiplexer is pending."),
                ]),
            ]),
        ])

class Module_MC_ME(Peripheral):
    def __init__(self):
        super().__init__("MC_ME", 0x402DC000, 0x340, [
            Register("CTL_KEY", 0x402DC000, 32, "Control Key Register", [
                Field("KEY", 0, 16, "Control key", [
                ]),
            ]),
            Register("MODE_CONF", 0x402DC004, 32, "Mode Configuration Register", [
                Field("STANDBY", 15, 1, "Standby request", [
                ]),
                Field("FUNC_RST", 1, 1, "Functional reset request", [
                ]),
                Field("DEST_RST", 0, 1, "Destructive reset request", [
                ]),
            ]),
            Register("MODE_UPD", 0x402DC008, 32, "Mode Update Register", [
                Field("MODE_UPD", 0, 1, "Mode update", [
                ]),
            ]),
            Register("MODE_STAT", 0x402DC00C, 32, "Mode Status Register", [
                Field("PREV_MODE", 0, 1, "Previous mode", [
                    EnumVal("RESET", "0", "The previous mode was reset (any reset)."),
                    EnumVal("STANDBY", "0x1", "The previous mode was standby."),
                ]),
            ]),
            Register("MAIN_COREID", 0x402DC010, 32, "Main Core ID Register", [
                Field("PIDX", 8, 5, "Partition index", [
                ]),
                Field("CIDX", 0, 3, "Core index", [
                ]),
            ]),
            Register("PRTN0_PCONF", 0x402DC100, 32, "Partition 0 Process Configuration Register", [
                Field("PCE", 0, 1, "Partition clock enable", [
                    EnumVal("DISABLE", "0", "Disable the clock to IPs"),
                    EnumVal("ENABLE", "0x1", "Enable the clock to IPs"),
                ]),
            ]),
            Register("PRTN0_PUPD", 0x402DC104, 32, "Partition 0 Process Update Register", [
                Field("PCUD", 0, 1, "Partition clock update", [
                    EnumVal("NO_TRIGGER", "0", "Do not trigger the hardware process"),
                    EnumVal("TRIGGER", "0x1", "Trigger the hardware process"),
                ]),
            ]),
            Register("PRTN0_STAT", 0x402DC108, 32, "Partition 0 Status Register", [
                Field("PCS", 0, 1, "Partition clock status", [
                    EnumVal("INACTIVE", "0", "Clock is inactive"),
                    EnumVal("ACTIVE", "0x1", "Clock is active"),
                ]),
            ]),
            Register("PRTN0_COFB1_STAT", 0x402DC114, 32, "Partition 0 COFB Set 1 Clock Status Register", [
                Field("BLOCK62", 30, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK48", 16, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK45", 13, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK44", 12, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK41", 9, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK40", 8, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK39", 7, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK38", 6, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK35", 3, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK34", 2, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK33", 1, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK32", 0, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
            ]),
            Register("PRTN0_COFB1_CLKEN", 0x402DC134, 32, "Partition 0 COFB Set 1 Clock Enable Register", [
                Field("REQ62", 30, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ48", 16, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ45", 13, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ44", 12, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ41", 9, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ40", 8, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ39", 7, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ38", 6, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ35", 3, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ34", 2, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ33", 1, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ32", 0, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
            ]),
            Register("PRTN0_CORE0_PCONF", 0x402DC140, 32, "Partition 0 Core 0 Process Configuration Register", [
                Field("CCE", 0, 1, "Core 0 clock enable", [
                    EnumVal("DISABLE", "0", "Disable the core clock"),
                    EnumVal("ENABLE", "0x1", "Enable the core clock"),
                ]),
            ]),
            Register("PRTN0_CORE0_PUPD", 0x402DC144, 32, "Partition 0 Core 0 Process Update Register", [
                Field("CCUPD", 0, 1, "Core 0 clock update", [
                    EnumVal("DISABLE", "0", "Do not trigger the hardware process"),
                    EnumVal("ENABLE", "0x1", "Trigger the hardware process"),
                ]),
            ]),
            Register("PRTN0_CORE0_STAT", 0x402DC148, 32, "Partition 0 Core 0 Status Register", [
                Field("WFI", 31, 1, "Wait for interrupt status", [
                    EnumVal("NO_WFI", "0", "No WFI executed"),
                    EnumVal("WFI", "0x1", "WFI executed"),
                ]),
                Field("CCS", 0, 1, "Core 0 clock process status", [
                    EnumVal("INACTIVE", "0", "Clock is inactive."),
                    EnumVal("ACTIVE", "0x1", "Clock is active."),
                ]),
            ]),
            Register("PRTN0_CORE0_ADDR", 0x402DC14C, 32, "Partition 0 Core 0 Address Register", [
                Field("ADDR", 2, 30, "Address", [
                ]),
            ]),
            Register("PRTN1_PCONF", 0x402DC300, 32, "Partition 1 Process Configuration Register", [
                Field("PCE", 0, 1, "Partition clock enable", [
                    EnumVal("DISABLE", "0", "Disable the clock to IPs"),
                    EnumVal("ENABLE", "0x1", "Enable the clock to IPs"),
                ]),
            ]),
            Register("PRTN1_PUPD", 0x402DC304, 32, "Partition 1 Process Update Register", [
                Field("PCUD", 0, 1, "Partition clock update", [
                    EnumVal("NO_TRIGGER", "0", "Do not trigger the hardware process"),
                    EnumVal("TRIGGER", "0x1", "Trigger the hardware process"),
                ]),
            ]),
            Register("PRTN1_STAT", 0x402DC308, 32, "Partition 1 Status Register", [
                Field("PCS", 0, 1, "Partition clock status", [
                    EnumVal("INACTIVE", "0", "Clock is inactive"),
                    EnumVal("ACTIVE", "0x1", "Clock is active"),
                ]),
            ]),
            Register("PRTN1_COFB0_STAT", 0x402DC310, 32, "Partition 1 COFB Set 0 Clock Status Register", [
                Field("BLOCK31", 31, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK30", 30, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK29", 29, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK28", 28, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK27", 27, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK26", 26, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK25", 25, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK24", 24, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK23", 23, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK22", 22, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK21", 21, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK20", 20, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK19", 19, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK18", 18, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK17", 17, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK16", 16, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK15", 15, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK14", 14, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK13", 13, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK12", 12, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK11", 11, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK10", 10, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK9", 9, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK8", 8, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK7", 7, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK6", 6, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK5", 5, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK4", 4, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK3", 3, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK1", 1, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
            ]),
            Register("PRTN1_COFB1_STAT", 0x402DC314, 32, "Partition 1 COFB Set 1 Clock Status Register", [
                Field("BLOCK60", 28, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK59", 27, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK58", 26, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK56", 24, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK55", 23, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK54", 22, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK53", 21, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK52", 20, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK50", 18, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK49", 17, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK47", 15, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK45", 13, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK43", 11, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK42", 10, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK39", 7, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK38", 6, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK37", 5, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK36", 4, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK35", 3, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK34", 2, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK33", 1, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK32", 0, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
            ]),
            Register("PRTN1_COFB2_STAT", 0x402DC318, 32, "Partition 1 COFB Set 2 Clock Status Register", [
                Field("BLOCK95", 31, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK92", 28, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK89", 25, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK88", 24, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK87", 23, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK86", 22, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK85", 21, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK84", 20, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK77", 13, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK76", 12, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK75", 11, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK74", 10, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK73", 9, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK67", 3, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK66", 2, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK65", 1, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
            ]),
            Register("PRTN1_COFB3_STAT", 0x402DC31C, 32, "Partition 1 COFB Set 3 Clock Status Register", [
                Field("BLOCK109", 13, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK107", 11, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK106", 10, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK105", 9, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK104", 8, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK103", 7, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK102", 6, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK101", 5, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK100", 4, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK99", 3, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK98", 2, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK97", 1, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
                Field("BLOCK96", 0, 1, "IP block status", [
                    EnumVal("CLOCK_DISABLE", "0", "Clock is not running."),
                    EnumVal("CLOCK_ENABLE", "0x1", "Clock is running."),
                ]),
            ]),
            Register("PRTN1_COFB0_CLKEN", 0x402DC330, 32, "Partition 1 COFB Set 0 Clock Enable Register", [
                Field("REQ31", 31, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ29", 29, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ28", 28, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ24", 24, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ23", 23, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ22", 22, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ21", 21, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ15", 15, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ14", 14, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ13", 13, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ12", 12, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ11", 11, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ10", 10, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ9", 9, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ8", 8, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ7", 7, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ6", 6, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ5", 5, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ4", 4, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ3", 3, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
            ]),
            Register("PRTN1_COFB1_CLKEN", 0x402DC334, 32, "Partition 1 COFB Set 1 Clock Enable Register", [
                Field("REQ56", 24, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ53", 21, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ49", 17, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ47", 15, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ45", 13, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ42", 10, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ34", 2, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ33", 1, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ32", 0, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
            ]),
            Register("PRTN1_COFB2_CLKEN", 0x402DC338, 32, "Partition 1 COFB Set 2 Clock Enable Register", [
                Field("REQ95", 31, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ92", 28, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ89", 25, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ88", 24, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ87", 23, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ86", 22, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ85", 21, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ84", 20, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ77", 13, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ76", 12, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ75", 11, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ74", 10, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ73", 9, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ67", 3, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ66", 2, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ65", 1, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
            ]),
            Register("PRTN1_COFB3_CLKEN", 0x402DC33C, 32, "Partition 1 COFB Set 3 Clock Enable Register", [
                Field("REQ104", 8, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ102", 6, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
                Field("REQ96", 0, 1, "Clock enable", [
                    EnumVal("OFF", "0", "Clock is turned off."),
                    EnumVal("ON", "0x1", "Clock is turned on."),
                ]),
            ]),
        ])

class Module_MC_RGM(Peripheral):
    def __init__(self):
        super().__init__("MC_RGM", 0x4028C000, 0x30, [
            Register("DES", 0x4028C000, 32, "Destructive Event Status Register", [
                Field("DEBUG_DEST", 30, 1, "Flag for 'Destructive' Reset DEBUG_DEST", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event DEBUG_DEST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event DEBUG_DEST has occurred."),
                ]),
                Field("SW_DEST", 29, 1, "Flag for 'Destructive' Reset SW_DEST", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event SW_DEST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event SW_DEST has occurred."),
                ]),
                Field("HSE_SNVS_RST", 18, 1, "Flag for 'Destructive' Reset HSE_SNVS_RST", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event HSE_SNVS_RST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event HSE_SNVS_RST has occurred."),
                ]),
                Field("HSE_TMPR_RST", 17, 1, "Flag for 'Destructive' Reset HSE_TMPR_RST", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event HSE_TMPR_RST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event HSE_TMPR_RST has occurred."),
                ]),
                Field("SYS_DIV_FAIL", 15, 1, "Flag for 'Destructive' Reset SYS_DIV_FAIL", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event SYS_DIV_FAIL has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event SYS_DIV_FAIL has occurred."),
                ]),
                Field("HSE_CLK_FAIL", 14, 1, "Flag for 'Destructive' Reset HSE_CLK_FAIL", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event HSE_CLK_FAIL has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event HSE_CLK_FAIL has occurred."),
                ]),
                Field("AIPS_PLAT_CLK_FAIL", 12, 1, "Flag for 'Destructive' Reset AIPS_PLAT_CLK_FAIL", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event AIPS_PLAT_CLK_FAIL has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event AIPS_PLAT_CLK_FAIL has occurred."),
                ]),
                Field("CORE_CLK_FAIL", 10, 1, "Flag for 'Destructive' Reset CORE_CLK_FAIL", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event CORE_CLK_FAIL has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event CORE_CLK_FAIL has occurred."),
                ]),
                Field("PLL_LOL", 9, 1, "Flag for 'Destructive' Reset PLL_LOL", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event PLL_LOL has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event PLL_LOL has occurred."),
                ]),
                Field("FXOSC_FAIL", 8, 1, "Flag for 'Destructive' Reset FXOSC_FAIL", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event FXOSC_FAIL has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event FXOSC_FAIL has occurred."),
                ]),
                Field("MC_RGM_FRE", 6, 1, "Flag for 'Destructive' Reset MC_RGM_FRE", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event MC_RGM_FRE has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event MC_RGM_FRE has occurred."),
                ]),
                Field("STCU_URF", 4, 1, "Flag for 'Destructive' Reset STCU_URF", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event STCU_URF has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event STCU_URF has occurred."),
                ]),
                Field("FCCU_FTR", 3, 1, "Flag for 'Destructive' Reset FCCU_FTR", [
                    EnumVal("NO_DEST_RESET", "0", "'Destructive' reset event FCCU_FTR has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("DEST_RESET", "0x1", "'Destructive' reset event FCCU_FTR has occurred."),
                ]),
                Field("F_POR", 0, 1, "Flag for power-on reset", [
                    EnumVal("NO_POWER_ON", "0", "No power-on event has occurred since the last clear."),
                    EnumVal("POWER_ON", "0x1", "A power-on event has occurred."),
                ]),
            ]),
            Register("FES", 0x4028C008, 32, "Functional /External Reset Status Register", [
                Field("DEBUG_FUNC", 30, 1, "Flag for 'Functional' Reset DEBUG_FUNC", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event DEBUG_FUNC has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event DEBUG_FUNC has occurred."),
                ]),
                Field("SW_FUNC", 29, 1, "Flag for 'Functional' Reset SW_FUNC", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event SW_FUNC has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event SW_FUNC has occurred."),
                ]),
                Field("HSE_BOOT_RST", 20, 1, "Flag for 'Functional' Reset HSE_BOOT_RST", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event HSE_BOOT_RST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event HSE_BOOT_RST has occurred."),
                ]),
                Field("HSE_SWT_RST", 16, 1, "Flag for 'Functional' Reset HSE_SWT_RST", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event HSE_SWT_RST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event HSE_SWT_RST has occurred."),
                ]),
                Field("JTAG_RST", 9, 1, "Flag for 'Functional' Reset JTAG_RST", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event JTAG_RST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event JTAG_RST has occurred."),
                ]),
                Field("SWT0_RST", 6, 1, "Flag for 'Functional' Reset SWT0_RST", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event SWT0_RST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event SWT0_RST has occurred."),
                ]),
                Field("ST_DONE", 4, 1, "Flag for 'Functional' Reset ST_DONE", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event ST_DONE has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event ST_DONE has occurred."),
                ]),
                Field("FCCU_RST", 3, 1, "Flag for 'Functional' Reset FCCU_RST", [
                    EnumVal("NO_FUNC_RESET", "0", "'Functional' reset event FCCU_RST has not occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("FUNC_RESET", "0x1", "'Functional' reset event FCCU_RST has occurred."),
                ]),
                Field("F_EXR", 0, 1, "Flag for External Reset", [
                    EnumVal("NO_EXT_RESET", "0", "No external reset event has occurred since either the last clear or the last power-on reset assertion."),
                    EnumVal("EXT_RESET", "0x1", "An external reset event has occurred."),
                ]),
            ]),
            Register("FERD", 0x4028C00C, 32, "Functional Event Reset Disable Register", [
                Field("D_DEBUG_FUNC", 30, 1, "DEBUG_FUNC Disable Control", [
                    EnumVal("RESET", "0", "Functional reset event DEBUG_FUNC triggers a reset sequence."),
                    EnumVal("INTERRUPT", "0x1", "Functional reset event DEBUG_FUNC generates an interrupt request."),
                ]),
                Field("D_JTAG_RST", 9, 1, "JTAG_RST Disable Control", [
                    EnumVal("RESET", "0", "Functional reset event JTAG_RST triggers a reset sequence."),
                    EnumVal("INTERRUPT", "0x1", "Functional reset event JTAG_RST generates an interrupt request."),
                ]),
                Field("D_SWT0_RST", 6, 1, "SWT0_RST Disable Control", [
                    EnumVal("RESET", "0", "Functional reset event SWT0_RST triggers a reset sequence."),
                    EnumVal("INTERRUPT", "0x1", "Functional reset event SWT0_RST generates an interrupt request."),
                ]),
                Field("D_FCCU_RST", 3, 1, "FCCU_RST Disable Control", [
                    EnumVal("RESET", "0", "Functional reset event FCCU_RST triggers a reset sequence."),
                    EnumVal("INTERRUPT", "0x1", "Functional reset event FCCU_RST generates an interrupt request."),
                ]),
            ]),
            Register("FBRE", 0x4028C010, 32, "Functional Bidirectional Reset Enable Register", [
                Field("BE_DEBUG_FUNC", 30, 1, "Bidirectional Reset Enables for 'Functional' Reset DEBUG_FUNC", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset DEBUG_FUNC event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset DEBUG_FUNC event."),
                ]),
                Field("BE_SW_FUNC", 29, 1, "Bidirectional Reset Enables for 'Functional' Reset SW_FUNC", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset SW_FUNC event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset SW_FUNC event."),
                ]),
                Field("BE_HSE_BOOT_RST", 20, 1, "Bidirectional Reset Enables for 'Functional' Reset HSE_BOOT_RST", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset HSE_BOOT_RST event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset HSE_BOOT_RST event."),
                ]),
                Field("BE_HSE_SWT_RST", 16, 1, "Bidirectional Reset Enables for 'Functional' Reset HSE_SWT_RST", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset HSE_SWT_RST event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset HSE_SWT_RST event."),
                ]),
                Field("BE_JTAG_RST", 9, 1, "Bidirectional Reset Enables for 'Functional' Reset JTAG_RST", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset JTAG_RST event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset JTAG_RST event."),
                ]),
                Field("BE_SWT0_RST", 6, 1, "Bidirectional Reset Enables for 'Functional' Reset SWT0_RST", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset SWT0_RST event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset SWT0_RST event."),
                ]),
                Field("BE_ST_DONE", 4, 1, "Bidirectional Reset Enables for 'Functional' Reset ST_DONE", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset ST_DONE event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset ST_DONE event."),
                ]),
                Field("BE_FCCU_RST", 3, 1, "Bidirectional Reset Enables for 'Functional' Reset FCCU_RST", [
                    EnumVal("EXT_PIN_ASSERTED", "0", "External reset pin is asserted on a 'Functional' reset FCCU_RST event if the reset is enabled."),
                    EnumVal("EXT_PIN_NOT_ASSERTED", "0x1", "External reset pin is not asserted on a 'functional' reset FCCU_RST event."),
                ]),
            ]),
            Register("FREC", 0x4028C014, 32, "Functional Reset Escalation Counter Register", [
                Field("FREC", 0, 4, "Functional' Reset Escalation Counter", [
                ]),
            ]),
            Register("FRET", 0x4028C018, 32, "Functional Reset Escalation Threshold Register", [
                Field("FRET", 0, 4, "'Functional' Reset Escalation Threshold", [
                ]),
            ]),
            Register("DRET", 0x4028C01C, 32, "Destructive Reset Escalation Threshold Register", [
                Field("DRET", 0, 4, "'Destructive' Reset Escalation Threshold", [
                ]),
            ]),
            Register("ERCTRL", 0x4028C020, 32, "External Reset Control Register", [
                Field("ERASSERT", 0, 1, "ERASSERT", [
                    EnumVal("NO_CHANGE", "0", "No change"),
                    EnumVal("EXT_RESET_ASSERTED", "0x1", "External reset is asserted"),
                ]),
            ]),
            Register("RDSS", 0x4028C024, 32, "Reset During Standby Status Register", [
                Field("FES_RES", 1, 1, "FES_RES", [
                    EnumVal("NO_FUNC_RESET", "0", "No functional reset event occurred during standby mode."),
                    EnumVal("FUNC_RESET", "0x1", "Functional reset event occurred during standby mode."),
                ]),
                Field("DES_RES", 0, 1, "DES_RES", [
                    EnumVal("NO_DEST_RESET", "0", "No destructive reset event occurred during standby mode."),
                    EnumVal("DEST_RESET", "0x1", "Destructive reset event occurred during standby mode."),
                ]),
            ]),
            Register("FRENTC", 0x4028C028, 32, "Functional Reset Entry Timeout Control Register", [
                Field("FRET_TIMEOUT", 1, 31, "Functional Reset Entry Timer Value", [
                ]),
                Field("FRET_EN", 0, 1, "Functional Reset Entry Timer Enable/Disable", [
                    EnumVal("DISABLE", "0", "Functional reset entry timer is disabled."),
                    EnumVal("ENABLE", "0x1", "Functional reset entry timer is enabled"),
                ]),
            ]),
            Register("LPDEBUG", 0x4028C02C, 32, "Low Power Debug Control Register", [
                Field("LP_DBG_EN", 0, 1, "Low-Power Debug Enable/Disable Control", [
                    EnumVal("DISABLE", "0", "Low-power debug disabled"),
                    EnumVal("ENABLE", "0x1", "Debug data collection enabled before entering low-power debug"),
                ]),
            ]),
        ])

class Module_MDM_AP(Peripheral):
    def __init__(self):
        super().__init__("MDM_AP", 0x40250600, 0x100, [
            Register("MDMAPSTTS", 0x40250600, 32, "Status", [
                Field("CM70DBGRSTRD", 28, 1, "Cortex-M7_0 Debug Restarted", [
                    EnumVal("CM70DBGRSTRD_0", "0", "In Debug mode"),
                    EnumVal("CM70DBGRSTRD_1", "0x1", "In Normal mode"),
                ]),
                Field("CM70SLPNG", 20, 1, "Cortex-M7_0 Sleeping", [
                    EnumVal("CM70SLPNG_0", "0", "Not in Sleep mode"),
                    EnumVal("CM70SLPNG_1", "0x1", "In Sleep mode"),
                ]),
                Field("CM70DPSLP", 16, 1, "Cortex-M7_0 Deep Sleep", [
                    EnumVal("CM70DPSLP_0", "0", "Not in Deep Sleep mode"),
                    EnumVal("CM70DPSLP_1", "0x1", "In Deep Sleep mode"),
                ]),
                Field("CM70HLT", 12, 1, "Cortex-M7_0 Halted", [
                    EnumVal("CM70HLT_0", "0", "Core is not halted"),
                    EnumVal("CM70HLT_1", "0x1", "Core is halted"),
                ]),
                Field("FUNCRST", 2, 1, "Functional Reset", [
                    EnumVal("FUNCRST_0", "0", "Not in functional reset"),
                    EnumVal("FUNCRST_1", "0x1", "In functional reset"),
                ]),
                Field("DESTRST", 1, 1, "Destructive Reset", [
                    EnumVal("DESTRST_0", "0", "Not in destructive reset"),
                    EnumVal("DESTRST_1", "0x1", "In destructive reset"),
                ]),
            ]),
            Register("MDMAPCTL", 0x40250604, 32, "Control", [
                Field("CM70DBGRSRT", 28, 1, "Cortex-M7_0 Debug Restart", [
                    EnumVal("CM70DBGRSRT_0", "0", "Normal operation"),
                    EnumVal("CM70DBGRSRT_1", "0x1", "Request asserted"),
                ]),
                Field("SWOOVRD", 22, 1, "SWO Override", [
                    EnumVal("SWOOVRD_0", "0", "Not overridden, and SWO generates the trace response"),
                    EnumVal("SWOOVRD_1", "0x1", "Is overridden"),
                ]),
                Field("POR_WDG_DIS", 15, 1, "Power Watchdog Status", [
                    EnumVal("POR_WDG_DIS_0", "0", "Power watchdog is disabled"),
                    EnumVal("POR_WDG_DIS_1", "0x1", "Power watchdog is enabled"),
                ]),
                Field("DBGRSTFASTPAD", 13, 1, "Debug Over Reset Via Fast Pads", [
                    EnumVal("DBGRSTFASTPAD_0", "0", "Disabled"),
                    EnumVal("DBGRSTFASTPAD_1", "0x1", "Enabled"),
                ]),
                Field("DBGRSTSLOWPAD", 12, 1, "Debug Over Reset Via Slow Pads", [
                    EnumVal("DBGRSTSLOWPAD_0", "0", "Disabled"),
                    EnumVal("DBGRSTSLOWPAD_1", "0x1", "Enabled"),
                ]),
                Field("CM70DBGREQ", 8, 1, "Cortex-M7_0 Debug Request", [
                    EnumVal("CM70DBGREQ_0", "0", "Debug request is not generated"),
                    EnumVal("CM70DBGREQ_1", "0x1", "Debug request is generated"),
                ]),
                Field("SYSFUNCRST", 5, 1, "System Functional Reset", [
                    EnumVal("SYSFUNCRST_0", "0", "Deasserted"),
                    EnumVal("SYSFUNCRST_1", "0x1", "Asserted"),
                ]),
                Field("SYSRESETREQ", 4, 1, "System Destructive Reset", [
                    EnumVal("SYSRESETREQ_0", "0", "Deasserted"),
                    EnumVal("SYSRESETREQ_1", "0x1", "Asserted"),
                ]),
            ]),
            Register("MDMAPWIREN", 0x40250630, 32, "WIR Enable", [
                Field("LWPRSTPRVT", 1, 1, "Low-Power Entry", [
                    EnumVal("LWPRSTPRVT_0", "0", "Prevents MC_RGM from generating the reset until the MC_RGM TPIU flush receives an acknowledgment from TPIU"),
                    EnumVal("LWPRSTPRVT_1", "0x1", "Prevents MC_RGM from generating the reset even if MC_RGM receives an acknowledgment from TPIU"),
                ]),
                Field("LWPWREN", 0, 1, "Low Power Debug Enable", [
                    EnumVal("LWPWREN_0", "0", "Disabled"),
                    EnumVal("LWPWREN_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("MDMAPWIRSTTS", 0x40250634, 32, "WIR Status", [
                Field("MDM_DAP_WIR_STATUS", 0, 32, "MDM_AP WIR Status", [
                ]),
            ]),
            Register("MDMAPWIRREL", 0x40250638, 32, "WIR Release", [
                Field("WTRSTRGM", 0, 1, "Wait In Reset B", [
                    EnumVal("WTRSTRGM_0", "0", "Normal operation"),
                    EnumVal("WTRSTRGM_1", "0x1", "Wait supported"),
                ]),
            ]),
            Register("ID", 0x402506FC, 32, "Identity", [
                Field("ID", 0, 32, "Identity", [
                ]),
            ]),
        ])

class Module_MEM_OTP_AE(Peripheral):
    def __init__(self):
        super().__init__("MEM_OTP_AE", 0x120, 0x20, [
            Register("CTRL_CMD", 0x120, 16, "Control Command", [
                Field("CMD", 0, 6, "Command", [
                    EnumVal("RD_ONE", "0xB", "OTPC_C_RD_ONE"),
                ]),
            ]),
            Register("STRT_STP", 0x122, 16, "Start Stop", [
                Field("STOP", 8, 8, "Stop", [
                ]),
                Field("START", 0, 8, "Start", [
                ]),
            ]),
            Register("DATAOUT", 0x128, 16, "Data Output", [
                Field("MIRRD", 8, 8, "Mirror Read Direct", [
                ]),
                Field("OUTPUT", 0, 8, "Output", [
                ]),
            ]),
            Register("STATUS", 0x12A, 16, "Status", [
                Field("SECTBE3", 11, 1, "Sector Boot Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SECTBE2", 10, 1, "Sector Boot Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SECTBE1", 9, 1, "Sector Boot Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SECTBE0", 8, 1, "Sector Boot Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("SECTWP3", 7, 1, "Sector Write Protect", [
                    EnumVal("NOTPROTECTED", "0", "Not protected"),
                    EnumVal("PROTECTED", "0x1", "Protected"),
                ]),
                Field("SECTWP2", 6, 1, "Sector Write Protect", [
                    EnumVal("NOTPROTECTED", "0", "Not protected"),
                    EnumVal("PROTECTED", "0x1", "Protected"),
                ]),
                Field("SECTWP1", 5, 1, "Sector Write Protect", [
                    EnumVal("NOTPROTECTED", "0", "Not protected"),
                    EnumVal("PROTECTED", "0x1", "Protected"),
                ]),
                Field("SECTWP0", 4, 1, "Sector Write Protect", [
                    EnumVal("NOTPROTECTED", "0", "Not protected"),
                    EnumVal("PROTECTED", "0x1", "Protected"),
                ]),
                Field("SECTCRCOK3", 3, 1, "Sector CRC OK", [
                    EnumVal("ERROR", "0", "CRC error or CRC not verified"),
                    EnumVal("NOERROR", "0x1", "No CRC error"),
                ]),
                Field("SECTCRCOK2", 2, 1, "Sector CRC OK", [
                    EnumVal("ERROR", "0", "CRC error or CRC not verified"),
                    EnumVal("NOERROR", "0x1", "No CRC error"),
                ]),
                Field("SECTCRCOK1", 1, 1, "Sector CRC OK", [
                    EnumVal("ERROR", "0", "CRC error or CRC not verified"),
                    EnumVal("NOERROR", "0x1", "No CRC error"),
                ]),
                Field("SECTCRCOK0", 0, 1, "Sector CRC OK", [
                    EnumVal("ERROR", "0", "CRC error or CRC not verified"),
                    EnumVal("NOERROR", "0x1", "No CRC error"),
                ]),
            ]),
            Register("ERROR", 0x13C, 16, "Error", [
                Field("BOOTERR", 14, 1, "Boot Error", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("ECC2ERR", 10, 1, "ECC 2-bit Error", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("ECC1ERR", 9, 1, "ECC 1-bit Error", [
                    EnumVal("NOERROR", "0", "No error"),
                    EnumVal("ERROR", "0x1", "Error"),
                ]),
                Field("CTRLERR", 7, 1, "Error", [
                ]),
                Field("CTRLBUSY", 6, 1, "Busy", [
                    EnumVal("IDLE", "0", "Idle"),
                    EnumVal("EXECUTING", "0x1", "Executing a command or booting the OTP"),
                ]),
            ]),
            Register("MODE", 0x13E, 16, "Mode", [
                Field("VERID", 12, 4, "Version Identifier", [
                ]),
                Field("SUPERUSR", 9, 2, "Superuser Mode", [
                    EnumVal("USER", "0", "User mode"),
                    EnumVal("SUPERUSER", "0x1", "Superuser mode"),
                ]),
                Field("TSTIC", 8, 1, "IC Test", [
                    EnumVal("NORMAL", "0", "Normal operation"),
                    EnumVal("TEST", "0x1", "IC Test mode"),
                ]),
                Field("SECTCRCCOMP3", 3, 1, "Sector CRC Check Complete", [
                    EnumVal("NOTCOMPLETED", "0", "Not completed"),
                    EnumVal("COMPLETED", "0x1", "Completed"),
                ]),
                Field("SECTCRCCOMP2", 2, 1, "Sector CRC Check Complete", [
                    EnumVal("NOTCOMPLETED", "0", "Not completed"),
                    EnumVal("COMPLETED", "0x1", "Completed"),
                ]),
                Field("SECTCRCCOMP1", 1, 1, "Sector CRC Check Complete", [
                    EnumVal("NOTCOMPLETED", "0", "Not completed"),
                    EnumVal("COMPLETED", "0x1", "Completed"),
                ]),
                Field("SECTCRCCOMP0", 0, 1, "Sector CRC Check Complete", [
                    EnumVal("NOTCOMPLETED", "0", "Not completed"),
                    EnumVal("COMPLETED", "0x1", "Completed"),
                ]),
            ]),
        ])

class Module_MSCM(Peripheral):
    def __init__(self):
        super().__init__("MSCM", 0x40260000, 0xA60, [
            Register("CPXTYPE", 0x40260000, 32, "Processor X Type", [
                Field("PERSONALITY", 0, 32, "Personality of CPx", [
                ]),
            ]),
            Register("CPXNUM", 0x40260004, 32, "Processor X Number", [
                Field("CPN", 0, 2, "Processor Number", [
                ]),
            ]),
            Register("CPXREV", 0x40260008, 32, "Processor X Revision", [
                Field("RYPZ", 0, 8, "Processor Revision", [
                ]),
            ]),
            Register("CPXCFG0", 0x4026000C, 32, "Processor X Configuration 0", [
                Field("ICSZ", 24, 8, "Level 1 Instruction Cache Size", [
                ]),
                Field("ICWY", 16, 8, "L1 Instruction Cache Ways", [
                ]),
                Field("DCSZ", 8, 8, "L1 Data Cache Size", [
                ]),
                Field("DCWY", 0, 8, "L1 Data Cache Ways", [
                ]),
            ]),
            Register("CPXCFG1", 0x40260010, 32, "Processor X Configuration 1", [
                Field("L2SZ", 24, 8, "L2 Cache Size", [
                ]),
                Field("L2WY", 16, 8, "L2 Cache Ways", [
                ]),
            ]),
            Register("CPXCFG2", 0x40260014, 32, "Processor X Configuration 2", [
                Field("DTCMSZ", 24, 8, "Tightly Coupled Data Memory Size", [
                ]),
                Field("ITCMSZ", 16, 8, "Instruction Tightly Coupled Memory Size", [
                ]),
            ]),
            Register("CPXCFG3", 0x40260018, 32, "Processor x Configuration 3", [
                Field("CPY", 4, 1, "Cryptography", [
                    EnumVal("CPY_0", "0", "Not supported"),
                    EnumVal("CPY_1", "0x1", "Supported"),
                ]),
                Field("CMP", 3, 1, "Core Memory Protection Unit", [
                    EnumVal("CMP_0", "0", "Not included"),
                    EnumVal("CMP_1", "0x1", "Included"),
                ]),
                Field("MMU", 2, 1, "Memory Management Unit", [
                    EnumVal("MMU_0", "0", "Not supported"),
                    EnumVal("MMU_1", "0x1", "Supported"),
                ]),
                Field("SIMD", 1, 1, "SIMD/NEON Instruction Support", [
                    EnumVal("SIMD_0", "0", "Not included"),
                    EnumVal("SIMD_1", "0x1", "Included"),
                ]),
                Field("FPU", 0, 1, "Floating Point Unit", [
                    EnumVal("FPU_0", "0", "Not provided"),
                    EnumVal("FPU_1", "0x1", "Provided"),
                ]),
            ]),
            Register("CP0TYPE", 0x40260020, 32, "Processor 0 Type", [
                Field("PERSONALITY", 0, 32, "Processor Personality", [
                ]),
            ]),
            Register("CP0NUM", 0x40260024, 32, "Processor 0 Number", [
                Field("CPN", 0, 2, "Processor Number", [
                ]),
            ]),
            Register("CP0REV", 0x40260028, 32, "Processor 0 Count", [
                Field("RYPZ", 0, 8, "Processor Revision", [
                ]),
            ]),
            Register("CP0CFG0", 0x4026002C, 32, "Processor 0 Configuration 0", [
                Field("ICSZ", 24, 8, "Level 1 Instruction Cache Size", [
                ]),
                Field("ICWY", 16, 8, "L1 Instruction Cache Ways", [
                ]),
                Field("DCSZ", 8, 8, "L1 Data Cache Size", [
                ]),
                Field("DCWY", 0, 8, "L1 Data Cache Ways", [
                ]),
            ]),
            Register("CP0CFG1", 0x40260030, 32, "Processor 0 Configuration 1", [
                Field("L2SZ", 24, 8, "L2 Cache Size", [
                ]),
                Field("L2WY", 16, 8, "L2 Cache Ways", [
                ]),
            ]),
            Register("CP0CFG2", 0x40260034, 32, "Processor 0 Configuration 2", [
                Field("DTCMSZ", 24, 8, "Tightly Coupled Data Memory Size", [
                ]),
                Field("ITCMSZ", 16, 8, "Instruction Tightly Coupled Memory Size", [
                ]),
            ]),
            Register("CP0CFG3", 0x40260038, 32, "Processor 0 Configuration 3", [
                Field("CPY", 4, 1, "Cryptography", [
                    EnumVal("CPY_0", "0", "Not supported"),
                    EnumVal("CPY_1", "0x1", "Supported"),
                ]),
                Field("CMP", 3, 1, "Core Memory Protection Unit", [
                    EnumVal("CMP_0", "0", "Not included"),
                    EnumVal("CMP_1", "0x1", "Included"),
                ]),
                Field("MMU", 2, 1, "Memory Management Unit", [
                    EnumVal("MMU_0", "0", "Not supported"),
                    EnumVal("MMU_1", "0x1", "Supported"),
                ]),
                Field("SIMD", 1, 1, "SIMD/NEON Instruction Support", [
                    EnumVal("SIMD_0", "0", "Not included"),
                    EnumVal("SIMD_1", "0x1", "Included"),
                ]),
                Field("FPU", 0, 1, "Floating Point Unit", [
                    EnumVal("FPU_0", "0", "Not provided"),
                    EnumVal("FPU_1", "0x1", "Provided"),
                ]),
            ]),
            Register("IRCP0ISR0", 0x40260200, 32, "Interrupt Router CP0 Interrupt Status", [
                Field("CP1_INT", 1, 1, "CP1-to-CPn Interrupt", [
                    EnumVal("CP1_INT_0", "0", "No interrupt is asserted to CPn"),
                    EnumVal("CP1_INT_1", "0x1", "Interrupt to CPn is asserted"),
                ]),
                Field("CP0_INT", 0, 1, "CP0-to-CPn Interrupt", [
                    EnumVal("CP0_INT_0", "0", "No interrupt asserted to CPn"),
                    EnumVal("CP0_INT_1", "0x1", "Interrupt to CPn asserted"),
                ]),
            ]),
            Register("IRCP0IGR0", 0x40260204, 32, "Interrupt Router CP0 Interrupt Generation", [
                Field("INT_EN", 0, 1, "Interrupt Enable", [
                ]),
            ]),
            Register("IRCP0ISR1", 0x40260208, 32, "Interrupt Router CP0 Interrupt Status", [
                Field("CP1_INT", 1, 1, "CP1-to-CPn Interrupt", [
                    EnumVal("CP1_INT_0", "0", "No interrupt is asserted to CPn"),
                    EnumVal("CP1_INT_1", "0x1", "Interrupt to CPn is asserted"),
                ]),
                Field("CP0_INT", 0, 1, "CP0-to-CPn Interrupt", [
                    EnumVal("CP0_INT_0", "0", "No interrupt asserted to CPn"),
                    EnumVal("CP0_INT_1", "0x1", "Interrupt to CPn asserted"),
                ]),
            ]),
            Register("IRCP0IGR1", 0x4026020C, 32, "Interrupt Router CP0 Interrupt Generation", [
                Field("INT_EN", 0, 1, "Interrupt Enable", [
                ]),
            ]),
            Register("IRCP0ISR2", 0x40260210, 32, "Interrupt Router CP0 Interrupt Status", [
                Field("CP1_INT", 1, 1, "CP1-to-CPn Interrupt", [
                    EnumVal("CP1_INT_0", "0", "No interrupt is asserted to CPn"),
                    EnumVal("CP1_INT_1", "0x1", "Interrupt to CPn is asserted"),
                ]),
                Field("CP0_INT", 0, 1, "CP0-to-CPn Interrupt", [
                    EnumVal("CP0_INT_0", "0", "No interrupt asserted to CPn"),
                    EnumVal("CP0_INT_1", "0x1", "Interrupt to CPn asserted"),
                ]),
            ]),
            Register("IRCP0IGR2", 0x40260214, 32, "Interrupt Router CP0 Interrupt Generation", [
                Field("INT_EN", 0, 1, "Interrupt Enable", [
                ]),
            ]),
            Register("IRCP0ISR3", 0x40260218, 32, "Interrupt Router CP0 Interrupt Status", [
                Field("CP1_INT", 1, 1, "CP1-to-CPn Interrupt", [
                    EnumVal("CP1_INT_0", "0", "No interrupt is asserted to CPn"),
                    EnumVal("CP1_INT_1", "0x1", "Interrupt to CPn is asserted"),
                ]),
                Field("CP0_INT", 0, 1, "CP0-to-CPn Interrupt", [
                    EnumVal("CP0_INT_0", "0", "No interrupt asserted to CPn"),
                    EnumVal("CP0_INT_1", "0x1", "Interrupt to CPn asserted"),
                ]),
            ]),
            Register("IRCP0IGR3", 0x4026021C, 32, "Interrupt Router CP0 Interrupt Generation", [
                Field("INT_EN", 0, 1, "Interrupt Enable", [
                ]),
            ]),
            Register("IRCPCFG", 0x40260400, 32, "Interrupt Router Configuration", [
                Field("LOCK", 31, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Register can be written by any privileged write"),
                    EnumVal("LOCK_1", "0x1", "Register is locked (read-only) until the next reset"),
                ]),
                Field("CP1_TR", 1, 1, "CP1 as Trusted Core", [
                    EnumVal("CP1_TR_0", "0", "Not trusted"),
                    EnumVal("CP1_TR_1", "0x1", "Trusted"),
                ]),
                Field("CP0_TR", 0, 1, "CP0 as Trusted Core", [
                    EnumVal("CP0_TR_0", "0", "Not trusted"),
                    EnumVal("CP0_TR_1", "0x1", "Trusted"),
                ]),
            ]),
            Register("XN_CTRL", 0x40260500, 32, "Memory Execution Control", [
                Field("HLK", 31, 1, "Hard Lock", [
                    EnumVal("HLK_0", "0", "Disabled"),
                    EnumVal("HLK_1", "0x1", "Enabled"),
                ]),
                Field("SLK", 30, 1, "Soft Lock", [
                    EnumVal("SLK_0", "0", "Disabled"),
                    EnumVal("SLK_1", "0x1", "Enabled"),
                ]),
                Field("CM7_0_DTCM", 20, 1, "Transaction Control For Cortex-M7_0 DTCM", [
                    EnumVal("CM7_0_DTCM_0", "0", "Transaction enabled"),
                    EnumVal("CM7_0_DTCM_1", "0x1", "Transaction disabled"),
                ]),
                Field("CM7_0_DIS_D0_D1TCM_EXEC", 16, 1, "D0 And D1 TCM Execution For Cortex-M7_0", [
                    EnumVal("CM7_0_DIS_D0_D1TCM_EXEC_0", "0", "Execution enabled"),
                    EnumVal("CM7_0_DIS_D0_D1TCM_EXEC_1", "0x1", "Execution disabled"),
                ]),
                Field("CM7_0_ITCM", 12, 1, "Transaction Control For Cortex-M7_0 ITCM", [
                    EnumVal("CM7_0_ITCM_0", "0", "Execution enabled"),
                    EnumVal("CM7_0_ITCM_1", "0x1", "Execution disabled"),
                ]),
                Field("CM7_0_DIS_ITCM_EXEC", 8, 1, "ITCM Execution For Cortex-M7_0", [
                    EnumVal("CM7_0_DIS_ITCM_EXEC_0", "0", "Execution enabled"),
                    EnumVal("CM7_0_DIS_ITCM_EXEC_1", "0x1", "Execution disabled"),
                ]),
                Field("PRAM0", 0, 1, "Transaction Control For PRAM 0", [
                    EnumVal("PRAM0_0", "0", "Transaction enabled"),
                    EnumVal("PRAM0_1", "0x1", "Transaction disabled"),
                ]),
            ]),
            Register("ENEDC", 0x40260600, 32, "Enable Interconnect Error Detection", [
                Field("ADD_CM7_0_TCM", 27, 1, "Address Check For Cortex-M7_0_TCM", [
                    EnumVal("ADD_CM7_0_TCM_0", "0", "Disabled"),
                    EnumVal("ADD_CM7_0_TCM_1", "0x1", "Enabled"),
                ]),
                Field("CM7_0_TCM", 26, 1, "Write Data Check For Cortex-M7_0_TCM", [
                    EnumVal("CM7_0_TCM_0", "0", "Disabled"),
                    EnumVal("CM7_0_TCM_1", "0x1", "Enabled"),
                ]),
                Field("ADD_AIPS0", 21, 1, "Address Check For AIPS0", [
                    EnumVal("ADD_AIPS0_0", "0", "Disabled"),
                    EnumVal("ADD_AIPS0_1", "0x1", "Enabled"),
                ]),
                Field("AIPS0", 20, 1, "Write Data Check For AIPS0", [
                    EnumVal("AIPS0_0", "0", "Disabled"),
                    EnumVal("AIPS0_1", "0x1", "Enabled"),
                ]),
                Field("ADD_TCM_BACKDOOR", 17, 1, "Write Data Check For TCM Backdoor", [
                    EnumVal("ADD_TCM_BACKDOOR_0", "0", "Disabled"),
                    EnumVal("ADD_TCM_BACKDOOR_1", "0x1", "Enabled"),
                ]),
                Field("ADD_PRAM0", 13, 1, "Address Check For PRAM0", [
                    EnumVal("ADD_PRAM0_0", "0", "Disabled"),
                    EnumVal("ADD_PRAM0_1", "0x1", "Enabled"),
                ]),
                Field("PRAM0", 12, 1, "Write Data Check For PRAM0", [
                    EnumVal("PRAM0_0", "0", "Disabled"),
                    EnumVal("PRAM0_1", "0x1", "Enabled"),
                ]),
                Field("ADD_PF0", 9, 1, "Address Check For PF0", [
                    EnumVal("ADD_PF0_0", "0", "Disabled"),
                    EnumVal("ADD_PF0_1", "0x1", "Enabled"),
                ]),
                Field("HSE", 4, 1, "Read Data Check For HSE_B", [
                    EnumVal("HSE_0", "0", "Disabled"),
                    EnumVal("HSE_1", "0x1", "Enabled"),
                ]),
                Field("EDMA", 2, 1, "Read Data Check For eDMA", [
                    EnumVal("EDMA_0", "0", "Disabled"),
                    EnumVal("EDMA_1", "0x1", "Enabled"),
                ]),
                Field("CM7_0_AHBP", 1, 1, "Read Data Check For Cortex-M7_0_AHBP", [
                    EnumVal("CM7_0_AHBP_0", "0", "Disabled"),
                    EnumVal("CM7_0_AHBP_1", "0x1", "Enabled"),
                ]),
                Field("CM7_0_AHBM", 0, 1, "Read Data Check For Cortex-M7_0_AHBM", [
                    EnumVal("CM7_0_AHBM_0", "0", "Disabled"),
                    EnumVal("CM7_0_AHBM_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("IAHBCFGREG", 0x40260700, 32, "AHB Gasket Configuration", [
                Field("TCM_PRAM_DIS_WR_OPT", 15, 1, "Determines whether write burst optimizations in the TCM_PRAM gasket are enabled or disabled", [
                    EnumVal("TCM_PRAM_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("TCM_PRAM_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
                Field("PRAM0_DIS_WR_OPT", 13, 1, "Determines whether write burst optimizations in the PRAM0 gasket are enabled or disabled", [
                    EnumVal("PRAM0_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("PRAM0_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
                Field("AIPS0_DIS_WR_OPT", 11, 1, "Determines whether write burst optimizations in the AIPS2 AHB gasket are enabled", [
                    EnumVal("AIPS0_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("AIPS0_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
                Field("CM7_0_AHBS_DIS_WR_OPT", 6, 1, "Determines whether write burst optimizations in the CM7_0_AHBS gasket are enabled or disabled", [
                    EnumVal("CM7_0_AHBS_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("CM7_0_AHBS_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
                Field("TCM_DIS_WR_OPT", 4, 1, "Determines whether write burst optimizations in the TCM AHB gasket are enabled", [
                    EnumVal("TCM_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("TCM_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
                Field("HSE_DIS_WR_OPT", 3, 1, "Determines whether write burst optimizations in the HSE_B AHB gasket are enabled", [
                    EnumVal("HSE_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("HSE_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
                Field("DMA_AXBS_S1_DIS_WR_OPT", 2, 1, "Determines whether write burst optimizations in the DMA AXBS S1 AHB gasket are enabled", [
                    EnumVal("DMA_AXBS_S1_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("DMA_AXBS_S1_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
                Field("DMA_AXBS_S0_DIS_WR_OPT", 1, 1, "Determines whether write burst optimizations in the DMA AXBS S0 AHB gasket are enabled", [
                    EnumVal("DMA_AXBS_S0_DIS_WR_OPT_0", "0", "Enabled"),
                    EnumVal("DMA_AXBS_S0_DIS_WR_OPT_1", "0x1", "Disabled"),
                ]),
            ]),
            Register("IRSPRC[0]", 0x40260880, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[1]", 0x40260882, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[2]", 0x40260884, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[3]", 0x40260886, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[4]", 0x40260888, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[5]", 0x4026088A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[6]", 0x4026088C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[7]", 0x4026088E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[8]", 0x40260890, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[9]", 0x40260892, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[10]", 0x40260894, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[11]", 0x40260896, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[12]", 0x40260898, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[13]", 0x4026089A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[14]", 0x4026089C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[15]", 0x4026089E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[16]", 0x402608A0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[17]", 0x402608A2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[18]", 0x402608A4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[19]", 0x402608A6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[20]", 0x402608A8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[21]", 0x402608AA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[22]", 0x402608AC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[23]", 0x402608AE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[24]", 0x402608B0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[25]", 0x402608B2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[26]", 0x402608B4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[27]", 0x402608B6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[28]", 0x402608B8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[29]", 0x402608BA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[30]", 0x402608BC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[31]", 0x402608BE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[32]", 0x402608C0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[33]", 0x402608C2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[34]", 0x402608C4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[35]", 0x402608C6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[36]", 0x402608C8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[37]", 0x402608CA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[38]", 0x402608CC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[39]", 0x402608CE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[40]", 0x402608D0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[41]", 0x402608D2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[42]", 0x402608D4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[43]", 0x402608D6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[44]", 0x402608D8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[45]", 0x402608DA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[46]", 0x402608DC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[47]", 0x402608DE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[48]", 0x402608E0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[49]", 0x402608E2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[50]", 0x402608E4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[51]", 0x402608E6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[52]", 0x402608E8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[53]", 0x402608EA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[54]", 0x402608EC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[55]", 0x402608EE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[56]", 0x402608F0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[57]", 0x402608F2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[58]", 0x402608F4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[59]", 0x402608F6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[60]", 0x402608F8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[61]", 0x402608FA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[62]", 0x402608FC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[63]", 0x402608FE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[64]", 0x40260900, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[65]", 0x40260902, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[66]", 0x40260904, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[67]", 0x40260906, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[68]", 0x40260908, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[69]", 0x4026090A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[70]", 0x4026090C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[71]", 0x4026090E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[72]", 0x40260910, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[73]", 0x40260912, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[74]", 0x40260914, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[75]", 0x40260916, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[76]", 0x40260918, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[77]", 0x4026091A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[78]", 0x4026091C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[79]", 0x4026091E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[80]", 0x40260920, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[81]", 0x40260922, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[82]", 0x40260924, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[83]", 0x40260926, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[84]", 0x40260928, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[85]", 0x4026092A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[86]", 0x4026092C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[87]", 0x4026092E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[88]", 0x40260930, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[89]", 0x40260932, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[90]", 0x40260934, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[91]", 0x40260936, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[92]", 0x40260938, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[93]", 0x4026093A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[94]", 0x4026093C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[95]", 0x4026093E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[96]", 0x40260940, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[97]", 0x40260942, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[98]", 0x40260944, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[99]", 0x40260946, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[100]", 0x40260948, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[101]", 0x4026094A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[102]", 0x4026094C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[103]", 0x4026094E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[104]", 0x40260950, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[105]", 0x40260952, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[106]", 0x40260954, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[107]", 0x40260956, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[108]", 0x40260958, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[109]", 0x4026095A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[110]", 0x4026095C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[111]", 0x4026095E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[112]", 0x40260960, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[113]", 0x40260962, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[114]", 0x40260964, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[115]", 0x40260966, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[116]", 0x40260968, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[117]", 0x4026096A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[118]", 0x4026096C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[119]", 0x4026096E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[120]", 0x40260970, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[121]", 0x40260972, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[122]", 0x40260974, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[123]", 0x40260976, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[124]", 0x40260978, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[125]", 0x4026097A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[126]", 0x4026097C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[127]", 0x4026097E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[128]", 0x40260980, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[129]", 0x40260982, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[130]", 0x40260984, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[131]", 0x40260986, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[132]", 0x40260988, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[133]", 0x4026098A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[134]", 0x4026098C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[135]", 0x4026098E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[136]", 0x40260990, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[137]", 0x40260992, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[138]", 0x40260994, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[139]", 0x40260996, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[140]", 0x40260998, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[141]", 0x4026099A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[142]", 0x4026099C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[143]", 0x4026099E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[144]", 0x402609A0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[145]", 0x402609A2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[146]", 0x402609A4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[147]", 0x402609A6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[148]", 0x402609A8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[149]", 0x402609AA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[150]", 0x402609AC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[151]", 0x402609AE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[152]", 0x402609B0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[153]", 0x402609B2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[154]", 0x402609B4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[155]", 0x402609B6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[156]", 0x402609B8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[157]", 0x402609BA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[158]", 0x402609BC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[159]", 0x402609BE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[160]", 0x402609C0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[161]", 0x402609C2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[162]", 0x402609C4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[163]", 0x402609C6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[164]", 0x402609C8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[165]", 0x402609CA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[166]", 0x402609CC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[167]", 0x402609CE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[168]", 0x402609D0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[169]", 0x402609D2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[170]", 0x402609D4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[171]", 0x402609D6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[172]", 0x402609D8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[173]", 0x402609DA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[174]", 0x402609DC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[175]", 0x402609DE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[176]", 0x402609E0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[177]", 0x402609E2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[178]", 0x402609E4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[179]", 0x402609E6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[180]", 0x402609E8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[181]", 0x402609EA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[182]", 0x402609EC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[183]", 0x402609EE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[184]", 0x402609F0, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[185]", 0x402609F2, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[186]", 0x402609F4, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[187]", 0x402609F6, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[188]", 0x402609F8, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[189]", 0x402609FA, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[190]", 0x402609FC, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[191]", 0x402609FE, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[192]", 0x40260A00, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[193]", 0x40260A02, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[194]", 0x40260A04, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[195]", 0x40260A06, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[196]", 0x40260A08, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[197]", 0x40260A0A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[198]", 0x40260A0C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[199]", 0x40260A0E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[200]", 0x40260A10, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[201]", 0x40260A12, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[202]", 0x40260A14, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[203]", 0x40260A16, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[204]", 0x40260A18, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[205]", 0x40260A1A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[206]", 0x40260A1C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[207]", 0x40260A1E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[208]", 0x40260A20, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[209]", 0x40260A22, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[210]", 0x40260A24, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[211]", 0x40260A26, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[212]", 0x40260A28, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[213]", 0x40260A2A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[214]", 0x40260A2C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[215]", 0x40260A2E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[216]", 0x40260A30, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[217]", 0x40260A32, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[218]", 0x40260A34, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[219]", 0x40260A36, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[220]", 0x40260A38, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[221]", 0x40260A3A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[222]", 0x40260A3C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[223]", 0x40260A3E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[224]", 0x40260A40, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[225]", 0x40260A42, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[226]", 0x40260A44, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[227]", 0x40260A46, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[228]", 0x40260A48, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[229]", 0x40260A4A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[230]", 0x40260A4C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[231]", 0x40260A4E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[232]", 0x40260A50, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[233]", 0x40260A52, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[234]", 0x40260A54, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[235]", 0x40260A56, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[236]", 0x40260A58, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[237]", 0x40260A5A, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[238]", 0x40260A5C, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
            Register("IRSPRC[239]", 0x40260A5E, 16, "Interrupt Router Shared Peripheral Routing Control", [
                Field("LOCK", 15, 1, "Lock", [
                    EnumVal("LOCK_0", "0", "Writes to IRSPRCn allowed"),
                    EnumVal("LOCK_1", "0x1", "Writes to IRSPRCn ignored"),
                ]),
                Field("M7_0", 0, 1, "Enable Cortex-M7_0 Interrupt Steering", [
                    EnumVal("M7_0_0", "0", "Routing disabled"),
                    EnumVal("M7_0_1", "0x1", "Routing enabled"),
                ]),
            ]),
        ])

class Module_MU_0__MUB(Peripheral):
    def __init__(self):
        super().__init__("MU_0__MUB", 0x4038C000, 0x290, [
            Register("VER", 0x4038C000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Set Number", [
                ]),
            ]),
            Register("PAR", 0x4038C004, 32, "Parameter Register", [
                Field("FLAG_WIDTH", 24, 8, "Flag Width", [
                ]),
                Field("GIR_NUM", 16, 8, "General-purpose Interrupt Request Number", [
                ]),
                Field("RR_NUM", 8, 8, "Receive Register Number", [
                ]),
                Field("TR_NUM", 0, 8, "Transmit Register Number", [
                ]),
            ]),
            Register("CR", 0x4038C008, 32, "Control Register", [
                Field("MURIE", 1, 1, "MUB Reset Interrupt Enable", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("MUR", 0, 1, "MU Reset", [
                    EnumVal("zero", "0", "Idle"),
                    EnumVal("one", "0x1", "Reset"),
                ]),
            ]),
            Register("SR", 0x4038C00C, 32, "Status Register", [
                Field("RFP", 6, 1, "MUB Receive Full Pending Flag", [
                    EnumVal("zero", "0", "Not pending. MUA is not writing to a TRn register."),
                    EnumVal("one", "0x1", "Pending. MUA is writing to a TRn register."),
                ]),
                Field("TEP", 5, 1, "MUB Transmit Empty Pending", [
                    EnumVal("zero", "0", "Not pending. MUA is reading no RRn register."),
                    EnumVal("one", "0x1", "Pending. MUA is reading an RRn register."),
                ]),
                Field("GIRP", 4, 1, "MUB General-purpose Interrupt Pending", [
                    EnumVal("zero", "0", "No request sent"),
                    EnumVal("one", "0x1", "Request sent"),
                ]),
                Field("FUP", 3, 1, "MUB Flags Update Pending", [
                    EnumVal("zero", "0", "No pending update flags (initiated by MUB)"),
                    EnumVal("one", "0x1", "Pending update flags (initiated by MUB)"),
                ]),
                Field("EP", 2, 1, "MUB Side Event Pending", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("MURIP", 1, 1, "MU Reset Interrupt Pending", [
                    EnumVal("zero", "0", "Processor A did not issue MU reset."),
                    EnumVal("one", "0x1", "Processor A issued MU reset."),
                ]),
                Field("MURS", 0, 1, "MUA and MUB Reset State", [
                    EnumVal("zero", "0", "MUA and MUB are out of reset state."),
                    EnumVal("one", "0x1", "MUA or MUB is in reset state."),
                ]),
            ]),
            Register("CCR0", 0x4038C010, 32, "Core Control Register 0", [
                Field("NMI", 0, 1, "MUA Non-maskable Interrupt Request", [
                    EnumVal("zero", "0", "Non-maskable interrupt issued"),
                    EnumVal("one", "0x1", "Non-maskable interrupt not issued"),
                ]),
            ]),
            Register("CSSR0", 0x4038C018, 32, "Core Sticky Status Register 0", [
                Field("NMIC", 0, 1, "Processor B Non-Maskable-Interrupt Clear", [
                    EnumVal("zero", "0", "Default"),
                    EnumVal("one", "0x1", "Clear MUA_CCR0[NMI]"),
                ]),
            ]),
            Register("FCR", 0x4038C100, 32, "Flag Control Register", [
                Field("F31", 31, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F30", 30, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F29", 29, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F28", 28, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F27", 27, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F26", 26, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F25", 25, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F24", 24, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F23", 23, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F22", 22, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F21", 21, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F20", 20, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F19", 19, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F18", 18, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F17", 17, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F16", 16, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F15", 15, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F14", 14, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F13", 13, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F12", 12, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F11", 11, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F10", 10, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F9", 9, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F8", 8, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F7", 7, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F6", 6, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F5", 5, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F4", 4, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F3", 3, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F2", 2, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F1", 1, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F0", 0, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
            ]),
            Register("FSR", 0x4038C104, 32, "Flag Status Register", [
                Field("F31", 31, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F30", 30, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F29", 29, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F28", 28, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F27", 27, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F26", 26, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F25", 25, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F24", 24, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F23", 23, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F22", 22, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F21", 21, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F20", 20, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F19", 19, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F18", 18, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F17", 17, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F16", 16, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F15", 15, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F14", 14, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F13", 13, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F12", 12, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F11", 11, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F10", 10, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F9", 9, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F8", 8, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F7", 7, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F6", 6, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F5", 5, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F4", 4, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F3", 3, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F2", 2, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F1", 1, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F0", 0, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
            ]),
            Register("GIER", 0x4038C110, 32, "General-purpose Interrupt Enable Register", [
                Field("GIE31", 31, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE30", 30, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE29", 29, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE28", 28, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE27", 27, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE26", 26, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE25", 25, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE24", 24, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE23", 23, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE22", 22, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE21", 21, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE20", 20, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE19", 19, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE18", 18, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE17", 17, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE16", 16, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE15", 15, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE14", 14, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE13", 13, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE12", 12, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE11", 11, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE10", 10, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE9", 9, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE8", 8, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE7", 7, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE6", 6, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE5", 5, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE4", 4, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE3", 3, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE2", 2, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE1", 1, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE0", 0, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
            ]),
            Register("GCR", 0x4038C114, 32, "General-purpose Control Register", [
                Field("GIR31", 31, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR30", 30, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR29", 29, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR28", 28, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR27", 27, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR26", 26, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR25", 25, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR24", 24, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR23", 23, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR22", 22, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR21", 21, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR20", 20, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR19", 19, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR18", 18, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR17", 17, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR16", 16, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR15", 15, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR14", 14, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR13", 13, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR12", 12, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR11", 11, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR10", 10, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR9", 9, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR8", 8, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR7", 7, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR6", 6, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR5", 5, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR4", 4, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR3", 3, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR2", 2, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR1", 1, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR0", 0, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
            ]),
            Register("GSR", 0x4038C118, 32, "General-purpose Status Register", [
                Field("GIP31", 31, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP30", 30, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP29", 29, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP28", 28, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP27", 27, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP26", 26, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP25", 25, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP24", 24, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP23", 23, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP22", 22, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP21", 21, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP20", 20, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP19", 19, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP18", 18, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP17", 17, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP16", 16, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP15", 15, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP14", 14, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP13", 13, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP12", 12, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP11", 11, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP10", 10, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP9", 9, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP8", 8, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP7", 7, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP6", 6, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP5", 5, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP4", 4, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP3", 3, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP2", 2, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP1", 1, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP0", 0, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
            ]),
            Register("TCR", 0x4038C120, 32, "Transmit Control Register", [
                Field("TIE3", 3, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("TIE2", 2, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("TIE1", 1, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("TIE0", 0, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
            ]),
            Register("TSR", 0x4038C124, 32, "Transmit Status Register", [
                Field("TE3", 3, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
                Field("TE2", 2, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
                Field("TE1", 1, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
                Field("TE0", 0, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
            ]),
            Register("RCR", 0x4038C128, 32, "Receive Control Register", [
                Field("RIE3", 3, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("RIE2", 2, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("RIE1", 1, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("RIE0", 0, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
            ]),
            Register("RSR", 0x4038C12C, 32, "Receive Status Register", [
                Field("RF3", 3, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
                Field("RF2", 2, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
                Field("RF1", 1, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
                Field("RF0", 0, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
            ]),
            Register("TR[0]", 0x4038C200, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("TR[1]", 0x4038C204, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("TR[2]", 0x4038C208, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("TR[3]", 0x4038C20C, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("RR[0]", 0x4038C280, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
            Register("RR[1]", 0x4038C284, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
            Register("RR[2]", 0x4038C288, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
            Register("RR[3]", 0x4038C28C, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
        ])

class Module_MU_1__MUB(Peripheral):
    def __init__(self):
        super().__init__("MU_1__MUB", 0x40390000, 0x290, [
            Register("VER", 0x40390000, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Set Number", [
                ]),
            ]),
            Register("PAR", 0x40390004, 32, "Parameter Register", [
                Field("FLAG_WIDTH", 24, 8, "Flag Width", [
                ]),
                Field("GIR_NUM", 16, 8, "General-purpose Interrupt Request Number", [
                ]),
                Field("RR_NUM", 8, 8, "Receive Register Number", [
                ]),
                Field("TR_NUM", 0, 8, "Transmit Register Number", [
                ]),
            ]),
            Register("CR", 0x40390008, 32, "Control Register", [
                Field("MURIE", 1, 1, "MUB Reset Interrupt Enable", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("MUR", 0, 1, "MU Reset", [
                    EnumVal("zero", "0", "Idle"),
                    EnumVal("one", "0x1", "Reset"),
                ]),
            ]),
            Register("SR", 0x4039000C, 32, "Status Register", [
                Field("RFP", 6, 1, "MUB Receive Full Pending Flag", [
                    EnumVal("zero", "0", "Not pending. MUA is not writing to a TRn register."),
                    EnumVal("one", "0x1", "Pending. MUA is writing to a TRn register."),
                ]),
                Field("TEP", 5, 1, "MUB Transmit Empty Pending", [
                    EnumVal("zero", "0", "Not pending. MUA is reading no RRn register."),
                    EnumVal("one", "0x1", "Pending. MUA is reading an RRn register."),
                ]),
                Field("GIRP", 4, 1, "MUB General-purpose Interrupt Pending", [
                    EnumVal("zero", "0", "No request sent"),
                    EnumVal("one", "0x1", "Request sent"),
                ]),
                Field("FUP", 3, 1, "MUB Flags Update Pending", [
                    EnumVal("zero", "0", "No pending update flags (initiated by MUB)"),
                    EnumVal("one", "0x1", "Pending update flags (initiated by MUB)"),
                ]),
                Field("EP", 2, 1, "MUB Side Event Pending", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("MURIP", 1, 1, "MU Reset Interrupt Pending", [
                    EnumVal("zero", "0", "Processor A did not issue MU reset."),
                    EnumVal("one", "0x1", "Processor A issued MU reset."),
                ]),
                Field("MURS", 0, 1, "MUA and MUB Reset State", [
                    EnumVal("zero", "0", "MUA and MUB are out of reset state."),
                    EnumVal("one", "0x1", "MUA or MUB is in reset state."),
                ]),
            ]),
            Register("CCR0", 0x40390010, 32, "Core Control Register 0", [
                Field("NMI", 0, 1, "MUA Non-maskable Interrupt Request", [
                    EnumVal("zero", "0", "Non-maskable interrupt issued"),
                    EnumVal("one", "0x1", "Non-maskable interrupt not issued"),
                ]),
            ]),
            Register("CSSR0", 0x40390018, 32, "Core Sticky Status Register 0", [
                Field("NMIC", 0, 1, "Processor B Non-Maskable-Interrupt Clear", [
                    EnumVal("zero", "0", "Default"),
                    EnumVal("one", "0x1", "Clear MUA_CCR0[NMI]"),
                ]),
            ]),
            Register("FCR", 0x40390100, 32, "Flag Control Register", [
                Field("F31", 31, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F30", 30, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F29", 29, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F28", 28, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F27", 27, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F26", 26, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F25", 25, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F24", 24, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F23", 23, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F22", 22, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F21", 21, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F20", 20, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F19", 19, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F18", 18, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F17", 17, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F16", 16, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F15", 15, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F14", 14, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F13", 13, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F12", 12, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F11", 11, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F10", 10, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F9", 9, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F8", 8, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F7", 7, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F6", 6, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F5", 5, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F4", 4, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F3", 3, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F2", 2, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F1", 1, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
                Field("F0", 0, 1, "MUB to MUA Flag n", [
                    EnumVal("zero", "0", "Clear MUA_FSR[Fn]."),
                    EnumVal("one", "0x1", "Set MUA_FSR[Fn]."),
                ]),
            ]),
            Register("FSR", 0x40390104, 32, "Flag Status Register", [
                Field("F31", 31, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F30", 30, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F29", 29, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F28", 28, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F27", 27, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F26", 26, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F25", 25, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F24", 24, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F23", 23, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F22", 22, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F21", 21, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F20", 20, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F19", 19, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F18", 18, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F17", 17, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F16", 16, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F15", 15, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F14", 14, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F13", 13, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F12", 12, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F11", 11, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F10", 10, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F9", 9, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F8", 8, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F7", 7, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F6", 6, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F5", 5, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F4", 4, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F3", 3, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F2", 2, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F1", 1, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
                Field("F0", 0, 1, "MUA to MUB-Side Flag n", [
                    EnumVal("zero", "0", "MUA_FCR[Fn] = 0."),
                    EnumVal("one", "0x1", "MUA_FCR[Fn] = 1."),
                ]),
            ]),
            Register("GIER", 0x40390110, 32, "General-purpose Interrupt Enable Register", [
                Field("GIE31", 31, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE30", 30, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE29", 29, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE28", 28, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE27", 27, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE26", 26, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE25", 25, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE24", 24, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE23", 23, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE22", 22, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE21", 21, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE20", 20, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE19", 19, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE18", 18, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE17", 17, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE16", 16, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE15", 15, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE14", 14, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE13", 13, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE12", 12, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE11", 11, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE10", 10, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE9", 9, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE8", 8, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE7", 7, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE6", 6, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE5", 5, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE4", 4, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE3", 3, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE2", 2, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE1", 1, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("GIE0", 0, 1, "MUB General-purpose Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
            ]),
            Register("GCR", 0x40390114, 32, "General-purpose Control Register", [
                Field("GIR31", 31, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR30", 30, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR29", 29, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR28", 28, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR27", 27, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR26", 26, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR25", 25, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR24", 24, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR23", 23, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR22", 22, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR21", 21, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR20", 20, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR19", 19, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR18", 18, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR17", 17, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR16", 16, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR15", 15, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR14", 14, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR13", 13, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR12", 12, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR11", 11, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR10", 10, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR9", 9, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR8", 8, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR7", 7, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR6", 6, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR5", 5, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR4", 4, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR3", 3, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR2", 2, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR1", 1, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
                Field("GIR0", 0, 1, "MUB General-purpose Interrupt Request n", [
                    EnumVal("zero", "0", "Not requested"),
                    EnumVal("one", "0x1", "Requested"),
                ]),
            ]),
            Register("GSR", 0x40390118, 32, "General-purpose Status Register", [
                Field("GIP31", 31, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP30", 30, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP29", 29, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP28", 28, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP27", 27, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP26", 26, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP25", 25, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP24", 24, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP23", 23, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP22", 22, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP21", 21, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP20", 20, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP19", 19, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP18", 18, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP17", 17, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP16", 16, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP15", 15, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP14", 14, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP13", 13, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP12", 12, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP11", 11, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP10", 10, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP9", 9, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP8", 8, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP7", 7, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP6", 6, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP5", 5, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP4", 4, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP3", 3, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP2", 2, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP1", 1, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
                Field("GIP0", 0, 1, "MUB General-purpose Interrupt Request Pending n", [
                    EnumVal("zero", "0", "Not pending"),
                    EnumVal("one", "0x1", "Pending"),
                ]),
            ]),
            Register("TCR", 0x40390120, 32, "Transmit Control Register", [
                Field("TIE3", 3, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("TIE2", 2, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("TIE1", 1, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("TIE0", 0, 1, "MUB Transmit Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
            ]),
            Register("TSR", 0x40390124, 32, "Transmit Status Register", [
                Field("TE3", 3, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
                Field("TE2", 2, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
                Field("TE1", 1, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
                Field("TE0", 0, 1, "MUB Transmit Register n Empty", [
                    EnumVal("zero", "0", "Not empty"),
                    EnumVal("one", "0x1", "Empty"),
                ]),
            ]),
            Register("RCR", 0x40390128, 32, "Receive Control Register", [
                Field("RIE3", 3, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("RIE2", 2, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("RIE1", 1, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
                Field("RIE0", 0, 1, "MUB Receive Interrupt Enable n", [
                    EnumVal("zero", "0", "Disable"),
                    EnumVal("one", "0x1", "Enable"),
                ]),
            ]),
            Register("RSR", 0x4039012C, 32, "Receive Status Register", [
                Field("RF3", 3, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
                Field("RF2", 2, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
                Field("RF1", 1, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
                Field("RF0", 0, 1, "MUB Receive Register n Full", [
                    EnumVal("zero", "0", "Not full"),
                    EnumVal("one", "0x1", "MUB_RRn register has received data from MUA TRn register and is ready for MUB to read it."),
                ]),
            ]),
            Register("TR[0]", 0x40390200, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("TR[1]", 0x40390204, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("TR[2]", 0x40390208, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("TR[3]", 0x4039020C, 32, "Transmit Register", [
                Field("TR_DATA", 0, 32, "MUB Transmit Data", [
                ]),
            ]),
            Register("RR[0]", 0x40390280, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
            Register("RR[1]", 0x40390284, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
            Register("RR[2]", 0x40390288, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
            Register("RR[3]", 0x4039028C, 32, "Receive Register", [
                Field("RR_DATA", 0, 32, "MUB Receive Data", [
                ]),
            ]),
        ])

class Module_PFLASH(Peripheral):
    def __init__(self):
        super().__init__("PFLASH", 0x40268000, 0x498, [
            Register("PFCR[0]", 0x40268000, 32, "Platform Flash Memory Configuration i", [
                Field("P0_DPFEN", 5, 1, "Port0 Data Prefetch Enable", [
                    EnumVal("bfv_P0_DPFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_DPFEN_1", "0x1", "Enable"),
                ]),
                Field("P0_CPFEN", 4, 1, "Port0 Code Prefetch Enable", [
                    EnumVal("bfv_P0_CPFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_CPFEN_1", "0x1", "Enable"),
                ]),
                Field("P0_DBFEN", 1, 1, "Port0 PFLASH Line Read Data Buffers Enable", [
                    EnumVal("bfv_P0_DBFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_DBFEN_1", "0x1", "Enable"),
                ]),
                Field("P0_CBFEN", 0, 1, "Port0 PFLASH Line Read Code Buffers Enable", [
                    EnumVal("bfv_P0_CBFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_CBFEN_1", "0x1", "Enable"),
                ]),
            ]),
            Register("PFCR[1]", 0x40268004, 32, "Platform Flash Memory Configuration i", [
                Field("P0_DPFEN", 5, 1, "Port0 Data Prefetch Enable", [
                    EnumVal("bfv_P0_DPFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_DPFEN_1", "0x1", "Enable"),
                ]),
                Field("P0_CPFEN", 4, 1, "Port0 Code Prefetch Enable", [
                    EnumVal("bfv_P0_CPFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_CPFEN_1", "0x1", "Enable"),
                ]),
                Field("P0_DBFEN", 1, 1, "Port0 PFLASH Line Read Data Buffers Enable", [
                    EnumVal("bfv_P0_DBFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_DBFEN_1", "0x1", "Enable"),
                ]),
                Field("P0_CBFEN", 0, 1, "Port0 PFLASH Line Read Code Buffers Enable", [
                    EnumVal("bfv_P0_CBFEN_0", "0", "Disable"),
                    EnumVal("bfv_P0_CBFEN_1", "0x1", "Enable"),
                ]),
            ]),
            Register("PFCR4", 0x40268010, 32, "Platform Flash Memory Configuration 4", [
                Field("DMEEE", 7, 1, "Disable Multi-Bit ECC Error Exception", [
                    EnumVal("bfv_DMEEE_0", "0", "Error response sent on system bus for multi-bit ECC error"),
                    EnumVal("bfv_DMEEE_1", "0x1", "Error response not sent on system bus for multi-bit ECC error"),
                ]),
                Field("BLK4_PS", 1, 3, "Block 4 Pipe Select", [
                    EnumVal("bfv_BLK4_PS_000", "0", "Block 4 access is always through pipe0"),
                    EnumVal("bfv_BLK4_PS_001", "0x1", "Block 4 access is always through pipe1"),
                    EnumVal("bfv_BLK4_PS_010", "0x2", "Block 4 access is always through pipe2"),
                    EnumVal("bfv_BLK4_PS_011", "0x3", "Block 4 access is always through pipe3"),
                    EnumVal("bfv_BLK4_PS_1xx", "#1xx", "Block 4 access can be through any of the command pipes, based on which command pipe is available for block 4 access"),
                ]),
            ]),
            Register("PFAPR", 0x40268014, 32, "Platform Flash Memory Access Protection", [
                Field("M0AP", 30, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M1AP", 28, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M2AP", 26, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M4AP", 22, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M5AP", 20, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M6AP", 18, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M7AP", 16, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M8AP", 14, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M9AP", 12, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M10AP", 10, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M11AP", 8, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M12AP", 6, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M13AP", 4, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M14AP", 2, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
                Field("M15AP", 0, 2, "Master n Access Protection", [
                    EnumVal("ACCESS_NO", "#x0", "This master cannot perform any read accesses"),
                    EnumVal("ACCESS_YES", "#x1", "This master can perform read accesses"),
                ]),
            ]),
            Register("PFCPGM_PEADR_L", 0x40268300, 32, "Platform Flash Memory Program Erase Address Logical", [
                Field("PEADR_L", 0, 32, "Program Erase Address Logical", [
                ]),
            ]),
            Register("PFCPGM_PEADR_P", 0x40268304, 32, "Platform Flash Memory Program Erase Address Physical", [
                Field("PEADR_P", 0, 32, "Program Erase Address Physical", [
                ]),
            ]),
            Register("PFCPGM_XPEADR_L", 0x40268308, 32, "Platform Flash Memory Express Program Erase Address Logical", [
                Field("XPEADR_L", 0, 32, "Express Program Erase Address Logical", [
                ]),
            ]),
            Register("PFCPGM_XPEADR_P", 0x4026830C, 32, "Platform Flash Memory Express Program Erase Address Physical", [
                Field("XPEADR_P", 0, 32, "Express Program Erase Address Physical", [
                ]),
            ]),
            Register("PFCBLK_SPELOCK[0]", 0x40268340, 32, "Block n Sector Program Erase Lock", [
                Field("SLCK", 0, 32, "Sector Lock", [
                ]),
            ]),
            Register("PFCBLK_SPELOCK[1]", 0x40268344, 32, "Block n Sector Program Erase Lock", [
                Field("SLCK", 0, 32, "Sector Lock", [
                ]),
            ]),
            Register("PFCBLK_SPELOCK[2]", 0x40268348, 32, "Block n Sector Program Erase Lock", [
                Field("SLCK", 0, 32, "Sector Lock", [
                ]),
            ]),
            Register("PFCBLKU_SPELOCK", 0x40268358, 32, "Block UTEST Sector Program Erase Lock", [
                Field("SLCK", 0, 1, "Sector Lock", [
                ]),
            ]),
            Register("PFCBLK_SSPELOCK[0]", 0x4026835C, 32, "Block n Super Sector Program Erase Lock", [
                Field("SSLCK", 0, 4, "Super Sector Lock", [
                ]),
            ]),
            Register("PFCBLK_SSPELOCK[1]", 0x40268360, 32, "Block n Super Sector Program Erase Lock", [
                Field("SSLCK", 0, 4, "Super Sector Lock", [
                ]),
            ]),
            Register("PFCBLK_SETSLOCK[0]", 0x40268380, 32, "Block n Set Sector Lock", [
                Field("SETSLCK", 0, 32, "If the vector bit value = 0, the corresponding lock bit is not owned by any master", [
                ]),
            ]),
            Register("PFCBLK_SETSLOCK[1]", 0x40268384, 32, "Block n Set Sector Lock", [
                Field("SETSLCK", 0, 32, "If the vector bit value = 0, the corresponding lock bit is not owned by any master", [
                ]),
            ]),
            Register("PFCBLK_SETSLOCK[2]", 0x40268388, 32, "Block n Set Sector Lock", [
                Field("SETSLCK", 0, 32, "If the vector bit value = 0, the corresponding lock bit is not owned by any master", [
                ]),
            ]),
            Register("PFCBLKU_SETSLOCK", 0x40268398, 32, "Block UTEST Set Sector Lock", [
                Field("SETSLCK", 0, 1, "Set Sector Lock", [
                ]),
            ]),
            Register("PFCBLK_SSETSLOCK[0]", 0x4026839C, 32, "Block n Set Super Sector Lock", [
                Field("SSETSLCK", 0, 4, "Set Super Sector Lock", [
                ]),
            ]),
            Register("PFCBLK_SSETSLOCK[1]", 0x402683A0, 32, "Block n Set Super Sector Lock", [
                Field("SSETSLCK", 0, 4, "Set Super Sector Lock", [
                ]),
            ]),
            Register("PFCBLKU_LOCKMASTER_S", 0x40268480, 32, "Block UTEST Lock Master Sector", [
                Field("LOCKMASTER_S", 0, 8, "Lock Master Sector", [
                ]),
            ]),
            Register("PFCBLK0_LOCKMASTER_SS0", 0x40268484, 32, "Block m Lock Master Super Sector n", [
                Field("LOCKMASTER_SS", 0, 32, "Block a Lock Master Super Sector b", [
                ]),
            ]),
            Register("PFCBLK1_LOCKMASTER_SS0", 0x40268494, 32, "Block m Lock Master Super Sector n", [
                Field("LOCKMASTER_SS", 0, 32, "Block a Lock Master Super Sector b", [
                ]),
            ]),
        ])

class Module_PIT_0(Peripheral):
    def __init__(self):
        super().__init__("PIT_0", 0x400B0000, 0x140, [
            Register("MCR", 0x400B0000, 32, "PIT Module Control", [
                Field("MDIS_RTI", 2, 1, "Module Disable for RTI", [
                    EnumVal("t00221", "0", "Enables"),
                    EnumVal("t01881", "0x1", "Disables"),
                ]),
                Field("MDIS", 1, 1, "Module Disable for PIT", [
                    EnumVal("t0301", "0", "Enables"),
                    EnumVal("t00000111", "0x1", "Disables"),
                ]),
                Field("FRZ", 0, 1, "Freeze", [
                    EnumVal("t000001", "0", "Timers run in Debug mode"),
                    EnumVal("t0000011", "0x1", "Timers stop in Debug mode"),
                ]),
            ]),
            Register("LTMR64H", 0x400B00E0, 32, "PIT Upper Lifetimer", [
                Field("LTH", 0, 32, "Lifetimer Value", [
                ]),
            ]),
            Register("LTMR64L", 0x400B00E4, 32, "PIT Lower Lifetimer", [
                Field("LTL", 0, 32, "Lifetimer Value", [
                ]),
            ]),
            Register("RTI_LDVAL_STAT", 0x400B00EC, 32, "RTI Timer Load Value Sync Status", [
                Field("RT_STAT", 0, 1, "Sync Status", [
                    EnumVal("NOTLOADED", "0", "Not loaded"),
                    EnumVal("LOADED", "0x1", "Loaded"),
                ]),
            ]),
            Register("RTI_LDVAL", 0x400B00F0, 32, "RTI Timer Load Value", [
                Field("TSV", 0, 32, "Timer Start Value", [
                ]),
            ]),
            Register("RTI_CVAL", 0x400B00F4, 32, "Current RTI Timer Value", [
                Field("TVL", 0, 32, "Current Timer Value", [
                ]),
            ]),
            Register("RTI_TCTRL", 0x400B00F8, 32, "RTI Timer Control", [
                Field("TIE", 1, 1, "Timer Interrupt Enable", [
                    EnumVal("t0661", "0", "Disables"),
                    EnumVal("t071", "0x1", "Enables"),
                ]),
                Field("TEN", 0, 1, "Timer Enable Bit", [
                    EnumVal("t0041", "0", "Disables"),
                    EnumVal("t061", "0x1", "Enables. The RTI timer begins counting down."),
                ]),
            ]),
            Register("RTI_TFLG", 0x400B00FC, 32, "RTI Timer Interrupt Flag", [
                Field("TIF", 0, 1, "Timer Interrupt Flag", [
                    EnumVal("COUNTING", "0", "Timer still counting down"),
                    EnumVal("EXPIRED", "0x1", "Timer has expired"),
                ]),
            ]),
        ])

class Module_PIT_1(Peripheral):
    def __init__(self):
        super().__init__("PIT_1", 0x400B4000, 0x140, [
            Register("MCR", 0x400B4000, 32, "PIT Module Control", [
                Field("MDIS", 1, 1, "Module Disable for PIT", [
                    EnumVal("t0301", "0", "Enables"),
                    EnumVal("t00000111", "0x1", "Disables"),
                ]),
                Field("FRZ", 0, 1, "Freeze", [
                    EnumVal("t000001", "0", "Timers run in Debug mode"),
                    EnumVal("t0000011", "0x1", "Timers stop in Debug mode"),
                ]),
            ]),
        ])

class Module_PLL(Peripheral):
    def __init__(self):
        super().__init__("PLL", 0x402E0000, 0x88, [
            Register("PLLCR", 0x402E0000, 32, "PLL Control", [
                Field("PLLPD", 31, 1, "PLL Power Down", [
                    EnumVal("bfv_pllcr_pllpd_0", "0", "Powered up"),
                    EnumVal("bfv_pllcr_pllpd_1", "0x1", "Powered down"),
                ]),
            ]),
            Register("PLLSR", 0x402E0004, 32, "PLL Status", [
                Field("LOL", 3, 1, "Loss-Of-Lock Flag", [
                    EnumVal("bfv_pllsr_lol_0", "0", "No loss of lock detected"),
                    EnumVal("bfv_pllsr_lol_1", "0x1", "Loss of lock detected"),
                ]),
                Field("LOCK", 2, 1, "Lock Status", [
                    EnumVal("bfv_pllsr_lock_0", "0", "Unlocked"),
                    EnumVal("bfv_pllsr_lock_1", "0x1", "Locked"),
                ]),
            ]),
            Register("PLLDV", 0x402E0008, 32, "PLL Divider", [
                Field("ODIV2", 25, 6, "Output frequency divider for raw PLL clock.", [
                ]),
                Field("RDIV", 12, 3, "Input Clock Predivider", [
                    EnumVal("bfv_plldv_rdiv_000", "0", "Divide by 1"),
                    EnumVal("bfv_plldv_rdiv_001", "0x1", "Divide by 1"),
                    EnumVal("bfv_plldv_rdiv_010", "0x2", "Divide by 2"),
                    EnumVal("bfv_plldv_rdiv_011", "0x3", "Divide by 3"),
                    EnumVal("bfv_plldv_rdiv_100", "0x4", "Divide by 4"),
                    EnumVal("bfv_plldv_rdiv_101", "0x5", "Divide by 5"),
                    EnumVal("bfv_plldv_rdiv_110", "0x6", "Divide by 6"),
                    EnumVal("bfv_plldv_rdiv_111", "0x7", "Divide by 7"),
                ]),
                Field("MFI", 0, 8, "Integer Portion Of Loop Divider", [
                ]),
            ]),
            Register("PLLFM", 0x402E000C, 32, "PLL Frequency Modulation", [
                Field("SSCGBYP", 30, 1, "Frequency Modulation (Spread Spectrum Clock Generation) Bypass", [
                    EnumVal("bfv_pllfm_sscgbyp_0", "0", "Not bypassed"),
                    EnumVal("bfv_pllfm_sscgbyp_1", "0x1", "Bypassed"),
                ]),
                Field("SPREADCTL", 29, 1, "Modulation Type Selection", [
                    EnumVal("bfv_pllfm_spreadctl_1", "0x1", "Spread below nominal frequency"),
                ]),
                Field("STEPSIZE", 16, 10, "Frequency Modulation Step Size", [
                ]),
                Field("STEPNO", 0, 11, "Number Of Steps Of Modulation Period Or Frequency Modulation", [
                ]),
            ]),
            Register("PLLFD", 0x402E0010, 32, "PLL Fractional Divider", [
                Field("SDMEN", 30, 1, "Fractional Mode Enable", [
                    EnumVal("bfv_pllfd_sdmen_0", "0", "Disabled"),
                    EnumVal("bfv_pllfd_sdmen_1", "0x1", "Enabled"),
                ]),
                Field("SDM2", 29, 1, "Fractional Mode Configuration", [
                ]),
                Field("SDM3", 28, 1, "Fractional Mode Configuration", [
                ]),
                Field("MFN", 0, 15, "Numerator Of Fractional Loop Division Factor", [
                ]),
            ]),
            Register("PLLCAL2", 0x402E0018, 32, "PLL Calibration Register 2", [
                Field("ULKCTL", 7, 2, "Unlock Control Accuracy", [
                    EnumVal("bfv_pllcal2_ulkctl_00", "0", "Unlock range = Expected value +/- 9 (recommended when PLLFM[SSCGBYP] = 1)"),
                    EnumVal("bfv_pllcal2_ulkctl_01", "0x1", "Unlock range = Expected value +/- 17 (recommended when PLLFM[SSCGBYP] = 0)"),
                    EnumVal("bfv_pllcal2_ulkctl_10", "0x2", "Unlock range = Expected value +/- 33"),
                    EnumVal("bfv_pllcal2_ulkctl_11", "0x3", "Unlock range = Expected value +/- 5"),
                ]),
            ]),
            Register("PLLCLKMUX", 0x402E0020, 32, "PLL Clock Multiplexer", [
                Field("REFCLKSEL", 0, 1, "Reference Clock Select", [
                    EnumVal("bfv_pllclkmux_refclksel_0", "0", "FIRC_CLK"),
                    EnumVal("bfv_pllclkmux_refclksel_1", "0x1", "FXOSC_CLK"),
                ]),
            ]),
            Register("PLLODIV_[0]", 0x402E0080, 32, "PLL Output Divider", [
                Field("DE", 31, 1, "Divider Enable", [
                    EnumVal("bfv_pllodiv_de_0", "0", "Disabled"),
                    EnumVal("bfv_pllodiv_de_1", "0x1", "Enabled"),
                ]),
                Field("DIV", 16, 4, "Division Value", [
                ]),
            ]),
            Register("PLLODIV_[1]", 0x402E0084, 32, "PLL Output Divider", [
                Field("DE", 31, 1, "Divider Enable", [
                    EnumVal("bfv_pllodiv_de_0", "0", "Disabled"),
                    EnumVal("bfv_pllodiv_de_1", "0x1", "Enabled"),
                ]),
                Field("DIV", 16, 4, "Division Value", [
                ]),
            ]),
        ])

class Module_PMC(Peripheral):
    def __init__(self):
        super().__init__("PMC", 0x402E8000, 0x10, [
            Register("LVSC", 0x402E8000, 32, "Low Voltage Status And Control", [
                Field("PORF", 31, 1, "POR Flag", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("GNG11OSCF", 25, 1, "Go/No Go Detect Flag On OSC Part Of V11 Power Domain", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("GNG25OSCF", 24, 1, "Go/No Go Detect Flag On OSC Part of V25 Power Domain", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("LVR11LPF", 23, 1, "LVR11LP Flag On V11 Power Domain", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("LVR11F", 22, 1, "LVR11 Flag On V11 Power Domain In FPM", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("LVR25LPF", 21, 1, "LVR25LP Flag On V25 Power Domain", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("LVR25F", 20, 1, "LVR25 Flag On V25 Power Domain In FPM", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("LVRALPF", 17, 1, "LVRALP Flag On VDD_HV_A Power Domain", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("LVRAF", 16, 1, "LVRA Flag On VDD_HV_A Power Domain In FPM", [
                    EnumVal("EVENT_NO", "0", "Event did not occur"),
                    EnumVal("EVENT_YES", "0x1", "Event occurred"),
                ]),
                Field("LVD5AS", 12, 1, "LVD5A Status On VDD_HV_A Power Domain In FPM", [
                    EnumVal("VOLTAGE_HIGH_TYP5", "0", "Above"),
                    EnumVal("VOLTAGE_LOW_TYP33", "0x1", "Below"),
                ]),
                Field("HVD11S", 11, 1, "HVD11 Status On V11 Power Domain In FPM", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage is below threshold or chip is in LPM"),
                    EnumVal("VOLTAGE_TOO_HIGH", "0x1", "Voltage is above threshold and chip is in FPM"),
                ]),
                Field("HVD25S", 10, 1, "HVD25 Status On V25 Power Domain In FPM", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage is below threshold or chip is in LPM"),
                    EnumVal("VOLTAGE_TOO_HIGH", "0x1", "Voltage is above threshold and chip is in FPM"),
                ]),
                Field("HVDAS", 8, 1, "HVDA Status On VDD_HV_A Power Domain In FPM", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage is below threshold or chip is in LPM"),
                    EnumVal("VOLTAGE_TOO_HIGH", "0x1", "Voltage is above threshold and chip is in FPM"),
                ]),
                Field("LVD5AF", 4, 1, "LVD5A Flag On VDD_HV_A Power Domain In FPM", [
                    EnumVal("CHANGE_NO", "0", "Did not change"),
                    EnumVal("CHANGE_YES", "0x1", "Changed"),
                ]),
                Field("HVD11F", 3, 1, "HVD11 Flag On V11 Power Domain In FPM", [
                    EnumVal("CHANGE_NO", "0", "Did not change"),
                    EnumVal("CHANGE_YES", "0x1", "Changed"),
                ]),
                Field("HVD25F", 2, 1, "HVD25 Flag On V25 Power Domain In FPM", [
                    EnumVal("CHANGE_NO", "0", "Did not change"),
                    EnumVal("CHANGE_YES", "0x1", "Changed"),
                ]),
                Field("HVDAF", 0, 1, "HVDA Flag On VDD_HV_A Power Domain In FPM", [
                    EnumVal("CHANGE_NO", "0", "Did not change"),
                    EnumVal("CHANGE_YES", "0x1", "Changed"),
                ]),
            ]),
            Register("CONFIG", 0x402E8004, 32, "PMC Configuration", [
                Field("LVDIE", 9, 1, "Low Voltage Detect Interrupt Enable", [
                    EnumVal("DISABLE", "0", "LVD hardware interrupt is disabled (use polling)"),
                    EnumVal("ENABLE", "0x1", "Request an LVD hardware interrupt when LVDA5F = 1"),
                ]),
                Field("HVDIE", 8, 1, "High Voltage Detect Interrupt Enable", [
                    EnumVal("DISABLE", "0", "HVD hardware interrupt is disabled (use polling)"),
                    EnumVal("ENABLE", "0x1", "Request an HVD hardware interrupt when HVDAF=1, HVDBF=1, HVD25F=1, or HVD11F=1"),
                ]),
                Field("LPM25EN", 3, 1, "V25 Power Domain Enable During LPM", [
                    EnumVal("DISABLE", "0", "Disabled"),
                    EnumVal("ENABLE", "0x1", "Enabled"),
                ]),
                Field("FASTREC", 2, 1, "Fast Recovery From LPM Enable", [
                    EnumVal("DISABLE", "0", "Normal"),
                    EnumVal("ENABLE", "0x1", "Fast"),
                ]),
            ]),
            Register("VERID", 0x402E800C, 32, "Version ID", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("LMFEAT", 0, 1, "Last-Mile Regulator Feature", [
                    EnumVal("DISABLE", "0", "Not available"),
                    EnumVal("ENABLE", "0x1", "Available"),
                ]),
            ]),
        ])

class Module_PMC_AE(Peripheral):
    def __init__(self):
        super().__init__("PMC_AE", 0x100, 0x10, [
            Register("CONFIG", 0x100, 32, "PMC Configuration Register", [
                Field("LINSUPEN", 6, 1, "LINPHY supply enable", [
                    EnumVal("DISABLE", "0", "LINPHY supply is high ohmic (off)"),
                    EnumVal("ENABLE", "0x1", "LINPHY supply is as selected by LINSUPSEL bit"),
                ]),
                Field("LVDVLSSEL", 5, 1, "LVD VLS select", [
                    EnumVal("SEL5V5", "0", "LVD threshold on VLS supply is 5.5V"),
                    EnumVal("SEL6V5", "0x1", "LVD threshold on VLS supply is 6.5V"),
                ]),
                Field("LINSUPSEL", 4, 1, "LINPHY supply select", [
                    EnumVal("SELVSUP", "0", "LINPHY supply connects to VSUP pin"),
                    EnumVal("SELHD", "0x1", "LINPHY supply connects to HD pin (of GDU)"),
                ]),
                Field("VDDCEN", 3, 1, "VDDC enable", [
                    EnumVal("DISABLE", "0", "VDDC is disabled"),
                    EnumVal("ENABLE", "0x1", "VDDC is enabled and regulated to 5V"),
                ]),
                Field("VPREEXT", 2, 1, "VPRE external regulator enable", [
                    EnumVal("DISABLE", "0", "PMC controlled (GCTL pin) external VPRE regulator is off"),
                    EnumVal("ENABLE", "0x1", "PMC controlled (GCTL pin) external VPRE regulator is on"),
                ]),
                Field("VPREINT", 1, 1, "VPRE internal regulator enable", [
                    EnumVal("DISABLE", "0", "PMC internal VPRE regulator is off"),
                    EnumVal("ENABLE", "0x1", "PMC internal VPRE regulator is on"),
                ]),
                Field("VDDSEL5V", 0, 1, "VDD voltage level select", [
                    EnumVal("SELECT3V3", "0", "VDD is regulated to 3.3V"),
                    EnumVal("SELECT5V", "0x1", "VDD is regulated to 5V"),
                ]),
            ]),
            Register("MONITOR", 0x104, 32, "PMC Monitor Register", [
                Field("LVDVLSIE", 28, 1, "LVD on VLS interrupt enable", [
                    EnumVal("DISABLE", "0", "Low voltage detect interrupts on VLS disabled"),
                    EnumVal("ENABLE", "0x1", "Low voltage detect interrupts on VLS enabled"),
                ]),
                Field("LVDCIE", 27, 1, "LVD on VDDC interrupt enable.", [
                    EnumVal("DISABLE", "0", "Low voltage detect interrupts on VDDC disabled"),
                    EnumVal("ENABLE", "0x1", "Low voltage detect interrupts on VDDC enabled"),
                ]),
                Field("HVDVDDIE", 26, 1, "HVD on VDD interrupt enable", [
                    EnumVal("DISABLE", "0", "High voltage detect interrupt disabled"),
                    EnumVal("ENABLE", "0x1", "High voltage detect interrupt enabled"),
                ]),
                Field("HVDINT15IE", 24, 1, "HVD on VDDINT or VDD15 interrupt enable", [
                    EnumVal("DISABLE", "0", "High voltage detect interrupt disabled"),
                    EnumVal("ENABLE", "0x1", "High voltage detect interrupt enabled"),
                ]),
                Field("LVDVLSS", 20, 1, "LVDVLS status", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage on VLS is above low-voltage detect threshold and VLS supply is enabled (GDUEN=1)"),
                    EnumVal("VOLTAGE_TOO_LOW", "0x1", "Voltage on VLS is below low-voltage detect threshold or VLS supply is disabled (GDUEN=0)"),
                ]),
                Field("LVDCS", 19, 1, "LVDC status", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage on VDDC is above low-voltage detect threshold and VDDC supply is enabled (VDDCEN=1)"),
                    EnumVal("VOLTAGE_TOO_LOW", "0x1", "Voltage on VDDC is below low-voltage detect threshold or VDDC supply is disabled (VDDCEN=0)"),
                ]),
                Field("HVDVDDS", 18, 1, "HVDVDD status", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage on VDD is below high-voltage detect threshold"),
                    EnumVal("VOLTAGE_TOO_HIGH", "0x1", "Voltage on VDD is above high-voltage detect threshold"),
                ]),
                Field("HVDINTS", 17, 1, "HVDINT status", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage on VDDINT is below high-voltage detect threshold"),
                    EnumVal("VOLTAGE_TOO_HIGH", "0x1", "Voltage on VDDINT is above high-voltage detect threshold"),
                ]),
                Field("HVD15S", 16, 1, "HVD15 status", [
                    EnumVal("VOLTAGE_GOOD", "0", "Voltage on VDD15 is below high-voltage detect threshold"),
                    EnumVal("VOLTAGE_TOO_HIGH", "0x1", "Voltage on VDD15 is above high-voltage detect threshold"),
                ]),
                Field("ILVRINTF", 14, 1, "Inverse LVRINT flag", [
                    EnumVal("EVENT", "0", "Low-voltage reset event has occurred"),
                    EnumVal("NO_EVENT", "0x1", "No low-voltage reset event has occurred"),
                ]),
                Field("ILVR15F", 13, 1, "Inverse LVR15 flag", [
                    EnumVal("EVENT", "0", "Low-voltage reset event has occurred"),
                    EnumVal("NO_EVENT", "0x1", "No low-voltage reset event has occurred"),
                ]),
                Field("IHVDVDDF", 10, 1, "Inverse HVDVDD flag", [
                    EnumVal("EVENT", "0", "High-voltage event has occurred"),
                    EnumVal("NO_EVENT", "0x1", "No high-voltage event has occurred"),
                ]),
                Field("IHVDINTF", 9, 1, "Inverse HVDINT flag", [
                    EnumVal("EVENT", "0", "High-voltage event has occurred"),
                    EnumVal("NO_EVENT", "0x1", "No high-voltage event has occurred"),
                ]),
                Field("IHVD15F", 8, 1, "Inverse HVD15 flag", [
                    EnumVal("EVENT", "0", "High-voltage event has occurred"),
                    EnumVal("NO_EVENT", "0x1", "No high-voltage event has occurred"),
                ]),
                Field("PORF", 7, 1, "POR flag", [
                    EnumVal("NO_EVENT", "0", "No power-on reset event has occurred"),
                    EnumVal("EVENT", "0x1", "Power-on reset event has occurred"),
                ]),
                Field("LVRINTF", 6, 1, "LVRINT flag", [
                    EnumVal("NO_EVENT", "0", "No low-voltage reset event has occurred"),
                    EnumVal("EVENT", "0x1", "Low-voltage reset event has occurred"),
                ]),
                Field("LVR15F", 5, 1, "LVR15 flag", [
                    EnumVal("NO_EVENT", "0", "No low-voltage reset event has occurred"),
                    EnumVal("EVENT", "0x1", "Low-voltage reset event has occurred"),
                ]),
                Field("LVDVLSF", 4, 1, "LVDVLS flag", [
                    EnumVal("NO_EVENT", "0", "No low voltage event detected on VLS supply or VLS supply is disabled (GDUEN=0)"),
                    EnumVal("EVENT", "0x1", "Low voltage event detected on VLS supply and VLS supply is enabled (GDUEN=1)"),
                ]),
                Field("LVDCF", 3, 1, "LVDC flag", [
                    EnumVal("NO_EVENT", "0", "No change on LVDCS"),
                    EnumVal("EVENT", "0x1", "LVDCS has changed"),
                ]),
                Field("HVDVDDF", 2, 1, "HVDVDD flag", [
                    EnumVal("NO_EVENT", "0", "No high voltage event detected on VDD supply"),
                    EnumVal("EVENT", "0x1", "High voltage event detected on VDD supply"),
                ]),
                Field("HVDINTF", 1, 1, "HVDINT flag", [
                    EnumVal("NO_EVENT", "0", "No high voltage event detected on VDDINT supply"),
                    EnumVal("EVENT", "0x1", "High voltage event detected on VDDINT supply"),
                ]),
                Field("HVD15F", 0, 1, "HVD15 flag", [
                    EnumVal("NO_EVENT", "0", "No high voltage event detected on VDD15 supply"),
                    EnumVal("EVENT", "0x1", "High voltage event detected on VDD15 supply"),
                ]),
            ]),
            Register("MONCHECK", 0x10C, 32, "Monitor Self Check Register", [
                Field("TRIGGER", 22, 2, "Monitor Self Check Trigger Bits", [
                    EnumVal("DISABLE", "0x1", "Changing the value from 10 to 01 will trigger a monitor self check. A system reset will be the consequence."),
                    EnumVal("ENABLE", "0x2", "Default after power-up. Self check idle and disabled"),
                ]),
                Field("DONEF", 16, 1, "Self Test Done Flag", [
                    EnumVal("NOEVENT", "0", "No self check even has occurred"),
                    EnumVal("EVENT", "0x1", "Self check has been executed"),
                ]),
            ]),
        ])

class Module_PRAMC_0(Peripheral):
    def __init__(self):
        super().__init__("PRAMC_0", 0x40264000, 0x4, [
            Register("PRCR1", 0x40264000, 32, "Platform RAM Configuration register 1", [
                Field("P0_BO_DIS", 6, 1, "Port p0 read burst optimization disable.", [
                    EnumVal("OPT_YES", "0", "64-bit WRP4 read bursts are optimized such that the controller returns a 2-1-1-1 response when PRCR1[FT_DIS ]=1"),
                    EnumVal("OPT_NO", "0x1", "64-bit WRP4 read bursts are not optimized; the controller returns a 2-2-2-2 response when PRCR1[FT_DIS ]=1"),
                ]),
                Field("FT_DIS", 0, 1, "Flow-through disabled", [
                    EnumVal("DIRECT", "0", "RAM read data is passed directly to the system bus, incurring no additional latency"),
                    EnumVal("REGISTER", "0x1", "RAM read data is registered prior to returning on the system bus, incurring one extra cycle of latency"),
                ]),
            ]),
        ])

class Module_RTC(Peripheral):
    def __init__(self):
        super().__init__("RTC", 0x40288000, 0x18, [
            Register("RTCSUPV", 0x40288000, 32, "RTC Supervisor control register", [
                Field("SUPV", 31, 1, "RTC Supervisor Bit", [
                    EnumVal("SUPV_0", "0", "All registers are accessible in both user as well as supervisor mode"),
                    EnumVal("SUPV_1", "0x1", "All other registers are accessible in the supervisor mode only"),
                ]),
            ]),
            Register("RTCC", 0x40288004, 32, "RTC Control register", [
                Field("CNTEN", 31, 1, "Counter Enable", [
                    EnumVal("CNTEN_0", "0", "Counter disabled"),
                    EnumVal("CNTEN_1", "0x1", "Counter enabled"),
                ]),
                Field("RTCIE", 30, 1, "RTC Interrupt Enable", [
                    EnumVal("RTCIE_0", "0", "RTC interrupts disabled"),
                    EnumVal("RTCIE_1", "0x1", "RTC interrupts enabled"),
                ]),
                Field("FRZEN", 29, 1, "Freeze Enable Bit", [
                    EnumVal("FRZEN_0", "0", "Counter does not freeze in debug mode"),
                    EnumVal("FRZEN_1", "0x1", "Counter freezes in debug mode"),
                ]),
                Field("ROVREN", 28, 1, "Counter Roll Over wakeup/Interrupt Enable", [
                    EnumVal("ROVREN_0", "0", "RTC rollover wakeup/interrupt disabled"),
                    EnumVal("ROVREN_1", "0x1", "RTC rollover wakeup/interrupt enabled"),
                ]),
                Field("APIEN", 15, 1, "Autonomous Periodic Interrupt Enable", [
                    EnumVal("APIEN_0", "0", "API disabled"),
                    EnumVal("APIEN_1", "0x1", "API enabled"),
                ]),
                Field("APIIE", 14, 1, "API Interrupt Enable", [
                    EnumVal("APIIE_0", "0", "API interrupts disabled"),
                    EnumVal("APIIE_1", "0x1", "API interrupts enabled"),
                ]),
                Field("CLKSEL", 12, 2, "Clock select", [
                    EnumVal("CLKSEL_0", "0", "Clock source 0"),
                    EnumVal("CLKSEL_1", "0x1", "Clock source 1"),
                    EnumVal("CLKSEL_2", "0x2", "Clock source 2"),
                    EnumVal("CLKSEL_3", "0x3", "Clock source 3"),
                ]),
                Field("DIV512EN", 11, 1, "Divide by 512 enable", [
                    EnumVal("DIV512EN_0", "0", "Divide by 512 is disabled"),
                    EnumVal("DIV512EN_1", "0x1", "Divide by 512 is enabled"),
                ]),
                Field("DIV32EN", 10, 1, "Divide by 32 enable", [
                    EnumVal("DIV32EN_0", "0", "Divide by 32 is disabled"),
                    EnumVal("DIV32EN_1", "0x1", "Divide by 32 is enabled"),
                ]),
                Field("TRIG_EN", 0, 1, "Trigger enable for Analog Comparator", [
                ]),
            ]),
            Register("RTCS", 0x40288008, 32, "RTC Status register", [
                Field("RTCF", 29, 1, "RTC Interrupt Flag", [
                    EnumVal("RTCF_0", "0", "RTC counter is not equal to RTCVAL"),
                    EnumVal("RTCF_1", "0x1", "RTC counter matches RTCVAL"),
                ]),
                Field("INV_RTC", 18, 1, "Invalid RTC write", [
                ]),
                Field("INV_API", 17, 1, "Invalid APIVAL write", [
                ]),
                Field("APIF", 13, 1, "API Interrupt Flag", [
                    EnumVal("APIF_0", "0", "Counter is not equal to API offset value"),
                    EnumVal("APIF_1", "0x1", "Counter matches the API offset value"),
                ]),
                Field("ROVRF", 10, 1, "Counter Roll Over Interrupt Flag", [
                    EnumVal("ROVRF_0", "0", "RTC has not rolled over"),
                    EnumVal("ROVRF_1", "0x1", "RTC has rolled over"),
                ]),
            ]),
            Register("RTCCNT", 0x4028800C, 32, "RTC Counter register", [
                Field("RTCCNT", 0, 32, "RTC Counter Value", [
                ]),
            ]),
            Register("APIVAL", 0x40288010, 32, "API Compare value register", [
                Field("APIVAL", 0, 32, "API Compare Value", [
                ]),
            ]),
            Register("RTCVAL", 0x40288014, 32, "RTC Compare value register", [
                Field("RTCVAL", 0, 32, "RTC Compare Value", [
                ]),
            ]),
        ])

class Module_SDA_AP(Peripheral):
    def __init__(self):
        super().__init__("SDA_AP", 0x40254700, 0x100, [
            Register("AUTHSTTS", 0x40254700, 32, "Authentication Status", [
                Field("APPDBGEN", 30, 1, "Application Debug Enabled or Disabled", [
                    EnumVal("APPDBGEN_0", "0", "Application debug disabled"),
                    EnumVal("APPDBGEN_1", "0x1", "Application debug enabled"),
                ]),
                Field("SWAPPDBG", 3, 1, "Software Application Debug", [
                    EnumVal("SWAPPDBG_0", "0", "Software application debug disabled"),
                    EnumVal("SWAPPDBG_1", "0x1", "Software application debug enabled"),
                ]),
                Field("UIDSTATUS", 2, 1, "User Identification Status", [
                    EnumVal("UIDSTATUS_0", "0", "UID is not ready and is invalid"),
                    EnumVal("UIDSTATUS_1", "0x1", "UID is ready and is valid"),
                ]),
                Field("CHALRDY", 0, 1, "Challenge Ready", [
                    EnumVal("CHALRDY_0", "0", "Challenge is not ready"),
                    EnumVal("CHALRDY_1", "0x1", "Challenge is ready"),
                ]),
            ]),
            Register("AUTHCTL", 0x40254704, 32, "Authentication Control", [
                Field("HSENEWDATACTL", 1, 1, "New Data Control", [
                    EnumVal("HSENEWDATACTL_0", "0", "Does not indicate that the debugger has consumed the data registers"),
                    EnumVal("HSENEWDATACTL_1", "0x1", "Indicates that the debugger has consumed the data registers"),
                ]),
                Field("HSEAUTHREQ", 0, 1, "Debug Enablement Authentication Request", [
                    EnumVal("HSEAUTHREQ_0", "0", "Does not start the authentication request"),
                    EnumVal("HSEAUTHREQ_1", "0x1", "Starts the authentication request"),
                ]),
            ]),
            Register("KEYCHAL[0]", 0x40254710, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYCHAL[1]", 0x40254714, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYCHAL[2]", 0x40254718, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYCHAL[3]", 0x4025471C, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYCHAL[4]", 0x40254720, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYCHAL[5]", 0x40254724, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYCHAL[6]", 0x40254728, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYCHAL[7]", 0x4025472C, 32, "Key Challenge", [
                Field("KEYCHAL", 0, 32, "Debug Enablement Key Challenge", [
                ]),
            ]),
            Register("KEYRESP[0]", 0x40254740, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("KEYRESP[1]", 0x40254744, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("KEYRESP[2]", 0x40254748, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("KEYRESP[3]", 0x4025474C, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("KEYRESP[4]", 0x40254750, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("KEYRESP[5]", 0x40254754, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("KEYRESP[6]", 0x40254758, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("KEYRESP[7]", 0x4025475C, 32, "Key Response", [
                Field("KEYRESP", 0, 32, "Debug Enablement Key Response", [
                ]),
            ]),
            Register("UID0", 0x40254770, 32, "User Identification 0", [
                Field("UID0", 0, 32, "User ID 0", [
                ]),
            ]),
            Register("UID1", 0x40254774, 32, "User Identification 1", [
                Field("UID1", 0, 32, "User ID 1", [
                ]),
            ]),
            Register("DBGENCTRL", 0x40254780, 32, "Debug Enable Control", [
                Field("CNIDEN", 29, 1, "Core Non-Invasive Debug Enable", [
                    EnumVal("CNIDEN_0", "0", "Disabled"),
                    EnumVal("CNIDEN_1", "0x1", "Enabled"),
                ]),
                Field("CDBGEN", 28, 1, "Core Debug Enable", [
                    EnumVal("CDBGEN_0", "0", "Disabled"),
                    EnumVal("CDBGEN_1", "0x1", "Enabled"),
                ]),
                Field("GSPNIDEN", 7, 1, "Global Secure Privileged Non-Invasive Debug Enable", [
                    EnumVal("GSPNIDEN_0", "0", "Disabled"),
                    EnumVal("GSPNIDEN_1", "0x1", "Enabled"),
                ]),
                Field("GSPIDEN", 6, 1, "Global Secure Privileged Debug Enable", [
                    EnumVal("GSPIDEN_0", "0", "Disabled"),
                    EnumVal("GSPIDEN_1", "0x1", "Enabled"),
                ]),
                Field("GNIDEN", 5, 1, "Global Non-Invasive Debug Enable", [
                    EnumVal("GNIDEN_0", "0", "Disabled"),
                    EnumVal("GNIDEN_1", "0x1", "Enabled"),
                ]),
                Field("GDBGEN", 4, 1, "Global Debug Enable", [
                    EnumVal("GDBGEN_0", "0", "Disabled"),
                    EnumVal("GDBGEN_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("SDAAPRSTCTRL", 0x40254790, 32, "Reset Control", [
                Field("RSTRELTLCM70", 25, 1, "Reset Release Cortex-M7_0", [
                    EnumVal("RSTRELTLCM70_0", "0", "Core is in reset"),
                    EnumVal("RSTRELTLCM70_1", "0x1", "Reset is released"),
                ]),
            ]),
            Register("SDAAPGENSTATUS0", 0x402547A0, 32, "SDA_AP Generic Status", [
                Field("SDAAPGENSTATUS", 0, 32, "DAP Generic Status", [
                ]),
            ]),
            Register("SDAAPGENCTRL0", 0x402547A4, 32, "Generic Control 0", [
                Field("JTAG_CR_EN", 0, 1, "JTAG CR Enable", [
                    EnumVal("JTAG_CR_EN_0", "0", "Function performed on the basis of SWJ-DP mode"),
                    EnumVal("JTAG_CR_EN_1", "0x1", "Function performed on the basis of JTAG mode"),
                ]),
            ]),
            Register("SDAAPGENSTATUS1", 0x402547B0, 32, "SDA_AP Generic Status", [
                Field("SDAAPGENSTATUS", 0, 32, "DAP Generic Status", [
                ]),
            ]),
            Register("SDAAPGENSTATUS2", 0x402547C0, 32, "SDA_AP Generic Status", [
                Field("SDAAPGENSTATUS", 0, 32, "DAP Generic Status", [
                ]),
            ]),
            Register("SDAAPGENSTATUS3", 0x402547D0, 32, "SDA_AP Generic Status", [
                Field("SDAAPGENSTATUS", 0, 32, "DAP Generic Status", [
                ]),
            ]),
            Register("SDAAPGENSTATUS4", 0x402547E0, 32, "SDA_AP Generic Status", [
                Field("SDAAPGENSTATUS", 0, 32, "DAP Generic Status", [
                ]),
            ]),
            Register("ID", 0x402547FC, 32, "Identity", [
                Field("ID", 0, 32, "Identity", [
                ]),
            ]),
        ])

class Module_SELFTEST_GPR(Peripheral):
    def __init__(self):
        super().__init__("SELFTEST_GPR", 0x403B0000, 0x18, [
            Register("CONFIG_REG", 0x403B0000, 32, "Configuration register", [
                Field("PCS_ENABLE_END", 8, 1, "PCS Enable End", [
                ]),
                Field("PCS_ENABLE_START", 7, 1, "PCS Enable Start", [
                ]),
                Field("PCS_STEP_SIZE", 4, 3, "PCS Step Size", [
                ]),
            ]),
            Register("LBIST_PROG_REG", 0x403B0014, 32, "LBIST Program", [
                Field("LBIST_SHIFT_COUNT", 0, 8, "LBIST Shift Count", [
                ]),
            ]),
        ])

class Module_SIRC(Peripheral):
    def __init__(self):
        super().__init__("SIRC", 0x402C8000, 0x10, [
            Register("SR", 0x402C8004, 32, "Status Register", [
                Field("STATUS", 0, 1, "Status bit for SIRC", [
                    EnumVal("bfvid_sr_status_0", "0", "SIRC is off or unstable"),
                    EnumVal("bfvid_sr_status_1", "0x1", "SIRC is on and stable"),
                ]),
            ]),
            Register("MISCELLANEOUS_IN", 0x402C800C, 32, "Miscellaneous input", [
                Field("STANDBY_ENABLE", 8, 1, "Standby Enable for SIRC", [
                    EnumVal("standby_enable_0", "0", "SIRC disables in Standby mode"),
                    EnumVal("standby_enable_1", "0x1", "SIRC enables in Standby mode"),
                ]),
            ]),
        ])

class Module_SIUL2(Peripheral):
    def __init__(self):
        super().__init__("SIUL2", 0x40290000, 0x17A8, [
            Register("MIDR1", 0x40290004, 32, "SIUL2 MCU ID 1", [
                Field("PRODUCT_LINE_LETTER", 26, 6, "Product Line Letter", [
                ]),
                Field("PART_NO", 16, 10, "MCU Part Number", [
                ]),
                Field("MAJOR_MASK", 4, 4, "Major Mask Revision", [
                ]),
                Field("MINOR_MASK", 0, 4, "Minor Mask Revision", [
                ]),
            ]),
            Register("MIDR2", 0x40290008, 32, "SIUL2 MCU ID 2", [
                Field("TECHNOLOGY", 29, 3, "Technology", [
                    EnumVal("TECHNOLOGY_1", "0x1", "C40EFS3"),
                ]),
                Field("TEMPERATURE", 26, 3, "Temperature", [
                    EnumVal("TEMPERATURE_2", "0x2", "V = 105C"),
                    EnumVal("TEMPERATURE_4", "0x4", "M = 125C"),
                ]),
                Field("PACKAGE", 20, 6, "Package", [
                    EnumVal("PACKAGE_35", "0x23", "64-LQFP"),
                ]),
                Field("FREQUENCY", 16, 4, "Frequency", [
                    EnumVal("FREQUENCY_3", "0x3", "120 MHz"),
                ]),
                Field("FLASH_CODE", 14, 2, "Flash Code", [
                    EnumVal("FLASH_CODE_2", "0x2", "Monolithic"),
                ]),
                Field("FLASH_DATA", 12, 2, "Flash Data", [
                    EnumVal("FLASH_DATA_2", "0x2", "Monolithic"),
                ]),
                Field("FLASH_SIZE_DATA", 8, 4, "Flash Size Data", [
                    EnumVal("FLASH_SIZE_DATA_0", "0", "64KB"),
                ]),
                Field("FLASH_SIZE_CODE", 0, 8, "Flash Size Code", [
                    EnumVal("FLASH_SIZE_CODE_2", "0x2", "512kB"),
                    EnumVal("FLASH_SIZE_CODE_4", "0x4", "1MB"),
                ]),
            ]),
            Register("DISR0", 0x40290010, 32, "SIUL2 DMA/Interrupt Status Flag 0", [
                Field("EIF31", 31, 1, "External Interrupt Status Flag 31", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER31 and IFEER31 has occurred."),
                ]),
                Field("EIF30", 30, 1, "External Interrupt Status Flag 30", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER30 and IFEER30 has occurred."),
                ]),
                Field("EIF29", 29, 1, "External Interrupt Status Flag 29", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER29 and IFEER29 has occurred."),
                ]),
                Field("EIF28", 28, 1, "External Interrupt Status Flag 28", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER28 and IFEER28 has occurred."),
                ]),
                Field("EIF27", 27, 1, "External Interrupt Status Flag 27", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER27 and IFEER27 has occurred."),
                ]),
                Field("EIF26", 26, 1, "External Interrupt Status Flag 26", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER26 and IFEER26 has occurred."),
                ]),
                Field("EIF25", 25, 1, "External Interrupt Status Flag 25", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER25 and IFEER25 has occurred."),
                ]),
                Field("EIF24", 24, 1, "External Interrupt Status Flag 24", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER24 and IFEER24 has occurred."),
                ]),
                Field("EIF23", 23, 1, "External Interrupt Status Flag 23", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER23 and IFEER23 has occurred."),
                ]),
                Field("EIF22", 22, 1, "External Interrupt Status Flag 22", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER22 and IFEER22 has occurred."),
                ]),
                Field("EIF21", 21, 1, "External Interrupt Status Flag 21", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER21 and IFEER21 has occurred."),
                ]),
                Field("EIF20", 20, 1, "External Interrupt Status Flag 20", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER20 and IFEER20 has occurred."),
                ]),
                Field("EIF19", 19, 1, "External Interrupt Status Flag 19", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER19 and IFEER19 has occurred."),
                ]),
                Field("EIF18", 18, 1, "External Interrupt Status Flag 18", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER18 and IFEER18 has occurred."),
                ]),
                Field("EIF17", 17, 1, "External Interrupt Status Flag 17", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER17 and IFEER17 has occurred."),
                ]),
                Field("EIF16", 16, 1, "External Interrupt Status Flag 16", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER16 and IFEER16 has occurred."),
                ]),
                Field("EIF15", 15, 1, "External Interrupt Status Flag 15", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER15 and IFEER15 has occurred."),
                ]),
                Field("EIF14", 14, 1, "External Interrupt Status Flag 14", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER14 and IFEER14 has occurred."),
                ]),
                Field("EIF13", 13, 1, "External Interrupt Status Flag 13", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER13 and IFEER13 has occurred."),
                ]),
                Field("EIF12", 12, 1, "External Interrupt Status Flag 12", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER12 and IFEER12 has occurred."),
                ]),
                Field("EIF11", 11, 1, "External Interrupt Status Flag 11", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER11 and IFEER11 has occurred."),
                ]),
                Field("EIF10", 10, 1, "External Interrupt Status Flag 10", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER10 and IFEER10 has occurred."),
                ]),
                Field("EIF9", 9, 1, "External Interrupt Status Flag 9", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER9 and IFEER9 has occurred."),
                ]),
                Field("EIF8", 8, 1, "External Interrupt Status Flag 8", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER8 and IFEER8 has occurred."),
                ]),
                Field("EIF7", 7, 1, "External Interrupt Status Flag 7", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER7 and IFEER7 has occurred."),
                ]),
                Field("EIF6", 6, 1, "External Interrupt Status Flag 6", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER6 and IFEER6 has occurred."),
                ]),
                Field("EIF5", 5, 1, "External Interrupt Status Flag 5", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER5 and IFEER5 has occurred."),
                ]),
                Field("EIF4", 4, 1, "External Interrupt Status Flag 4", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER4 and IFEER4 has occurred."),
                ]),
                Field("EIF3", 3, 1, "External Interrupt Status Flag 3", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER3 and IFEER3 has occurred."),
                ]),
                Field("EIF2", 2, 1, "External Interrupt Status Flag 2", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER2 and IFEER2 has occurred."),
                ]),
                Field("EIF1", 1, 1, "External Interrupt Status Flag 1", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER1 and IFEER1 has occurred."),
                ]),
                Field("EIF0", 0, 1, "External Interrupt Status Flag 0", [
                    EnumVal("EIF_NO", "0", "No interrupt event has occurred on the pad."),
                    EnumVal("EIF_YES", "0x1", "An interrupt event as defined by IREER0 and IFEER0 has occurred."),
                ]),
            ]),
            Register("DIRER0", 0x40290018, 32, "SIUL2 DMA/Interrupt Request Enable 0", [
                Field("EIRE31", 31, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE30", 30, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE29", 29, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE28", 28, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE27", 27, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE26", 26, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE25", 25, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE24", 24, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE23", 23, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE22", 22, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE21", 21, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE20", 20, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE19", 19, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE18", 18, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE17", 17, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE16", 16, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE15", 15, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE14", 14, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE13", 13, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE12", 12, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE11", 11, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE10", 10, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE9", 9, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE8", 8, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE7", 7, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE6", 6, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE5", 5, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE4", 4, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE3", 3, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE2", 2, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE1", 1, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("EIRE0", 0, 1, "External Interrupt Request Enable", [
                    EnumVal("EIRE_DISABLED", "0", "Disabled"),
                    EnumVal("EIRE_ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("DIRSR0", 0x40290020, 32, "SIUL2 DMA/Interrupt Request Select 0", [
                Field("DIRSR31", 31, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR30", 30, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR29", 29, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR28", 28, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR27", 27, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR26", 26, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR25", 25, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR24", 24, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR23", 23, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR22", 22, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR21", 21, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR20", 20, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR19", 19, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR18", 18, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR17", 17, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR16", 16, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                ]),
                Field("DIRSR15", 15, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR14", 14, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR13", 13, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR12", 12, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR11", 11, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR10", 10, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR9", 9, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR8", 8, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR7", 7, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR6", 6, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR5", 5, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR4", 4, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR3", 3, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR2", 2, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR1", 1, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
                Field("DIRSR0", 0, 1, "DMA/Interrupt Request Select Register", [
                    EnumVal("DISR_INT", "0", "Interrupt request"),
                    EnumVal("DISR_DMA", "0x1", "DMA request"),
                ]),
            ]),
            Register("IREER0", 0x40290028, 32, "SIUL2 Interrupt Rising-Edge Event Enable 0", [
                Field("IREE31", 31, 1, "Enables rising-edge events to set DISR0[EIF31].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE30", 30, 1, "Enables rising-edge events to set DISR0[EIF30].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE29", 29, 1, "Enables rising-edge events to set DISR0[EIF29].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE28", 28, 1, "Enables rising-edge events to set DISR0[EIF28].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE27", 27, 1, "Enables rising-edge events to set DISR0[EIF27].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE26", 26, 1, "Enables rising-edge events to set DISR0[EIF26].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE25", 25, 1, "Enables rising-edge events to set DISR0[EIF25].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE24", 24, 1, "Enables rising-edge events to set DISR0[EIF24].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE23", 23, 1, "Enables rising-edge events to set DISR0[EIF23].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE22", 22, 1, "Enables rising-edge events to set DISR0[EIF22].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE21", 21, 1, "Enables rising-edge events to set DISR0[EIF21].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE20", 20, 1, "Enables rising-edge events to set DISR0[EIF20].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE19", 19, 1, "Enables rising-edge events to set DISR0[EIF19].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE18", 18, 1, "Enables rising-edge events to set DISR0[EIF18].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE17", 17, 1, "Enables rising-edge events to set DISR0[EIF17].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE16", 16, 1, "Enables rising-edge events to set DISR0[EIF16].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE15", 15, 1, "Enables rising-edge events to set DISR0[EIF15].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE14", 14, 1, "Enables rising-edge events to set DISR0[EIF14].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE13", 13, 1, "Enables rising-edge events to set DISR0[EIF13].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE12", 12, 1, "Enables rising-edge events to set DISR0[EIF12].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE11", 11, 1, "Enables rising-edge events to set DISR0[EIF11].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE10", 10, 1, "Enables rising-edge events to set DISR0[EIF10].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE9", 9, 1, "Enables rising-edge events to set DISR0[EIF9].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE8", 8, 1, "Enables rising-edge events to set DISR0[EIF8].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE7", 7, 1, "Enables rising-edge events to set DISR0[EIF7].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE6", 6, 1, "Enables rising-edge events to set DISR0[EIF6].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE5", 5, 1, "Enables rising-edge events to set DISR0[EIF5].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE4", 4, 1, "Enables rising-edge events to set DISR0[EIF4].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE3", 3, 1, "Enables rising-edge events to set DISR0[EIF3].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE2", 2, 1, "Enables rising-edge events to set DISR0[EIF2].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE1", 1, 1, "Enables rising-edge events to set DISR0[EIF1].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IREE0", 0, 1, "Enables rising-edge events to set DISR0[EIF0].", [
                    EnumVal("IREE_DISABLED", "0", "Disabled"),
                    EnumVal("IREE_ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("IFEER0", 0x40290030, 32, "SIUL2 Interrupt Falling-Edge Event Enable 0", [
                Field("IFEE31", 31, 1, "Enables falling-edge events to set DISR0[EIF31].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE30", 30, 1, "Enables falling-edge events to set DISR0[EIF30].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE29", 29, 1, "Enables falling-edge events to set DISR0[EIF29].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE28", 28, 1, "Enables falling-edge events to set DISR0[EIF28].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE27", 27, 1, "Enables falling-edge events to set DISR0[EIF27].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE26", 26, 1, "Enables falling-edge events to set DISR0[EIF26].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE25", 25, 1, "Enables falling-edge events to set DISR0[EIF25].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE24", 24, 1, "Enables falling-edge events to set DISR0[EIF24].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE23", 23, 1, "Enables falling-edge events to set DISR0[EIF23].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE22", 22, 1, "Enables falling-edge events to set DISR0[EIF22].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE21", 21, 1, "Enables falling-edge events to set DISR0[EIF21].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE20", 20, 1, "Enables falling-edge events to set DISR0[EIF20].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE19", 19, 1, "Enables falling-edge events to set DISR0[EIF19].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE18", 18, 1, "Enables falling-edge events to set DISR0[EIF18].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE17", 17, 1, "Enables falling-edge events to set DISR0[EIF17].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE16", 16, 1, "Enables falling-edge events to set DISR0[EIF16].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE15", 15, 1, "Enables falling-edge events to set DISR0[EIF15].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE14", 14, 1, "Enables falling-edge events to set DISR0[EIF14].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE13", 13, 1, "Enables falling-edge events to set DISR0[EIF13].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE12", 12, 1, "Enables falling-edge events to set DISR0[EIF12].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE11", 11, 1, "Enables falling-edge events to set DISR0[EIF11].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE10", 10, 1, "Enables falling-edge events to set DISR0[EIF10].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE9", 9, 1, "Enables falling-edge events to set DISR0[EIF9].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE8", 8, 1, "Enables falling-edge events to set DISR0[EIF8].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE7", 7, 1, "Enables falling-edge events to set DISR0[EIF7].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE6", 6, 1, "Enables falling-edge events to set DISR0[EIF6].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE5", 5, 1, "Enables falling-edge events to set DISR0[EIF5].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE4", 4, 1, "Enables falling-edge events to set DISR0[EIF4].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE3", 3, 1, "Enables falling-edge events to set DISR0[EIF3].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE2", 2, 1, "Enables falling-edge events to set DISR0[EIF2].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE1", 1, 1, "Enables falling-edge events to set DISR0[EIF1].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFEE0", 0, 1, "Enables falling-edge events to set DISR0[EIF0].", [
                    EnumVal("IFEE_DISABLED", "0", "Disabled"),
                    EnumVal("IFEE_ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("IFER0", 0x40290038, 32, "SIUL2 Interrupt Filter Enable 0", [
                Field("IFE31", 31, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE30", 30, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE29", 29, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE28", 28, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE27", 27, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE26", 26, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE25", 25, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE24", 24, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE23", 23, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE22", 22, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE21", 21, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE20", 20, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE19", 19, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE18", 18, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE17", 17, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE16", 16, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE15", 15, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE14", 14, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE13", 13, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE12", 12, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE11", 11, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE10", 10, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE9", 9, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE8", 8, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE7", 7, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE6", 6, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE5", 5, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE4", 4, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE3", 3, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE2", 2, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE1", 1, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
                Field("IFE0", 0, 1, "Enables digital glitch filter on the interrupt pad input.", [
                    EnumVal("IFE_DISABLED", "0", "Disabled"),
                    EnumVal("IFE_ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("IFMCR0", 0x40290040, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR1", 0x40290044, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR2", 0x40290048, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR3", 0x4029004C, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR4", 0x40290050, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR5", 0x40290054, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR6", 0x40290058, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR7", 0x4029005C, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR8", 0x40290060, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR9", 0x40290064, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR10", 0x40290068, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR11", 0x4029006C, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR12", 0x40290070, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR13", 0x40290074, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR14", 0x40290078, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR15", 0x4029007C, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR16", 0x40290080, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR17", 0x40290084, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR18", 0x40290088, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR19", 0x4029008C, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR20", 0x40290090, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR21", 0x40290094, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR22", 0x40290098, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR23", 0x4029009C, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR24", 0x402900A0, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR25", 0x402900A4, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR26", 0x402900A8, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR27", 0x402900AC, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR28", 0x402900B0, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR29", 0x402900B4, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR30", 0x402900B8, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFMCR31", 0x402900BC, 32, "SIUL2 Interrupt Filter Maximum Counter", [
                Field("MAXCNT", 0, 4, "Maximum Interrupt Filter Counter setting", [
                ]),
            ]),
            Register("IFCPR", 0x402900C0, 32, "SIUL2 Interrupt Filter Clock Prescaler", [
                Field("IFCP", 0, 4, "Interrupt Filter Clock Prescaler setting", [
                ]),
            ]),
            Register("MUX0_EMIOS_EN1", 0x40290100, 32, "SIUL2 User Defined", [
                Field("EMIOSFLG15_EN", 31, 1, "EMIOS0 Output Flag 15 Monitor Enable", [
                ]),
                Field("EMIOSFLG14_EN", 30, 1, "EMIOS0 Output Flag 14 Monitor Enable", [
                ]),
                Field("EMIOSFLG13_EN", 29, 1, "EMIOS0 Output Flag 13 Monitor Enable", [
                ]),
                Field("EMIOSFLG12_EN", 28, 1, "EMIOS0 Output Flag 12 Monitor Enable", [
                ]),
                Field("EMIOSFLG11_EN", 27, 1, "EMIOS0 Output Flag 11 Monitor Enable", [
                ]),
                Field("EMIOSFLG10_EN", 26, 1, "EMIOS0 Output Flag 10 Monitor Enable", [
                ]),
                Field("EMIOSFLG9_EN", 25, 1, "EMIOS0 Output Flag 9 Monitor Enable", [
                ]),
                Field("EMIOSFLG8_EN", 24, 1, "EMIOS0 Output Flag 8 Monitor Enable", [
                ]),
                Field("EMIOSFLG7_EN", 23, 1, "EMIOS0 Output Flag 7 Monitor Enable", [
                ]),
                Field("EMIOSFLG6_EN", 22, 1, "EMIOS0 Output Flag 6 Monitor Enable", [
                ]),
                Field("EMIOSFLG5_EN", 21, 1, "EMIOS0 Output Flag 5 Monitor Enable", [
                ]),
                Field("EMIOSFLG4_EN", 20, 1, "EMIOS0 Output Flag 4 Monitor Enable", [
                ]),
                Field("EMIOSFLG3_EN", 19, 1, "EMIOS0 Output Flag 3 Monitor Enable", [
                ]),
                Field("EMIOSFLG2_EN", 18, 1, "EMIOS0 Output Flag 2 Monitor Enable", [
                ]),
                Field("EMIOSFLG1_EN", 17, 1, "EMIOS0 Output Flag 1 Monitor Enable", [
                ]),
                Field("EMIOSFLG0_EN", 16, 1, "EMIOS0 Output Flag 0 Monitor Enable", [
                ]),
                Field("EMIOSFLG23_EN", 7, 1, "EMIOS0 Output Flag 23 Monitor Enable", [
                ]),
                Field("EMIOSFLG22_EN", 6, 1, "EMIOS0 Output Flag 22 Monitor Enable", [
                ]),
                Field("EMIOSFLG21_EN", 5, 1, "EMIOS0 Output Flag 21 Monitor Enable", [
                ]),
                Field("EMIOSFLG20_EN", 4, 1, "EMIOS0 Output Flag 20 Monitor Enable", [
                ]),
                Field("EMIOSFLG19_EN", 3, 1, "EMIOS0 Output Flag 19 Monitor Enable", [
                ]),
                Field("EMIOSFLG18_EN", 2, 1, "EMIOS0 Output Flag 18 Monitor Enable", [
                ]),
                Field("EMIOSFLG17_EN", 1, 1, "EMIOS0 Output Flag 17 Monitor Enable", [
                ]),
                Field("EMIOSFLG16_EN", 0, 1, "EMIOS0 Output Flag 16 Monitor Enable", [
                ]),
            ]),
            Register("MUX0_MISC_EN", 0x40290104, 32, "SIUL2 User Defined", [
                Field("BCTUADC1INT_EN", 25, 1, "BCTU ADC1DR Interrupt Request Monitor Enable", [
                ]),
                Field("BCTUADC0INT_EN", 24, 1, "BCTU ADC0DR Interrupt Request Monitor Enable", [
                ]),
                Field("BCTULISTINT_EN", 23, 1, "BCTU Conversion List Interrupt Request Enable", [
                ]),
                Field("BCTUFIFO1INT_EN", 22, 1, "BCTU FIFO0 Interrupt Request Monitor Enable", [
                ]),
                Field("BCTUFIFO0INT_EN", 21, 1, "BCTU FIFO0 Interrupt Request Monitor Enable", [
                ]),
                Field("BCTUADC1DMA_EN", 19, 1, "BCTU ADC1DR DMA Request Monitor Enable", [
                ]),
                Field("BCTUADC0DMA_EN", 18, 1, "BCTU ADC0DR DMA Request Monitor Enable", [
                ]),
                Field("BCTUFIFO1DMA_EN", 17, 1, "BCTU FIFO1 DMA Request Monitor Enable", [
                ]),
                Field("BCTUFIFO0DMA_EN", 16, 1, "BCTU FIFO0 DMA Request Monitor Enable", [
                ]),
                Field("LPUART3TRG_EN", 11, 1, "LPUART3 Output Trigger Monitor Enable", [
                ]),
                Field("LPUART2TRG_EN", 10, 1, "LPUART2 Output Trigger Monitor Enable", [
                ]),
                Field("LPUART1TRG_EN", 9, 1, "LPUART1 Output Trigger Monitor Enable", [
                ]),
                Field("LPUART0TRG_EN", 8, 1, "LPUART0 Output Trigger Monitor Enable", [
                ]),
                Field("ADC1EOC_EN", 1, 1, "ADC1 End of Conversion Trigger Monitor", [
                ]),
                Field("ADC0EOC_EN", 0, 1, "ADC0 End of Conversion Trigger Monitor", [
                ]),
            ]),
            Register("MUX1_EMIOS_EN", 0x40290108, 32, "SIUL2 User Defined", [
                Field("EMIOSFLG15_EN", 31, 1, "EMIOS0 Output Flag 15 Monitor Enable", [
                ]),
                Field("EMIOSFLG14_EN", 30, 1, "EMIOS0 Output Flag 14 Monitor Enable", [
                ]),
                Field("EMIOSFLG13_EN", 29, 1, "EMIOS0 Output Flag 13 Monitor Enable", [
                ]),
                Field("EMIOSFLG12_EN", 28, 1, "EMIOS0 Output Flag 12 Monitor Enable", [
                ]),
                Field("EMIOSFLG11_EN", 27, 1, "EMIOS0 Output Flag 11 Monitor Enable", [
                ]),
                Field("EMIOSFLG10_EN", 26, 1, "EMIOS0 Output Flag 10 Monitor Enable", [
                ]),
                Field("EMIOSFLG9_EN", 25, 1, "EMIOS0 Output Flag 9 Monitor Enable", [
                ]),
                Field("EMIOSFLG8_EN", 24, 1, "EMIOS0 Output Flag 8 Monitor Enable", [
                ]),
                Field("EMIOSFLG7_EN", 23, 1, "EMIOS0 Output Flag 7 Monitor Enable", [
                ]),
                Field("EMIOSFLG6_EN", 22, 1, "EMIOS0 Output Flag 6 Monitor Enable", [
                ]),
                Field("EMIOSFLG5_EN", 21, 1, "EMIOS0 Output Flag 5 Monitor Enable", [
                ]),
                Field("EMIOSFLG4_EN", 20, 1, "EMIOS0 Output Flag 4 Monitor Enable", [
                ]),
                Field("EMIOSFLG3_EN", 19, 1, "EMIOS0 Output Flag 3 Monitor Enable", [
                ]),
                Field("EMIOSFLG2_EN", 18, 1, "EMIOS0 Output Flag 2 Monitor Enable", [
                ]),
                Field("EMIOSFLG1_EN", 17, 1, "EMIOS0 Output Flag 1 Monitor Enable", [
                ]),
                Field("EMIOSFLG0_EN", 16, 1, "EMIOS0 Output Flag 0 Monitor Enable", [
                ]),
                Field("EMIOSFLG23_EN", 7, 1, "EMIOS0 Output Flag 23 Monitor Enable", [
                ]),
                Field("EMIOSFLG22_EN", 6, 1, "EMIOS0 Output Flag 22 Monitor Enable", [
                ]),
                Field("EMIOSFLG21_EN", 5, 1, "EMIOS0 Output Flag 21 Monitor Enable", [
                ]),
                Field("EMIOSFLG20_EN", 4, 1, "EMIOS0 Output Flag 20 Monitor Enable", [
                ]),
                Field("EMIOSFLG19_EN", 3, 1, "EMIOS0 Output Flag 19 Monitor Enable", [
                ]),
                Field("EMIOSFLG18_EN", 2, 1, "EMIOS0 Output Flag 18 Monitor Enable", [
                ]),
                Field("EMIOSFLG17_EN", 1, 1, "EMIOS0 Output Flag 17 Monitor Enable", [
                ]),
                Field("EMIOSFLG16_EN", 0, 1, "EMIOS0 Output Flag 16 Monitor Enable", [
                ]),
            ]),
            Register("MUX1_MISC_EN", 0x4029010C, 32, "SIUL2 User Defined", [
                Field("BCTUADC1INT_EN", 25, 1, "BCTU ADC1DR Interrupt Request Monitor Enable", [
                ]),
                Field("BCTUADC0INT_EN", 24, 1, "BCTU ADC0DR Interrupt Request Monitor Enable", [
                ]),
                Field("BCTULISTINT_EN", 23, 1, "BCTU Conversion List Interrupt Request Enable", [
                ]),
                Field("BCTUFIFO1INT_EN", 22, 1, "BCTU FIFO0 Interrupt Request Monitor Enable", [
                ]),
                Field("BCTUFIFO0INT_EN", 21, 1, "BCTU FIFO0 Interrupt Request Monitor Enable", [
                ]),
                Field("BCTUADC1DMA_EN", 19, 1, "BCTU ADC1DR DMA Request Monitor Enable", [
                ]),
                Field("BCTUADC0DMA_EN", 18, 1, "BCTU ADC0DR DMA Request Monitor Enable", [
                ]),
                Field("BCTUFIFO1DMA_EN", 17, 1, "BCTU FIFO1 DMA Request Monitor Enable", [
                ]),
                Field("BCTUFIFO0DMA_EN", 16, 1, "BCTU FIFO0 DMA Request Monitor Enable", [
                ]),
                Field("LPUART3TRG_EN", 11, 1, "LPUART3 Output Trigger Monitor Enable", [
                ]),
                Field("LPUART2TRG_EN", 10, 1, "LPUART2 Output Trigger Monitor Enable", [
                ]),
                Field("LPUART1TRG_EN", 9, 1, "LPUART1 Output Trigger Monitor Enable", [
                ]),
                Field("LPUART0TRG_EN", 8, 1, "LPUART0 Output Trigger Monitor Enable", [
                ]),
                Field("ADC1EOC_EN", 1, 1, "ADC1 End of Conversion Trigger Monitor", [
                ]),
                Field("ADC0EOC_EN", 0, 1, "ADC0 End of Conversion Trigger Monitor", [
                ]),
            ]),
            Register("MIDR3", 0x40290200, 32, "SIUL2 MCU ID 3", [
                Field("PROD_FAM_LET", 26, 6, "Product Family Letter", [
                    EnumVal("PROD_FAM_LET_19", "0x13", "S"),
                ]),
                Field("PROD_FAM_NO", 16, 10, "Product Family Number", [
                    EnumVal("PROD_FAM_NO_32", "0x20", "32"),
                ]),
                Field("PART_NO_SUF", 10, 6, "Part Number Suffix", [
                    EnumVal("PART_NO_SUF_0", "0", "None"),
                ]),
                Field("SYS_RAM_SIZE", 0, 6, "System RAM Size", [
                    EnumVal("SYS_RAM_SIZE_2", "0x2", "128kB"),
                    EnumVal("SYS_RAM_SIZE_3", "0x3", "192kB"),
                ]),
            ]),
            Register("MIDR4", 0x40290204, 32, "SIUL2 MCU ID 4", [
                Field("CORE_PLAT_FET", 0, 3, "Core Platform Options Feature", [
                    EnumVal("CORE_PLAT_FET_0", "0", "Single core"),
                ]),
            ]),
            Register("MSCR0", 0x40290240, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR1", 0x40290244, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR2", 0x40290248, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR3", 0x4029024C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR4", 0x40290250, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR5", 0x40290254, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR6", 0x40290258, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR7", 0x4029025C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR8", 0x40290260, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR9", 0x40290264, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR10", 0x40290268, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR11", 0x4029026C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR12", 0x40290270, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR13", 0x40290274, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR14", 0x40290278, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR15", 0x4029027C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR16", 0x40290280, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR17", 0x40290284, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR32", 0x402902C0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR33", 0x402902C4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR34", 0x402902C8, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR35", 0x402902CC, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR36", 0x402902D0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR37", 0x402902D4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR40", 0x402902E0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR41", 0x402902E4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR42", 0x402902E8, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR43", 0x402902EC, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR44", 0x402902F0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR45", 0x402902F4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR46", 0x402902F8, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR47", 0x402902FC, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR48", 0x40290300, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR49", 0x40290304, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR64", 0x40290340, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR65", 0x40290344, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR66", 0x40290348, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR67", 0x4029034C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR68", 0x40290350, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR69", 0x40290354, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR70", 0x40290358, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR71", 0x4029035C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR72", 0x40290360, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR73", 0x40290364, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR74", 0x40290368, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR75", 0x4029036C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR76", 0x40290370, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR77", 0x40290374, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR78", 0x40290378, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR79", 0x4029037C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR80", 0x40290380, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR81", 0x40290384, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR96", 0x402903C0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR97", 0x402903C4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR98", 0x402903C8, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR99", 0x402903CC, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR100", 0x402903D0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR101", 0x402903D4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR102", 0x402903D8, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR103", 0x402903DC, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR104", 0x402903E0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR105", 0x402903E4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR106", 0x402903E8, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR107", 0x402903EC, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR108", 0x402903F0, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR109", 0x402903F4, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR110", 0x402903F8, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR111", 0x402903FC, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR112", 0x40290400, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR113", 0x40290404, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR128", 0x40290440, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR129", 0x40290444, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR130", 0x40290448, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR131", 0x4029044C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR134", 0x40290458, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR135", 0x4029045C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR136", 0x40290460, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR137", 0x40290464, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR138", 0x40290468, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR139", 0x4029046C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR140", 0x40290470, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR141", 0x40290474, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR143", 0x4029047C, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("MSCR144", 0x40290480, 32, "SIUL2 Multiplexed Signal Configuration Register", [
                Field("OBE", 21, 1, "GPIO Output Buffer Enable", [
                    EnumVal("OBE_0", "0", "Output driver disabled"),
                    EnumVal("OBE_1", "0x1", "Output driver enabled"),
                ]),
                Field("IBE", 19, 1, "Input Buffer Enable", [
                    EnumVal("IBE_0", "0", "Disabled"),
                    EnumVal("IBE_1", "0x1", "Enabled"),
                ]),
                Field("INV", 17, 1, "Invert", [
                    EnumVal("INV_0", "0", "Don't invert"),
                    EnumVal("INV_1", "0x1", "Invert"),
                ]),
                Field("PKE", 16, 1, "Pad keeping enable", [
                    EnumVal("PKE_0", "0", "Disabled"),
                    EnumVal("PKE_1", "0x1", "Enabled"),
                ]),
                Field("SRC", 14, 1, "Slew Rate Control", [
                    EnumVal("SRC_0", "0", "Fastest setting"),
                    EnumVal("SRC_1", "0x1", "Slowest setting"),
                ]),
                Field("PUE", 13, 1, "Pull Enable", [
                    EnumVal("PUE_0", "0", "Disabled"),
                    EnumVal("PUE_1", "0x1", "Enabled"),
                ]),
                Field("PUS", 11, 1, "Pull Select", [
                    EnumVal("PUS_0", "0", "Pull down"),
                    EnumVal("PUS_1", "0x1", "Pull up"),
                ]),
                Field("DSE", 8, 1, "DSE", [
                    EnumVal("DSE_0", "0", "Disabled"),
                    EnumVal("DSE_1", "0x1", "Enabled"),
                ]),
                Field("IFE", 6, 1, "IFE", [
                    EnumVal("IFE_0", "0", "Disabled"),
                    EnumVal("IFE_1", "0x1", "Enabled"),
                ]),
                Field("SMC", 5, 1, "Safe Mode Control", [
                    EnumVal("SMC_0", "0", "Disable (The output buffer returns to its previous state when the chip leaves Safe mode.)"),
                    EnumVal("SMC_1", "0x1", "Don't disable"),
                ]),
                Field("SSS_3", 3, 1, "Source Signal Select_3", [
                ]),
                Field("SSS_2", 2, 1, "Source Signal Select_2", [
                ]),
                Field("SSS_1", 1, 1, "Source Signal Select_1", [
                ]),
                Field("SSS_0", 0, 1, "Source Signal Select_0", [
                ]),
            ]),
            Register("IMCR0", 0x40290A40, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR1", 0x40290A44, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR2", 0x40290A48, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR16", 0x40290A80, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR17", 0x40290A84, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR18", 0x40290A88, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR19", 0x40290A8C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR20", 0x40290A90, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR21", 0x40290A94, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR22", 0x40290A98, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR23", 0x40290A9C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR24", 0x40290AA0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR25", 0x40290AA4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR26", 0x40290AA8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR27", 0x40290AAC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR28", 0x40290AB0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR29", 0x40290AB4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR30", 0x40290AB8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR31", 0x40290ABC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR32", 0x40290AC0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR33", 0x40290AC4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR34", 0x40290AC8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR35", 0x40290ACC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR36", 0x40290AD0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR37", 0x40290AD4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR38", 0x40290AD8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR39", 0x40290ADC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR40", 0x40290AE0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR41", 0x40290AE4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR42", 0x40290AE8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR43", 0x40290AEC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR44", 0x40290AF0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR45", 0x40290AF4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR46", 0x40290AF8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR47", 0x40290AFC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR48", 0x40290B00, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR49", 0x40290B04, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR50", 0x40290B08, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR51", 0x40290B0C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR52", 0x40290B10, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR53", 0x40290B14, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR54", 0x40290B18, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR55", 0x40290B1C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR56", 0x40290B20, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR57", 0x40290B24, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR58", 0x40290B28, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR59", 0x40290B2C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR60", 0x40290B30, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR61", 0x40290B34, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR62", 0x40290B38, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR63", 0x40290B3C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR64", 0x40290B40, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR65", 0x40290B44, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR66", 0x40290B48, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR67", 0x40290B4C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR68", 0x40290B50, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR69", 0x40290B54, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR70", 0x40290B58, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR71", 0x40290B5C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR80", 0x40290B80, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR81", 0x40290B84, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR82", 0x40290B88, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR83", 0x40290B8C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR84", 0x40290B90, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR85", 0x40290B94, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR86", 0x40290B98, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR87", 0x40290B9C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR88", 0x40290BA0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR89", 0x40290BA4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR90", 0x40290BA8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR91", 0x40290BAC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR92", 0x40290BB0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR93", 0x40290BB4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR94", 0x40290BB8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR95", 0x40290BBC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR96", 0x40290BC0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR97", 0x40290BC4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR98", 0x40290BC8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR99", 0x40290BCC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR100", 0x40290BD0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR101", 0x40290BD4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR102", 0x40290BD8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR103", 0x40290BDC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR148", 0x40290C90, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR149", 0x40290C94, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR152", 0x40290CA0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR153", 0x40290CA4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR154", 0x40290CA8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR155", 0x40290CAC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR156", 0x40290CB0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR157", 0x40290CB4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR158", 0x40290CB8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR159", 0x40290CBC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR160", 0x40290CC0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR161", 0x40290CC4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR162", 0x40290CC8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR163", 0x40290CCC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR164", 0x40290CD0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR165", 0x40290CD4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR166", 0x40290CD8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR167", 0x40290CDC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR184", 0x40290D20, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR185", 0x40290D24, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR186", 0x40290D28, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR187", 0x40290D2C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR188", 0x40290D30, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR189", 0x40290D34, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR190", 0x40290D38, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR211", 0x40290D8C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR212", 0x40290D90, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR213", 0x40290D94, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR214", 0x40290D98, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR215", 0x40290D9C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR216", 0x40290DA0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR217", 0x40290DA4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR218", 0x40290DA8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR219", 0x40290DAC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR220", 0x40290DB0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR221", 0x40290DB4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR222", 0x40290DB8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR223", 0x40290DBC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR224", 0x40290DC0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR225", 0x40290DC4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR226", 0x40290DC8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR227", 0x40290DCC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR228", 0x40290DD0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR229", 0x40290DD4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR230", 0x40290DD8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR231", 0x40290DDC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR232", 0x40290DE0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR233", 0x40290DE4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR234", 0x40290DE8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR235", 0x40290DEC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR236", 0x40290DF0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR237", 0x40290DF4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR238", 0x40290DF8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR239", 0x40290DFC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR240", 0x40290E00, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR241", 0x40290E04, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR242", 0x40290E08, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR243", 0x40290E0C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR244", 0x40290E10, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR245", 0x40290E14, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR246", 0x40290E18, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR247", 0x40290E1C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR248", 0x40290E20, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR249", 0x40290E24, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR250", 0x40290E28, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR251", 0x40290E2C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR252", 0x40290E30, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR253", 0x40290E34, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR254", 0x40290E38, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR343", 0x40290F9C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR344", 0x40290FA0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR345", 0x40290FA4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR346", 0x40290FA8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR347", 0x40290FAC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR348", 0x40290FB0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR349", 0x40290FB4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR350", 0x40290FB8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR351", 0x40290FBC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR352", 0x40290FC0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR353", 0x40290FC4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR354", 0x40290FC8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR355", 0x40290FCC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR356", 0x40290FD0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR357", 0x40290FD4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR358", 0x40290FD8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR359", 0x40290FDC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR360", 0x40290FE0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR361", 0x40290FE4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR362", 0x40290FE8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR363", 0x40290FEC, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR364", 0x40290FF0, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR365", 0x40290FF4, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR366", 0x40290FF8, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR371", 0x4029100C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR372", 0x40291010, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR373", 0x40291014, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR374", 0x40291018, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR375", 0x4029101C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR376", 0x40291020, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR377", 0x40291024, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR378", 0x40291028, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("IMCR399", 0x4029107C, 32, "SIUL2 Input Multiplexed Signal Configuration", [
                Field("SSS", 0, 4, "Source Signal Select", [
                ]),
            ]),
            Register("GPDO3", 0x40291300, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO2", 0x40291301, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO1", 0x40291302, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO0", 0x40291303, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO7", 0x40291304, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO6", 0x40291305, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO5", 0x40291306, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO4", 0x40291307, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO11", 0x40291308, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO10", 0x40291309, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO9", 0x4029130A, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO8", 0x4029130B, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO15", 0x4029130C, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO14", 0x4029130D, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO13", 0x4029130E, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO12", 0x4029130F, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO17", 0x40291312, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO16", 0x40291313, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO35", 0x40291320, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO34", 0x40291321, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO33", 0x40291322, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO32", 0x40291323, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO37", 0x40291326, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO36", 0x40291327, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO43", 0x40291328, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO42", 0x40291329, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO41", 0x4029132A, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO40", 0x4029132B, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO47", 0x4029132C, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO46", 0x4029132D, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO45", 0x4029132E, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO44", 0x4029132F, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO49", 0x40291332, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO48", 0x40291333, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO67", 0x40291340, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO66", 0x40291341, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO65", 0x40291342, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO64", 0x40291343, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO71", 0x40291344, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO70", 0x40291345, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO69", 0x40291346, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO68", 0x40291347, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO75", 0x40291348, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO74", 0x40291349, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO73", 0x4029134A, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO72", 0x4029134B, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO79", 0x4029134C, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO78", 0x4029134D, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO77", 0x4029134E, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO76", 0x4029134F, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO81", 0x40291352, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO80", 0x40291353, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO99", 0x40291360, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO98", 0x40291361, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO97", 0x40291362, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO96", 0x40291363, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO103", 0x40291364, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO102", 0x40291365, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO101", 0x40291366, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO100", 0x40291367, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO107", 0x40291368, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO106", 0x40291369, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO105", 0x4029136A, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO104", 0x4029136B, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO111", 0x4029136C, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO110", 0x4029136D, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO109", 0x4029136E, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO108", 0x4029136F, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO113", 0x40291372, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO112", 0x40291373, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO131", 0x40291380, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO130", 0x40291381, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO129", 0x40291382, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO128", 0x40291383, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO135", 0x40291384, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO134", 0x40291385, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO139", 0x40291388, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO138", 0x40291389, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO137", 0x4029138A, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO136", 0x4029138B, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO143", 0x4029138C, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO141", 0x4029138E, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO140", 0x4029138F, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDO144", 0x40291393, 8, "SIUL2 GPIO Pad Data Output", [
                Field("PDO_n", 0, 1, "Pad Data Out", [
                    EnumVal("PDO_a_LOW", "0", "Pad Data Out Low"),
                    EnumVal("PDO_a_HIGH", "0x1", "Pad Data Out High"),
                ]),
            ]),
            Register("GPDI3", 0x40291500, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI2", 0x40291501, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI1", 0x40291502, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI0", 0x40291503, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI7", 0x40291504, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI6", 0x40291505, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI5", 0x40291506, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI4", 0x40291507, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI11", 0x40291508, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI10", 0x40291509, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI9", 0x4029150A, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI8", 0x4029150B, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI15", 0x4029150C, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI14", 0x4029150D, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI13", 0x4029150E, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI12", 0x4029150F, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI17", 0x40291512, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI16", 0x40291513, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI35", 0x40291520, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI34", 0x40291521, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI33", 0x40291522, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI32", 0x40291523, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI37", 0x40291526, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI36", 0x40291527, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI43", 0x40291528, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI42", 0x40291529, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI41", 0x4029152A, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI40", 0x4029152B, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI47", 0x4029152C, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI46", 0x4029152D, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI45", 0x4029152E, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI44", 0x4029152F, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI49", 0x40291532, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI48", 0x40291533, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI67", 0x40291540, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI66", 0x40291541, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI65", 0x40291542, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI64", 0x40291543, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI71", 0x40291544, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI70", 0x40291545, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI69", 0x40291546, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI68", 0x40291547, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI75", 0x40291548, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI74", 0x40291549, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI73", 0x4029154A, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI72", 0x4029154B, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI79", 0x4029154C, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI78", 0x4029154D, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI77", 0x4029154E, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI76", 0x4029154F, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI81", 0x40291552, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI80", 0x40291553, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI99", 0x40291560, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI98", 0x40291561, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI97", 0x40291562, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI96", 0x40291563, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI103", 0x40291564, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI102", 0x40291565, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI101", 0x40291566, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI100", 0x40291567, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI107", 0x40291568, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI106", 0x40291569, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI105", 0x4029156A, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI104", 0x4029156B, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI111", 0x4029156C, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI110", 0x4029156D, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI109", 0x4029156E, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI108", 0x4029156F, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI113", 0x40291572, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI112", 0x40291573, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI131", 0x40291580, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI130", 0x40291581, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI129", 0x40291582, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI128", 0x40291583, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI135", 0x40291584, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI134", 0x40291585, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI139", 0x40291588, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI138", 0x40291589, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI137", 0x4029158A, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI136", 0x4029158B, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI143", 0x4029158C, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI141", 0x4029158E, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI140", 0x4029158F, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("GPDI144", 0x40291593, 8, "SIUL2 GPIO Pad Data Input", [
                Field("PDI_n", 0, 1, "Pad Data In", [
                    EnumVal("PDI_a_LOW", "0", "Pad Data In Low"),
                    EnumVal("PDI_a_HIGH", "0x1", "Pad Data In High"),
                ]),
            ]),
            Register("PGPDO1", 0x40291700, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO0", 0x40291702, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO13", 13, 1, "Parallel Pad Data Out 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO12", 12, 1, "Parallel Pad Data Out 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO11", 11, 1, "Parallel Pad Data Out 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO10", 10, 1, "Parallel Pad Data Out 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO9", 9, 1, "Parallel Pad Data Out 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO8", 8, 1, "Parallel Pad Data Out 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO7", 7, 1, "Parallel Pad Data Out 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO6", 6, 1, "Parallel Pad Data Out 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO5", 5, 1, "Parallel Pad Data Out 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO4", 4, 1, "Parallel Pad Data Out 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO3", 3, 1, "Parallel Pad Data Out 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO2", 2, 1, "Parallel Pad Data Out 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO1", 1, 1, "Parallel Pad Data Out 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO0", 0, 1, "Parallel Pad Data Out 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO3", 0x40291704, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO2", 0x40291706, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO13", 13, 1, "Parallel Pad Data Out 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO12", 12, 1, "Parallel Pad Data Out 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO11", 11, 1, "Parallel Pad Data Out 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO10", 10, 1, "Parallel Pad Data Out 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO7", 7, 1, "Parallel Pad Data Out 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO6", 6, 1, "Parallel Pad Data Out 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO5", 5, 1, "Parallel Pad Data Out 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO4", 4, 1, "Parallel Pad Data Out 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO3", 3, 1, "Parallel Pad Data Out 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO2", 2, 1, "Parallel Pad Data Out 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO1", 1, 1, "Parallel Pad Data Out 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO0", 0, 1, "Parallel Pad Data Out 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO5", 0x40291708, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO4", 0x4029170A, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO13", 13, 1, "Parallel Pad Data Out 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO12", 12, 1, "Parallel Pad Data Out 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO11", 11, 1, "Parallel Pad Data Out 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO10", 10, 1, "Parallel Pad Data Out 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO9", 9, 1, "Parallel Pad Data Out 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO8", 8, 1, "Parallel Pad Data Out 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO7", 7, 1, "Parallel Pad Data Out 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO6", 6, 1, "Parallel Pad Data Out 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO5", 5, 1, "Parallel Pad Data Out 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO4", 4, 1, "Parallel Pad Data Out 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO3", 3, 1, "Parallel Pad Data Out 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO2", 2, 1, "Parallel Pad Data Out 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO1", 1, 1, "Parallel Pad Data Out 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO0", 0, 1, "Parallel Pad Data Out 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO7", 0x4029170C, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO6", 0x4029170E, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO13", 13, 1, "Parallel Pad Data Out 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO12", 12, 1, "Parallel Pad Data Out 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO11", 11, 1, "Parallel Pad Data Out 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO10", 10, 1, "Parallel Pad Data Out 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO9", 9, 1, "Parallel Pad Data Out 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO8", 8, 1, "Parallel Pad Data Out 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO7", 7, 1, "Parallel Pad Data Out 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO6", 6, 1, "Parallel Pad Data Out 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO5", 5, 1, "Parallel Pad Data Out 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO4", 4, 1, "Parallel Pad Data Out 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO3", 3, 1, "Parallel Pad Data Out 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO2", 2, 1, "Parallel Pad Data Out 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO1", 1, 1, "Parallel Pad Data Out 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO0", 0, 1, "Parallel Pad Data Out 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO9", 0x40291710, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDO8", 0x40291712, 16, "SIUL2 Parallel GPIO Pad Data Out", [
                Field("PPDO15", 15, 1, "Parallel Pad Data Out 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO14", 14, 1, "Parallel Pad Data Out 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO13", 13, 1, "Parallel Pad Data Out 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO12", 12, 1, "Parallel Pad Data Out 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO9", 9, 1, "Parallel Pad Data Out 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO8", 8, 1, "Parallel Pad Data Out 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO7", 7, 1, "Parallel Pad Data Out 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO6", 6, 1, "Parallel Pad Data Out 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO5", 5, 1, "Parallel Pad Data Out 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO4", 4, 1, "Parallel Pad Data Out 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO3", 3, 1, "Parallel Pad Data Out 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO2", 2, 1, "Parallel Pad Data Out 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDO0", 0, 1, "Parallel Pad Data Out 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI1", 0x40291740, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI0", 0x40291742, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI13", 13, 1, "Parallel Pad Data In 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI12", 12, 1, "Parallel Pad Data In 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI11", 11, 1, "Parallel Pad Data In 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI10", 10, 1, "Parallel Pad Data In 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI9", 9, 1, "Parallel Pad Data In 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI8", 8, 1, "Parallel Pad Data In 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI7", 7, 1, "Parallel Pad Data In 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI6", 6, 1, "Parallel Pad Data In 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI5", 5, 1, "Parallel Pad Data In 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI4", 4, 1, "Parallel Pad Data In 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI3", 3, 1, "Parallel Pad Data In 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI2", 2, 1, "Parallel Pad Data In 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI1", 1, 1, "Parallel Pad Data In 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI0", 0, 1, "Parallel Pad Data In 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI3", 0x40291744, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI2", 0x40291746, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI13", 13, 1, "Parallel Pad Data In 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI12", 12, 1, "Parallel Pad Data In 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI11", 11, 1, "Parallel Pad Data In 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI10", 10, 1, "Parallel Pad Data In 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI7", 7, 1, "Parallel Pad Data In 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI6", 6, 1, "Parallel Pad Data In 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI5", 5, 1, "Parallel Pad Data In 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI4", 4, 1, "Parallel Pad Data In 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI3", 3, 1, "Parallel Pad Data In 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI2", 2, 1, "Parallel Pad Data In 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI1", 1, 1, "Parallel Pad Data In 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI0", 0, 1, "Parallel Pad Data In 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI5", 0x40291748, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI4", 0x4029174A, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI13", 13, 1, "Parallel Pad Data In 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI12", 12, 1, "Parallel Pad Data In 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI11", 11, 1, "Parallel Pad Data In 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI10", 10, 1, "Parallel Pad Data In 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI9", 9, 1, "Parallel Pad Data In 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI8", 8, 1, "Parallel Pad Data In 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI7", 7, 1, "Parallel Pad Data In 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI6", 6, 1, "Parallel Pad Data In 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI5", 5, 1, "Parallel Pad Data In 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI4", 4, 1, "Parallel Pad Data In 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI3", 3, 1, "Parallel Pad Data In 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI2", 2, 1, "Parallel Pad Data In 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI1", 1, 1, "Parallel Pad Data In 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI0", 0, 1, "Parallel Pad Data In 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI7", 0x4029174C, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI6", 0x4029174E, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI13", 13, 1, "Parallel Pad Data In 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI12", 12, 1, "Parallel Pad Data In 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI11", 11, 1, "Parallel Pad Data In 11", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI10", 10, 1, "Parallel Pad Data In 10", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI9", 9, 1, "Parallel Pad Data In 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI8", 8, 1, "Parallel Pad Data In 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI7", 7, 1, "Parallel Pad Data In 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI6", 6, 1, "Parallel Pad Data In 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI5", 5, 1, "Parallel Pad Data In 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI4", 4, 1, "Parallel Pad Data In 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI3", 3, 1, "Parallel Pad Data In 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI2", 2, 1, "Parallel Pad Data In 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI1", 1, 1, "Parallel Pad Data In 1", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI0", 0, 1, "Parallel Pad Data In 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI9", 0x40291750, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("PGPDI8", 0x40291752, 16, "SIUL2 Parallel GPIO Pad Data In", [
                Field("PPDI15", 15, 1, "Parallel Pad Data In 15", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI14", 14, 1, "Parallel Pad Data In 14", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI13", 13, 1, "Parallel Pad Data In 13", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI12", 12, 1, "Parallel Pad Data In 12", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI9", 9, 1, "Parallel Pad Data In 9", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI8", 8, 1, "Parallel Pad Data In 8", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI7", 7, 1, "Parallel Pad Data In 7", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI6", 6, 1, "Parallel Pad Data In 6", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI5", 5, 1, "Parallel Pad Data In 5", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI4", 4, 1, "Parallel Pad Data In 4", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI3", 3, 1, "Parallel Pad Data In 3", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI2", 2, 1, "Parallel Pad Data In 2", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
                Field("PPDI0", 0, 1, "Parallel Pad Data In 0", [
                    EnumVal("low", "0", "Logic low"),
                    EnumVal("high", "0x1", "Logic high"),
                ]),
            ]),
            Register("MPGPDO0", 0x40291780, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MASK13", 29, 1, "Mask Field 13", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO13 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO13 is written"),
                ]),
                Field("MASK12", 28, 1, "Mask Field 12", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO12 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO12 is written"),
                ]),
                Field("MASK11", 27, 1, "Mask Field 11", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO11 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO11 is written"),
                ]),
                Field("MASK10", 26, 1, "Mask Field 10", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO10 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO10 is written"),
                ]),
                Field("MASK9", 25, 1, "Mask Field 9", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO9 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO9 is written"),
                ]),
                Field("MASK8", 24, 1, "Mask Field 8", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO8 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO8 is written"),
                ]),
                Field("MASK7", 23, 1, "Mask Field 7", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO7 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO7 is written"),
                ]),
                Field("MASK6", 22, 1, "Mask Field 6", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO6 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO6 is written"),
                ]),
                Field("MASK5", 21, 1, "Mask Field 5", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO5 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO5 is written"),
                ]),
                Field("MASK4", 20, 1, "Mask Field 4", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO4 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO4 is written"),
                ]),
                Field("MASK3", 19, 1, "Mask Field 3", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO3 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO3 is written"),
                ]),
                Field("MASK2", 18, 1, "Mask Field 2", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO2 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO2 is written"),
                ]),
                Field("MASK1", 17, 1, "Mask Field 1", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO1 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO1 is written"),
                ]),
                Field("MASK0", 16, 1, "Mask Field 0", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO0 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO0 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
                Field("MPPDO13", 13, 1, "Masked Parallel Pad Data Out 13", [
                ]),
                Field("MPPDO12", 12, 1, "Masked Parallel Pad Data Out 12", [
                ]),
                Field("MPPDO11", 11, 1, "Masked Parallel Pad Data Out 11", [
                ]),
                Field("MPPDO10", 10, 1, "Masked Parallel Pad Data Out 10", [
                ]),
                Field("MPPDO9", 9, 1, "Masked Parallel Pad Data Out 9", [
                ]),
                Field("MPPDO8", 8, 1, "Masked Parallel Pad Data Out 8", [
                ]),
                Field("MPPDO7", 7, 1, "Masked Parallel Pad Data Out 7", [
                ]),
                Field("MPPDO6", 6, 1, "Masked Parallel Pad Data Out 6", [
                ]),
                Field("MPPDO5", 5, 1, "Masked Parallel Pad Data Out 5", [
                ]),
                Field("MPPDO4", 4, 1, "Masked Parallel Pad Data Out 4", [
                ]),
                Field("MPPDO3", 3, 1, "Masked Parallel Pad Data Out 3", [
                ]),
                Field("MPPDO2", 2, 1, "Masked Parallel Pad Data Out 2", [
                ]),
                Field("MPPDO1", 1, 1, "Masked Parallel Pad Data Out 1", [
                ]),
                Field("MPPDO0", 0, 1, "Masked Parallel Pad Data Out 0", [
                ]),
            ]),
            Register("MPGPDO1", 0x40291784, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
            ]),
            Register("MPGPDO2", 0x40291788, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MASK13", 29, 1, "Mask Field 13", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO13 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO13 is written"),
                ]),
                Field("MASK12", 28, 1, "Mask Field 12", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO12 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO12 is written"),
                ]),
                Field("MASK11", 27, 1, "Mask Field 11", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO11 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO11 is written"),
                ]),
                Field("MASK10", 26, 1, "Mask Field 10", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO10 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO10 is written"),
                ]),
                Field("MASK7", 23, 1, "Mask Field 7", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO7 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO7 is written"),
                ]),
                Field("MASK6", 22, 1, "Mask Field 6", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO6 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO6 is written"),
                ]),
                Field("MASK5", 21, 1, "Mask Field 5", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO5 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO5 is written"),
                ]),
                Field("MASK4", 20, 1, "Mask Field 4", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO4 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO4 is written"),
                ]),
                Field("MASK3", 19, 1, "Mask Field 3", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO3 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO3 is written"),
                ]),
                Field("MASK2", 18, 1, "Mask Field 2", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO2 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO2 is written"),
                ]),
                Field("MASK1", 17, 1, "Mask Field 1", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO1 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO1 is written"),
                ]),
                Field("MASK0", 16, 1, "Mask Field 0", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO0 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO0 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
                Field("MPPDO13", 13, 1, "Masked Parallel Pad Data Out 13", [
                ]),
                Field("MPPDO12", 12, 1, "Masked Parallel Pad Data Out 12", [
                ]),
                Field("MPPDO11", 11, 1, "Masked Parallel Pad Data Out 11", [
                ]),
                Field("MPPDO10", 10, 1, "Masked Parallel Pad Data Out 10", [
                ]),
                Field("MPPDO7", 7, 1, "Masked Parallel Pad Data Out 7", [
                ]),
                Field("MPPDO6", 6, 1, "Masked Parallel Pad Data Out 6", [
                ]),
                Field("MPPDO5", 5, 1, "Masked Parallel Pad Data Out 5", [
                ]),
                Field("MPPDO4", 4, 1, "Masked Parallel Pad Data Out 4", [
                ]),
                Field("MPPDO3", 3, 1, "Masked Parallel Pad Data Out 3", [
                ]),
                Field("MPPDO2", 2, 1, "Masked Parallel Pad Data Out 2", [
                ]),
                Field("MPPDO1", 1, 1, "Masked Parallel Pad Data Out 1", [
                ]),
                Field("MPPDO0", 0, 1, "Masked Parallel Pad Data Out 0", [
                ]),
            ]),
            Register("MPGPDO3", 0x4029178C, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
            ]),
            Register("MPGPDO4", 0x40291790, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MASK13", 29, 1, "Mask Field 13", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO13 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO13 is written"),
                ]),
                Field("MASK12", 28, 1, "Mask Field 12", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO12 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO12 is written"),
                ]),
                Field("MASK11", 27, 1, "Mask Field 11", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO11 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO11 is written"),
                ]),
                Field("MASK10", 26, 1, "Mask Field 10", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO10 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO10 is written"),
                ]),
                Field("MASK9", 25, 1, "Mask Field 9", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO9 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO9 is written"),
                ]),
                Field("MASK8", 24, 1, "Mask Field 8", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO8 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO8 is written"),
                ]),
                Field("MASK7", 23, 1, "Mask Field 7", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO7 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO7 is written"),
                ]),
                Field("MASK6", 22, 1, "Mask Field 6", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO6 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO6 is written"),
                ]),
                Field("MASK5", 21, 1, "Mask Field 5", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO5 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO5 is written"),
                ]),
                Field("MASK4", 20, 1, "Mask Field 4", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO4 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO4 is written"),
                ]),
                Field("MASK3", 19, 1, "Mask Field 3", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO3 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO3 is written"),
                ]),
                Field("MASK2", 18, 1, "Mask Field 2", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO2 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO2 is written"),
                ]),
                Field("MASK1", 17, 1, "Mask Field 1", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO1 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO1 is written"),
                ]),
                Field("MASK0", 16, 1, "Mask Field 0", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO0 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO0 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
                Field("MPPDO13", 13, 1, "Masked Parallel Pad Data Out 13", [
                ]),
                Field("MPPDO12", 12, 1, "Masked Parallel Pad Data Out 12", [
                ]),
                Field("MPPDO11", 11, 1, "Masked Parallel Pad Data Out 11", [
                ]),
                Field("MPPDO10", 10, 1, "Masked Parallel Pad Data Out 10", [
                ]),
                Field("MPPDO9", 9, 1, "Masked Parallel Pad Data Out 9", [
                ]),
                Field("MPPDO8", 8, 1, "Masked Parallel Pad Data Out 8", [
                ]),
                Field("MPPDO7", 7, 1, "Masked Parallel Pad Data Out 7", [
                ]),
                Field("MPPDO6", 6, 1, "Masked Parallel Pad Data Out 6", [
                ]),
                Field("MPPDO5", 5, 1, "Masked Parallel Pad Data Out 5", [
                ]),
                Field("MPPDO4", 4, 1, "Masked Parallel Pad Data Out 4", [
                ]),
                Field("MPPDO3", 3, 1, "Masked Parallel Pad Data Out 3", [
                ]),
                Field("MPPDO2", 2, 1, "Masked Parallel Pad Data Out 2", [
                ]),
                Field("MPPDO1", 1, 1, "Masked Parallel Pad Data Out 1", [
                ]),
                Field("MPPDO0", 0, 1, "Masked Parallel Pad Data Out 0", [
                ]),
            ]),
            Register("MPGPDO5", 0x40291794, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
            ]),
            Register("MPGPDO6", 0x40291798, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MASK13", 29, 1, "Mask Field 13", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO13 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO13 is written"),
                ]),
                Field("MASK12", 28, 1, "Mask Field 12", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO12 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO12 is written"),
                ]),
                Field("MASK11", 27, 1, "Mask Field 11", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO11 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO11 is written"),
                ]),
                Field("MASK10", 26, 1, "Mask Field 10", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO10 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO10 is written"),
                ]),
                Field("MASK9", 25, 1, "Mask Field 9", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO9 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO9 is written"),
                ]),
                Field("MASK8", 24, 1, "Mask Field 8", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO8 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO8 is written"),
                ]),
                Field("MASK7", 23, 1, "Mask Field 7", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO7 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO7 is written"),
                ]),
                Field("MASK6", 22, 1, "Mask Field 6", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO6 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO6 is written"),
                ]),
                Field("MASK5", 21, 1, "Mask Field 5", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO5 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO5 is written"),
                ]),
                Field("MASK4", 20, 1, "Mask Field 4", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO4 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO4 is written"),
                ]),
                Field("MASK3", 19, 1, "Mask Field 3", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO3 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO3 is written"),
                ]),
                Field("MASK2", 18, 1, "Mask Field 2", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO2 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO2 is written"),
                ]),
                Field("MASK1", 17, 1, "Mask Field 1", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO1 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO1 is written"),
                ]),
                Field("MASK0", 16, 1, "Mask Field 0", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO0 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO0 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
                Field("MPPDO13", 13, 1, "Masked Parallel Pad Data Out 13", [
                ]),
                Field("MPPDO12", 12, 1, "Masked Parallel Pad Data Out 12", [
                ]),
                Field("MPPDO11", 11, 1, "Masked Parallel Pad Data Out 11", [
                ]),
                Field("MPPDO10", 10, 1, "Masked Parallel Pad Data Out 10", [
                ]),
                Field("MPPDO9", 9, 1, "Masked Parallel Pad Data Out 9", [
                ]),
                Field("MPPDO8", 8, 1, "Masked Parallel Pad Data Out 8", [
                ]),
                Field("MPPDO7", 7, 1, "Masked Parallel Pad Data Out 7", [
                ]),
                Field("MPPDO6", 6, 1, "Masked Parallel Pad Data Out 6", [
                ]),
                Field("MPPDO5", 5, 1, "Masked Parallel Pad Data Out 5", [
                ]),
                Field("MPPDO4", 4, 1, "Masked Parallel Pad Data Out 4", [
                ]),
                Field("MPPDO3", 3, 1, "Masked Parallel Pad Data Out 3", [
                ]),
                Field("MPPDO2", 2, 1, "Masked Parallel Pad Data Out 2", [
                ]),
                Field("MPPDO1", 1, 1, "Masked Parallel Pad Data Out 1", [
                ]),
                Field("MPPDO0", 0, 1, "Masked Parallel Pad Data Out 0", [
                ]),
            ]),
            Register("MPGPDO7", 0x4029179C, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
            ]),
            Register("MPGPDO8", 0x402917A0, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MASK14", 30, 1, "Mask Field 14", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO14 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO14 is written"),
                ]),
                Field("MASK13", 29, 1, "Mask Field 13", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO13 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO13 is written"),
                ]),
                Field("MASK12", 28, 1, "Mask Field 12", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO12 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO12 is written"),
                ]),
                Field("MASK9", 25, 1, "Mask Field 9", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO9 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO9 is written"),
                ]),
                Field("MASK8", 24, 1, "Mask Field 8", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO8 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO8 is written"),
                ]),
                Field("MASK7", 23, 1, "Mask Field 7", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO7 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO7 is written"),
                ]),
                Field("MASK6", 22, 1, "Mask Field 6", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO6 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO6 is written"),
                ]),
                Field("MASK5", 21, 1, "Mask Field 5", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO5 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO5 is written"),
                ]),
                Field("MASK4", 20, 1, "Mask Field 4", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO4 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO4 is written"),
                ]),
                Field("MASK3", 19, 1, "Mask Field 3", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO3 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO3 is written"),
                ]),
                Field("MASK2", 18, 1, "Mask Field 2", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO2 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO2 is written"),
                ]),
                Field("MASK0", 16, 1, "Mask Field 0", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO0 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO0 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
                Field("MPPDO14", 14, 1, "Masked Parallel Pad Data Out 14", [
                ]),
                Field("MPPDO13", 13, 1, "Masked Parallel Pad Data Out 13", [
                ]),
                Field("MPPDO12", 12, 1, "Masked Parallel Pad Data Out 12", [
                ]),
                Field("MPPDO9", 9, 1, "Masked Parallel Pad Data Out 9", [
                ]),
                Field("MPPDO8", 8, 1, "Masked Parallel Pad Data Out 8", [
                ]),
                Field("MPPDO7", 7, 1, "Masked Parallel Pad Data Out 7", [
                ]),
                Field("MPPDO6", 6, 1, "Masked Parallel Pad Data Out 6", [
                ]),
                Field("MPPDO5", 5, 1, "Masked Parallel Pad Data Out 5", [
                ]),
                Field("MPPDO4", 4, 1, "Masked Parallel Pad Data Out 4", [
                ]),
                Field("MPPDO3", 3, 1, "Masked Parallel Pad Data Out 3", [
                ]),
                Field("MPPDO2", 2, 1, "Masked Parallel Pad Data Out 2", [
                ]),
                Field("MPPDO0", 0, 1, "Masked Parallel Pad Data Out 0", [
                ]),
            ]),
            Register("MPGPDO9", 0x402917A4, 32, "SIUL2 Masked Parallel GPIO Pad Data Out", [
                Field("MASK15", 31, 1, "Mask Field 15", [
                    EnumVal("MASK_IGNORED", "0", "MPPDO15 is ignored"),
                    EnumVal("MASK_WRITTEN", "0x1", "MPPDO15 is written"),
                ]),
                Field("MPPDO15", 15, 1, "Masked Parallel Pad Data Out 15", [
                ]),
            ]),
        ])

class Module_STCU(Peripheral):
    def __init__(self):
        super().__init__("STCU", 0x403A0000, 0x2244, [
            Register("RUNSW", 0x403A0004, 32, "STCU2 Run Software", [
                Field("MBSWPLLEN", 9, 1, "Online MBIST with PLL Enabled", [
                    EnumVal("A14", "0", "Online MBIST is executed without using the on-chip PLL."),
                    EnumVal("A15", "0x1", "Online MBIST is executed using the PLL configuration provided by software. STCU2 does not take the PLL control but monitors the PLL lock signal to check if PLL is working correctly."),
                ]),
                Field("RUNSW", 0, 1, "The RUNSW bit is automatically cleared by STCU2 when the online self-testing procedure is complete.", [
                    EnumVal("A8", "0", "Idle"),
                    EnumVal("A9", "0x1", "Online self-testing procedure is running"),
                ]),
            ]),
            Register("SKC", 0x403A0008, 32, "STCU2 SK Code", [
                Field("SKC", 0, 32, "STCU2 SK Code", [
                ]),
            ]),
            Register("CFG", 0x403A000C, 32, "STCU2 Configuration", [
                Field("PTR", 21, 10, "First MBIST pointer PTR defines the logical pointer to the first MBIST to be scheduled when the self-testing procedure is enabled", [
                ]),
                Field("WRP", 8, 1, "Write Protection 0: Specific STCU2 registers can be written through IPS bus interface 1: STCU2 registers cannot be written through IPS, preventing any user application write operation", [
                ]),
                Field("CLK_CFG", 0, 3, "Logic, Memory BIST, and STCU2 CORE_CLK configuration CLK_CFG defines the ratio between the sys_clk and the internal clock used to program the MBIST and the STCU2 CORE_CLK", [
                    EnumVal("sys_clk1", "0", "sys_clk/1"),
                    EnumVal("sys_clk2", "0x1", "sys_clk/2"),
                    EnumVal("sys_clk3", "0x2", "sys_clk/3"),
                    EnumVal("sys_clk4", "0x3", "sys_clk/4"),
                    EnumVal("sys_clk5", "0x4", "sys_clk/5"),
                    EnumVal("sys_clk6", "0x5", "sys_clk/6"),
                    EnumVal("sys_clk7", "0x6", "sys_clk/7"),
                    EnumVal("sys_clk8", "0x7", "sys_clk/8"),
                ]),
            ]),
            Register("WDG", 0x403A0014, 32, "STCU2 Watchdog Granularity", [
                Field("WDGEOC", 0, 32, "Watchdog End of Count Timer This value has to be set to define the time budget related to the online self-test execution and check that everything is correctly working within this slot of time", [
                ]),
            ]),
            Register("ERR_STAT", 0x403A0024, 32, "STCU2 Error", [
                Field("LOCKESW", 20, 1, "Online LOCK error You can always read this field", [
                    EnumVal("LOCK", "0", "In case PLL is enabled, it is correctly locked during the self-test sequence"),
                    EnumVal("UNLOCK", "0x1", "When the PLL is enabled, this flag highlights that there has been an unexpected PLL unlock(loss-of-lock) event during the online self-test sequence execution. The online self-test run is stopped and the status of the currently running MBISTs is saved in the related registers."),
                ]),
                Field("WDTOSW", 19, 1, "Online watchdog timeout You can always read this field", [
                    EnumVal("COMPLETED", "0", "MBIST time slot completed within the assigned watchdog time."),
                    EnumVal("NOT_COMPLETED", "0x1", "MBIST time slot not completed within the assigned watchdog time or there are internal mismatches among End of Execution signals."),
                ]),
                Field("ENGESW", 17, 1, "Online engine error You can always read this field", [
                    EnumVal("VALID", "0", "Valid engine execution"),
                    EnumVal("INVALID", "0x1", "Invalid engine execution. The error conditions that set this bit are FSM, protocol error, and so on."),
                ]),
                Field("INVPSW", 16, 1, "Online invalid pointer You can always read this field", [
                    EnumVal("VALID", "0", "Valid linked pointer list"),
                    EnumVal("INVALID", "0x1", "Invalid linked pointer list. The following conditions set this bit: Initial MBIST pointer is out of range; Error in the MBIST linking (execution generates an infinite loop)."),
                ]),
                Field("UFSF", 9, 1, "Unrecoverable Faults Status Flag This flag reports the global status of the Unrecoverable Faults(UF)", [
                    EnumVal("NO_ERROR", "0", "No errors that trigger the UF condition."),
                    EnumVal("ERROR", "0x1", "There are errors that trigger the UF condition."),
                ]),
                Field("RFSF", 8, 1, "Recoverable Faults Status Flag This flag reports the global status of the Recoverable Fault (RF)", [
                    EnumVal("NO_ERROR", "0", "No errors that trigger the Recoverable Faults condition"),
                    EnumVal("ERROR", "0x1", "There are errors that trigger the Recoverable Faults condition"),
                ]),
            ]),
            Register("ERR_FM", 0x403A0028, 32, "STCU2 Error FM", [
                Field("LOCKEUFM", 4, 1, "PLL LOCK Unrecoverable Fault Mapping", [
                    EnumVal("RECOVERABLE", "0", "Recoverable Fault Mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable Fault Mapping"),
                ]),
                Field("WDTOUFM", 3, 1, "Watchdog Timeout Unrecoverable Fault Mapping", [
                    EnumVal("RECOVERABLE", "0", "Recoverable Fault Mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable Fault Mapping"),
                ]),
                Field("ENGEUFM", 1, 1, "Engine Error Unrecoverable Fault Mapping", [
                    EnumVal("RECOVERABLE", "0", "Recoverable Fault Mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable Fault Mapping"),
                ]),
                Field("INVPUFM", 0, 1, "Invalid Pointer Unrecoverable Fault Mapping", [
                    EnumVal("RECOVERABLE", "0", "Recoverable Fault Mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable Mapping"),
                ]),
            ]),
            Register("MBSSW0", 0x403A010C, 32, "STCU2 Online MBIST Status", [
                Field("MBSSW11", 11, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW10", 10, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW9", 9, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW8", 8, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW7", 7, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW6", 6, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW5", 5, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW4", 4, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW3", 3, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW2", 2, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW1", 1, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
                Field("MBSSW0", 0, 1, "MBSSW", [
                    EnumVal("FAIL", "0", "Failed MBIST execution"),
                    EnumVal("PASS", "0x1", "No fault detected during the MBIST execution"),
                ]),
            ]),
            Register("MBESW0", 0x403A014C, 32, "STCU2 Online MBIST End Flag", [
                Field("MBESW11", 11, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW10", 10, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW9", 9, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW8", 8, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW7", 7, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW6", 6, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW5", 5, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW4", 4, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW3", 3, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW2", 2, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW1", 1, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
                Field("MBESW0", 0, 1, "Online end status of MBISTn (where n = 11:0).", [
                    EnumVal("ONGOING", "0", "MBIST execution still ongoing"),
                    EnumVal("FINISHED", "0x1", "MBIST execution finished"),
                ]),
            ]),
            Register("MBUFM0", 0x403A018C, 32, "STCU2 MBIST Unrecoverable FM", [
                Field("MBUFM11", 11, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM10", 10, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM9", 9, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM8", 8, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM7", 7, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM6", 6, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM5", 5, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM4", 4, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM3", 3, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM2", 2, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM1", 1, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
                Field("MBUFM0", 0, 1, "MBESW", [
                    EnumVal("RECOVERABLE", "0", "Recoverable fault mapping"),
                    EnumVal("UNRECOVERABLE", "0x1", "Unrecoverable fault mapping"),
                ]),
            ]),
            Register("ALGOSEL", 0x403A2200, 32, "STCU2 Algorithm Select", [
                Field("ALGOSEL31", 31, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL30", 30, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL29", 29, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL28", 28, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL27", 27, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL26", 26, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL25", 25, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL24", 24, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL23", 23, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL22", 22, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL21", 21, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL20", 20, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL19", 19, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL18", 18, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL17", 17, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL16", 16, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL15", 15, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL14", 14, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL13", 13, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL12", 12, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL11", 11, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL10", 10, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL9", 9, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL8", 8, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL7", 7, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL6", 6, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL5", 5, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL4", 4, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL3", 3, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL2", 2, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL1", 1, 1, "Algorithm Select", [
                ]),
                Field("ALGOSEL0", 0, 1, "Algorithm Select", [
                ]),
            ]),
            Register("STGGR", 0x403A220C, 32, "STCU2 MBIST Stagger", [
                Field("STAG", 0, 32, "STAG", [
                ]),
            ]),
            Register("BSTART", 0x403A2210, 32, "STCU2 BIST Start", [
                Field("BSTART31", 31, 1, "BIST Start", [
                ]),
                Field("BSTART30", 30, 1, "BIST Start", [
                ]),
                Field("BSTART29", 29, 1, "BIST Start", [
                ]),
                Field("BSTART28", 28, 1, "BIST Start", [
                ]),
                Field("BSTART27", 27, 1, "BIST Start", [
                ]),
                Field("BSTART26", 26, 1, "BIST Start", [
                ]),
                Field("BSTART25", 25, 1, "BIST Start", [
                ]),
                Field("BSTART24", 24, 1, "BIST Start", [
                ]),
                Field("BSTART23", 23, 1, "BIST Start", [
                ]),
                Field("BSTART22", 22, 1, "BIST Start", [
                ]),
                Field("BSTART21", 21, 1, "BIST Start", [
                ]),
                Field("BSTART20", 20, 1, "BIST Start", [
                ]),
                Field("BSTART19", 19, 1, "BIST Start", [
                ]),
                Field("BSTART18", 18, 1, "BIST Start", [
                ]),
                Field("BSTART17", 17, 1, "BIST Start", [
                ]),
                Field("BSTART16", 16, 1, "BIST Start", [
                ]),
                Field("BSTART15", 15, 1, "BIST Start", [
                ]),
                Field("BSTART14", 14, 1, "BIST Start", [
                ]),
                Field("BSTART13", 13, 1, "BIST Start", [
                ]),
                Field("BSTART12", 12, 1, "BIST Start", [
                ]),
                Field("BSTART11", 11, 1, "BIST Start", [
                ]),
                Field("BSTART10", 10, 1, "BIST Start", [
                ]),
                Field("BSTART9", 9, 1, "BIST Start", [
                ]),
                Field("BSTART8", 8, 1, "BIST Start", [
                ]),
                Field("BSTART7", 7, 1, "BIST Start", [
                ]),
                Field("BSTART6", 6, 1, "BIST Start", [
                ]),
                Field("BSTART5", 5, 1, "BIST Start", [
                ]),
                Field("BSTART4", 4, 1, "BIST Start", [
                ]),
                Field("BSTART3", 3, 1, "BIST Start", [
                ]),
                Field("BSTART2", 2, 1, "BIST Start", [
                ]),
                Field("BSTART1", 1, 1, "BIST Start", [
                ]),
                Field("BSTART0", 0, 1, "BIST Start", [
                ]),
            ]),
            Register("MB_CTRL0", 0x403A2214, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL1", 0x403A2218, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL2", 0x403A221C, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL3", 0x403A2220, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL4", 0x403A2224, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL5", 0x403A2228, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL6", 0x403A222C, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL7", 0x403A2230, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL8", 0x403A2234, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL9", 0x403A2238, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL10", 0x403A223C, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
            Register("MB_CTRL11", 0x403A2240, 32, "STCU2 MBIST Control", [
                Field("CSM", 31, 1, "CSM", [
                    EnumVal("SEQUENTIAL", "0", "Sequential mode"),
                    EnumVal("CONCURRENT", "0x1", "Concurrent mode"),
                ]),
                Field("PTR", 21, 10, "PTR", [
                ]),
                Field("BSEL", 20, 1, "BSEL", [
                    EnumVal("NOT_SELECTED", "0", "Selected BIST is not selected for execution."),
                    EnumVal("SELECTED", "0x1", "Selected BIST is selected for execution."),
                ]),
            ]),
        ])

class Module_STM_0(Peripheral):
    def __init__(self):
        super().__init__("STM_0", 0x40274000, 0x4C, [
            Register("CR", 0x40274000, 32, "Control", [
                Field("CPS", 8, 8, "Counter Prescaler", [
                ]),
                Field("FRZ", 1, 1, "Freeze", [
                    EnumVal("runs", "0", "Timer runs in Debug mode"),
                    EnumVal("stop", "0x1", "Timer stops in Debug mode"),
                ]),
                Field("TEN", 0, 1, "Timer Enable", [
                    EnumVal("disabled", "0", "Disabled"),
                    EnumVal("enabled", "0x1", "Enabled"),
                ]),
            ]),
            Register("CNT", 0x40274004, 32, "Count", [
                Field("CNT", 0, 32, "Timer Count", [
                ]),
            ]),
        ])

class Module_SWT_0(Peripheral):
    def __init__(self):
        super().__init__("SWT_0", 0x40270000, 0x20, [
            Register("CR", 0x40270000, 32, "Control", [
                Field("MAP0", 31, 1, "Master Access Protection 0", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("MAP1", 30, 1, "Master Access Protection 1", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("MAP2", 29, 1, "Master Access Protection 2", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("MAP3", 28, 1, "Master Access Protection 3", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("MAP4", 27, 1, "Master Access Protection 4", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("MAP5", 26, 1, "Master Access Protection 5", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("MAP6", 25, 1, "Master Access Protection 6", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("MAP7", 24, 1, "Master Access Protection 7", [
                    EnumVal("disabled", "0", "Access disabled"),
                    EnumVal("enabled", "0x1", "Access enabled"),
                ]),
                Field("SMD", 9, 2, "Service Mode", [
                    EnumVal("fixed_service", "0", "Fixed Service Sequence"),
                    EnumVal("keyed_service", "0x1", "Keyed Service Sequence"),
                ]),
                Field("RIA", 8, 1, "Reset on Invalid Access", [
                    EnumVal("bus_error", "0", "Generate a bus error"),
                    EnumVal("reset_req", "0x1", "Generate a bus error and reset request"),
                ]),
                Field("WND", 7, 1, "Window Mode", [
                    EnumVal("regular", "0", "Regular mode"),
                    EnumVal("windowed", "0x1", "Window mode"),
                ]),
                Field("ITR", 6, 1, "Interrupt Then Reset Request", [
                    EnumVal("reset_req", "0", "Generate a reset request on a timeout"),
                    EnumVal("interrupt", "0x1", "Generate an interrupt on an initial timeout; generate a reset request on a second consecutive timeout"),
                ]),
                Field("HLK", 5, 1, "Hard Lock", [
                    EnumVal("rw", "0", "CR, TO, WN, and SK are read/write registers if SLK is also 0"),
                    EnumVal("ro", "0x1", "CR, TO, WN, and SK are read-only registers"),
                ]),
                Field("SLK", 4, 1, "Soft Lock", [
                    EnumVal("rw", "0", "CR, TO, WN, and SK are read/write registers if HLK is also 0"),
                    EnumVal("ro", "0x1", "CR, TO, WN, and SK are read-only registers"),
                ]),
                Field("STP", 2, 1, "Stop Mode Control", [
                    EnumVal("continues", "0", "Timer continues"),
                    EnumVal("stopped", "0x1", "Timer stops"),
                ]),
                Field("FRZ", 1, 1, "Debug Mode Control", [
                    EnumVal("continues", "0", "Timer continues"),
                    EnumVal("stopped", "0x1", "Timer stops"),
                ]),
                Field("WEN", 0, 1, "Watchdog Enable", [
                    EnumVal("disabled", "0", "Disabled"),
                    EnumVal("enabled", "0x1", "Enabled"),
                ]),
            ]),
            Register("IR", 0x40270004, 32, "Interrupt", [
                Field("TIF", 0, 1, "Timeout Interrupt Flag", [
                    EnumVal("no_irq", "0", "No interrupt request"),
                    EnumVal("irq", "0x1", "Interrupt request due to an initial timeout"),
                ]),
            ]),
            Register("TO", 0x40270008, 32, "Timeout", [
                Field("WTO", 0, 32, "Watchdog Timeout", [
                ]),
            ]),
            Register("WN", 0x4027000C, 32, "Window", [
                Field("WST", 0, 32, "Window Start Value", [
                ]),
            ]),
            Register("SR", 0x40270010, 32, "Service", [
                Field("WSC", 0, 16, "Watchdog Service Code", [
                ]),
            ]),
            Register("CO", 0x40270014, 32, "Counter Output", [
                Field("CNT", 0, 32, "Watchdog Count", [
                ]),
            ]),
            Register("SK", 0x40270018, 32, "Service Key", [
                Field("SK", 0, 16, "Service Key", [
                ]),
            ]),
            Register("RRR", 0x4027001C, 32, "Event Request", [
                Field("RRF", 0, 1, "Reset Request Flag", [
                    EnumVal("no", "0", "No reset request"),
                    EnumVal("any", "0x1", "Any reset request initiated"),
                ]),
            ]),
        ])

class Module_TCD(Peripheral):
    def __init__(self):
        super().__init__("TCD", 0x40210000, 0x2C040, [
            Register("CH0_CSR", 0x40210000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH0_ES", 0x40210004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH0_INT", 0x40210008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH0_SBR", 0x4021000C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH0_PRI", 0x40210010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD0_SADDR", 0x40210020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD0_SOFF", 0x40210024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD0_ATTR", 0x40210026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD0_NBYTES_MLOFFNO", 0x40210028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD0_NBYTES_MLOFFYES", 0x40210028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD0_SLAST_SDA", 0x4021002C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD0_DADDR", 0x40210030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD0_DOFF", 0x40210034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD0_CITER_ELINKNO", 0x40210036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD0_CITER_ELINKYES", 0x40210036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD0_DLAST_SGA", 0x40210038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD0_CSR", 0x4021003C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD0_BITER_ELINKNO", 0x4021003E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD0_BITER_ELINKYES", 0x4021003E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH1_CSR", 0x40214000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH1_ES", 0x40214004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH1_INT", 0x40214008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH1_SBR", 0x4021400C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH1_PRI", 0x40214010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD1_SADDR", 0x40214020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD1_SOFF", 0x40214024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD1_ATTR", 0x40214026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD1_NBYTES_MLOFFNO", 0x40214028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD1_NBYTES_MLOFFYES", 0x40214028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD1_SLAST_SDA", 0x4021402C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD1_DADDR", 0x40214030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD1_DOFF", 0x40214034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD1_CITER_ELINKNO", 0x40214036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD1_CITER_ELINKYES", 0x40214036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD1_DLAST_SGA", 0x40214038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD1_CSR", 0x4021403C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD1_BITER_ELINKNO", 0x4021403E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD1_BITER_ELINKYES", 0x4021403E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH2_CSR", 0x40218000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH2_ES", 0x40218004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH2_INT", 0x40218008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH2_SBR", 0x4021800C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH2_PRI", 0x40218010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD2_SADDR", 0x40218020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD2_SOFF", 0x40218024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD2_ATTR", 0x40218026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD2_NBYTES_MLOFFNO", 0x40218028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD2_NBYTES_MLOFFYES", 0x40218028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD2_SLAST_SDA", 0x4021802C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD2_DADDR", 0x40218030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD2_DOFF", 0x40218034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD2_CITER_ELINKNO", 0x40218036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD2_CITER_ELINKYES", 0x40218036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD2_DLAST_SGA", 0x40218038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD2_CSR", 0x4021803C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD2_BITER_ELINKNO", 0x4021803E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD2_BITER_ELINKYES", 0x4021803E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH3_CSR", 0x4021C000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH3_ES", 0x4021C004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH3_INT", 0x4021C008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH3_SBR", 0x4021C00C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH3_PRI", 0x4021C010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD3_SADDR", 0x4021C020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD3_SOFF", 0x4021C024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD3_ATTR", 0x4021C026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD3_NBYTES_MLOFFNO", 0x4021C028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD3_NBYTES_MLOFFYES", 0x4021C028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD3_SLAST_SDA", 0x4021C02C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD3_DADDR", 0x4021C030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD3_DOFF", 0x4021C034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD3_CITER_ELINKNO", 0x4021C036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD3_CITER_ELINKYES", 0x4021C036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD3_DLAST_SGA", 0x4021C038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD3_CSR", 0x4021C03C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD3_BITER_ELINKNO", 0x4021C03E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD3_BITER_ELINKYES", 0x4021C03E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH4_CSR", 0x40220000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH4_ES", 0x40220004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH4_INT", 0x40220008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH4_SBR", 0x4022000C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH4_PRI", 0x40220010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD4_SADDR", 0x40220020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD4_SOFF", 0x40220024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD4_ATTR", 0x40220026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD4_NBYTES_MLOFFNO", 0x40220028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD4_NBYTES_MLOFFYES", 0x40220028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD4_SLAST_SDA", 0x4022002C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD4_DADDR", 0x40220030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD4_DOFF", 0x40220034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD4_CITER_ELINKNO", 0x40220036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD4_CITER_ELINKYES", 0x40220036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD4_DLAST_SGA", 0x40220038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD4_CSR", 0x4022003C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD4_BITER_ELINKNO", 0x4022003E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD4_BITER_ELINKYES", 0x4022003E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH5_CSR", 0x40224000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH5_ES", 0x40224004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH5_INT", 0x40224008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH5_SBR", 0x4022400C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH5_PRI", 0x40224010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD5_SADDR", 0x40224020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD5_SOFF", 0x40224024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD5_ATTR", 0x40224026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD5_NBYTES_MLOFFNO", 0x40224028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD5_NBYTES_MLOFFYES", 0x40224028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD5_SLAST_SDA", 0x4022402C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD5_DADDR", 0x40224030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD5_DOFF", 0x40224034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD5_CITER_ELINKNO", 0x40224036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD5_CITER_ELINKYES", 0x40224036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD5_DLAST_SGA", 0x40224038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD5_CSR", 0x4022403C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD5_BITER_ELINKNO", 0x4022403E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD5_BITER_ELINKYES", 0x4022403E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH6_CSR", 0x40228000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH6_ES", 0x40228004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH6_INT", 0x40228008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH6_SBR", 0x4022800C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH6_PRI", 0x40228010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD6_SADDR", 0x40228020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD6_SOFF", 0x40228024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD6_ATTR", 0x40228026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD6_NBYTES_MLOFFNO", 0x40228028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD6_NBYTES_MLOFFYES", 0x40228028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD6_SLAST_SDA", 0x4022802C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD6_DADDR", 0x40228030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD6_DOFF", 0x40228034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD6_CITER_ELINKNO", 0x40228036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD6_CITER_ELINKYES", 0x40228036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD6_DLAST_SGA", 0x40228038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD6_CSR", 0x4022803C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD6_BITER_ELINKNO", 0x4022803E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD6_BITER_ELINKYES", 0x4022803E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH7_CSR", 0x4022C000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH7_ES", 0x4022C004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH7_INT", 0x4022C008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH7_SBR", 0x4022C00C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH7_PRI", 0x4022C010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD7_SADDR", 0x4022C020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD7_SOFF", 0x4022C024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD7_ATTR", 0x4022C026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD7_NBYTES_MLOFFNO", 0x4022C028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD7_NBYTES_MLOFFYES", 0x4022C028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD7_SLAST_SDA", 0x4022C02C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD7_DADDR", 0x4022C030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD7_DOFF", 0x4022C034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD7_CITER_ELINKNO", 0x4022C036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD7_CITER_ELINKYES", 0x4022C036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD7_DLAST_SGA", 0x4022C038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD7_CSR", 0x4022C03C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD7_BITER_ELINKNO", 0x4022C03E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD7_BITER_ELINKYES", 0x4022C03E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH8_CSR", 0x40230000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH8_ES", 0x40230004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH8_INT", 0x40230008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH8_SBR", 0x4023000C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH8_PRI", 0x40230010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD8_SADDR", 0x40230020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD8_SOFF", 0x40230024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD8_ATTR", 0x40230026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD8_NBYTES_MLOFFNO", 0x40230028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD8_NBYTES_MLOFFYES", 0x40230028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD8_SLAST_SDA", 0x4023002C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD8_DADDR", 0x40230030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD8_DOFF", 0x40230034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD8_CITER_ELINKNO", 0x40230036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD8_CITER_ELINKYES", 0x40230036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD8_DLAST_SGA", 0x40230038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD8_CSR", 0x4023003C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD8_BITER_ELINKNO", 0x4023003E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD8_BITER_ELINKYES", 0x4023003E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH9_CSR", 0x40234000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH9_ES", 0x40234004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH9_INT", 0x40234008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH9_SBR", 0x4023400C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH9_PRI", 0x40234010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD9_SADDR", 0x40234020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD9_SOFF", 0x40234024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD9_ATTR", 0x40234026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD9_NBYTES_MLOFFNO", 0x40234028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD9_NBYTES_MLOFFYES", 0x40234028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD9_SLAST_SDA", 0x4023402C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD9_DADDR", 0x40234030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD9_DOFF", 0x40234034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD9_CITER_ELINKNO", 0x40234036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD9_CITER_ELINKYES", 0x40234036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD9_DLAST_SGA", 0x40234038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD9_CSR", 0x4023403C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD9_BITER_ELINKNO", 0x4023403E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD9_BITER_ELINKYES", 0x4023403E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH10_CSR", 0x40238000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH10_ES", 0x40238004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH10_INT", 0x40238008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH10_SBR", 0x4023800C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH10_PRI", 0x40238010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD10_SADDR", 0x40238020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD10_SOFF", 0x40238024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD10_ATTR", 0x40238026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD10_NBYTES_MLOFFNO", 0x40238028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD10_NBYTES_MLOFFYES", 0x40238028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD10_SLAST_SDA", 0x4023802C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD10_DADDR", 0x40238030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD10_DOFF", 0x40238034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD10_CITER_ELINKNO", 0x40238036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD10_CITER_ELINKYES", 0x40238036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD10_DLAST_SGA", 0x40238038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD10_CSR", 0x4023803C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD10_BITER_ELINKNO", 0x4023803E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD10_BITER_ELINKYES", 0x4023803E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("CH11_CSR", 0x4023C000, 32, "Channel Control and Status", [
                Field("ACTIVE", 31, 1, "Channel Active", [
                ]),
                Field("DONE", 30, 1, "Channel Done", [
                ]),
                Field("EBW", 3, 1, "Enable Buffered Writes", [
                    EnumVal("EBW_0", "0", "Buffered writes on system bus disabled"),
                    EnumVal("EBW_1", "0x1", "Buffered writes on system bus enabled"),
                ]),
                Field("EEI", 2, 1, "Enable Error Interrupt", [
                    EnumVal("EEI_0", "0", "Error signal for corresponding channel does not generate error interrupt"),
                    EnumVal("EEI_1", "0x1", "Assertion of error signal for corresponding channel generates error interrupt request"),
                ]),
                Field("EARQ", 1, 1, "Enable Asynchronous DMA Request In Stop Mode For Channel", [
                    EnumVal("EARQ_0", "0", "Disable asynchronous DMA request for the channel"),
                    EnumVal("EARQ_1", "0x1", "Enable asynchronous DMA request for the channel"),
                ]),
                Field("ERQ", 0, 1, "Enable DMA Request", [
                    EnumVal("ERQ_0", "0", "DMA hardware request signal for corresponding channel disabled"),
                    EnumVal("ERQ_1", "0x1", "DMA hardware request signal for corresponding channel enabled"),
                ]),
            ]),
            Register("CH11_ES", 0x4023C004, 32, "Channel Error Status", [
                Field("ERR", 31, 1, "Error In Channel", [
                    EnumVal("ERR_0", "0", "An error in this channel has not occurred"),
                    EnumVal("ERR_1", "0x1", "An error in this channel has occurred"),
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("SAE_0", "0", "No source address configuration error"),
                    EnumVal("SAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SADDR field"),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("SOE_0", "0", "No source offset configuration error"),
                    EnumVal("SOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_SOFF field"),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("DAE_0", "0", "No destination address configuration error"),
                    EnumVal("DAE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DADDR field"),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("DOE_0", "0", "No destination offset configuration error"),
                    EnumVal("DOE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DOFF field"),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NCE_0", "0", "No NBYTES/CITER configuration error"),
                    EnumVal("NCE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields"),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("SGE_0", "0", "No scatter/gather configuration error"),
                    EnumVal("SGE_1", "0x1", "Last recorded error was a configuration error detected in the TCDn_DLAST_SGA field"),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("SBE_0", "0", "No source bus error"),
                    EnumVal("SBE_1", "0x1", "Last recorded error was bus error on source read"),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("DBE_0", "0", "No destination bus error"),
                    EnumVal("DBE_1", "0x1", "Last recorded error was bus error on destination write"),
                ]),
            ]),
            Register("CH11_INT", 0x4023C008, 32, "Channel Interrupt Status", [
                Field("INT", 0, 1, "Interrupt Request", [
                    EnumVal("INT_0", "0", "Interrupt request for corresponding channel cleared"),
                    EnumVal("INT_1", "0x1", "Interrupt request for corresponding channel active"),
                ]),
            ]),
            Register("CH11_SBR", 0x4023C00C, 32, "Channel System Bus", [
                Field("ATTR", 17, 3, "Attribute Output", [
                ]),
                Field("EMI", 16, 1, "Enable Master ID Replication", [
                    EnumVal("EMI_0", "0", "Master ID replication is disabled"),
                    EnumVal("EMI_1", "0x1", "Master ID replication is enabled"),
                ]),
                Field("PAL", 15, 1, "Privileged Access Level", [
                    EnumVal("PAL_0", "0", "User protection level for DMA transfers"),
                    EnumVal("PAL_1", "0x1", "Privileged protection level for DMA transfers"),
                ]),
                Field("MID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("CH11_PRI", 0x4023C010, 32, "Channel Priority", [
                Field("ECP", 31, 1, "Enable Channel Preemption", [
                    EnumVal("ECP_0", "0", "Channel cannot be suspended by a higher-priority channel's service request"),
                    EnumVal("ECP_1", "0x1", "Channel can be temporarily suspended by a higher-priority channel's service request"),
                ]),
                Field("DPA", 30, 1, "Disable Preempt Ability", [
                    EnumVal("DPA_0", "0", "Channel can suspend a lower-priority channel"),
                    EnumVal("DPA_1", "0x1", "Channel cannot suspend any other channel, regardless of channel priority"),
                ]),
                Field("APL", 0, 3, "Arbitration Priority Level", [
                ]),
            ]),
            Register("TCD11_SADDR", 0x4023C020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD11_SOFF", 0x4023C024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source Address Signed Offset", [
                ]),
            ]),
            Register("TCD11_ATTR", 0x4023C026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("SMOD_0", "0", "Source address modulo feature disabled"),
                    EnumVal("SMOD_1", "0x1", "Source address modulo feature enabled for any non-zero value [1-31]"),
                ]),
                Field("SSIZE", 8, 3, "Source Data Transfer Size", [
                    EnumVal("SSIZE_0", "0", "8-bit"),
                    EnumVal("SSIZE_1", "0x1", "16-bit"),
                    EnumVal("SSIZE_2", "0x2", "32-bit"),
                    EnumVal("SSIZE_3", "0x3", "64-bit"),
                    EnumVal("SSIZE_4", "0x4", "16-byte"),
                    EnumVal("SSIZE_5", "0x5", "32-byte"),
                    EnumVal("SSIZE_6", "0x6", "64-byte"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination Data Transfer Size", [
                ]),
            ]),
            Register("TCD11_NBYTES_MLOFFNO", 0x4023C028, 32, "TCD Transfer Size Without Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD11_NBYTES_MLOFFYES", 0x4023C028, 32, "TCD Transfer Size with Minor Loop Offsets", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("SMLOE_0", "0", "Minor loop offset not applied to SADDR"),
                    EnumVal("SMLOE_1", "0x1", "Minor loop offset applied to SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DMLOE_0", "0", "Minor loop offset not applied to DADDR"),
                    EnumVal("DMLOE_1", "0x1", "Minor loop offset applied to DADDR"),
                ]),
                Field("MLOFF", 10, 20, "Minor Loop Offset", [
                ]),
                Field("NBYTES", 0, 10, "Number of Bytes To Transfer Per Service Request", [
                ]),
            ]),
            Register("TCD11_SLAST_SDA", 0x4023C02C, 32, "TCD Last Source Address Adjustment / Store DADDR Address", [
                Field("SLAST_SDA", 0, 32, "Last Source Address Adjustment / Store DADDR Address", [
                ]),
            ]),
            Register("TCD11_DADDR", 0x4023C030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD11_DOFF", 0x4023C034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD11_CITER_ELINKNO", 0x4023C036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD11_CITER_ELINKYES", 0x4023C036, 16, "TCD Current Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD11_DLAST_SGA", 0x4023C038, 32, "TCD Last Destination Address Adjustment / Scatter Gather Address", [
                Field("DLAST_SGA", 0, 32, "Last Destination Address Adjustment / Scatter Gather Address", [
                ]),
            ]),
            Register("TCD11_CSR", 0x4023C03C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("BWC_0", "0", "No eDMA engine stalls"),
                    EnumVal("BWC_1", "0x1", "Enable eDMA master high-priority elevation (HPE) mode. No eDMA engine stalls."),
                    EnumVal("BWC_2", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("BWC_3", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("ESDA", 7, 1, "Enable Store Destination Address", [
                    EnumVal("ESDA_0", "0", "Ability to store destination address to system memory disabled"),
                    EnumVal("ESDA_1", "0x1", "Ability to store destination address to system memory enabled"),
                ]),
                Field("MAJORELINK", 5, 1, "Enable Link When Major Loop Complete", [
                    EnumVal("MAJORELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("MAJORELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("ESG_0", "0", "Current channel's TCD is normal format"),
                    EnumVal("ESG_1", "0x1", "Current channel's TCD specifies scatter/gather format."),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("DREQ_0", "0", "No operation"),
                    EnumVal("DREQ_1", "0x1", "Clear the ERQ field to 0 upon major loop completion, thus disabling hardware service requests"),
                ]),
                Field("INTHALF", 2, 1, "Enable Interrupt If Major Counter Half-complete", [
                    EnumVal("INTHALF_0", "0", "Halfway point interrupt disabled"),
                    EnumVal("INTHALF_1", "0x1", "Halfway point interrupt enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable Interrupt If Major count complete", [
                    EnumVal("INTMAJOR_0", "0", "End-of-major loop interrupt disabled"),
                    EnumVal("INTMAJOR_1", "0x1", "End-of-major loop interrupt enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("START_0", "0", "Channel not explicitly started"),
                    EnumVal("START_1", "0x1", "Channel explicitly started via a software-initiated service request"),
                ]),
            ]),
            Register("TCD11_BITER_ELINKNO", 0x4023C03E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD11_BITER_ELINKYES", 0x4023C03E, 16, "TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable Link", [
                    EnumVal("ELINK_0", "0", "Channel-to-channel linking disabled"),
                    EnumVal("ELINK_1", "0x1", "Channel-to-channel linking enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting Major Iteration Count", [
                ]),
            ]),
        ])

class Module_TEMPSENSE(Peripheral):
    def __init__(self):
        super().__init__("TEMPSENSE", 0x4037C000, 0xFFFF, [
            Register("ETSCTL", 0x4037C000, 32, "ETS Control", [
                Field("GNDSEL", 1, 1, "Ground selection", [
                    EnumVal("GNDSEL_0", "0", "No exposure of the ground"),
                    EnumVal("GNDSEL_1", "0x1", "Expose ground on the ADC output if ETS_EN=1"),
                ]),
                Field("ETS_EN", 0, 1, "Temperature Sensor enable", [
                    EnumVal("ETS_EN_0", "0", "Power down"),
                    EnumVal("ETS_EN_1", "0x1", "Functional mode"),
                ]),
            ]),
            Register("TCA0", 0x4037C008, 32, "Temperature Coefficient", [
                Field("TCA0", 0, 16, "Temperature coefficient A0", [
                ]),
            ]),
            Register("TCA1", 0x4037C00C, 32, "Temperature Coefficient", [
                Field("TCA1", 0, 16, "Temperature coefficient A1", [
                ]),
            ]),
            Register("TCA2", 0x4037C010, 32, "Temperature Coefficient", [
                Field("TCA2", 0, 16, "Temperature coefficient A2", [
                ]),
            ]),
        ])

class Module_TRGMUX(Peripheral):
    def __init__(self):
        super().__init__("TRGMUX", 0x40080000, 0xA0, [
            Register("ADC12_0", 0x40080000, 32, "TRGMUX ADC12_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("ADC12_1", 0x40080004, 32, "TRGMUX ADC12_1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPCMP_0", 0x4008000C, 32, "TRGMUX LPCMP_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("BCTU", 0x40080018, 32, "TRGMUX BCTU Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS012_odis", 0x4008001C, 32, "TRGMUX eMIOS012_odis Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS0_0", 0x40080020, 32, "TRGMUX eMIOS0_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS0_1", 0x40080024, 32, "TRGMUX eMIOS0_1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS0_2", 0x40080028, 32, "TRGMUX eMIOS0_2 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS0_3", 0x4008002C, 32, "TRGMUX eMIOS0_3 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS1_0", 0x40080030, 32, "TRGMUX eMIOS1_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS1_1", 0x40080034, 32, "TRGMUX eMIOS1_1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS1_2", 0x40080038, 32, "TRGMUX eMIOS1_2 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("eMIOS1_3", 0x4008003C, 32, "TRGMUX eMIOS1_3 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("FlexIO", 0x40080040, 32, "TRGMUX FlexIO Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("SIUL_OUT0", 0x40080044, 32, "TRGMUX SIUL_OUT0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("SIUL_OUT1", 0x40080048, 32, "TRGMUX SIUL_OUT1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPI2C_0", 0x40080054, 32, "TRGMUX LPI2C_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPSPI_0", 0x40080058, 32, "TRGMUX LPSPI_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPSPI_1", 0x4008005C, 32, "TRGMUX LPSPI_1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPSPI_2", 0x40080060, 32, "TRGMUX LPSPI_2 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPUART_0", 0x40080064, 32, "TRGMUX LPUART_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPUART_1", 0x40080068, 32, "TRGMUX LPUART_1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPUART_2", 0x4008006C, 32, "TRGMUX LPUART_2 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LPUART_3", 0x40080070, 32, "TRGMUX LPUART_3 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU0_SYNC", 0x40080074, 32, "TRGMUX LCU0_SYNC Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU0_FORCE", 0x40080078, 32, "TRGMUX LCU0_FORCE Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU0_0", 0x4008007C, 32, "TRGMUX LCU0_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU0_1", 0x40080080, 32, "TRGMUX LCU0_1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU0_2", 0x40080084, 32, "TRGMUX LCU0_2 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU1_SYNC", 0x40080088, 32, "TRGMUX LCU1_SYNC Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU1_FORCE", 0x4008008C, 32, "TRGMUX LCU1_FORCE Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU1_0", 0x40080090, 32, "TRGMUX LCU1_0 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU1_1", 0x40080094, 32, "TRGMUX LCU1_1 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("LCU1_2", 0x40080098, 32, "TRGMUX LCU1_2 Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "TRGMUX Source Select 3", [
                ]),
                Field("SEL2", 16, 7, "TRGMUX Source Select 2", [
                ]),
                Field("SEL1", 8, 7, "TRGMUX Source Select 1", [
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
            Register("CM7_RXEV", 0x4008009C, 32, "TRGMUX CM7_RXEV Register", [
                Field("LK", 31, 1, "TRGMUX Register Lock", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "TRGMUX Source Select 1", [
                ]),
            ]),
        ])

class Module_TSPC(Peripheral):
    def __init__(self):
        super().__init__("TSPC", 0x402C4000, 0xA8, [
            Register("GRP_EN", 0x402C4000, 32, "Group Enable", [
                Field("GRP2_EN", 1, 1, "Enable for GRP2_OBEn Register", [
                    EnumVal("GRP2_value0", "0", "Disable"),
                    EnumVal("GRP2_value1", "0x1", "Enable"),
                ]),
                Field("GRP1_EN", 0, 1, "Enable for GRP1_OBEn Register", [
                    EnumVal("GRP1_value0", "0", "Disable"),
                    EnumVal("GRP1_value1", "0x1", "Enable"),
                ]),
            ]),
            Register("GRP1_OBE1", 0x402C4050, 32, "Group OBE", [
                Field("OBE31", 31, 1, "Output Buffer Enable", [
                    EnumVal("OBE31_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE31_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE30", 30, 1, "Output Buffer Enable", [
                    EnumVal("OBE30_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE30_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE29", 29, 1, "Output Buffer Enable", [
                    EnumVal("OBE29_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE29_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE28", 28, 1, "Output Buffer Enable", [
                    EnumVal("OBE28_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE28_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE27", 27, 1, "Output Buffer Enable", [
                    EnumVal("OBE27_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE27_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE26", 26, 1, "Output Buffer Enable", [
                    EnumVal("OBE26_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE26_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE25", 25, 1, "Output Buffer Enable", [
                    EnumVal("OBE25_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE25_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE24", 24, 1, "Output Buffer Enable", [
                    EnumVal("OBE24_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE24_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE23", 23, 1, "Output Buffer Enable", [
                    EnumVal("OBE23_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE23_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE22", 22, 1, "Output Buffer Enable", [
                    EnumVal("OBE22_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE22_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE21", 21, 1, "Output Buffer Enable", [
                    EnumVal("OBE21_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE21_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE20", 20, 1, "Output Buffer Enable", [
                    EnumVal("OBE20_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE20_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE19", 19, 1, "Output Buffer Enable", [
                    EnumVal("OBE19_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE19_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE18", 18, 1, "Output Buffer Enable", [
                    EnumVal("OBE18_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE18_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE17", 17, 1, "Output Buffer Enable", [
                    EnumVal("OBE17_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE17_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE16", 16, 1, "Output Buffer Enable", [
                    EnumVal("OBE16_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE16_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE15", 15, 1, "Output Buffer Enable", [
                    EnumVal("OBE15_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE15_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE14", 14, 1, "Output Buffer Enable", [
                    EnumVal("OBE14_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE14_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE13", 13, 1, "Output Buffer Enable", [
                    EnumVal("OBE13_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE13_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE12", 12, 1, "Output Buffer Enable", [
                    EnumVal("OBE12_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE12_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE11", 11, 1, "Output Buffer Enable", [
                    EnumVal("OBE11_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE11_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE10", 10, 1, "Output Buffer Enable", [
                    EnumVal("OBE10_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE10_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE9", 9, 1, "Output Buffer Enable", [
                    EnumVal("OBE9_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE9_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE8", 8, 1, "Output Buffer Enable", [
                    EnumVal("OBE8_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE8_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE7", 7, 1, "Output Buffer Enable", [
                    EnumVal("OBE7_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE7_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE6", 6, 1, "Output Buffer Enable", [
                    EnumVal("OBE6_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE6_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE5", 5, 1, "Output Buffer Enable", [
                    EnumVal("OBE5_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE5_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE4", 4, 1, "Output Buffer Enable", [
                    EnumVal("OBE4_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE4_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE3", 3, 1, "Output Buffer Enable", [
                    EnumVal("OBE3_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE3_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE2", 2, 1, "Output Buffer Enable", [
                    EnumVal("OBE2_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE2_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE1", 1, 1, "Output Buffer Enable", [
                    EnumVal("OBE1_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE1_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE0", 0, 1, "Output Buffer Enable", [
                    EnumVal("OBE0_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE0_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
            ]),
            Register("GRP1_OBE2", 0x402C4054, 32, "Group OBE", [
                Field("OBE45", 13, 1, "Output Buffer Enable", [
                    EnumVal("OBE45_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE45_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE44", 12, 1, "Output Buffer Enable", [
                    EnumVal("OBE44_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE44_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE43", 11, 1, "Output Buffer Enable", [
                    EnumVal("OBE43_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE43_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE42", 10, 1, "Output Buffer Enable", [
                    EnumVal("OBE42_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE42_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE41", 9, 1, "Output Buffer Enable", [
                    EnumVal("OBE41_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE41_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE40", 8, 1, "Output Buffer Enable", [
                    EnumVal("OBE40_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE40_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE39", 7, 1, "Output Buffer Enable", [
                    EnumVal("OBE39_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE39_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE38", 6, 1, "Output Buffer Enable", [
                    EnumVal("OBE38_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE38_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE37", 5, 1, "Output Buffer Enable", [
                    EnumVal("OBE37_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE37_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE36", 4, 1, "Output Buffer Enable", [
                    EnumVal("OBE36_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE36_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE35", 3, 1, "Output Buffer Enable", [
                    EnumVal("OBE35_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE35_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE34", 2, 1, "Output Buffer Enable", [
                    EnumVal("OBE34_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE34_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE33", 1, 1, "Output Buffer Enable", [
                    EnumVal("OBE33_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE33_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE32", 0, 1, "Output Buffer Enable", [
                    EnumVal("OBE32_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE32_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
            ]),
            Register("GRP2_OBE1", 0x402C40A0, 32, "Group OBE", [
                Field("OBE31", 31, 1, "Output Buffer Enable", [
                    EnumVal("OBE31_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE31_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE30", 30, 1, "Output Buffer Enable", [
                    EnumVal("OBE30_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE30_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE29", 29, 1, "Output Buffer Enable", [
                    EnumVal("OBE29_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE29_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE28", 28, 1, "Output Buffer Enable", [
                    EnumVal("OBE28_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE28_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE27", 27, 1, "Output Buffer Enable", [
                    EnumVal("OBE27_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE27_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE26", 26, 1, "Output Buffer Enable", [
                    EnumVal("OBE26_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE26_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE25", 25, 1, "Output Buffer Enable", [
                    EnumVal("OBE25_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE25_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE24", 24, 1, "Output Buffer Enable", [
                    EnumVal("OBE24_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE24_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE23", 23, 1, "Output Buffer Enable", [
                    EnumVal("OBE23_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE23_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE22", 22, 1, "Output Buffer Enable", [
                    EnumVal("OBE22_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE22_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE21", 21, 1, "Output Buffer Enable", [
                    EnumVal("OBE21_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE21_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE20", 20, 1, "Output Buffer Enable", [
                    EnumVal("OBE20_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE20_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE19", 19, 1, "Output Buffer Enable", [
                    EnumVal("OBE19_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE19_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE18", 18, 1, "Output Buffer Enable", [
                    EnumVal("OBE18_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE18_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE17", 17, 1, "Output Buffer Enable", [
                    EnumVal("OBE17_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE17_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE16", 16, 1, "Output Buffer Enable", [
                    EnumVal("OBE16_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE16_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE15", 15, 1, "Output Buffer Enable", [
                    EnumVal("OBE15_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE15_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE14", 14, 1, "Output Buffer Enable", [
                    EnumVal("OBE14_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE14_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE13", 13, 1, "Output Buffer Enable", [
                    EnumVal("OBE13_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE13_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE12", 12, 1, "Output Buffer Enable", [
                    EnumVal("OBE12_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE12_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE11", 11, 1, "Output Buffer Enable", [
                    EnumVal("OBE11_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE11_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE10", 10, 1, "Output Buffer Enable", [
                    EnumVal("OBE10_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE10_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE9", 9, 1, "Output Buffer Enable", [
                    EnumVal("OBE9_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE9_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE8", 8, 1, "Output Buffer Enable", [
                    EnumVal("OBE8_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE8_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE7", 7, 1, "Output Buffer Enable", [
                    EnumVal("OBE7_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE7_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE6", 6, 1, "Output Buffer Enable", [
                    EnumVal("OBE6_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE6_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE5", 5, 1, "Output Buffer Enable", [
                    EnumVal("OBE5_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE5_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE4", 4, 1, "Output Buffer Enable", [
                    EnumVal("OBE4_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE4_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE3", 3, 1, "Output Buffer Enable", [
                    EnumVal("OBE3_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE3_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE2", 2, 1, "Output Buffer Enable", [
                    EnumVal("OBE2_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE2_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE1", 1, 1, "Output Buffer Enable", [
                    EnumVal("OBE1_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE1_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE0", 0, 1, "Output Buffer Enable", [
                    EnumVal("OBE0_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE0_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
            ]),
            Register("GRP2_OBE2", 0x402C40A4, 32, "Group OBE", [
                Field("OBE37", 5, 1, "Output Buffer Enable", [
                    EnumVal("OBE37_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE37_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE36", 4, 1, "Output Buffer Enable", [
                    EnumVal("OBE36_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE36_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE35", 3, 1, "Output Buffer Enable", [
                    EnumVal("OBE35_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE35_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE34", 2, 1, "Output Buffer Enable", [
                    EnumVal("OBE34_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE34_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE33", 1, 1, "Output Buffer Enable", [
                    EnumVal("OBE33_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE33_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
                Field("OBE32", 0, 1, "Output Buffer Enable", [
                    EnumVal("OBE32_value0", "0", "OBE pad does not transition if any OBE in group transitions from high to low. The OBE pad value is unaltered at the output."),
                    EnumVal("OBE32_value1", "0x1", "OBE pad transitions from high to low if any OBE in group transitions from high to low."),
                ]),
            ]),
        ])

class Module_VIRT_WRAPPER(Peripheral):
    def __init__(self):
        super().__init__("VIRT_WRAPPER", 0x402A8000, 0x104, [
            Register("REG_A0", 0x402A8000, 32, "Parameter_n Register", [
                Field("PAD_15", 30, 2, "PAD_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_14", 28, 2, "PAD_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_13", 26, 2, "PAD_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_12", 24, 2, "PAD_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_11", 22, 2, "PAD_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_10", 20, 2, "PAD_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_9", 18, 2, "PAD_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_8", 16, 2, "PAD_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_7", 14, 2, "PAD_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_6", 12, 2, "PAD_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_5", 10, 2, "PAD_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_4", 8, 2, "PAD_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_3", 6, 2, "PAD_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_2", 4, 2, "PAD_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A1", 0x402A8004, 32, "Parameter_n Register", [
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A2", 0x402A8008, 32, "Parameter_n Register", [
                Field("PAD_15", 30, 2, "PAD_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_14", 28, 2, "PAD_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_13", 26, 2, "PAD_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_12", 24, 2, "PAD_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_11", 22, 2, "PAD_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_10", 20, 2, "PAD_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_9", 18, 2, "PAD_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_8", 16, 2, "PAD_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_5", 10, 2, "PAD_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_4", 8, 2, "PAD_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_3", 6, 2, "PAD_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_2", 4, 2, "PAD_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A3", 0x402A800C, 32, "Parameter_n Register", [
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A4", 0x402A8010, 32, "Parameter_n Register", [
                Field("PAD_15", 30, 2, "PAD_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_14", 28, 2, "PAD_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_13", 26, 2, "PAD_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_12", 24, 2, "PAD_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_11", 22, 2, "PAD_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_10", 20, 2, "PAD_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_9", 18, 2, "PAD_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_8", 16, 2, "PAD_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_7", 14, 2, "PAD_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_6", 12, 2, "PAD_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_5", 10, 2, "PAD_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_4", 8, 2, "PAD_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_3", 6, 2, "PAD_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_2", 4, 2, "PAD_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A5", 0x402A8014, 32, "Parameter_n Register", [
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A6", 0x402A8018, 32, "Parameter_n Register", [
                Field("PAD_15", 30, 2, "PAD_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_14", 28, 2, "PAD_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_13", 26, 2, "PAD_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_12", 24, 2, "PAD_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_11", 22, 2, "PAD_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_10", 20, 2, "PAD_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_9", 18, 2, "PAD_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_8", 16, 2, "PAD_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_7", 14, 2, "PAD_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_6", 12, 2, "PAD_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_5", 10, 2, "PAD_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_4", 8, 2, "PAD_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_3", 6, 2, "PAD_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_2", 4, 2, "PAD_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A7", 0x402A801C, 32, "Parameter_n Register", [
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A8", 0x402A8020, 32, "Parameter_n Register", [
                Field("PAD_15", 30, 2, "PAD_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_13", 26, 2, "PAD_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_12", 24, 2, "PAD_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_11", 22, 2, "PAD_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_10", 20, 2, "PAD_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_9", 18, 2, "PAD_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_8", 16, 2, "PAD_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_7", 14, 2, "PAD_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_6", 12, 2, "PAD_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_3", 6, 2, "PAD_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_2", 4, 2, "PAD_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_1", 2, 2, "PAD_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_A9", 0x402A8024, 32, "Parameter_n Register", [
                Field("PAD_0", 0, 2, "PAD_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B0", 0x402A8080, 32, "Parameter_n Register", [
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B1", 0x402A8084, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B2", 0x402A8088, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B3", 0x402A808C, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B4", 0x402A8090, 32, "Parameter_n Register", [
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B5", 0x402A8094, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B6", 0x402A8098, 32, "Parameter_n Register", [
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B9", 0x402A80A4, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B10", 0x402A80A8, 32, "Parameter_n Register", [
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B11", 0x402A80AC, 32, "Parameter_n Register", [
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B13", 0x402A80B4, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B14", 0x402A80B8, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B15", 0x402A80BC, 32, "Parameter_n Register", [
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B21", 0x402A80D4, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B22", 0x402A80D8, 32, "Parameter_n Register", [
                Field("INMUX_14", 28, 2, "INMUX_14", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_13", 26, 2, "INMUX_13", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_12", 24, 2, "INMUX_12", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_11", 22, 2, "INMUX_11", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_2", 4, 2, "INMUX_2", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_1", 2, 2, "INMUX_1", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_0", 0, 2, "INMUX_0", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B23", 0x402A80DC, 32, "Parameter_n Register", [
                Field("INMUX_10", 20, 2, "INMUX_10", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_9", 18, 2, "INMUX_9", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_8", 16, 2, "INMUX_8", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_7", 14, 2, "INMUX_7", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_6", 12, 2, "INMUX_6", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_5", 10, 2, "INMUX_5", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_4", 8, 2, "INMUX_4", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
                Field("INMUX_3", 6, 2, "INMUX_3", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_B24", 0x402A80E0, 32, "Parameter_n Register", [
                Field("INMUX_15", 30, 2, "INMUX_15", [
                    EnumVal("PDAC1", "0", "SIUL2_VIRTWRAPPER_PDAC1"),
                    EnumVal("PDAC2", "0x1", "SIUL2_VIRTWRAPPER_PDAC2"),
                    EnumVal("PDAC0", "0x3", "SIUL2_VIRTWRAPPER_PDAC0"),
                ]),
            ]),
            Register("REG_C1039_1024", 0x402A8100, 32, "Parameter_n Register", [
                Field("INTC_CTRL", 0, 2, "Interrupt register control", [
                ]),
            ]),
        ])

class Module_WKPU(Peripheral):
    def __init__(self):
        super().__init__("WKPU", 0x402B4000, 0x74, [
            Register("NSR", 0x402B4000, 32, "NMI Status Flag Register", [
                Field("NIF0", 31, 1, "NMI Status Flag 0", [
                    EnumVal("NOEVENT", "0", "No event has occurred on the pad"),
                    EnumVal("EVENTOCCURED", "0x1", "An event as defined by NREE0 and NFEE0 has occurred"),
                ]),
                Field("NOVF0", 30, 1, "NMI Overrun Status Flag 0", [
                    EnumVal("NOOVERRUN", "0", "No overrun has occurred on NMI input 0"),
                    EnumVal("OVERRUN", "0x1", "An overrun has occurred on NMI input 0"),
                ]),
            ]),
            Register("NCR", 0x402B4008, 32, "NMI Configuration Register", [
                Field("NLOCK0", 31, 1, "NMI Configuration Lock Register 0", [
                ]),
                Field("NDSS0", 29, 2, "NMI Destination Source Select 0", [
                    EnumVal("NDSS0_0", "0", "Non-maskable interrupt"),
                ]),
                Field("NWRE0", 28, 1, "NMI Wakeup Request Enable 0", [
                    EnumVal("DISABLED", "0", "System wakeup requests from the corresponding NIF0 field are disabled"),
                    EnumVal("ENABLED", "0x1", "Causes a system wakeup request when NIF0 = 1 or NOVF0 = 1"),
                ]),
                Field("NREE0", 26, 1, "NMI Rising-Edge Events Enable 0", [
                    EnumVal("DISABLED", "0", "Rising-edge event is disabled"),
                    EnumVal("ENABLED", "0x1", "Rising-edge event is enabled"),
                ]),
                Field("NFEE0", 25, 1, "NMI Falling-edge Events Enable 0", [
                ]),
                Field("NFE0", 24, 1, "NMI Filter Enable 0", [
                    EnumVal("DISABLED", "0", "Filter is disabled"),
                    EnumVal("ENABLED", "0x1", "Filter is enabled"),
                ]),
            ]),
            Register("WISR", 0x402B4014, 32, "Wakeup/Interrupt Status Flag Register", [
                Field("EIF", 0, 32, "External Wakeup/Interrupt Status Flag x", [
                ]),
            ]),
            Register("IRER", 0x402B4018, 32, "Interrupt Request Enable Register", [
                Field("EIRE", 0, 32, "External Interrupt Request Enable x", [
                ]),
            ]),
            Register("WRER", 0x402B401C, 32, "Wakeup Request Enable Register", [
                Field("WRE", 0, 32, "External Wakeup Request Enable x", [
                ]),
            ]),
            Register("WIREER", 0x402B4028, 32, "Wakeup/Interrupt Rising-Edge Event Enable Register", [
                Field("IREE", 0, 32, "External Interrupt Rising-edge Events Enable x", [
                ]),
            ]),
            Register("WIFEER", 0x402B402C, 32, "Wakeup/Interrupt Falling-Edge Event Enable Register", [
                Field("IFEEx", 0, 32, "External Interrupt Falling-edge Events Enable x", [
                ]),
            ]),
            Register("WIFER", 0x402B4030, 32, "Wakeup/Interrupt Filter Enable Register", [
                Field("IFE", 0, 32, "External Interrupt Filter Enable x", [
                ]),
            ]),
            Register("WISR_64", 0x402B4054, 32, "Wakeup/Interrupt Status Flag Register", [
                Field("EIF_1", 0, 6, "External Wakeup/Interrupt Status Flag x", [
                ]),
            ]),
            Register("IRER_64", 0x402B4058, 32, "Interrupt Request Enable Register", [
                Field("EIRE_1", 0, 6, "External Interrupt Request Enable x", [
                ]),
            ]),
            Register("WRER_64", 0x402B405C, 32, "Wakeup Request Enable Register", [
                Field("WRE_1", 0, 6, "External Wakeup Request Enable x", [
                ]),
            ]),
            Register("WIREER_64", 0x402B4068, 32, "Wakeup/Interrupt Rising-Edge Event Enable Register", [
                Field("IREE_1", 0, 6, "External Interrupt Rising-edge Events Enable x", [
                ]),
            ]),
            Register("WIFEER_64", 0x402B406C, 32, "Wakeup/Interrupt Falling-Edge Event Enable Register", [
                Field("IFEEx_1", 0, 6, "External Interrupt Falling-edge Events Enable x", [
                ]),
            ]),
            Register("WIFER_64", 0x402B4070, 32, "Wakeup/Interrupt Filter Enable Register", [
                Field("IFE_1", 0, 6, "External Interrupt Filter Enable x", [
                ]),
            ]),
        ])

class Module_XBIC_AXBS(Peripheral):
    def __init__(self):
        super().__init__("XBIC_AXBS", 0x40204000, 0x10, [
            Register("MCR", 0x40204000, 32, "XBIC Module Control", [
                Field("SE0", 31, 1, "Slave port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 0"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 0"),
                ]),
                Field("SE1", 30, 1, "Slave port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 1"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 1"),
                ]),
                Field("SE2", 29, 1, "Slave port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 2"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 2"),
                ]),
                Field("SE3", 28, 1, "Slave port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 3"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 3"),
                ]),
                Field("SE4", 27, 1, "Slave port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 4"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 4"),
                ]),
                Field("SE5", 26, 1, "Slave port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 5"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 5"),
                ]),
                Field("SE6", 25, 1, "Slave port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 6"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 6"),
                ]),
                Field("SE7", 24, 1, "Slave Port EDC Error Detection Enable", [
                    EnumVal("DISABLED", "0", "Attribute integrity checking disabled for slave port 7"),
                    EnumVal("ENABLED", "0x1", "Attribute integrity checking enabled for slave port 7"),
                ]),
                Field("ME0", 23, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 0"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 0"),
                ]),
                Field("ME1", 22, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 1"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 1"),
                ]),
                Field("ME2", 21, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 2"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 2"),
                ]),
                Field("ME3", 20, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 3"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 3"),
                ]),
                Field("ME4", 19, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 4"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 4"),
                ]),
                Field("ME5", 18, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 5"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 5"),
                ]),
                Field("ME6", 17, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 6"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 6"),
                ]),
                Field("ME7", 16, 1, "Master Port Enable For Feedback Integrity Check", [
                    EnumVal("DISABLED", "0", "Feedback integrity checking disabled for master port 7"),
                    EnumVal("ENABLED", "0x1", "Feedback integrity checking enabled for master port 7"),
                ]),
            ]),
            Register("EIR", 0x40204004, 32, "XBIC Error Injection", [
                Field("EIE", 31, 1, "Error Injection Enable", [
                    EnumVal("DISABLED", "0", "Error injection disabled"),
                    EnumVal("ENABLED", "0x1", "Error injection enabled"),
                ]),
                Field("SLV", 12, 3, "Target Slave Port", [
                ]),
                Field("MST", 8, 4, "Target Master ID", [
                ]),
                Field("SYN", 0, 8, "Syndrome", [
                ]),
            ]),
            Register("ESR", 0x40204008, 32, "XBIC Error Status", [
                Field("VLD", 31, 1, "Error Status Valid", [
                    EnumVal("NO_ERROR", "0", "No error detected-other fields of the ESR and EAR registers are invalid"),
                    EnumVal("ERROR", "0x1", "Error detected-all fields of the ESR and EAR registers are valid"),
                ]),
                Field("DPSE0", 30, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 0"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 0"),
                ]),
                Field("DPSE1", 29, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 1"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 1"),
                ]),
                Field("DPSE2", 28, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 2"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 2"),
                ]),
                Field("DPSE3", 27, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 3"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 3"),
                ]),
                Field("DPSE4", 26, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 4"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 4"),
                ]),
                Field("DPSE5", 25, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 5"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 5"),
                ]),
                Field("DPSE6", 24, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 6"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 6"),
                ]),
                Field("DPSE7", 23, 1, "Data Phase Slave Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on slave port 7"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on slave port 7"),
                ]),
                Field("DPME0", 22, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 0"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 0"),
                ]),
                Field("DPME1", 21, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 1"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 1"),
                ]),
                Field("DPME2", 20, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 2"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 2"),
                ]),
                Field("DPME3", 19, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 3"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 3"),
                ]),
                Field("DPME4", 18, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 4"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 4"),
                ]),
                Field("DPME5", 17, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 5"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 5"),
                ]),
                Field("DPME6", 16, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 6"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 6"),
                ]),
                Field("DPME7", 15, 1, "Data Phase Master Port Error", [
                    EnumVal("NO_ERROR", "0", "No feedback integrity error detected on master port 7"),
                    EnumVal("ERROR", "0x1", "Feedback integrity error detected on master port 7"),
                ]),
                Field("SLV", 12, 3, "Slave Port", [
                ]),
                Field("MST", 8, 4, "Master ID", [
                ]),
                Field("SYN", 0, 8, "Syndrome", [
                ]),
            ]),
            Register("EAR", 0x4020400C, 32, "XBIC Error Address", [
                Field("ADDR", 0, 32, "Error Address", [
                ]),
            ]),
        ])

class Module_XRDC(Peripheral):
    def __init__(self):
        super().__init__("XRDC", 0x40278000, 0x22F0, [
            Register("CR", 0x40278000, 32, "Control", [
                Field("LK1", 30, 1, "Lock", [
                    EnumVal("UNLOCKED_READ", "0", "Unlocked"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                ]),
                Field("VAW", 8, 1, "Virtualization Aware", [
                    EnumVal("NOTVIRTL", "0", "Not virtualization-aware"),
                    EnumVal("VIRTUAL", "0x1", "Virtualization-aware"),
                ]),
                Field("MRF", 7, 1, "Memory Region Format", [
                    EnumVal("SMPU", "0x1", "SMPU family format"),
                ]),
                Field("HRL", 1, 4, "Hardware Revision Level", [
                ]),
                Field("GVLD", 0, 1, "Global Valid (XRDC Global Enable/Disable)", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
            ]),
            Register("HWCFG0", 0x402780F0, 32, "Hardware Configuration 0", [
                Field("MID", 28, 4, "Module ID", [
                ]),
                Field("NPAC", 24, 4, "Number Of PACs", [
                ]),
                Field("NMRC", 16, 8, "Number of MRCs", [
                ]),
                Field("NMSTR", 8, 8, "Number Of Bus Masters", [
                ]),
                Field("NDID", 0, 8, "Number Of DIDs", [
                ]),
            ]),
            Register("HWCFG1", 0x402780F4, 32, "Hardware Configuration 1", [
                Field("DID", 0, 4, "Domain Identifier", [
                ]),
            ]),
            Register("HWCFG2", 0x402780F8, 32, "Hardware Configuration 2", [
                Field("PIDP31", 31, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP30", 30, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP29", 29, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP28", 28, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP27", 27, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP26", 26, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP25", 25, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP24", 24, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP23", 23, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP22", 22, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP21", 21, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP20", 20, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP19", 19, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP18", 18, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP17", 17, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP16", 16, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP15", 15, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP14", 14, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP13", 13, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP12", 12, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP11", 11, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP10", 10, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP9", 9, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP8", 8, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP7", 7, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP6", 6, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP5", 5, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP4", 4, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP3", 3, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP2", 2, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP1", 1, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
                Field("PIDP0", 0, 1, "Process Identifier Present", [
                    EnumVal("NOBMSOURCE", "0", "Does not have PID register"),
                    EnumVal("BMSOURCE", "0x1", "Has PID register"),
                ]),
            ]),
            Register("MDACFG0", 0x40278100, 8, "Master Domain Assignment Configuration", [
                Field("NCM", 7, 1, "Noncore Master", [
                    EnumVal("PROC", "0", "Core master or master does not exist"),
                    EnumVal("NONPROC", "0x1", "Noncore master"),
                ]),
                Field("NMDAR", 0, 4, "Number Of Master Domain Assignment Registers", [
                    EnumVal("ZERO", "0", "Master does not exist"),
                    EnumVal("NUMBER_1", "0x1", "Number of registers"),
                    EnumVal("NUMBER_2", "0x2", "Number of registers"),
                    EnumVal("NUMBER_3", "0x3", "Number of registers"),
                    EnumVal("NUMBER_4", "0x4", "Number of registers"),
                    EnumVal("NUMBER_5", "0x5", "Number of registers"),
                    EnumVal("NUMBER_6", "0x6", "Number of registers"),
                    EnumVal("NUMBER_7", "0x7", "Number of registers"),
                    EnumVal("NUMBER_8", "0x8", "Number of registers"),
                ]),
            ]),
            Register("MDACFG1", 0x40278101, 8, "Master Domain Assignment Configuration", [
                Field("NCM", 7, 1, "Noncore Master", [
                    EnumVal("PROC", "0", "Core master or master does not exist"),
                    EnumVal("NONPROC", "0x1", "Noncore master"),
                ]),
                Field("NMDAR", 0, 4, "Number Of Master Domain Assignment Registers", [
                    EnumVal("ZERO", "0", "Master does not exist"),
                    EnumVal("NUMBER_1", "0x1", "Number of registers"),
                    EnumVal("NUMBER_2", "0x2", "Number of registers"),
                    EnumVal("NUMBER_3", "0x3", "Number of registers"),
                    EnumVal("NUMBER_4", "0x4", "Number of registers"),
                    EnumVal("NUMBER_5", "0x5", "Number of registers"),
                    EnumVal("NUMBER_6", "0x6", "Number of registers"),
                    EnumVal("NUMBER_7", "0x7", "Number of registers"),
                    EnumVal("NUMBER_8", "0x8", "Number of registers"),
                ]),
            ]),
            Register("MDACFG2", 0x40278102, 8, "Master Domain Assignment Configuration", [
                Field("NCM", 7, 1, "Noncore Master", [
                    EnumVal("PROC", "0", "Core master or master does not exist"),
                    EnumVal("NONPROC", "0x1", "Noncore master"),
                ]),
                Field("NMDAR", 0, 4, "Number Of Master Domain Assignment Registers", [
                    EnumVal("ZERO", "0", "Master does not exist"),
                    EnumVal("NUMBER_1", "0x1", "Number of registers"),
                    EnumVal("NUMBER_2", "0x2", "Number of registers"),
                    EnumVal("NUMBER_3", "0x3", "Number of registers"),
                    EnumVal("NUMBER_4", "0x4", "Number of registers"),
                    EnumVal("NUMBER_5", "0x5", "Number of registers"),
                    EnumVal("NUMBER_6", "0x6", "Number of registers"),
                    EnumVal("NUMBER_7", "0x7", "Number of registers"),
                    EnumVal("NUMBER_8", "0x8", "Number of registers"),
                ]),
            ]),
            Register("MDACFG3", 0x40278103, 8, "Master Domain Assignment Configuration", [
                Field("NCM", 7, 1, "Noncore Master", [
                    EnumVal("PROC", "0", "Core master or master does not exist"),
                    EnumVal("NONPROC", "0x1", "Noncore master"),
                ]),
                Field("NMDAR", 0, 4, "Number Of Master Domain Assignment Registers", [
                    EnumVal("ZERO", "0", "Master does not exist"),
                    EnumVal("NUMBER_1", "0x1", "Number of registers"),
                    EnumVal("NUMBER_2", "0x2", "Number of registers"),
                    EnumVal("NUMBER_3", "0x3", "Number of registers"),
                    EnumVal("NUMBER_4", "0x4", "Number of registers"),
                    EnumVal("NUMBER_5", "0x5", "Number of registers"),
                    EnumVal("NUMBER_6", "0x6", "Number of registers"),
                    EnumVal("NUMBER_7", "0x7", "Number of registers"),
                    EnumVal("NUMBER_8", "0x8", "Number of registers"),
                ]),
            ]),
            Register("MRCFG0", 0x40278140, 8, "Memory Region Configuration", [
                Field("NMRGD", 0, 5, "Number Of Memory Region Descriptors", [
                    EnumVal("ZERO", "0", "MRC does not exist"),
                    EnumVal("FOUR", "0x4", "4"),
                    EnumVal("EIGHT", "0x8", "8"),
                    EnumVal("TWELVE", "0xC", "12"),
                    EnumVal("SIXTEEN", "0x10", "16"),
                ]),
            ]),
            Register("MRCFG1", 0x40278141, 8, "Memory Region Configuration", [
                Field("NMRGD", 0, 5, "Number Of Memory Region Descriptors", [
                    EnumVal("ZERO", "0", "MRC does not exist"),
                    EnumVal("FOUR", "0x4", "4"),
                    EnumVal("EIGHT", "0x8", "8"),
                    EnumVal("TWELVE", "0xC", "12"),
                    EnumVal("SIXTEEN", "0x10", "16"),
                ]),
            ]),
            Register("DERRLOC[0]", 0x40278200, 32, "Domain Error Location", [
                Field("PACINST", 16, 4, "PAC Instance", [
                ]),
                Field("MRCINST", 0, 16, "MRC Instance", [
                ]),
            ]),
            Register("DERRLOC[1]", 0x40278204, 32, "Domain Error Location", [
                Field("PACINST", 16, 4, "PAC Instance", [
                ]),
                Field("MRCINST", 0, 16, "MRC Instance", [
                ]),
            ]),
            Register("DERR_W0_0", 0x40278400, 32, "Domain Error Word 0", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("DERR_W1_0", 0x40278404, 32, "Domain Error Word 1", [
                Field("EST", 30, 2, "Error State", [
                    EnumVal("NO_VIOLTN_0", "0", "No access violations detected"),
                    EnumVal("NO_VIOLTN_1", "0x1", "No access violations detected"),
                    EnumVal("SNGL_VIOLTN", "0x2", "A single access violation has been detected"),
                    EnumVal("MULT_VIOLTN", "0x3", "Multiple access violations have been detected"),
                ]),
                Field("EPORT", 24, 3, "Error Port", [
                ]),
                Field("ERW", 11, 1, "Error Read Or Write", [
                    EnumVal("READ_ACCESS", "0", "Read access"),
                    EnumVal("WRITE_ACCESS", "0x1", "Write access"),
                ]),
                Field("EATR", 8, 3, "Error Attributes", [
                    EnumVal("SECUSER_INSTR", "0", "Secure user mode, instruction fetch access"),
                    EnumVal("SECUSER_DATA", "0x1", "Secure user mode, data access"),
                    EnumVal("SECPRIV_INSTR", "0x2", "Secure privileged mode, instruction fetch access"),
                    EnumVal("SECPRIV_DATA", "0x3", "Secure privileged mode, data access"),
                    EnumVal("NONSEC_USER_INSTR", "0x4", "Nonsecure user mode, instruction fetch access"),
                    EnumVal("NONSEC_USER_DATA", "0x5", "Nonsecure user mode, data access"),
                    EnumVal("NONSEC_PRIV_INSTR", "0x6", "Nonsecure privileged mode, instruction fetch access"),
                    EnumVal("NONSEC_PRIV_DATA", "0x7", "Nonsecure privileged mode, data access"),
                ]),
                Field("EDID", 0, 4, "Error Domain Identifier", [
                ]),
            ]),
            Register("DERR_W3_0", 0x4027840C, 32, "Domain Error Word 3", [
                Field("RECR", 30, 2, "Rearm Error Capture Registers", [
                    EnumVal("NO_EFFECT_0", "0", "No effect"),
                    EnumVal("REARM", "0x1", "Rearms error capture, resets error capture registers, and deasserts instance bit in DERRLOCd"),
                    EnumVal("NO_EFFECT_2", "0x2", "No effect"),
                    EnumVal("NO_EFFECT_3", "0x3", "No effect"),
                ]),
            ]),
            Register("DERR_W0_1", 0x40278410, 32, "Domain Error Word 0", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("DERR_W1_1", 0x40278414, 32, "Domain Error Word 1", [
                Field("EST", 30, 2, "Error State", [
                    EnumVal("NO_VIOLTN_0", "0", "No access violations detected"),
                    EnumVal("NO_VIOLTN_1", "0x1", "No access violations detected"),
                    EnumVal("SNGL_VIOLTN", "0x2", "A single access violation has been detected"),
                    EnumVal("MULT_VIOLTN", "0x3", "Multiple access violations have been detected"),
                ]),
                Field("EPORT", 24, 3, "Error Port", [
                ]),
                Field("ERW", 11, 1, "Error Read Or Write", [
                    EnumVal("READ_ACCESS", "0", "Read access"),
                    EnumVal("WRITE_ACCESS", "0x1", "Write access"),
                ]),
                Field("EATR", 8, 3, "Error Attributes", [
                    EnumVal("SECUSER_INSTR", "0", "Secure user mode, instruction fetch access"),
                    EnumVal("SECUSER_DATA", "0x1", "Secure user mode, data access"),
                    EnumVal("SECPRIV_INSTR", "0x2", "Secure privileged mode, instruction fetch access"),
                    EnumVal("SECPRIV_DATA", "0x3", "Secure privileged mode, data access"),
                    EnumVal("NONSEC_USER_INSTR", "0x4", "Nonsecure user mode, instruction fetch access"),
                    EnumVal("NONSEC_USER_DATA", "0x5", "Nonsecure user mode, data access"),
                    EnumVal("NONSEC_PRIV_INSTR", "0x6", "Nonsecure privileged mode, instruction fetch access"),
                    EnumVal("NONSEC_PRIV_DATA", "0x7", "Nonsecure privileged mode, data access"),
                ]),
                Field("EDID", 0, 4, "Error Domain Identifier", [
                ]),
            ]),
            Register("DERR_W3_1", 0x4027841C, 32, "Domain Error Word 3", [
                Field("RECR", 30, 2, "Rearm Error Capture Registers", [
                    EnumVal("NO_EFFECT_0", "0", "No effect"),
                    EnumVal("REARM", "0x1", "Rearms error capture, resets error capture registers, and deasserts instance bit in DERRLOCd"),
                    EnumVal("NO_EFFECT_2", "0x2", "No effect"),
                    EnumVal("NO_EFFECT_3", "0x3", "No effect"),
                ]),
            ]),
            Register("DERR_W0_16", 0x40278500, 32, "Domain Error Word 0", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("DERR_W1_16", 0x40278504, 32, "Domain Error Word 1", [
                Field("EST", 30, 2, "Error State", [
                    EnumVal("NO_VIOLTN_0", "0", "No access violations detected"),
                    EnumVal("NO_VIOLTN_1", "0x1", "No access violations detected"),
                    EnumVal("SNGL_VIOLTN", "0x2", "A single access violation has been detected"),
                    EnumVal("MULT_VIOLTN", "0x3", "Multiple access violations have been detected"),
                ]),
                Field("EPORT", 24, 3, "Error Port", [
                ]),
                Field("ERW", 11, 1, "Error Read Or Write", [
                    EnumVal("READ_ACCESS", "0", "Read access"),
                    EnumVal("WRITE_ACCESS", "0x1", "Write access"),
                ]),
                Field("EATR", 8, 3, "Error Attributes", [
                    EnumVal("SECUSER_INSTR", "0", "Secure user mode, instruction fetch access"),
                    EnumVal("SECUSER_DATA", "0x1", "Secure user mode, data access"),
                    EnumVal("SECPRIV_INSTR", "0x2", "Secure privileged mode, instruction fetch access"),
                    EnumVal("SECPRIV_DATA", "0x3", "Secure privileged mode, data access"),
                    EnumVal("NONSEC_USER_INSTR", "0x4", "Nonsecure user mode, instruction fetch access"),
                    EnumVal("NONSEC_USER_DATA", "0x5", "Nonsecure user mode, data access"),
                    EnumVal("NONSEC_PRIV_INSTR", "0x6", "Nonsecure privileged mode, instruction fetch access"),
                    EnumVal("NONSEC_PRIV_DATA", "0x7", "Nonsecure privileged mode, data access"),
                ]),
                Field("EDID", 0, 4, "Error Domain Identifier", [
                ]),
            ]),
            Register("DERR_W3_16", 0x4027850C, 32, "Domain Error Word 3", [
                Field("RECR", 30, 2, "Rearm Error Capture Registers", [
                    EnumVal("NO_EFFECT_0", "0", "No effect"),
                    EnumVal("REARM", "0x1", "Rearms error capture, resets error capture registers, and deasserts instance bit in DERRLOCd"),
                    EnumVal("NO_EFFECT_2", "0x2", "No effect"),
                    EnumVal("NO_EFFECT_3", "0x3", "No effect"),
                ]),
            ]),
            Register("DERR_W0_17", 0x40278510, 32, "Domain Error Word 0", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("DERR_W1_17", 0x40278514, 32, "Domain Error Word 1", [
                Field("EST", 30, 2, "Error State", [
                    EnumVal("NO_VIOLTN_0", "0", "No access violations detected"),
                    EnumVal("NO_VIOLTN_1", "0x1", "No access violations detected"),
                    EnumVal("SNGL_VIOLTN", "0x2", "A single access violation has been detected"),
                    EnumVal("MULT_VIOLTN", "0x3", "Multiple access violations have been detected"),
                ]),
                Field("EPORT", 24, 3, "Error Port", [
                ]),
                Field("ERW", 11, 1, "Error Read Or Write", [
                    EnumVal("READ_ACCESS", "0", "Read access"),
                    EnumVal("WRITE_ACCESS", "0x1", "Write access"),
                ]),
                Field("EATR", 8, 3, "Error Attributes", [
                    EnumVal("SECUSER_INSTR", "0", "Secure user mode, instruction fetch access"),
                    EnumVal("SECUSER_DATA", "0x1", "Secure user mode, data access"),
                    EnumVal("SECPRIV_INSTR", "0x2", "Secure privileged mode, instruction fetch access"),
                    EnumVal("SECPRIV_DATA", "0x3", "Secure privileged mode, data access"),
                    EnumVal("NONSEC_USER_INSTR", "0x4", "Nonsecure user mode, instruction fetch access"),
                    EnumVal("NONSEC_USER_DATA", "0x5", "Nonsecure user mode, data access"),
                    EnumVal("NONSEC_PRIV_INSTR", "0x6", "Nonsecure privileged mode, instruction fetch access"),
                    EnumVal("NONSEC_PRIV_DATA", "0x7", "Nonsecure privileged mode, data access"),
                ]),
                Field("EDID", 0, 4, "Error Domain Identifier", [
                ]),
            ]),
            Register("DERR_W3_17", 0x4027851C, 32, "Domain Error Word 3", [
                Field("RECR", 30, 2, "Rearm Error Capture Registers", [
                    EnumVal("NO_EFFECT_0", "0", "No effect"),
                    EnumVal("REARM", "0x1", "Rearms error capture, resets error capture registers, and deasserts instance bit in DERRLOCd"),
                    EnumVal("NO_EFFECT_2", "0x2", "No effect"),
                    EnumVal("NO_EFFECT_3", "0x3", "No effect"),
                ]),
            ]),
            Register("DERR_W0_18", 0x40278520, 32, "Domain Error Word 0", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("DERR_W1_18", 0x40278524, 32, "Domain Error Word 1", [
                Field("EST", 30, 2, "Error State", [
                    EnumVal("NO_VIOLTN_0", "0", "No access violations detected"),
                    EnumVal("NO_VIOLTN_1", "0x1", "No access violations detected"),
                    EnumVal("SNGL_VIOLTN", "0x2", "A single access violation has been detected"),
                    EnumVal("MULT_VIOLTN", "0x3", "Multiple access violations have been detected"),
                ]),
                Field("EPORT", 24, 3, "Error Port", [
                ]),
                Field("ERW", 11, 1, "Error Read Or Write", [
                    EnumVal("READ_ACCESS", "0", "Read access"),
                    EnumVal("WRITE_ACCESS", "0x1", "Write access"),
                ]),
                Field("EATR", 8, 3, "Error Attributes", [
                    EnumVal("SECUSER_INSTR", "0", "Secure user mode, instruction fetch access"),
                    EnumVal("SECUSER_DATA", "0x1", "Secure user mode, data access"),
                    EnumVal("SECPRIV_INSTR", "0x2", "Secure privileged mode, instruction fetch access"),
                    EnumVal("SECPRIV_DATA", "0x3", "Secure privileged mode, data access"),
                    EnumVal("NONSEC_USER_INSTR", "0x4", "Nonsecure user mode, instruction fetch access"),
                    EnumVal("NONSEC_USER_DATA", "0x5", "Nonsecure user mode, data access"),
                    EnumVal("NONSEC_PRIV_INSTR", "0x6", "Nonsecure privileged mode, instruction fetch access"),
                    EnumVal("NONSEC_PRIV_DATA", "0x7", "Nonsecure privileged mode, data access"),
                ]),
                Field("EDID", 0, 4, "Error Domain Identifier", [
                ]),
            ]),
            Register("DERR_W3_18", 0x4027852C, 32, "Domain Error Word 3", [
                Field("RECR", 30, 2, "Rearm Error Capture Registers", [
                    EnumVal("NO_EFFECT_0", "0", "No effect"),
                    EnumVal("REARM", "0x1", "Rearms error capture, resets error capture registers, and deasserts instance bit in DERRLOCd"),
                    EnumVal("NO_EFFECT_2", "0x2", "No effect"),
                    EnumVal("NO_EFFECT_3", "0x3", "No effect"),
                ]),
            ]),
            Register("PID0", 0x40278700, 32, "Process Identifier", [
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ANY_SEC_PRIV_WRT_0", "0", "Any secure privileged write"),
                    EnumVal("ANY_SEC_PRIV_WRT_1", "0x1", "Any secure privileged write"),
                    EnumVal("BUS_MASTER_ONLY", "0x2", "Secure privileged writes from master only"),
                    EnumVal("LOCKED", "0x3", "Locks"),
                ]),
                Field("TSM", 28, 1, "Three-State Model", [
                ]),
                Field("ELK22H", 24, 1, "LK2 Special Handling Enable", [
                    EnumVal("LMNUM_RSRVD", "0", "LK2 operates normally; LMNUM is reserved and always reads 0."),
                    EnumVal("LMNUM_CAPTURE", "0x1", "If LK2 = 2 (10b), LMNUM indicates the master that issued the lock."),
                ]),
                Field("LMNUM", 16, 6, "Locked Master Number", [
                ]),
                Field("PID", 5, 1, "Process Identifier Secure Attribute", [
                    EnumVal("SECURE", "0", "Secure"),
                    EnumVal("NONSECURE", "0x1", "Nonsecure"),
                ]),
            ]),
            Register("PID3", 0x4027870C, 32, "Process Identifier", [
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ANY_SEC_PRIV_WRT_0", "0", "Any secure privileged write"),
                    EnumVal("ANY_SEC_PRIV_WRT_1", "0x1", "Any secure privileged write"),
                    EnumVal("BUS_MASTER_ONLY", "0x2", "Secure privileged writes from master only"),
                    EnumVal("LOCKED", "0x3", "Locks"),
                ]),
                Field("TSM", 28, 1, "Three-State Model", [
                ]),
                Field("ELK22H", 24, 1, "LK2 Special Handling Enable", [
                    EnumVal("LMNUM_RSRVD", "0", "LK2 operates normally; LMNUM is reserved and always reads 0."),
                    EnumVal("LMNUM_CAPTURE", "0x1", "If LK2 = 2 (10b), LMNUM indicates the master that issued the lock."),
                ]),
                Field("LMNUM", 16, 6, "Locked Master Number", [
                ]),
                Field("PID", 5, 1, "Process Identifier Secure Attribute", [
                    EnumVal("SECURE", "0", "Secure"),
                    EnumVal("NONSECURE", "0x1", "Nonsecure"),
                ]),
            ]),
            Register("MDA_W0_0_DFMT0", 0x40278800, 32, "Master Domain Assignment", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK1", 30, 1, "Lock", [
                    EnumVal("UNLOCKED_READ", "0", "Unlocked"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                ]),
                Field("DFMT", 29, 1, "Domain Format", [
                    EnumVal("PROC", "0", "Core bus master domain assignment (DFMT0)"),
                ]),
                Field("PID", 16, 6, "Process Identifier", [
                ]),
                Field("PIDM", 8, 6, "Process Identifier Mask", [
                ]),
                Field("PE", 6, 2, "Process Identifier Enable", [
                    EnumVal("NOPROCID_0", "0", "No PID is included"),
                    EnumVal("NOPROCID_1", "0x1", "No PID is included"),
                    EnumVal("PE10", "0x2", "Partial domain hit = (PID & ~PIDM) == (PIDm[PID] & ~PIDM)"),
                    EnumVal("PE11", "0x3", "Partial domain hit = ~((PID & ~PIDM) == (PIDm[PID] & ~PIDM))"),
                ]),
                Field("DIDS", 4, 2, "DID Select", [
                    EnumVal("USE_REG_DID", "0", "Use the DID field of this register"),
                    EnumVal("USE_INPUT_DID", "0x1", "Use the input DID"),
                    EnumVal("USE_CONCAT", "0x2", "Concatenate bits 3-2 of this register with the least significant 2 bits of the input DID (DID_in[1:0])"),
                ]),
                Field("DID", 0, 1, "Domain Identifier", [
                ]),
            ]),
            Register("MDA_W0_1_DFMT1", 0x40278820, 32, "Master Domain Assignment", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK1", 30, 1, "Lock", [
                    EnumVal("UNLOCKED_READ", "0", "Unlocked"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                ]),
                Field("DFMT", 29, 1, "Domain Format", [
                    EnumVal("NONPROC", "0x1", "Bus master domain assignment (DFMT1)"),
                ]),
                Field("DIDB", 8, 1, "DID Bypass", [
                    EnumVal("MDAN30", "0", "Bypass DID input"),
                    EnumVal("DID", "0x1", "Use DID input"),
                ]),
                Field("SA", 6, 2, "Secure Attribute", [
                    EnumVal("SECURE", "0", "Force to secure"),
                    EnumVal("NONSECURE", "0x1", "Force to nonsecure"),
                    EnumVal("USE_ATTR_DIRCTLY", "#1x", "Use secure attribute from the master"),
                ]),
                Field("PA", 4, 2, "Privileged Attribute", [
                    EnumVal("FORCE2USER", "0", "Force to user"),
                    EnumVal("FORCE2PRIV", "0x1", "Force to privileged"),
                    EnumVal("USE_BMSTR_ATTR", "#1x", "Use privileged attribute from the master"),
                ]),
                Field("DID", 0, 1, "Domain Identifier", [
                ]),
            ]),
            Register("MDA_W0_2_DFMT1", 0x40278840, 32, "Master Domain Assignment", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK1", 30, 1, "Lock", [
                    EnumVal("UNLOCKED_READ", "0", "Unlocked"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                ]),
                Field("DFMT", 29, 1, "Domain Format", [
                    EnumVal("NONPROC", "0x1", "Bus master domain assignment (DFMT1)"),
                ]),
                Field("DIDB", 8, 1, "DID Bypass", [
                    EnumVal("MDAN30", "0", "Bypass DID input"),
                    EnumVal("DID", "0x1", "Use DID input"),
                ]),
                Field("SA", 6, 2, "Secure Attribute", [
                    EnumVal("SECURE", "0", "Force to secure"),
                    EnumVal("NONSECURE", "0x1", "Force to nonsecure"),
                    EnumVal("USE_ATTR_DIRCTLY", "#1x", "Use secure attribute from the master"),
                ]),
                Field("PA", 4, 2, "Privileged Attribute", [
                    EnumVal("FORCE2USER", "0", "Force to user"),
                    EnumVal("FORCE2PRIV", "0x1", "Force to privileged"),
                    EnumVal("USE_BMSTR_ATTR", "#1x", "Use privileged attribute from the master"),
                ]),
                Field("DID", 0, 1, "Domain Identifier", [
                ]),
            ]),
            Register("MDA_W0_3_DFMT0", 0x40278860, 32, "Master Domain Assignment", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK1", 30, 1, "Lock", [
                    EnumVal("UNLOCKED_READ", "0", "Unlocked"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                    EnumVal("LOCKED", "0x1", "Locks"),
                ]),
                Field("DFMT", 29, 1, "Domain Format", [
                    EnumVal("PROC", "0", "Core bus master domain assignment (DFMT0)"),
                ]),
                Field("PID", 16, 6, "Process Identifier", [
                ]),
                Field("PIDM", 8, 6, "Process Identifier Mask", [
                ]),
                Field("PE", 6, 2, "Process Identifier Enable", [
                    EnumVal("NOPROCID_0", "0", "No PID is included"),
                    EnumVal("NOPROCID_1", "0x1", "No PID is included"),
                    EnumVal("PE10", "0x2", "Partial domain hit = (PID & ~PIDM) == (PIDm[PID] & ~PIDM)"),
                    EnumVal("PE11", "0x3", "Partial domain hit = ~((PID & ~PIDM) == (PIDm[PID] & ~PIDM))"),
                ]),
                Field("DIDS", 4, 2, "DID Select", [
                    EnumVal("USE_REG_DID", "0", "Use the DID field of this register"),
                    EnumVal("USE_INPUT_DID", "0x1", "Use the input DID"),
                    EnumVal("USE_CONCAT", "0x2", "Concatenate bits 3-2 of this register with the least significant 2 bits of the input DID (DID_in[1:0])"),
                ]),
                Field("DID", 0, 1, "Domain Identifier", [
                ]),
            ]),
            Register("PDAC_W0_32", 0x40279100, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_32", 0x40279104, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_33", 0x40279108, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_33", 0x4027910C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_34", 0x40279110, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_34", 0x40279114, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_35", 0x40279118, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_35", 0x4027911C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_36", 0x40279120, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_36", 0x40279124, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_38", 0x40279130, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_38", 0x40279134, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_39", 0x40279138, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_39", 0x4027913C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_40", 0x40279140, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_40", 0x40279144, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_41", 0x40279148, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_41", 0x4027914C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_42", 0x40279150, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_42", 0x40279154, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_44", 0x40279160, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_44", 0x40279164, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_45", 0x40279168, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_45", 0x4027916C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_46", 0x40279170, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_46", 0x40279174, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_47", 0x40279178, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_47", 0x4027917C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_128", 0x40279400, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_128", 0x40279404, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_129", 0x40279408, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_129", 0x4027940C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_130", 0x40279410, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_130", 0x40279414, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_131", 0x40279418, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_131", 0x4027941C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_132", 0x40279420, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_132", 0x40279424, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_133", 0x40279428, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_133", 0x4027942C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_134", 0x40279430, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_134", 0x40279434, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_135", 0x40279438, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_135", 0x4027943C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_136", 0x40279440, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_136", 0x40279444, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_137", 0x40279448, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_137", 0x4027944C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_138", 0x40279450, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_138", 0x40279454, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_139", 0x40279458, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_139", 0x4027945C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_140", 0x40279460, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_140", 0x40279464, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_141", 0x40279468, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_141", 0x4027946C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_142", 0x40279470, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_142", 0x40279474, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_143", 0x40279478, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_143", 0x4027947C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_144", 0x40279480, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_144", 0x40279484, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_145", 0x40279488, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_145", 0x4027948C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_146", 0x40279490, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_146", 0x40279494, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_147", 0x40279498, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_147", 0x4027949C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_148", 0x402794A0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_148", 0x402794A4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_149", 0x402794A8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_149", 0x402794AC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_150", 0x402794B0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_150", 0x402794B4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_151", 0x402794B8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_151", 0x402794BC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_152", 0x402794C0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_152", 0x402794C4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_153", 0x402794C8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_153", 0x402794CC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_154", 0x402794D0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_154", 0x402794D4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_155", 0x402794D8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_155", 0x402794DC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_156", 0x402794E0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_156", 0x402794E4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_157", 0x402794E8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_157", 0x402794EC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_158", 0x402794F0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_158", 0x402794F4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_159", 0x402794F8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_159", 0x402794FC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_160", 0x40279500, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_160", 0x40279504, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_161", 0x40279508, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_161", 0x4027950C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_162", 0x40279510, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_162", 0x40279514, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_163", 0x40279518, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_163", 0x4027951C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_164", 0x40279520, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_164", 0x40279524, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_165", 0x40279528, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_165", 0x4027952C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_166", 0x40279530, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_166", 0x40279534, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_167", 0x40279538, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_167", 0x4027953C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_168", 0x40279540, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_168", 0x40279544, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_169", 0x40279548, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_169", 0x4027954C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_170", 0x40279550, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_170", 0x40279554, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_171", 0x40279558, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_171", 0x4027955C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_173", 0x40279568, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_173", 0x4027956C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_175", 0x40279578, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_175", 0x4027957C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_177", 0x40279588, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_177", 0x4027958C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_178", 0x40279590, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_178", 0x40279594, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_179", 0x40279598, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_179", 0x4027959C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_180", 0x402795A0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_180", 0x402795A4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_181", 0x402795A8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_181", 0x402795AC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_182", 0x402795B0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_182", 0x402795B4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_183", 0x402795B8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_183", 0x402795BC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_184", 0x402795C0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_184", 0x402795C4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_186", 0x402795D0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_186", 0x402795D4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_187", 0x402795D8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_187", 0x402795DC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_188", 0x402795E0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_188", 0x402795E4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_191", 0x402795F8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_191", 0x402795FC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_193", 0x40279608, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_193", 0x4027960C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_194", 0x40279610, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_194", 0x40279614, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_195", 0x40279618, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_195", 0x4027961C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_196", 0x40279620, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_196", 0x40279624, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_197", 0x40279628, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_197", 0x4027962C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_198", 0x40279630, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_198", 0x40279634, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_201", 0x40279648, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_201", 0x4027964C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_202", 0x40279650, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_202", 0x40279654, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_203", 0x40279658, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_203", 0x4027965C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_204", 0x40279660, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_204", 0x40279664, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_205", 0x40279668, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_205", 0x4027966C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_206", 0x40279670, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_206", 0x40279674, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_207", 0x40279678, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_207", 0x4027967C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_208", 0x40279680, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_208", 0x40279684, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_209", 0x40279688, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_209", 0x4027968C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_212", 0x402796A0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_212", 0x402796A4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_213", 0x402796A8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_213", 0x402796AC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_214", 0x402796B0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_214", 0x402796B4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_215", 0x402796B8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_215", 0x402796BC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_216", 0x402796C0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_216", 0x402796C4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_217", 0x402796C8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_217", 0x402796CC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_219", 0x402796D8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_219", 0x402796DC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_220", 0x402796E0, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_220", 0x402796E4, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_221", 0x402796E8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_221", 0x402796EC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_223", 0x402796F8, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_223", 0x402796FC, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_224", 0x40279700, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_224", 0x40279704, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_225", 0x40279708, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_225", 0x4027970C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_226", 0x40279710, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_226", 0x40279714, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_227", 0x40279718, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_227", 0x4027971C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_229", 0x40279728, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_229", 0x4027972C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_231", 0x40279738, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_231", 0x4027973C, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_232", 0x40279740, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_232", 0x40279744, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("PDAC_W0_236", 0x40279760, 32, "Peripheral Domain Access Control Word 0", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("DISABLE", "0", "Disables"),
                    EnumVal("ENABLE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("PDAC_W1_236", 0x40279764, 32, "Peripheral Domain Access Control Word 1", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE_0", "0", "Both words can be written to"),
                    EnumVal("ENTIRE_1", "0x1", "Both words can be written to"),
                    EnumVal("DXACP", "0x2", "Domain d can update only its associated DdACP field-all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (both words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_0", 0x4027A000, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_0", 0x4027A004, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_0", 0x4027A008, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_0", 0x4027A00C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_1", 0x4027A020, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_1", 0x4027A024, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_1", 0x4027A028, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_1", 0x4027A02C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_2", 0x4027A040, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_2", 0x4027A044, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_2", 0x4027A048, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_2", 0x4027A04C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_3", 0x4027A060, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_3", 0x4027A064, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_3", 0x4027A068, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_3", 0x4027A06C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_4", 0x4027A080, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_4", 0x4027A084, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_4", 0x4027A088, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_4", 0x4027A08C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_5", 0x4027A0A0, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_5", 0x4027A0A4, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_5", 0x4027A0A8, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_5", 0x4027A0AC, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_6", 0x4027A0C0, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_6", 0x4027A0C4, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_6", 0x4027A0C8, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_6", 0x4027A0CC, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_7", 0x4027A0E0, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_7", 0x4027A0E4, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_7", 0x4027A0E8, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_7", 0x4027A0EC, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_16", 0x4027A200, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_16", 0x4027A204, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_16", 0x4027A208, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_16", 0x4027A20C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_17", 0x4027A220, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_17", 0x4027A224, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_17", 0x4027A228, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_17", 0x4027A22C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_18", 0x4027A240, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_18", 0x4027A244, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_18", 0x4027A248, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_18", 0x4027A24C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_19", 0x4027A260, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_19", 0x4027A264, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_19", 0x4027A268, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_19", 0x4027A26C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_20", 0x4027A280, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_20", 0x4027A284, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_20", 0x4027A288, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_20", 0x4027A28C, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_21", 0x4027A2A0, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_21", 0x4027A2A4, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_21", 0x4027A2A8, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_21", 0x4027A2AC, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_22", 0x4027A2C0, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_22", 0x4027A2C4, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_22", 0x4027A2C8, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_22", 0x4027A2CC, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
            Register("MRGD_W0_23", 0x4027A2E0, 32, "Memory Region Descriptor Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("MRGD_W1_23", 0x4027A2E4, 32, "Memory Region Descriptor Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("MRGD_W2_23", 0x4027A2E8, 32, "Memory Region Descriptor Word 2", [
                Field("SE", 30, 1, "Semaphore Enable", [
                    EnumVal("EXCLUDE", "0", "Disables"),
                    EnumVal("INCLUDE", "0x1", "Enables"),
                ]),
                Field("SNUM", 24, 4, "Semaphore Number", [
                ]),
                Field("D1ACP", 3, 3, "Domain Access Control Policy", [
                ]),
                Field("D0ACP", 0, 3, "Domain Access Control Policy", [
                ]),
            ]),
            Register("MRGD_W3_23", 0x4027A2EC, 32, "Memory Region Descriptor Word 3", [
                Field("VLD", 31, 1, "Valid", [
                    EnumVal("INVALID", "0", "Invalid"),
                    EnumVal("VALID", "0x1", "Valid"),
                ]),
                Field("LK2", 29, 2, "Lock", [
                    EnumVal("ENTIRE", "0", "All words in the set can be written to"),
                    EnumVal("ONLYX", "0x2", "Domain d can update only its associated DdACP field; all other fields are read-only"),
                    EnumVal("LOCKED", "0x3", "Locks (all words are read-only)"),
                ]),
            ]),
        ])

class Device:
    def __init__(self):
        self.modules = [
            Module_ADC_0(),
            Module_ADC_1(),
            Module_AEC_AE(),
            Module_BCTU(),
            Module_CAN_0(),
            Module_CAN_1(),
            Module_CAN_2(),
            Module_CMU_0(),
            Module_CMU_1(),
            Module_CMU_2(),
            Module_CMU_3(),
            Module_CMU_4(),
            Module_CMU_5(),
            Module_CONFIGURATION_GPR(),
            Module_CRC(),
            Module_DCM(),
            Module_DCM_GPR(),
            Module_DMAMUX_0(),
            Module_DMAMUX_1(),
            Module_DPGA_AE(),
            Module_EDMA(),
            Module_EIM(),
            Module_EMIOS_0(),
            Module_EMIOS_1(),
            Module_ERM(),
            Module_FCCU(),
            Module_FIRC(),
            Module_FLASH(),
            Module_FLEXIO(),
            Module_FXOSC(),
            Module_GDU_AE(),
            Module_HVI_AE(),
            Module_INTM(),
            Module_JDC(),
            Module_LCU_0(),
            Module_LCU_1(),
            Module_LPCMP_0(),
            Module_LPI2C_0(),
            Module_LPI2C_1(),
            Module_LPSPI_0(),
            Module_LPSPI_1(),
            Module_LPSPI_2(),
            Module_LPSPI_3(),
            Module_LPUART_0(),
            Module_LPUART_1(),
            Module_LPUART_2(),
            Module_LPUART_3(),
            Module_MCM_0_CM7(),
            Module_MC_CGM(),
            Module_MC_ME(),
            Module_MC_RGM(),
            Module_MDM_AP(),
            Module_MEM_OTP_AE(),
            Module_MSCM(),
            Module_MU_0__MUB(),
            Module_MU_1__MUB(),
            Module_PFLASH(),
            Module_PIT_0(),
            Module_PIT_1(),
            Module_PLL(),
            Module_PMC(),
            Module_PMC_AE(),
            Module_PRAMC_0(),
            Module_RTC(),
            Module_SDA_AP(),
            Module_SELFTEST_GPR(),
            Module_SIRC(),
            Module_SIUL2(),
            Module_STCU(),
            Module_STM_0(),
            Module_SWT_0(),
            Module_TCD(),
            Module_TEMPSENSE(),
            Module_TRGMUX(),
            Module_TSPC(),
            Module_VIRT_WRAPPER(),
            Module_WKPU(),
            Module_XBIC_AXBS(),
            Module_XRDC(),
        ]
        self.rowOffset = [0] * len(self.modules)

    def UpdateSheet(self, result: list, workbook: openpyxl.Workbook):
        for (Address, Value) in result:
            for index, module in enumerate(self.modules):
                if module.base_address <= Address < module.base_address + module.size:
                    name = module.GetName()
                    if name not in workbook.sheetnames:
                        sheet = workbook.create_sheet(title=name)
                        sheet['A1'] = "Address"
                        sheet['B1'] = "Name"
                        sheet['C1'] = "Value"
                        sheet['D1'] = "Description"
                        self.rowOffset[index] = 2
                    else:
                        sheet = workbook[name]
                    self.rowOffset[index] = module.Process(Address, Value, sheet, self.rowOffset[index])
                    break

def ReadFile(filename: str) -> list:
    result = []
    pattern = r'^~\"V/([0-9A-Fa-f]{8})/([0-9A-Fa-f]+)\\n\"'

    try:
        with open(filename, 'r') as file:
            for line in file:
                line = line.strip()
                match = re.match(pattern, line)
                if match:
                    hex1, hex2 = match.groups()
                    result.append((int(hex1, 16), int(hex2, 16)))  # 将两个 uint32 数字作为元组追加
    except FileNotFoundError:
        print(f"错误: 找不到文件 '{filename}'")
    except IOError:
        print(f"错误: 无法读取文件 '{filename}'")

    return result


def Parse(input_filename: str, excel_filename: str):

    # 创建新的Excel工作簿和工作表
    workbook = openpyxl.Workbook()
    workbook.remove(workbook.active)

    result = ReadFile(input_filename)

    Device().UpdateSheet(result, workbook)

    if len(workbook.sheetnames) > 0:
        for sheet in workbook.sheetnames:
            module_sheet = workbook[sheet]

            # 设置对齐方式
            alignment = Alignment(horizontal='center', vertical='center')
            for row in module_sheet.iter_rows(min_row=1, max_col=4):
                for cell in row:
                    cell.alignment = alignment

            # 自动调整列宽度
            for column in ['A', 'B', 'C', 'D']:
                module_sheet.column_dimensions[column].width = max(module_sheet.column_dimensions[column].width, max(len(str(cell.value)) for cell in module_sheet[column])) + 2
        workbook.save(excel_filename)


def main():
    if len(sys.argv) != 2:
        print("使用方法: python {} <输入文件名>".format(sys.argv[0]))
        sys.exit(1)

    input_filename = sys.argv[1]
    excel_filename = input_filename.rsplit('.', 1)[0] + '.xlsx'

    Parse(input_filename, excel_filename)


if __name__ == "__main__":
    main()
