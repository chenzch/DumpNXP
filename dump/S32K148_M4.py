#!/usr/bin/env python3
# 
# Copyright 2016-2022 NXP
# 
# NXP Confidential. This software is owned or controlled by NXP and may only be 
# used strictly in accordance with the applicable license terms. By expressly 
# accepting such terms or by downloading, installing, activating and/or otherwise 
# using the software, you are agreeing that you have read, and that you agree to 
# comply with and are bound by, such license terms. If you do not agree to be 
# bound by the applicable license terms, then you may not retain, install, 
# activate or otherwise use the software. The production use license in 
# Section 2.3 is expressly granted for this software.
#   
import sys
import re
import openpyxl

from openpyxl.styles import Alignment
import openpyxl.worksheet
import openpyxl.worksheet.worksheet

class EnumVal:
    def __init__(self, name: str, MasKStr: str, description: str):
        self.name = name
        self.maskVal = 0xFFFFFFFF
        self.intVal = 1
        self.description = description
        try:
            if MasKStr.startswith('#'):
                self.maskVal = int(MasKStr.replace('0', '1').replace('x', '0').replace('#', '0b'), 2)
                self.intVal = int(MasKStr.replace('x', '0').replace('#', '0b'), 2)
            elif MasKStr.startswith('0x'):
                self.intVal = int(MasKStr, 16)
            else:
                self.intVal = int(MasKStr)
        except ValueError:
            self.maskVal = 0
            self.intVal = 1

    def Match(self, Value: int) -> bool:
        return (Value & self.maskVal) == self.intVal

class Field:
    def __init__(self, name: str, bit_offset: int, bit_width: int, description: str, enumVals: list):
        self.name = name
        self.bit_offset = bit_offset
        self.bit_width = bit_width
        self.description = description
        self.enumVals = enumVals


class Register:
    def __init__(self, name: str, Address: int, Size: int, Description: str, Fields: list):
        self.name = name
        self.Address = Address
        self.Size = Size
        self.Description = Description
        self.Fields = Fields

class Peripheral:
    def __init__(self, name: str, base_address: int, size: int, registers: list):
        self.name = name
        self.base_address = base_address
        self.size = size
        self.registers = registers

    def GetName(self) -> str:
        return self.name

    def Process(self, Address: int, Value: int, sheet: openpyxl.worksheet.worksheet.Worksheet, offset: int) -> int:
        for register in self.registers:
            if register.Address == Address:
                sheet[f"A{offset}"] = f"0x{Address:08X}"
                sheet[f"B{offset}"] = register.name
                sheet[f"C{offset}"] = f"0x{Value:0{(register.Size + 3) // 4}X}"
                sheet[f"D{offset}"] = register.Description
                offset += 1
                for field in register.Fields:
                    mask = (1 << field.bit_width) - 1
                    value = (Value >> field.bit_offset) & mask
                    sheet[f"A{offset}"] = f"{field.bit_offset} + {field.bit_width}"
                    sheet[f"B{offset}"] = field.name
                    sheet[f"C{offset}"] = f"0x{value:0{(field.bit_width + 3) // 4}X}"
                    sheet[f"D{offset}"] = field.description
                    offset += 1
                    for enumVal in field.enumVals:
                        if enumVal.Match(value):
                            sheet[f"C{offset}"] = enumVal.name
                            sheet[f"D{offset}"] = enumVal.description
                            offset += 1
                break
        return offset

class Module_ADC0(Peripheral):
    def __init__(self):
        super().__init__("ADC0", 0x4003B000, 0x208, [
            Register("SC1A", 0x4003B000, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1B", 0x4003B004, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1C", 0x4003B008, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1D", 0x4003B00C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1E", 0x4003B010, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1F", 0x4003B014, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1G", 0x4003B018, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1H", 0x4003B01C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1I", 0x4003B020, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1J", 0x4003B024, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1K", 0x4003B028, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1L", 0x4003B02C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1M", 0x4003B030, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1N", 0x4003B034, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1O", 0x4003B038, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1P", 0x4003B03C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("CFG1", 0x4003B040, 32, "ADC Configuration Register 1", [
                Field("ADIV", 5, 2, "Clock Divide Select", [
                    EnumVal("ADIV_0", "0", "The divide ratio is 1 and the clock rate is input clock."),
                    EnumVal("ADIV_1", "0x1", "The divide ratio is 2 and the clock rate is (input clock)/2."),
                    EnumVal("ADIV_2", "0x2", "The divide ratio is 4 and the clock rate is (input clock)/4."),
                    EnumVal("ADIV_3", "0x3", "The divide ratio is 8 and the clock rate is (input clock)/8."),
                ]),
                Field("MODE", 2, 2, "Conversion mode selection", [
                    EnumVal("MODE_0", "0", "8-bit conversion."),
                    EnumVal("MODE_1", "0x1", "12-bit conversion."),
                    EnumVal("MODE_2", "0x2", "10-bit conversion."),
                ]),
                Field("ADICLK", 0, 2, "Input Clock Select", [
                    EnumVal("ADICLK_0", "0", "Alternate clock 1 (ALTCLK1)"),
                    EnumVal("ADICLK_1", "0x1", "Alternate clock 2 (ALTCLK2)"),
                    EnumVal("ADICLK_2", "0x2", "Alternate clock 3 (ALTCLK3)"),
                    EnumVal("ADICLK_3", "0x3", "Alternate clock 4 (ALTCLK4)"),
                ]),
            ]),
            Register("CFG2", 0x4003B044, 32, "ADC Configuration Register 2", [
                Field("SMPLTS", 0, 8, "Sample Time Select", [
                ]),
            ]),
            Register("RA", 0x4003B048, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RB", 0x4003B04C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RC", 0x4003B050, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RD", 0x4003B054, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RE", 0x4003B058, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RF", 0x4003B05C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RG", 0x4003B060, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RH", 0x4003B064, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RI", 0x4003B068, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RJ", 0x4003B06C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RK", 0x4003B070, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RL", 0x4003B074, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RM", 0x4003B078, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RN", 0x4003B07C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RO", 0x4003B080, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RP", 0x4003B084, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("CV0", 0x4003B088, 32, "Compare Value Registers", [
                Field("CV", 0, 16, "Compare Value.", [
                ]),
            ]),
            Register("CV1", 0x4003B08C, 32, "Compare Value Registers", [
                Field("CV", 0, 16, "Compare Value.", [
                ]),
            ]),
            Register("SC2", 0x4003B090, 32, "Status and Control Register 2", [
                Field("ADACT", 7, 1, "Conversion Active", [
                    EnumVal("ADACT_0", "0", "Conversion not in progress."),
                    EnumVal("ADACT_1", "0x1", "Conversion in progress."),
                ]),
                Field("ADTRG", 6, 1, "Conversion Trigger Select", [
                    EnumVal("ADTRG_0", "0", "Software trigger selected."),
                    EnumVal("ADTRG_1", "0x1", "Hardware trigger selected."),
                ]),
                Field("ACFE", 5, 1, "Compare Function Enable", [
                    EnumVal("ACFE_0", "0", "Compare function disabled."),
                    EnumVal("ACFE_1", "0x1", "Compare function enabled."),
                ]),
                Field("ACFGT", 4, 1, "Compare Function Greater Than Enable", [
                ]),
                Field("ACREN", 3, 1, "Compare Function Range Enable", [
                ]),
                Field("DMAEN", 2, 1, "DMA Enable", [
                    EnumVal("DMAEN_0", "0", "DMA is disabled."),
                    EnumVal("DMAEN_1", "0x1", "DMA is enabled and will assert the ADC DMA request during an ADC conversion complete event , which is indicated when any SC1n[COCO] flag is asserted."),
                ]),
                Field("REFSEL", 0, 2, "Voltage Reference Selection", [
                    EnumVal("REFSEL_0", "0", "Default voltage reference pin pair, that is, external pins VREFH and VREFL"),
                    EnumVal("REFSEL_1", "0x1", "Alternate reference voltage, that is, VALTH. This voltage may be additional external pin or internal source depending on the MCU configuration. See the chip configuration information for details specific to this MCU."),
                ]),
            ]),
            Register("SC3", 0x4003B094, 32, "Status and Control Register 3", [
                Field("CAL", 7, 1, "Calibration", [
                ]),
                Field("ADCO", 3, 1, "Continuous Conversion Enable", [
                    EnumVal("ADCO_0", "0", "One conversion will be performed (or one set of conversions, if AVGE is set) after a conversion is initiated."),
                    EnumVal("ADCO_1", "0x1", "Continuous conversions will be performed (or continuous sets of conversions, if AVGE is set) after a conversion is initiated."),
                ]),
                Field("AVGE", 2, 1, "Hardware Average Enable", [
                    EnumVal("AVGE_0", "0", "Hardware average function disabled."),
                    EnumVal("AVGE_1", "0x1", "Hardware average function enabled."),
                ]),
                Field("AVGS", 0, 2, "Hardware Average Select", [
                    EnumVal("AVGS_0", "0", "4 samples averaged."),
                    EnumVal("AVGS_1", "0x1", "8 samples averaged."),
                    EnumVal("AVGS_2", "0x2", "16 samples averaged."),
                    EnumVal("AVGS_3", "0x3", "32 samples averaged."),
                ]),
            ]),
            Register("BASE_OFS", 0x4003B098, 32, "BASE Offset Register", [
                Field("BA_OFS", 0, 8, "Base Offset Error Correction Value", [
                ]),
            ]),
            Register("OFS", 0x4003B09C, 32, "ADC Offset Correction Register", [
                Field("OFS", 0, 16, "Offset Error Correction Value", [
                ]),
            ]),
            Register("USR_OFS", 0x4003B0A0, 32, "USER Offset Correction Register", [
                Field("USR_OFS", 0, 8, "USER Offset Error Correction Value", [
                ]),
            ]),
            Register("XOFS", 0x4003B0A4, 32, "ADC X Offset Correction Register", [
                Field("XOFS", 0, 6, "X offset error correction value", [
                ]),
            ]),
            Register("YOFS", 0x4003B0A8, 32, "ADC Y Offset Correction Register", [
                Field("YOFS", 0, 8, "Y offset error correction value", [
                ]),
            ]),
            Register("G", 0x4003B0AC, 32, "ADC Gain Register", [
                Field("G", 0, 11, "G", [
                ]),
            ]),
            Register("UG", 0x4003B0B0, 32, "ADC User Gain Register", [
                Field("UG", 0, 10, "UG", [
                ]),
            ]),
            Register("CLPS", 0x4003B0B4, 32, "ADC General Calibration Value Register S", [
                Field("CLPS", 0, 7, "CLPS", [
                ]),
            ]),
            Register("CLP3", 0x4003B0B8, 32, "ADC Plus-Side General Calibration Value Register 3", [
                Field("CLP3", 0, 10, "CLP3", [
                ]),
            ]),
            Register("CLP2", 0x4003B0BC, 32, "ADC Plus-Side General Calibration Value Register 2", [
                Field("CLP2", 0, 10, "CLP2", [
                ]),
            ]),
            Register("CLP1", 0x4003B0C0, 32, "ADC Plus-Side General Calibration Value Register 1", [
                Field("CLP1", 0, 9, "CLP1", [
                ]),
            ]),
            Register("CLP0", 0x4003B0C4, 32, "ADC Plus-Side General Calibration Value Register 0", [
                Field("CLP0", 0, 8, "CLP0", [
                ]),
            ]),
            Register("CLPX", 0x4003B0C8, 32, "ADC Plus-Side General Calibration Value Register X", [
                Field("CLPX", 0, 7, "CLPX", [
                ]),
            ]),
            Register("CLP9", 0x4003B0CC, 32, "ADC Plus-Side General Calibration Value Register 9", [
                Field("CLP9", 0, 7, "CLP9", [
                ]),
            ]),
            Register("CLPS_OFS", 0x4003B0D0, 32, "ADC General Calibration Offset Value Register S", [
                Field("CLPS_OFS", 0, 4, "CLPS Offset", [
                ]),
            ]),
            Register("CLP3_OFS", 0x4003B0D4, 32, "ADC Plus-Side General Calibration Offset Value Register 3", [
                Field("CLP3_OFS", 0, 4, "CLP3 Offset", [
                ]),
            ]),
            Register("CLP2_OFS", 0x4003B0D8, 32, "ADC Plus-Side General Calibration Offset Value Register 2", [
                Field("CLP2_OFS", 0, 4, "CLP2 Offset", [
                ]),
            ]),
            Register("CLP1_OFS", 0x4003B0DC, 32, "ADC Plus-Side General Calibration Offset Value Register 1", [
                Field("CLP1_OFS", 0, 4, "CLP1 Offset", [
                ]),
            ]),
            Register("CLP0_OFS", 0x4003B0E0, 32, "ADC Plus-Side General Calibration Offset Value Register 0", [
                Field("CLP0_OFS", 0, 4, "CLP0 Offset", [
                ]),
            ]),
            Register("CLPX_OFS", 0x4003B0E4, 32, "ADC Plus-Side General Calibration Offset Value Register X", [
                Field("CLPX_OFS", 0, 12, "CLPX Offset", [
                ]),
            ]),
            Register("CLP9_OFS", 0x4003B0E8, 32, "ADC Plus-Side General Calibration Offset Value Register 9", [
                Field("CLP9_OFS", 0, 12, "CLP9 Offset", [
                ]),
            ]),
            Register("aSC1A", 0x4003B108, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1B", 0x4003B10C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1C", 0x4003B110, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1D", 0x4003B114, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1E", 0x4003B118, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1F", 0x4003B11C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1G", 0x4003B120, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1H", 0x4003B124, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1I", 0x4003B128, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1J", 0x4003B12C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1K", 0x4003B130, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1L", 0x4003B134, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1M", 0x4003B138, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1N", 0x4003B13C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1O", 0x4003B140, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1P", 0x4003B144, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC10", 0x4003B148, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC11", 0x4003B14C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC12", 0x4003B150, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC13", 0x4003B154, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC14", 0x4003B158, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC15", 0x4003B15C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC16", 0x4003B160, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC17", 0x4003B164, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC18", 0x4003B168, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC19", 0x4003B16C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC110", 0x4003B170, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC111", 0x4003B174, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC112", 0x4003B178, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC113", 0x4003B17C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC114", 0x4003B180, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC115", 0x4003B184, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aRA", 0x4003B188, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRB", 0x4003B18C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRC", 0x4003B190, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRD", 0x4003B194, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRE", 0x4003B198, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRF", 0x4003B19C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRG", 0x4003B1A0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRH", 0x4003B1A4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRI", 0x4003B1A8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRJ", 0x4003B1AC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRK", 0x4003B1B0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRL", 0x4003B1B4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRM", 0x4003B1B8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRN", 0x4003B1BC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRO", 0x4003B1C0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRP", 0x4003B1C4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R0", 0x4003B1C8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R1", 0x4003B1CC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R2", 0x4003B1D0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R3", 0x4003B1D4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R4", 0x4003B1D8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R5", 0x4003B1DC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R6", 0x4003B1E0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R7", 0x4003B1E4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R8", 0x4003B1E8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R9", 0x4003B1EC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R10", 0x4003B1F0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R11", 0x4003B1F4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R12", 0x4003B1F8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R13", 0x4003B1FC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R14", 0x4003B200, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R15", 0x4003B204, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
        ])

class Module_ADC1(Peripheral):
    def __init__(self):
        super().__init__("ADC1", 0x40027000, 0x208, [
            Register("SC1A", 0x40027000, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1B", 0x40027004, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1C", 0x40027008, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1D", 0x4002700C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1E", 0x40027010, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1F", 0x40027014, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1G", 0x40027018, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1H", 0x4002701C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1I", 0x40027020, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1J", 0x40027024, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1K", 0x40027028, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1L", 0x4002702C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1M", 0x40027030, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1N", 0x40027034, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1O", 0x40027038, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC1P", 0x4002703C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("CFG1", 0x40027040, 32, "ADC Configuration Register 1", [
                Field("ADIV", 5, 2, "Clock Divide Select", [
                    EnumVal("ADIV_0", "0", "The divide ratio is 1 and the clock rate is input clock."),
                    EnumVal("ADIV_1", "0x1", "The divide ratio is 2 and the clock rate is (input clock)/2."),
                    EnumVal("ADIV_2", "0x2", "The divide ratio is 4 and the clock rate is (input clock)/4."),
                    EnumVal("ADIV_3", "0x3", "The divide ratio is 8 and the clock rate is (input clock)/8."),
                ]),
                Field("MODE", 2, 2, "Conversion mode selection", [
                    EnumVal("MODE_0", "0", "8-bit conversion."),
                    EnumVal("MODE_1", "0x1", "12-bit conversion."),
                    EnumVal("MODE_2", "0x2", "10-bit conversion."),
                ]),
                Field("ADICLK", 0, 2, "Input Clock Select", [
                    EnumVal("ADICLK_0", "0", "Alternate clock 1 (ALTCLK1)"),
                    EnumVal("ADICLK_1", "0x1", "Alternate clock 2 (ALTCLK2)"),
                    EnumVal("ADICLK_2", "0x2", "Alternate clock 3 (ALTCLK3)"),
                    EnumVal("ADICLK_3", "0x3", "Alternate clock 4 (ALTCLK4)"),
                ]),
            ]),
            Register("CFG2", 0x40027044, 32, "ADC Configuration Register 2", [
                Field("SMPLTS", 0, 8, "Sample Time Select", [
                ]),
            ]),
            Register("RA", 0x40027048, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RB", 0x4002704C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RC", 0x40027050, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RD", 0x40027054, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RE", 0x40027058, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RF", 0x4002705C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RG", 0x40027060, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RH", 0x40027064, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RI", 0x40027068, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RJ", 0x4002706C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RK", 0x40027070, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RL", 0x40027074, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RM", 0x40027078, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RN", 0x4002707C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RO", 0x40027080, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("RP", 0x40027084, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("CV0", 0x40027088, 32, "Compare Value Registers", [
                Field("CV", 0, 16, "Compare Value.", [
                ]),
            ]),
            Register("CV1", 0x4002708C, 32, "Compare Value Registers", [
                Field("CV", 0, 16, "Compare Value.", [
                ]),
            ]),
            Register("SC2", 0x40027090, 32, "Status and Control Register 2", [
                Field("ADACT", 7, 1, "Conversion Active", [
                    EnumVal("ADACT_0", "0", "Conversion not in progress."),
                    EnumVal("ADACT_1", "0x1", "Conversion in progress."),
                ]),
                Field("ADTRG", 6, 1, "Conversion Trigger Select", [
                    EnumVal("ADTRG_0", "0", "Software trigger selected."),
                    EnumVal("ADTRG_1", "0x1", "Hardware trigger selected."),
                ]),
                Field("ACFE", 5, 1, "Compare Function Enable", [
                    EnumVal("ACFE_0", "0", "Compare function disabled."),
                    EnumVal("ACFE_1", "0x1", "Compare function enabled."),
                ]),
                Field("ACFGT", 4, 1, "Compare Function Greater Than Enable", [
                ]),
                Field("ACREN", 3, 1, "Compare Function Range Enable", [
                ]),
                Field("DMAEN", 2, 1, "DMA Enable", [
                    EnumVal("DMAEN_0", "0", "DMA is disabled."),
                    EnumVal("DMAEN_1", "0x1", "DMA is enabled and will assert the ADC DMA request during an ADC conversion complete event , which is indicated when any SC1n[COCO] flag is asserted."),
                ]),
                Field("REFSEL", 0, 2, "Voltage Reference Selection", [
                    EnumVal("REFSEL_0", "0", "Default voltage reference pin pair, that is, external pins VREFH and VREFL"),
                    EnumVal("REFSEL_1", "0x1", "Alternate reference voltage, that is, VALTH. This voltage may be additional external pin or internal source depending on the MCU configuration. See the chip configuration information for details specific to this MCU."),
                ]),
            ]),
            Register("SC3", 0x40027094, 32, "Status and Control Register 3", [
                Field("CAL", 7, 1, "Calibration", [
                ]),
                Field("ADCO", 3, 1, "Continuous Conversion Enable", [
                    EnumVal("ADCO_0", "0", "One conversion will be performed (or one set of conversions, if AVGE is set) after a conversion is initiated."),
                    EnumVal("ADCO_1", "0x1", "Continuous conversions will be performed (or continuous sets of conversions, if AVGE is set) after a conversion is initiated."),
                ]),
                Field("AVGE", 2, 1, "Hardware Average Enable", [
                    EnumVal("AVGE_0", "0", "Hardware average function disabled."),
                    EnumVal("AVGE_1", "0x1", "Hardware average function enabled."),
                ]),
                Field("AVGS", 0, 2, "Hardware Average Select", [
                    EnumVal("AVGS_0", "0", "4 samples averaged."),
                    EnumVal("AVGS_1", "0x1", "8 samples averaged."),
                    EnumVal("AVGS_2", "0x2", "16 samples averaged."),
                    EnumVal("AVGS_3", "0x3", "32 samples averaged."),
                ]),
            ]),
            Register("BASE_OFS", 0x40027098, 32, "BASE Offset Register", [
                Field("BA_OFS", 0, 8, "Base Offset Error Correction Value", [
                ]),
            ]),
            Register("OFS", 0x4002709C, 32, "ADC Offset Correction Register", [
                Field("OFS", 0, 16, "Offset Error Correction Value", [
                ]),
            ]),
            Register("USR_OFS", 0x400270A0, 32, "USER Offset Correction Register", [
                Field("USR_OFS", 0, 8, "USER Offset Error Correction Value", [
                ]),
            ]),
            Register("XOFS", 0x400270A4, 32, "ADC X Offset Correction Register", [
                Field("XOFS", 0, 6, "X offset error correction value", [
                ]),
            ]),
            Register("YOFS", 0x400270A8, 32, "ADC Y Offset Correction Register", [
                Field("YOFS", 0, 8, "Y offset error correction value", [
                ]),
            ]),
            Register("G", 0x400270AC, 32, "ADC Gain Register", [
                Field("G", 0, 11, "G", [
                ]),
            ]),
            Register("UG", 0x400270B0, 32, "ADC User Gain Register", [
                Field("UG", 0, 10, "UG", [
                ]),
            ]),
            Register("CLPS", 0x400270B4, 32, "ADC General Calibration Value Register S", [
                Field("CLPS", 0, 7, "CLPS", [
                ]),
            ]),
            Register("CLP3", 0x400270B8, 32, "ADC Plus-Side General Calibration Value Register 3", [
                Field("CLP3", 0, 10, "CLP3", [
                ]),
            ]),
            Register("CLP2", 0x400270BC, 32, "ADC Plus-Side General Calibration Value Register 2", [
                Field("CLP2", 0, 10, "CLP2", [
                ]),
            ]),
            Register("CLP1", 0x400270C0, 32, "ADC Plus-Side General Calibration Value Register 1", [
                Field("CLP1", 0, 9, "CLP1", [
                ]),
            ]),
            Register("CLP0", 0x400270C4, 32, "ADC Plus-Side General Calibration Value Register 0", [
                Field("CLP0", 0, 8, "CLP0", [
                ]),
            ]),
            Register("CLPX", 0x400270C8, 32, "ADC Plus-Side General Calibration Value Register X", [
                Field("CLPX", 0, 7, "CLPX", [
                ]),
            ]),
            Register("CLP9", 0x400270CC, 32, "ADC Plus-Side General Calibration Value Register 9", [
                Field("CLP9", 0, 7, "CLP9", [
                ]),
            ]),
            Register("CLPS_OFS", 0x400270D0, 32, "ADC General Calibration Offset Value Register S", [
                Field("CLPS_OFS", 0, 4, "CLPS Offset", [
                ]),
            ]),
            Register("CLP3_OFS", 0x400270D4, 32, "ADC Plus-Side General Calibration Offset Value Register 3", [
                Field("CLP3_OFS", 0, 4, "CLP3 Offset", [
                ]),
            ]),
            Register("CLP2_OFS", 0x400270D8, 32, "ADC Plus-Side General Calibration Offset Value Register 2", [
                Field("CLP2_OFS", 0, 4, "CLP2 Offset", [
                ]),
            ]),
            Register("CLP1_OFS", 0x400270DC, 32, "ADC Plus-Side General Calibration Offset Value Register 1", [
                Field("CLP1_OFS", 0, 4, "CLP1 Offset", [
                ]),
            ]),
            Register("CLP0_OFS", 0x400270E0, 32, "ADC Plus-Side General Calibration Offset Value Register 0", [
                Field("CLP0_OFS", 0, 4, "CLP0 Offset", [
                ]),
            ]),
            Register("CLPX_OFS", 0x400270E4, 32, "ADC Plus-Side General Calibration Offset Value Register X", [
                Field("CLPX_OFS", 0, 12, "CLPX Offset", [
                ]),
            ]),
            Register("CLP9_OFS", 0x400270E8, 32, "ADC Plus-Side General Calibration Offset Value Register 9", [
                Field("CLP9_OFS", 0, 12, "CLP9 Offset", [
                ]),
            ]),
            Register("aSC1A", 0x40027108, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1B", 0x4002710C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1C", 0x40027110, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1D", 0x40027114, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1E", 0x40027118, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1F", 0x4002711C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1G", 0x40027120, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1H", 0x40027124, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1I", 0x40027128, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1J", 0x4002712C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1K", 0x40027130, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1L", 0x40027134, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1M", 0x40027138, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1N", 0x4002713C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1O", 0x40027140, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aSC1P", 0x40027144, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC10", 0x40027148, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC11", 0x4002714C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC12", 0x40027150, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC13", 0x40027154, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC14", 0x40027158, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC15", 0x4002715C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC16", 0x40027160, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC17", 0x40027164, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC18", 0x40027168, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC19", 0x4002716C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC110", 0x40027170, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC111", 0x40027174, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC112", 0x40027178, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC113", 0x4002717C, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC114", 0x40027180, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("SC115", 0x40027184, 32, "ADC Status and Control Register 1", [
                Field("COCO", 7, 1, "Conversion Complete Flag", [
                    EnumVal("COCO_0", "0", "Conversion is not completed."),
                    EnumVal("COCO_1", "0x1", "Conversion is completed."),
                ]),
                Field("AIEN", 6, 1, "Interrupt Enable", [
                    EnumVal("AIEN_0", "0", "Conversion complete interrupt is disabled."),
                    EnumVal("AIEN_1", "0x1", "Conversion complete interrupt is enabled."),
                ]),
                Field("ADCH", 0, 6, "Input channel select", [
                    EnumVal("ADCH_0", "0", "External channel 0 is selected as input."),
                    EnumVal("ADCH_1", "0x1", "External channel 1 is selected as input."),
                    EnumVal("ADCH_2", "0x2", "External channel 2 is selected as input."),
                    EnumVal("ADCH_3", "0x3", "External channel 3 is selected as input."),
                    EnumVal("ADCH_4", "0x4", "External channel 4 is selected as input."),
                    EnumVal("ADCH_5", "0x5", "External channel 5 is selected as input."),
                    EnumVal("ADCH_6", "0x6", "External channel 6 is selected as input."),
                    EnumVal("ADCH_7", "0x7", "External channel 7 is selected as input."),
                    EnumVal("ADCH_8", "0x8", "External channel 8 is selected as input."),
                    EnumVal("ADCH_9", "0x9", "External channel 9 is selected as input."),
                    EnumVal("ADCH_10", "0xA", "External channel 10 is selected as input."),
                    EnumVal("ADCH_11", "0xB", "External channel 11 is selected as input."),
                    EnumVal("ADCH_12", "0xC", "External channel 12 is selected as input."),
                    EnumVal("ADCH_13", "0xD", "External channel 13 is selected as input."),
                    EnumVal("ADCH_14", "0xE", "External channel 14 is selected as input."),
                    EnumVal("ADCH_15", "0xF", "External channel 15 is selected as input."),
                    EnumVal("ADCH_21", "0x15", "Internal channel 0 is selected as input."),
                    EnumVal("ADCH_22", "0x16", "Internal channel 1 is selected as input."),
                    EnumVal("ADCH_23", "0x17", "Internal channel 2 is selected as input."),
                    EnumVal("ADCH_27", "0x1B", "Band Gap"),
                    EnumVal("ADCH_28", "0x1C", "Internal channel 3 is selected as input."),
                    EnumVal("ADCH_29", "0x1D", "VREFSH is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_30", "0x1E", "VREFSL is selected as input. Voltage reference selected is determined by SC2[REFSEL]."),
                    EnumVal("ADCH_32", "0x20", "External channel 16 is selected as input."),
                    EnumVal("ADCH_33", "0x21", "External channel 17 is selected as input."),
                    EnumVal("ADCH_34", "0x22", "External channel 18 is selected as input."),
                    EnumVal("ADCH_35", "0x23", "External channel 19 is selected as input."),
                    EnumVal("ADCH_36", "0x24", "External channel 20 is selected as input."),
                    EnumVal("ADCH_37", "0x25", "External channel 21 is selected as input."),
                    EnumVal("ADCH_38", "0x26", "External channel 22 is selected as input."),
                    EnumVal("ADCH_39", "0x27", "External channel 23 is selected as input."),
                    EnumVal("ADCH_40", "0x28", "External channel 24 is selected as input."),
                    EnumVal("ADCH_41", "0x29", "External channel 25 is selected as input."),
                    EnumVal("ADCH_42", "0x2A", "External channel 26 is selected as input."),
                    EnumVal("ADCH_43", "0x2B", "External channel 27 is selected as input."),
                    EnumVal("ADCH_44", "0x2C", "External channel 28 is selected as input."),
                    EnumVal("ADCH_45", "0x2D", "External channel 29 is selected as input."),
                    EnumVal("ADCH_46", "0x2E", "External channel 30 is selected as input."),
                    EnumVal("ADCH_47", "0x2F", "External channel 31 is selected as input."),
                    EnumVal("ADCH_63", "0x3F", "Module is disabled"),
                ]),
            ]),
            Register("aRA", 0x40027188, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRB", 0x4002718C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRC", 0x40027190, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRD", 0x40027194, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRE", 0x40027198, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRF", 0x4002719C, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRG", 0x400271A0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRH", 0x400271A4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRI", 0x400271A8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRJ", 0x400271AC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRK", 0x400271B0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRL", 0x400271B4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRM", 0x400271B8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRN", 0x400271BC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRO", 0x400271C0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("aRP", 0x400271C4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R0", 0x400271C8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R1", 0x400271CC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R2", 0x400271D0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R3", 0x400271D4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R4", 0x400271D8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R5", 0x400271DC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R6", 0x400271E0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R7", 0x400271E4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R8", 0x400271E8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R9", 0x400271EC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R10", 0x400271F0, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R11", 0x400271F4, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R12", 0x400271F8, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R13", 0x400271FC, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R14", 0x40027200, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
            Register("R15", 0x40027204, 32, "ADC Data Result Registers", [
                Field("D", 0, 12, "Data result", [
                ]),
            ]),
        ])

class Module_AIPS(Peripheral):
    def __init__(self):
        super().__init__("AIPS", 0x40000000, 0x70, [
            Register("MPRA", 0x40000000, 32, "Master Privilege Register A", [
                Field("MTR0", 30, 1, "Master 0 Trusted For Read", [
                    EnumVal("MTR0_0", "0", "This master is not trusted for read accesses."),
                    EnumVal("MTR0_1", "0x1", "This master is trusted for read accesses."),
                ]),
                Field("MTW0", 29, 1, "Master 0 Trusted For Writes", [
                    EnumVal("MTW0_0", "0", "This master is not trusted for write accesses."),
                    EnumVal("MTW0_1", "0x1", "This master is trusted for write accesses."),
                ]),
                Field("MPL0", 28, 1, "Master 0 Privilege Level", [
                    EnumVal("MPL0_0", "0", "Accesses from this master are forced to user-mode."),
                    EnumVal("MPL0_1", "0x1", "Accesses from this master are not forced to user-mode."),
                ]),
                Field("MTR1", 26, 1, "Master 1 Trusted for Read", [
                    EnumVal("MTR1_0", "0", "This master is not trusted for read accesses."),
                    EnumVal("MTR1_1", "0x1", "This master is trusted for read accesses."),
                ]),
                Field("MTW1", 25, 1, "Master 1 Trusted for Writes", [
                    EnumVal("MTW1_0", "0", "This master is not trusted for write accesses."),
                    EnumVal("MTW1_1", "0x1", "This master is trusted for write accesses."),
                ]),
                Field("MPL1", 24, 1, "Master 1 Privilege Level", [
                    EnumVal("MPL1_0", "0", "Accesses from this master are forced to user-mode."),
                    EnumVal("MPL1_1", "0x1", "Accesses from this master are not forced to user-mode."),
                ]),
                Field("MTR2", 22, 1, "Master 2 Trusted For Read", [
                    EnumVal("MTR2_0", "0", "This master is not trusted for read accesses."),
                    EnumVal("MTR2_1", "0x1", "This master is trusted for read accesses."),
                ]),
                Field("MTW2", 21, 1, "Master 2 Trusted For Writes", [
                    EnumVal("MTW2_0", "0", "This master is not trusted for write accesses."),
                    EnumVal("MTW2_1", "0x1", "This master is trusted for write accesses."),
                ]),
                Field("MPL2", 20, 1, "Master 2 Privilege Level", [
                    EnumVal("MPL2_0", "0", "Accesses from this master are forced to user-mode."),
                    EnumVal("MPL2_1", "0x1", "Accesses from this master are not forced to user-mode."),
                ]),
                Field("MTR3", 18, 1, "Master 3 Trusted For Read", [
                    EnumVal("MTR3_0", "0", "This master is not trusted for read accesses."),
                    EnumVal("MTR3_1", "0x1", "This master is trusted for read accesses."),
                ]),
                Field("MTW3", 17, 1, "Master 3 Trusted For Writes", [
                    EnumVal("MTW3_0", "0", "This master is not trusted for write accesses."),
                    EnumVal("MTW3_1", "0x1", "This master is trusted for write accesses."),
                ]),
                Field("MPL3", 16, 1, "Master 3 Privilege Level", [
                    EnumVal("MPL3_0", "0", "Accesses from this master are forced to user-mode."),
                    EnumVal("MPL3_1", "0x1", "Accesses from this master are not forced to user-mode."),
                ]),
            ]),
            Register("PACRA", 0x40000020, 32, "Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("PACRB", 0x40000024, 32, "Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("PACRD", 0x4000002C, 32, "Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRA", 0x40000040, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP4", 14, 1, "Supervisor Protect", [
                    EnumVal("SP4_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP4_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP4", 13, 1, "Write Protect", [
                    EnumVal("WP4_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP4_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP4", 12, 1, "Trusted Protect", [
                    EnumVal("TP4_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP4_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP7", 2, 1, "Supervisor Protect", [
                    EnumVal("SP7_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP7_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP7", 1, 1, "Write Protect", [
                    EnumVal("WP7_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP7_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP7", 0, 1, "Trusted Protect", [
                    EnumVal("TP7_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP7_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRB", 0x40000044, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP3", 18, 1, "Supervisor Protect", [
                    EnumVal("SP3_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP3_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP3", 17, 1, "Write Protect", [
                    EnumVal("WP3_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP3_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP3", 16, 1, "Trusted Protect", [
                    EnumVal("TP3_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP3_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP4", 14, 1, "Supervisor Protect", [
                    EnumVal("SP4_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP4_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP4", 13, 1, "Write Protect", [
                    EnumVal("WP4_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP4_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP4", 12, 1, "Trusted Protect", [
                    EnumVal("TP4_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP4_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRC", 0x40000048, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP2", 22, 1, "Supervisor Protect", [
                    EnumVal("SP2_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP2_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP2", 21, 1, "Write Protect", [
                    EnumVal("WP2_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP2_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP2", 20, 1, "Trusted Protect", [
                    EnumVal("TP2_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP2_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP7", 2, 1, "Supervisor Protect", [
                    EnumVal("SP7_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP7_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP7", 1, 1, "Write Protect", [
                    EnumVal("WP7_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP7_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP7", 0, 1, "Trusted Protect", [
                    EnumVal("TP7_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP7_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRD", 0x4000004C, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP2", 22, 1, "Supervisor Protect", [
                    EnumVal("SP2_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP2_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP2", 21, 1, "Write Protect", [
                    EnumVal("WP2_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP2_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP2", 20, 1, "Trusted Protect", [
                    EnumVal("TP2_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP2_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP3", 18, 1, "Supervisor Protect", [
                    EnumVal("SP3_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP3_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP3", 17, 1, "Write Protect", [
                    EnumVal("WP3_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP3_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP3", 16, 1, "Trusted Protect", [
                    EnumVal("TP3_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP3_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRE", 0x40000050, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRF", 0x40000054, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP2", 22, 1, "Supervisor Protect", [
                    EnumVal("SP2_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP2_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP2", 21, 1, "Write Protect", [
                    EnumVal("WP2_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP2_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP2", 20, 1, "Trusted Protect", [
                    EnumVal("TP2_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP2_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP3", 18, 1, "Supervisor Protect", [
                    EnumVal("SP3_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP3_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP3", 17, 1, "Write Protect", [
                    EnumVal("WP3_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP3_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP3", 16, 1, "Trusted Protect", [
                    EnumVal("TP3_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP3_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP4", 14, 1, "Supervisor Protect", [
                    EnumVal("SP4_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP4_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP4", 13, 1, "Write Protect", [
                    EnumVal("WP4_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP4_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP4", 12, 1, "Trusted Protect", [
                    EnumVal("TP4_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP4_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRG", 0x40000058, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP2", 22, 1, "Supervisor Protect", [
                    EnumVal("SP2_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP2_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP2", 21, 1, "Write Protect", [
                    EnumVal("WP2_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP2_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP2", 20, 1, "Trusted Protect", [
                    EnumVal("TP2_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP2_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP4", 14, 1, "Supervisor Protect", [
                    EnumVal("SP4_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP4_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP4", 13, 1, "Write Protect", [
                    EnumVal("WP4_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP4_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP4", 12, 1, "Trusted Protect", [
                    EnumVal("TP4_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP4_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRH", 0x4000005C, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP2", 22, 1, "Supervisor Protect", [
                    EnumVal("SP2_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP2_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP2", 21, 1, "Write Protect", [
                    EnumVal("WP2_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP2_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP2", 20, 1, "Trusted Protect", [
                    EnumVal("TP2_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP2_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRI", 0x40000060, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP3", 18, 1, "Supervisor Protect", [
                    EnumVal("SP3_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP3_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP3", 17, 1, "Write Protect", [
                    EnumVal("WP3_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP3_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP3", 16, 1, "Trusted Protect", [
                    EnumVal("TP3_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP3_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP4", 14, 1, "Supervisor Protect", [
                    EnumVal("SP4_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP4_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP4", 13, 1, "Write Protect", [
                    EnumVal("WP4_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP4_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP4", 12, 1, "Trusted Protect", [
                    EnumVal("TP4_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP4_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP7", 2, 1, "Supervisor Protect", [
                    EnumVal("SP7_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP7_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP7", 1, 1, "Write Protect", [
                    EnumVal("WP7_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP7_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP7", 0, 1, "Trusted Protect", [
                    EnumVal("TP7_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP7_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRJ", 0x40000064, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP2", 22, 1, "Supervisor Protect", [
                    EnumVal("SP2_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP2_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP2", 21, 1, "Write Protect", [
                    EnumVal("WP2_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP2_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP2", 20, 1, "Trusted Protect", [
                    EnumVal("TP2_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP2_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP3", 18, 1, "Supervisor Protect", [
                    EnumVal("SP3_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP3_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP3", 17, 1, "Write Protect", [
                    EnumVal("WP3_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP3_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP3", 16, 1, "Trusted Protect", [
                    EnumVal("TP3_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP3_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP4", 14, 1, "Supervisor Protect", [
                    EnumVal("SP4_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP4_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP4", 13, 1, "Write Protect", [
                    EnumVal("WP4_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP4_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP4", 12, 1, "Trusted Protect", [
                    EnumVal("TP4_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP4_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP7", 2, 1, "Supervisor Protect", [
                    EnumVal("SP7_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP7_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP7", 1, 1, "Write Protect", [
                    EnumVal("WP7_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP7_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP7", 0, 1, "Trusted Protect", [
                    EnumVal("TP7_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP7_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRK", 0x40000068, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP0", 30, 1, "Supervisor Protect", [
                    EnumVal("SP0_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP0_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP0", 29, 1, "Write Protect", [
                    EnumVal("WP0_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP0_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP0", 28, 1, "Trusted Protect", [
                    EnumVal("TP0_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP0_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP3", 18, 1, "Supervisor Protect", [
                    EnumVal("SP3_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP3_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP3", 17, 1, "Write Protect", [
                    EnumVal("WP3_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP3_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP3", 16, 1, "Trusted Protect", [
                    EnumVal("TP3_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP3_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
            Register("OPACRL", 0x4000006C, 32, "Off-Platform Peripheral Access Control Register", [
                Field("SP1", 26, 1, "Supervisor Protect", [
                    EnumVal("SP1_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP1_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP1", 25, 1, "Write Protect", [
                    EnumVal("WP1_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP1_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP1", 24, 1, "Trusted Protect", [
                    EnumVal("TP1_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP1_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP5", 10, 1, "Supervisor Protect", [
                    EnumVal("SP5_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP5_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP5", 9, 1, "Write Protect", [
                    EnumVal("WP5_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP5_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP5", 8, 1, "Trusted Protect", [
                    EnumVal("TP5_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP5_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP6", 6, 1, "Supervisor Protect", [
                    EnumVal("SP6_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP6_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP6", 5, 1, "Write Protect", [
                    EnumVal("WP6_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP6_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP6", 4, 1, "Trusted Protect", [
                    EnumVal("TP6_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP6_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
                Field("SP7", 2, 1, "Supervisor Protect", [
                    EnumVal("SP7_0", "0", "This peripheral does not require supervisor privilege level for accesses."),
                    EnumVal("SP7_1", "0x1", "This peripheral requires supervisor privilege level for accesses."),
                ]),
                Field("WP7", 1, 1, "Write Protect", [
                    EnumVal("WP7_0", "0", "This peripheral allows write accesses."),
                    EnumVal("WP7_1", "0x1", "This peripheral is write protected."),
                ]),
                Field("TP7", 0, 1, "Trusted Protect", [
                    EnumVal("TP7_0", "0", "Accesses from an untrusted master are allowed."),
                    EnumVal("TP7_1", "0x1", "Accesses from an untrusted master are not allowed."),
                ]),
            ]),
        ])

class Module_CMP0(Peripheral):
    def __init__(self):
        super().__init__("CMP0", 0x40073000, 0xC, [
            Register("C0", 0x40073000, 32, "CMP Control Register 0", [
                Field("DMAEN", 30, 1, "DMA Enable", [
                    EnumVal("DMAEN_0", "0", "DMA is disabled."),
                    EnumVal("DMAEN_1", "0x1", "DMA is enabled."),
                ]),
                Field("IER", 28, 1, "Comparator Interrupt Enable Rising", [
                    EnumVal("IER_0", "0", "Interrupt is disabled."),
                    EnumVal("IER_1", "0x1", "Interrupt is enabled."),
                ]),
                Field("IEF", 27, 1, "Comparator Interrupt Enable Falling", [
                    EnumVal("IEF_0", "0", "Interrupt is disabled."),
                    EnumVal("IEF_1", "0x1", "Interrupt is enabled."),
                ]),
                Field("CFR", 26, 1, "Analog Comparator Flag Rising", [
                    EnumVal("CFR_0", "0", "A rising edge has not been detected on COUT."),
                    EnumVal("CFR_1", "0x1", "A rising edge on COUT has occurred."),
                ]),
                Field("CFF", 25, 1, "Analog Comparator Flag Falling", [
                    EnumVal("CFF_0", "0", "A falling edge has not been detected on COUT."),
                    EnumVal("CFF_1", "0x1", "A falling edge on COUT has occurred."),
                ]),
                Field("COUT", 24, 1, "Analog Comparator Output", [
                ]),
                Field("FPR", 16, 8, "Filter Sample Period", [
                ]),
                Field("SE", 15, 1, "Sample Enable", [
                    EnumVal("SE_0", "0", "Sampling mode is not selected."),
                    EnumVal("SE_1", "0x1", "Sampling mode is selected."),
                ]),
                Field("WE", 14, 1, "Windowing Enable", [
                    EnumVal("WE_0", "0", "Windowing mode is not selected."),
                    EnumVal("WE_1", "0x1", "Windowing mode is selected."),
                ]),
                Field("PMODE", 12, 1, "Power Mode Select", [
                    EnumVal("PMODE_0", "0", "Low Speed (LS) comparison mode is selected."),
                    EnumVal("PMODE_1", "0x1", "High Speed (HS) comparison mode is selected, in VLPx mode, or Stop mode switched to Low Speed (LS) mode."),
                ]),
                Field("INVT", 11, 1, "Comparator invert", [
                    EnumVal("INVT_0", "0", "Does not invert the comparator output."),
                    EnumVal("INVT_1", "0x1", "Inverts the comparator output."),
                ]),
                Field("COS", 10, 1, "Comparator Output Select", [
                    EnumVal("COS_0", "0", "Set CMPO to equal COUT (filtered comparator output)."),
                    EnumVal("COS_1", "0x1", "Set CMPO to equal COUTA (unfiltered comparator output)."),
                ]),
                Field("OPE", 9, 1, "Comparator Output Pin Enable", [
                    EnumVal("OPE_0", "0", "When OPE is 0, the comparator output (after window/filter settings dependent on software configuration) is not available to a packaged pin."),
                    EnumVal("OPE_1", "0x1", "When OPE is 1, and if the software has configured the comparator to own a packaged pin, the comparator is available in a packaged pin."),
                ]),
                Field("EN", 8, 1, "Comparator Module Enable", [
                    EnumVal("EN_0", "0", "Analog Comparator is disabled."),
                    EnumVal("EN_1", "0x1", "Analog Comparator is enabled."),
                ]),
                Field("FILTER_CNT", 4, 3, "Filter Sample Count", [
                    EnumVal("FILTER_CNT_0", "0", "Filter is disabled. If SE = 1, then COUT is a logic zero (this is not a legal state, and is not recommended). If SE = 0, COUT = COUTA."),
                    EnumVal("FILTER_CNT_1", "0x1", "1 consecutive sample must agree (comparator output is simply sampled)."),
                    EnumVal("FILTER_CNT_2", "0x2", "2 consecutive samples must agree."),
                    EnumVal("FILTER_CNT_3", "0x3", "3 consecutive samples must agree."),
                    EnumVal("FILTER_CNT_4", "0x4", "4 consecutive samples must agree."),
                    EnumVal("FILTER_CNT_5", "0x5", "5 consecutive samples must agree."),
                    EnumVal("FILTER_CNT_6", "0x6", "6 consecutive samples must agree."),
                    EnumVal("FILTER_CNT_7", "0x7", "7 consecutive samples must agree."),
                ]),
                Field("OFFSET", 2, 1, "Comparator hard block offset control. See chip data sheet to get the actual offset value with each level", [
                    EnumVal("OFFSET_0", "0", "The comparator hard block output has level 0 offset internally."),
                    EnumVal("OFFSET_1", "0x1", "The comparator hard block output has level 1 offset internally."),
                ]),
                Field("HYSTCTR", 0, 2, "Comparator hard block hysteresis control. See chip data sheet to get the actual hysteresis value with each level", [
                    EnumVal("HYSTCTR_0", "0", "The hard block output has level 0 hysteresis internally."),
                    EnumVal("HYSTCTR_1", "0x1", "The hard block output has level 1 hysteresis internally."),
                    EnumVal("HYSTCTR_2", "0x2", "The hard block output has level 2 hysteresis internally."),
                    EnumVal("HYSTCTR_3", "0x3", "The hard block output has level 3 hysteresis internally."),
                ]),
            ]),
            Register("C1", 0x40073004, 32, "CMP Control Register 1", [
                Field("INPSEL", 27, 2, "Selection of the input to the positive port of the comparator", [
                    EnumVal("INPSEL_0", "0", "IN0, from the 8-bit DAC output"),
                    EnumVal("INPSEL_1", "0x1", "IN1, from the analog 8-1 mux"),
                ]),
                Field("INNSEL", 24, 2, "Selection of the input to the negative port of the comparator", [
                    EnumVal("INNSEL_0", "0", "IN0, from the 8-bit DAC output"),
                    EnumVal("INNSEL_1", "0x1", "IN1, from the analog 8-1 mux"),
                ]),
                Field("CHN7", 23, 1, "Channel 7 input enable", [
                ]),
                Field("CHN6", 22, 1, "Channel 6 input enable", [
                ]),
                Field("CHN5", 21, 1, "Channel 5 input enable", [
                ]),
                Field("CHN4", 20, 1, "Channel 4 input enable", [
                ]),
                Field("CHN3", 19, 1, "Channel 3 input enable", [
                ]),
                Field("CHN2", 18, 1, "Channel 2 input enable", [
                ]),
                Field("CHN1", 17, 1, "Channel 1 input enable", [
                ]),
                Field("CHN0", 16, 1, "Channel 0 input enable", [
                ]),
                Field("DACEN", 15, 1, "DAC Enable", [
                    EnumVal("DACEN_0", "0", "DAC is disabled."),
                    EnumVal("DACEN_1", "0x1", "DAC is enabled."),
                ]),
                Field("VRSEL", 14, 1, "Supply Voltage Reference Source Select", [
                    EnumVal("VRSEL_0", "0", "Vin1 is selected as resistor ladder network supply reference Vin."),
                    EnumVal("VRSEL_1", "0x1", "Vin2 is selected as resistor ladder network supply reference Vin."),
                ]),
                Field("PSEL", 11, 3, "Plus Input MUX Control", [
                    EnumVal("PSEL_0", "0", "IN0"),
                    EnumVal("PSEL_1", "0x1", "IN1"),
                    EnumVal("PSEL_2", "0x2", "IN2"),
                    EnumVal("PSEL_3", "0x3", "IN3"),
                    EnumVal("PSEL_4", "0x4", "IN4"),
                    EnumVal("PSEL_5", "0x5", "IN5"),
                    EnumVal("PSEL_6", "0x6", "IN6"),
                    EnumVal("PSEL_7", "0x7", "IN7"),
                ]),
                Field("MSEL", 8, 3, "Minus Input MUX Control", [
                    EnumVal("MSEL_0", "0", "IN0"),
                    EnumVal("MSEL_1", "0x1", "IN1"),
                    EnumVal("MSEL_2", "0x2", "IN2"),
                    EnumVal("MSEL_3", "0x3", "IN3"),
                    EnumVal("MSEL_4", "0x4", "IN4"),
                    EnumVal("MSEL_5", "0x5", "IN5"),
                    EnumVal("MSEL_6", "0x6", "IN6"),
                    EnumVal("MSEL_7", "0x7", "IN7"),
                ]),
                Field("VOSEL", 0, 8, "DAC Output Voltage Select", [
                ]),
            ]),
            Register("C2", 0x40073008, 32, "CMP Control Register 2", [
                Field("RRE", 31, 1, "Round-Robin Enable", [
                    EnumVal("RRE_0", "0", "Round-robin operation is disabled."),
                    EnumVal("RRE_1", "0x1", "Round-robin operation is enabled."),
                ]),
                Field("RRIE", 30, 1, "Round-Robin interrupt enable", [
                    EnumVal("RRIE_0", "0", "The round-robin interrupt is disabled."),
                    EnumVal("RRIE_1", "0x1", "The round-robin interrupt is enabled when a comparison result changes from the last sample."),
                ]),
                Field("FXMP", 29, 1, "Fixed MUX Port", [
                    EnumVal("FXMP_0", "0", "The Plus port is fixed. Only the inputs to the Minus port are swept in each round."),
                    EnumVal("FXMP_1", "0x1", "The Minus port is fixed. Only the inputs to the Plus port are swept in each round."),
                ]),
                Field("FXMXCH", 25, 3, "Fixed channel selection", [
                    EnumVal("FXMXCH_0", "0", "Channel 0 is selected as the fixed reference input for the fixed mux port."),
                    EnumVal("FXMXCH_1", "0x1", "Channel 1 is selected as the fixed reference input for the fixed mux port."),
                    EnumVal("FXMXCH_2", "0x2", "Channel 2 is selected as the fixed reference input for the fixed mux port."),
                    EnumVal("FXMXCH_3", "0x3", "Channel 3 is selected as the fixed reference input for the fixed mux port."),
                    EnumVal("FXMXCH_4", "0x4", "Channel 4 is selected as the fixed reference input for the fixed mux port."),
                    EnumVal("FXMXCH_5", "0x5", "Channel 5 is selected as the fixed reference input for the fixed mux port."),
                    EnumVal("FXMXCH_6", "0x6", "Channel 6 is selected as the fixed reference input for the fixed mux port."),
                    EnumVal("FXMXCH_7", "0x7", "Channel 7 is selected as the fixed reference input for the fixed mux port."),
                ]),
                Field("CH7F", 23, 1, "Channel 7 input changed flag", [
                ]),
                Field("CH6F", 22, 1, "Channel 6 input changed flag", [
                ]),
                Field("CH5F", 21, 1, "Channel 5 input changed flag", [
                ]),
                Field("CH4F", 20, 1, "Channel 4 input changed flag", [
                ]),
                Field("CH3F", 19, 1, "Channel 3 input changed flag", [
                ]),
                Field("CH2F", 18, 1, "Channel 2 input changed flag", [
                ]),
                Field("CH1F", 17, 1, "Channel 1 input changed flag", [
                ]),
                Field("CH0F", 16, 1, "Channel 0 input changed flag", [
                ]),
                Field("NSAM", 14, 2, "Number of sample clocks", [
                    EnumVal("NSAM_0", "0", "The comparison result is sampled as soon as the active channel is scanned in one round-robin clock."),
                    EnumVal("NSAM_1", "0x1", "The sampling takes place 1 round-robin clock cycle after the next cycle of the round-robin clock."),
                    EnumVal("NSAM_2", "0x2", "The sampling takes place 2 round-robin clock cycles after the next cycle of the round-robin clock."),
                    EnumVal("NSAM_3", "0x3", "The sampling takes place 3 round-robin clock cycles after the next cycle of the round-robin clock."),
                ]),
                Field("INITMOD", 8, 6, "Comparator and DAC initialization delay modulus.", [
                    EnumVal("INITMOD_0", "0", "The modulus is set to 64 (same with 111111)."),
                ]),
                Field("ACOn", 0, 8, "The result of the input comparison for channel n", [
                ]),
            ]),
        ])

class Module_CRC(Peripheral):
    def __init__(self):
        super().__init__("CRC", 0x40032000, 0xC, [
            Register("DATA", 0x40032000, 32, "CRC Data register", [
                Field("HU", 24, 8, "CRC High Upper Byte", [
                ]),
                Field("HL", 16, 8, "CRC High Lower Byte", [
                ]),
                Field("LU", 8, 8, "CRC Low Upper Byte", [
                ]),
                Field("LL", 0, 8, "CRC Low Lower Byte", [
                ]),
            ]),
            Register("GPOLY", 0x40032004, 32, "CRC Polynomial register", [
                Field("HIGH", 16, 16, "High Polynominal Half-word", [
                ]),
                Field("LOW", 0, 16, "Low Polynominal Half-word", [
                ]),
            ]),
            Register("CTRL", 0x40032008, 32, "CRC Control register", [
                Field("TOT", 30, 2, "Type Of Transpose For Writes", [
                    EnumVal("TOT_0", "0", "No transposition."),
                    EnumVal("TOT_1", "0x1", "Bits in bytes are transposed; bytes are not transposed."),
                    EnumVal("TOT_2", "0x2", "Both bits in bytes and bytes are transposed."),
                    EnumVal("TOT_3", "0x3", "Only bytes are transposed; no bits in a byte are transposed."),
                ]),
                Field("TOTR", 28, 2, "Type Of Transpose For Read", [
                    EnumVal("TOTR_0", "0", "No transposition."),
                    EnumVal("TOTR_1", "0x1", "Bits in bytes are transposed; bytes are not transposed."),
                    EnumVal("TOTR_2", "0x2", "Both bits in bytes and bytes are transposed."),
                    EnumVal("TOTR_3", "0x3", "Only bytes are transposed; no bits in a byte are transposed."),
                ]),
                Field("FXOR", 26, 1, "Complement Read Of CRC Data Register", [
                    EnumVal("FXOR_0", "0", "No XOR on reading."),
                    EnumVal("FXOR_1", "0x1", "Invert or complement the read value of the CRC Data register."),
                ]),
                Field("WAS", 25, 1, "Write CRC Data Register As Seed", [
                    EnumVal("WAS_0", "0", "Writes to the CRC data register are data values."),
                    EnumVal("WAS_1", "0x1", "Writes to the CRC data register are seed values."),
                ]),
                Field("TCRC", 24, 1, "TCRC", [
                    EnumVal("TCRC_0", "0", "16-bit CRC protocol."),
                    EnumVal("TCRC_1", "0x1", "32-bit CRC protocol."),
                ]),
            ]),
        ])

class Module_DMA(Peripheral):
    def __init__(self):
        super().__init__("DMA", 0x40008000, 0x1200, [
            Register("CR", 0x40008000, 32, "Control", [
                Field("ACTIVE", 31, 1, "eDMA Active Status", [
                    EnumVal("IDLE", "0", "eDMA is idle"),
                    EnumVal("ACTIVE", "0x1", "eDMA is executing a channel"),
                ]),
                Field("CX", 17, 1, "Cancel Transfer", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("CANCEL", "0x1", "Cancel the remaining data transfer"),
                ]),
                Field("ECX", 16, 1, "Error Cancel Transfer", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("CANCEL", "0x1", "Cancel the remaining data transfer"),
                ]),
                Field("EMLM", 7, 1, "Enable Minor Loop Mapping", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("CLM", 6, 1, "Continuous Link Mode", [
                    EnumVal("CLM_OFF", "0", "Continuous link mode is off"),
                    EnumVal("CLM_ON", "0x1", "Continuous link mode is on"),
                ]),
                Field("HALT", 5, 1, "Halt eDMA Operations", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("HALT_DMA", "0x1", "eDMA operations halted"),
                ]),
                Field("HOE", 4, 1, "Halt On Error", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("HALT_ON_ERROR", "0x1", "Error causes HALT field to be automatically set to 1"),
                ]),
                Field("ERCA", 2, 1, "Enable Round Robin Channel Arbitration", [
                    EnumVal("DISABLED", "0", "Fixed priority arbitration"),
                    EnumVal("ENABLED", "0x1", "Round robin arbitration"),
                ]),
                Field("EDBG", 1, 1, "Enable Debug", [
                    EnumVal("DISABLED", "0", "When the chip is in Debug mode, the eDMA continues to operate."),
                    EnumVal("ENABLED", "0x1", "When the chip is in debug mode, the DMA stalls the start of a new channel. Executing channels are allowed to complete."),
                ]),
            ]),
            Register("ES", 0x40008004, 32, "Error Status", [
                Field("VLD", 31, 1, "Logical OR of all ERR status fields", [
                    EnumVal("NO_ERROR", "0", "No ERR fields are 1"),
                    EnumVal("ERROR", "0x1", "At least one ERR field has a value of 1, indicating a valid error exists that has not been cleared"),
                ]),
                Field("ECX", 16, 1, "Transfer Canceled", [
                    EnumVal("NO_CANCELS", "0", "No canceled transfers"),
                    EnumVal("CANCELED", "0x1", "The most-recently recorded entry was a canceled transfer initiated by the error cancel transfer field"),
                ]),
                Field("CPE", 14, 1, "Channel Priority Error", [
                    EnumVal("NO_ERROR", "0", "No channel priority error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a configuration error in the channel priorities. Channel priorities are not unique."),
                ]),
                Field("ERRCHN", 8, 4, "Error Channel Number or Canceled Channel Number", [
                ]),
                Field("SAE", 7, 1, "Source Address Error", [
                    EnumVal("NO_ERROR", "0", "No source address configuration error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a configuration error detected in the TCDn_SADDR field. TCDn_SADDR is inconsistent with TCDn_ATTR[SSIZE]."),
                ]),
                Field("SOE", 6, 1, "Source Offset Error", [
                    EnumVal("NO_ERROR", "0", "No source offset configuration error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a configuration error detected in the TCDn_SOFF field. TCDn_SOFF is inconsistent with TCDn_ATTR[SSIZE]."),
                ]),
                Field("DAE", 5, 1, "Destination Address Error", [
                    EnumVal("NO_ERROR", "0", "No destination address configuration error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a configuration error detected in the TCDn_DADDR field. TCDn_DADDR is inconsistent with TCDn_ATTR[DSIZE]."),
                ]),
                Field("DOE", 4, 1, "Destination Offset Error", [
                    EnumVal("NO_ERROR", "0", "No destination offset configuration error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a configuration error detected in the TCDn_DOFF field. TCDn_DOFF is inconsistent with TCDn_ATTR[DSIZE]."),
                ]),
                Field("NCE", 3, 1, "NBYTES/CITER Configuration Error", [
                    EnumVal("NO_ERROR", "0", "No NBYTES/CITER configuration error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a configuration error detected in the TCDn_NBYTES or TCDn_CITER fields. TCDn_NBYTES is not a multiple of TCDn_ATTR[SSIZE] and TCDn_ATTR[DSIZE], or TCDn_CITER[CITER] = 0, or TCDn_CITER[ELINK] is not equal to TCDn_BITER[ELINK]."),
                ]),
                Field("SGE", 2, 1, "Scatter/Gather Configuration Error", [
                    EnumVal("NO_ERROR", "0", "No scatter/gather configuration error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a configuration error detected in the TCDn_DLASTSGA field."),
                ]),
                Field("SBE", 1, 1, "Source Bus Error", [
                    EnumVal("NO_ERROR", "0", "No source bus error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a bus error on a source read."),
                ]),
                Field("DBE", 0, 1, "Destination Bus Error", [
                    EnumVal("NO_ERROR", "0", "No destination bus error."),
                    EnumVal("ERROR", "0x1", "The most-recently recorded error was a bus error on a destination write."),
                ]),
            ]),
            Register("ERQ", 0x4000800C, 32, "Enable Request", [
                Field("ERQ15", 15, 1, "Enable DMA Request 15", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 15 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 15 is enabled"),
                ]),
                Field("ERQ14", 14, 1, "Enable DMA Request 14", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 14 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 14 is enabled"),
                ]),
                Field("ERQ13", 13, 1, "Enable DMA Request 13", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 13 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 13 is enabled"),
                ]),
                Field("ERQ12", 12, 1, "Enable DMA Request 12", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 12 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 12 is enabled"),
                ]),
                Field("ERQ11", 11, 1, "Enable DMA Request 11", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 11 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 11 is enabled"),
                ]),
                Field("ERQ10", 10, 1, "Enable DMA Request 10", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 10 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 10 is enabled"),
                ]),
                Field("ERQ9", 9, 1, "Enable DMA Request 9", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 9 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 9 is enabled"),
                ]),
                Field("ERQ8", 8, 1, "Enable DMA Request 8", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 8 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 8 is enabled"),
                ]),
                Field("ERQ7", 7, 1, "Enable DMA Request 7", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 7 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 7 is enabled"),
                ]),
                Field("ERQ6", 6, 1, "Enable DMA Request 6", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 6 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 6 is enabled"),
                ]),
                Field("ERQ5", 5, 1, "Enable DMA Request 5", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 5 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 5 is enabled"),
                ]),
                Field("ERQ4", 4, 1, "Enable DMA Request 4", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 4 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 4 is enabled"),
                ]),
                Field("ERQ3", 3, 1, "Enable DMA Request 3", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 3 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 3 is enabled"),
                ]),
                Field("ERQ2", 2, 1, "Enable DMA Request 2", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 2 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 2 is enabled"),
                ]),
                Field("ERQ1", 1, 1, "Enable DMA Request 1", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 1 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 1 is enabled"),
                ]),
                Field("ERQ0", 0, 1, "Enable DMA Request 0", [
                    EnumVal("DISABLE", "0", "The DMA request signal for channel 0 is disabled"),
                    EnumVal("ENABLE", "0x1", "The DMA request signal for channel 0 is enabled"),
                ]),
            ]),
            Register("EEI", 0x40008014, 32, "Enable Error Interrupt", [
                Field("EEI15", 15, 1, "Enable Error Interrupt 15", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 15 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 15 generates an error interrupt request"),
                ]),
                Field("EEI14", 14, 1, "Enable Error Interrupt 14", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 14 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 14 generates an error interrupt request"),
                ]),
                Field("EEI13", 13, 1, "Enable Error Interrupt 13", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 13 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 13 generates an error interrupt request"),
                ]),
                Field("EEI12", 12, 1, "Enable Error Interrupt 12", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 12 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 12 generates an error interrupt request"),
                ]),
                Field("EEI11", 11, 1, "Enable Error Interrupt 11", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 11 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 11 generates an error interrupt request"),
                ]),
                Field("EEI10", 10, 1, "Enable Error Interrupt 10", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 10 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 10 generates an error interrupt request"),
                ]),
                Field("EEI9", 9, 1, "Enable Error Interrupt 9", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 9 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 9 generates an error interrupt request"),
                ]),
                Field("EEI8", 8, 1, "Enable Error Interrupt 8", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 8 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 8 generates an error interrupt request"),
                ]),
                Field("EEI7", 7, 1, "Enable Error Interrupt 7", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 7 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 7 generates an error interrupt request"),
                ]),
                Field("EEI6", 6, 1, "Enable Error Interrupt 6", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 6 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 6 generates an error interrupt request"),
                ]),
                Field("EEI5", 5, 1, "Enable Error Interrupt 5", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 5 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 5 generates an error interrupt request"),
                ]),
                Field("EEI4", 4, 1, "Enable Error Interrupt 4", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 4 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 4 generates an error interrupt request"),
                ]),
                Field("EEI3", 3, 1, "Enable Error Interrupt 3", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 3 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 3 generates an error interrupt request"),
                ]),
                Field("EEI2", 2, 1, "Enable Error Interrupt 2", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 2 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 2 generates an error interrupt request"),
                ]),
                Field("EEI1", 1, 1, "Enable Error Interrupt 1", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 1 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 1 generates an error interrupt request"),
                ]),
                Field("EEI0", 0, 1, "Enable Error Interrupt 0", [
                    EnumVal("NO_INTERRUPT", "0", "An error on channel 0 does not generate an error interrupt"),
                    EnumVal("INTERRUPT", "0x1", "An error on channel 0 generates an error interrupt request"),
                ]),
            ]),
            Register("CEEI", 0x40008018, 8, "Clear Enable Error Interrupt", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation, ignore the other fields in this register"),
                ]),
                Field("CAEE", 6, 1, "Clear All Enable Error Interrupts", [
                    EnumVal("CLEAR_EEI", "0", "Write 0 only to the EEI field specified in the CEEI field"),
                    EnumVal("CLEAR_ALL", "0x1", "Write 0 to all fields in EEI"),
                ]),
                Field("CEEI", 0, 4, "Clear Enable Error Interrupt", [
                ]),
            ]),
            Register("SEEI", 0x40008019, 8, "Set Enable Error Interrupt", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation, ignore the other fields in this register"),
                ]),
                Field("SAEE", 6, 1, "Set All Enable Error Interrupts", [
                    EnumVal("SET_EEI", "0", "Write 1 only to the EEI field specified in the SEEI field"),
                    EnumVal("SET_ALL", "0x1", "Writes 1 to all fields in EEI"),
                ]),
                Field("SEEI", 0, 4, "Set Enable Error Interrupt", [
                ]),
            ]),
            Register("CERQ", 0x4000801A, 8, "Clear Enable Request", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation, ignore the other fields in this register"),
                ]),
                Field("CAER", 6, 1, "Clear All Enable Requests", [
                    EnumVal("CLEAR_ERQ", "0", "Write 0 to only the ERQ field specified in the CERQ field"),
                    EnumVal("CLEAR_ALL", "0x1", "Write 0 to all fields in ERQ"),
                ]),
                Field("CERQ", 0, 4, "Clear Enable Request", [
                ]),
            ]),
            Register("SERQ", 0x4000801B, 8, "Set Enable Request", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation, ignore the other fields in this register"),
                ]),
                Field("SAER", 6, 1, "Set All Enable Requests", [
                    EnumVal("SET_ERQ", "0", "Write 1 to only the ERQ field specified in the SERQ field"),
                    EnumVal("SET_ALL", "0x1", "Write 1 to all fields in ERQ"),
                ]),
                Field("SERQ", 0, 4, "Set Enable Request", [
                ]),
            ]),
            Register("CDNE", 0x4000801C, 8, "Clear DONE Status Bit", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation; all other fields in this register are ignored."),
                ]),
                Field("CADN", 6, 1, "Clears All DONE fields", [
                    EnumVal("CLEAR_DONE", "0", "Writes 0 to only the TCDn_CSR[DONE] field specified in the CDNE field"),
                    EnumVal("CLEAR_ALL", "0x1", "Writes 0 to all bits in TCDn_CSR[DONE]"),
                ]),
                Field("CDNE", 0, 4, "Clear DONE field", [
                ]),
            ]),
            Register("SSRT", 0x4000801D, 8, "Set START Bit", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation; all other fields in this register are ignored."),
                ]),
                Field("SAST", 6, 1, "Set All START fields (activates all channels)", [
                    EnumVal("SET_START", "0", "Write 1 to only the TCDn_CSR[START] field specified in the SSRT field"),
                    EnumVal("SET_ALL", "0x1", "Write 1 to all bits in TCDn_CSR[START]"),
                ]),
                Field("SSRT", 0, 4, "Set START field", [
                ]),
            ]),
            Register("CERR", 0x4000801E, 8, "Clear Error", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation; all other fields in this register are ignored."),
                ]),
                Field("CAEI", 6, 1, "Clear All Error Indicators", [
                    EnumVal("CLEAR_ERR", "0", "Write 0 to only the ERR field specified in the CERR field"),
                    EnumVal("CLEAR_ALL", "0x1", "Write 0 to all fields in ERR"),
                ]),
                Field("CERR", 0, 4, "Clear Error Indicator", [
                ]),
            ]),
            Register("CINT", 0x4000801F, 8, "Clear Interrupt Request", [
                Field("NOP", 7, 1, "No Op Enable", [
                    EnumVal("NORMAL_OPS", "0", "Normal operation"),
                    EnumVal("NO_OPS", "0x1", "No operation; all other fields in this register are ignored."),
                ]),
                Field("CAIR", 6, 1, "Clear All Interrupt Requests", [
                    EnumVal("CLEAR_INT", "0", "Clear only the INT field specified in the CINT field"),
                    EnumVal("CLEAR_ALL", "0x1", "Clear all bits in INT"),
                ]),
                Field("CINT", 0, 4, "Clear Interrupt Request", [
                ]),
            ]),
            Register("INT", 0x40008024, 32, "Interrupt Request", [
                Field("INT15", 15, 1, "Interrupt Request 15", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 15 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 15 is active"),
                ]),
                Field("INT14", 14, 1, "Interrupt Request 14", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 14 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 14 is active"),
                ]),
                Field("INT13", 13, 1, "Interrupt Request 13", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 13 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 13 is active"),
                ]),
                Field("INT12", 12, 1, "Interrupt Request 12", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 12 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 12 is active"),
                ]),
                Field("INT11", 11, 1, "Interrupt Request 11", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 11 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 11 is active"),
                ]),
                Field("INT10", 10, 1, "Interrupt Request 10", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 10 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 10 is active"),
                ]),
                Field("INT9", 9, 1, "Interrupt Request 9", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 9 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 9 is active"),
                ]),
                Field("INT8", 8, 1, "Interrupt Request 8", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 8 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 8 is active"),
                ]),
                Field("INT7", 7, 1, "Interrupt Request 7", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 7 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 7 is active"),
                ]),
                Field("INT6", 6, 1, "Interrupt Request 6", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 6 is cleared"),
                    EnumVal("CTIVE", "0x1", "The interrupt request for channel 6 is active"),
                ]),
                Field("INT5", 5, 1, "Interrupt Request 5", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 5 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 5 is active"),
                ]),
                Field("INT4", 4, 1, "Interrupt Request 4", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 4 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 4 is active"),
                ]),
                Field("INT3", 3, 1, "Interrupt Request 3", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 3 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 3 is active"),
                ]),
                Field("INT2", 2, 1, "Interrupt Request 2", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 2 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 2 is active"),
                ]),
                Field("INT1", 1, 1, "Interrupt Request 1", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 1 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 1 is active"),
                ]),
                Field("INT0", 0, 1, "Interrupt Request 0", [
                    EnumVal("NOT_ACTIVE", "0", "The interrupt request for channel 0 is cleared"),
                    EnumVal("ACTIVE", "0x1", "The interrupt request for channel 0 is active"),
                ]),
            ]),
            Register("ERR", 0x4000802C, 32, "Error", [
                Field("ERR15", 15, 1, "Error In Channel 15", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR14", 14, 1, "Error In Channel 14", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR13", 13, 1, "Error In Channel 13", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR12", 12, 1, "Error In Channel 12", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR11", 11, 1, "Error In Channel 11", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR10", 10, 1, "Error In Channel 10", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR9", 9, 1, "Error In Channel 9", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR8", 8, 1, "Error In Channel 8", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR7", 7, 1, "Error In Channel 7", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR6", 6, 1, "Error In Channel 6", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR5", 5, 1, "Error In Channel 5", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR4", 4, 1, "Error In Channel 4", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR3", 3, 1, "Error In Channel 3", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR2", 2, 1, "Error In Channel 2", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR1", 1, 1, "Error In Channel 1", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
                Field("ERR0", 0, 1, "Error In Channel 0", [
                    EnumVal("NO_ERR", "0", "No error in this channel has occurred"),
                    EnumVal("ERR", "0x1", "An error in this channel has occurred"),
                ]),
            ]),
            Register("HRS", 0x40008034, 32, "Hardware Request Status", [
                Field("HRS15", 15, 1, "Hardware Request Status Channel 15", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 15 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 15 is present"),
                ]),
                Field("HRS14", 14, 1, "Hardware Request Status Channel 14", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 14 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 14 is present"),
                ]),
                Field("HRS13", 13, 1, "Hardware Request Status Channel 13", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 13 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 13 is present"),
                ]),
                Field("HRS12", 12, 1, "Hardware Request Status Channel 12", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 12 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 12 is present"),
                ]),
                Field("HRS11", 11, 1, "Hardware Request Status Channel 11", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 11 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 11 is present"),
                ]),
                Field("HRS10", 10, 1, "Hardware Request Status Channel 10", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 10 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 10 is present"),
                ]),
                Field("HRS9", 9, 1, "Hardware Request Status Channel 9", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 9 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 9 is present"),
                ]),
                Field("HRS8", 8, 1, "Hardware Request Status Channel 8", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 8 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 8 is present"),
                ]),
                Field("HRS7", 7, 1, "Hardware Request Status Channel 7", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 7 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 7 is present"),
                ]),
                Field("HRS6", 6, 1, "Hardware Request Status Channel 6", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 6 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 6 is present"),
                ]),
                Field("HRS5", 5, 1, "Hardware Request Status Channel 5", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 5 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 5 is present"),
                ]),
                Field("HRS4", 4, 1, "Hardware Request Status Channel 4", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 4 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 4 is present"),
                ]),
                Field("HRS3", 3, 1, "Hardware Request Status Channel 3", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 3 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 3 is present"),
                ]),
                Field("HRS2", 2, 1, "Hardware Request Status Channel 2", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 2 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 2 is present"),
                ]),
                Field("HRS1", 1, 1, "Hardware Request Status Channel 1", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 1 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 1 is present"),
                ]),
                Field("HRS0", 0, 1, "Hardware Request Status Channel 0", [
                    EnumVal("NO_HWRQST", "0", "A hardware service request for channel 0 is not present"),
                    EnumVal("HWRQST", "0x1", "A hardware service request for channel 0 is present"),
                ]),
            ]),
            Register("EARS", 0x40008044, 32, "Enable Asynchronous Request in Stop", [
                Field("EDREQ_15", 15, 1, "Enable asynchronous DMA request in stop mode for channel 15.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 15"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 15"),
                ]),
                Field("EDREQ_14", 14, 1, "Enable asynchronous DMA request in stop mode for channel 14.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 14"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 14"),
                ]),
                Field("EDREQ_13", 13, 1, "Enable asynchronous DMA request in stop mode for channel 13.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 13"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 13"),
                ]),
                Field("EDREQ_12", 12, 1, "Enable asynchronous DMA request in stop mode for channel 12.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 12"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 12"),
                ]),
                Field("EDREQ_11", 11, 1, "Enable asynchronous DMA request in stop mode for channel 11.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 11"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 11"),
                ]),
                Field("EDREQ_10", 10, 1, "Enable asynchronous DMA request in stop mode for channel 10.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 10"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 10"),
                ]),
                Field("EDREQ_9", 9, 1, "Enable asynchronous DMA request in stop mode for channel 9.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 9"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 9"),
                ]),
                Field("EDREQ_8", 8, 1, "Enable asynchronous DMA request in stop mode for channel 8.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 8"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 8"),
                ]),
                Field("EDREQ_7", 7, 1, "Enable asynchronous DMA request in stop mode for channel 7.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 7"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 7"),
                ]),
                Field("EDREQ_6", 6, 1, "Enable asynchronous DMA request in stop mode for channel 6.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 6"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 6"),
                ]),
                Field("EDREQ_5", 5, 1, "Enable asynchronous DMA request in stop mode for channel 5.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 5"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 5"),
                ]),
                Field("EDREQ_4", 4, 1, "Enable asynchronous DMA request in stop mode for channel 4.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 4"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 4"),
                ]),
                Field("EDREQ_3", 3, 1, "Enable asynchronous DMA request in stop mode for channel 3.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 3"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 3"),
                ]),
                Field("EDREQ_2", 2, 1, "Enable asynchronous DMA request in stop mode for channel 2.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 2"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 2"),
                ]),
                Field("EDREQ_1", 1, 1, "Enable asynchronous DMA request in stop mode for channel 1.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 1"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 1"),
                ]),
                Field("EDREQ_0", 0, 1, "Enable asynchronous DMA request in stop mode for channel 0.", [
                    EnumVal("DISABLE", "0", "Disable asynchronous DMA request for channel 0"),
                    EnumVal("ENABLE", "0x1", "Enable asynchronous DMA request for channel 0"),
                ]),
            ]),
            Register("DCHPRI3", 0x40008100, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI2", 0x40008101, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI1", 0x40008102, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI0", 0x40008103, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI7", 0x40008104, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI6", 0x40008105, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI5", 0x40008106, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI4", 0x40008107, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI11", 0x40008108, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI10", 0x40008109, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI9", 0x4000810A, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI8", 0x4000810B, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI15", 0x4000810C, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI14", 0x4000810D, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI13", 0x4000810E, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("DCHPRI12", 0x4000810F, 8, "Channel Priority", [
                Field("ECP", 7, 1, "Enable Channel Preemption. This field resets to 0.", [
                    EnumVal("DISABLED", "0", "Channel n cannot be suspended by a higher priority channel's service request"),
                    EnumVal("ENABLED", "0x1", "Channel n can be temporarily suspended by the service request of a higher priority channel"),
                ]),
                Field("DPA", 6, 1, "Disable Preempt Ability. This field resets to 0.", [
                    EnumVal("ENABLED", "0", "Channel n can suspend a lower priority channel"),
                    EnumVal("DISABLED", "0x1", "Channel n cannot suspend any channel, regardless of channel priority"),
                ]),
                Field("CHPRI", 0, 4, "Channel n Arbitration Priority", [
                ]),
            ]),
            Register("TCD0_SADDR", 0x40009000, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD0_SOFF", 0x40009004, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD0_ATTR", 0x40009006, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD0_NBYTES_MLNO", 0x40009008, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD0_NBYTES_MLOFFNO", 0x40009008, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD0_NBYTES_MLOFFYES", 0x40009008, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD0_SLAST", 0x4000900C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD0_DADDR", 0x40009010, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD0_DOFF", 0x40009014, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD0_CITER_ELINKNO", 0x40009016, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD0_CITER_ELINKYES", 0x40009016, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD0_DLASTSGA", 0x40009018, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD0_CSR", 0x4000901C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD0_BITER_ELINKNO", 0x4000901E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD0_BITER_ELINKYES", 0x4000901E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD1_SADDR", 0x40009020, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD1_SOFF", 0x40009024, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD1_ATTR", 0x40009026, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD1_NBYTES_MLNO", 0x40009028, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD1_NBYTES_MLOFFNO", 0x40009028, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD1_NBYTES_MLOFFYES", 0x40009028, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD1_SLAST", 0x4000902C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD1_DADDR", 0x40009030, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD1_DOFF", 0x40009034, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD1_CITER_ELINKNO", 0x40009036, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD1_CITER_ELINKYES", 0x40009036, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD1_DLASTSGA", 0x40009038, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD1_CSR", 0x4000903C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD1_BITER_ELINKNO", 0x4000903E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD1_BITER_ELINKYES", 0x4000903E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD2_SADDR", 0x40009040, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD2_SOFF", 0x40009044, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD2_ATTR", 0x40009046, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD2_NBYTES_MLNO", 0x40009048, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD2_NBYTES_MLOFFNO", 0x40009048, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD2_NBYTES_MLOFFYES", 0x40009048, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD2_SLAST", 0x4000904C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD2_DADDR", 0x40009050, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD2_DOFF", 0x40009054, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD2_CITER_ELINKNO", 0x40009056, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD2_CITER_ELINKYES", 0x40009056, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD2_DLASTSGA", 0x40009058, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD2_CSR", 0x4000905C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD2_BITER_ELINKNO", 0x4000905E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD2_BITER_ELINKYES", 0x4000905E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD3_SADDR", 0x40009060, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD3_SOFF", 0x40009064, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD3_ATTR", 0x40009066, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD3_NBYTES_MLNO", 0x40009068, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD3_NBYTES_MLOFFNO", 0x40009068, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD3_NBYTES_MLOFFYES", 0x40009068, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD3_SLAST", 0x4000906C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD3_DADDR", 0x40009070, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD3_DOFF", 0x40009074, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD3_CITER_ELINKNO", 0x40009076, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD3_CITER_ELINKYES", 0x40009076, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD3_DLASTSGA", 0x40009078, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD3_CSR", 0x4000907C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD3_BITER_ELINKNO", 0x4000907E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD3_BITER_ELINKYES", 0x4000907E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD4_SADDR", 0x40009080, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD4_SOFF", 0x40009084, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD4_ATTR", 0x40009086, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD4_NBYTES_MLNO", 0x40009088, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD4_NBYTES_MLOFFNO", 0x40009088, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD4_NBYTES_MLOFFYES", 0x40009088, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD4_SLAST", 0x4000908C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD4_DADDR", 0x40009090, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD4_DOFF", 0x40009094, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD4_CITER_ELINKNO", 0x40009096, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD4_CITER_ELINKYES", 0x40009096, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD4_DLASTSGA", 0x40009098, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD4_CSR", 0x4000909C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD4_BITER_ELINKNO", 0x4000909E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD4_BITER_ELINKYES", 0x4000909E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD5_SADDR", 0x400090A0, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD5_SOFF", 0x400090A4, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD5_ATTR", 0x400090A6, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD5_NBYTES_MLNO", 0x400090A8, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD5_NBYTES_MLOFFNO", 0x400090A8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD5_NBYTES_MLOFFYES", 0x400090A8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD5_SLAST", 0x400090AC, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD5_DADDR", 0x400090B0, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD5_DOFF", 0x400090B4, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD5_CITER_ELINKNO", 0x400090B6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD5_CITER_ELINKYES", 0x400090B6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD5_DLASTSGA", 0x400090B8, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD5_CSR", 0x400090BC, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD5_BITER_ELINKNO", 0x400090BE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD5_BITER_ELINKYES", 0x400090BE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD6_SADDR", 0x400090C0, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD6_SOFF", 0x400090C4, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD6_ATTR", 0x400090C6, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD6_NBYTES_MLNO", 0x400090C8, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD6_NBYTES_MLOFFNO", 0x400090C8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD6_NBYTES_MLOFFYES", 0x400090C8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD6_SLAST", 0x400090CC, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD6_DADDR", 0x400090D0, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD6_DOFF", 0x400090D4, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD6_CITER_ELINKNO", 0x400090D6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD6_CITER_ELINKYES", 0x400090D6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD6_DLASTSGA", 0x400090D8, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD6_CSR", 0x400090DC, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD6_BITER_ELINKNO", 0x400090DE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD6_BITER_ELINKYES", 0x400090DE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD7_SADDR", 0x400090E0, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD7_SOFF", 0x400090E4, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD7_ATTR", 0x400090E6, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD7_NBYTES_MLNO", 0x400090E8, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD7_NBYTES_MLOFFNO", 0x400090E8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD7_NBYTES_MLOFFYES", 0x400090E8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD7_SLAST", 0x400090EC, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD7_DADDR", 0x400090F0, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD7_DOFF", 0x400090F4, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD7_CITER_ELINKNO", 0x400090F6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD7_CITER_ELINKYES", 0x400090F6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD7_DLASTSGA", 0x400090F8, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD7_CSR", 0x400090FC, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD7_BITER_ELINKNO", 0x400090FE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD7_BITER_ELINKYES", 0x400090FE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD8_SADDR", 0x40009100, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD8_SOFF", 0x40009104, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD8_ATTR", 0x40009106, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD8_NBYTES_MLNO", 0x40009108, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD8_NBYTES_MLOFFNO", 0x40009108, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD8_NBYTES_MLOFFYES", 0x40009108, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD8_SLAST", 0x4000910C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD8_DADDR", 0x40009110, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD8_DOFF", 0x40009114, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD8_CITER_ELINKNO", 0x40009116, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD8_CITER_ELINKYES", 0x40009116, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD8_DLASTSGA", 0x40009118, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD8_CSR", 0x4000911C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD8_BITER_ELINKNO", 0x4000911E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD8_BITER_ELINKYES", 0x4000911E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD9_SADDR", 0x40009120, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD9_SOFF", 0x40009124, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD9_ATTR", 0x40009126, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD9_NBYTES_MLNO", 0x40009128, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD9_NBYTES_MLOFFNO", 0x40009128, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD9_NBYTES_MLOFFYES", 0x40009128, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD9_SLAST", 0x4000912C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD9_DADDR", 0x40009130, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD9_DOFF", 0x40009134, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD9_CITER_ELINKNO", 0x40009136, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD9_CITER_ELINKYES", 0x40009136, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD9_DLASTSGA", 0x40009138, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD9_CSR", 0x4000913C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD9_BITER_ELINKNO", 0x4000913E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD9_BITER_ELINKYES", 0x4000913E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD10_SADDR", 0x40009140, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD10_SOFF", 0x40009144, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD10_ATTR", 0x40009146, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD10_NBYTES_MLNO", 0x40009148, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD10_NBYTES_MLOFFNO", 0x40009148, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD10_NBYTES_MLOFFYES", 0x40009148, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD10_SLAST", 0x4000914C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD10_DADDR", 0x40009150, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD10_DOFF", 0x40009154, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD10_CITER_ELINKNO", 0x40009156, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD10_CITER_ELINKYES", 0x40009156, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD10_DLASTSGA", 0x40009158, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD10_CSR", 0x4000915C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD10_BITER_ELINKNO", 0x4000915E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD10_BITER_ELINKYES", 0x4000915E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD11_SADDR", 0x40009160, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD11_SOFF", 0x40009164, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD11_ATTR", 0x40009166, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD11_NBYTES_MLNO", 0x40009168, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD11_NBYTES_MLOFFNO", 0x40009168, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD11_NBYTES_MLOFFYES", 0x40009168, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD11_SLAST", 0x4000916C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD11_DADDR", 0x40009170, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD11_DOFF", 0x40009174, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD11_CITER_ELINKNO", 0x40009176, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD11_CITER_ELINKYES", 0x40009176, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD11_DLASTSGA", 0x40009178, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD11_CSR", 0x4000917C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD11_BITER_ELINKNO", 0x4000917E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD11_BITER_ELINKYES", 0x4000917E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD12_SADDR", 0x40009180, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD12_SOFF", 0x40009184, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD12_ATTR", 0x40009186, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD12_NBYTES_MLNO", 0x40009188, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD12_NBYTES_MLOFFNO", 0x40009188, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD12_NBYTES_MLOFFYES", 0x40009188, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD12_SLAST", 0x4000918C, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD12_DADDR", 0x40009190, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD12_DOFF", 0x40009194, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD12_CITER_ELINKNO", 0x40009196, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD12_CITER_ELINKYES", 0x40009196, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD12_DLASTSGA", 0x40009198, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD12_CSR", 0x4000919C, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD12_BITER_ELINKNO", 0x4000919E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD12_BITER_ELINKYES", 0x4000919E, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD13_SADDR", 0x400091A0, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD13_SOFF", 0x400091A4, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD13_ATTR", 0x400091A6, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD13_NBYTES_MLNO", 0x400091A8, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD13_NBYTES_MLOFFNO", 0x400091A8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD13_NBYTES_MLOFFYES", 0x400091A8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD13_SLAST", 0x400091AC, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD13_DADDR", 0x400091B0, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD13_DOFF", 0x400091B4, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD13_CITER_ELINKNO", 0x400091B6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD13_CITER_ELINKYES", 0x400091B6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD13_DLASTSGA", 0x400091B8, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD13_CSR", 0x400091BC, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD13_BITER_ELINKNO", 0x400091BE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD13_BITER_ELINKYES", 0x400091BE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD14_SADDR", 0x400091C0, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD14_SOFF", 0x400091C4, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD14_ATTR", 0x400091C6, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD14_NBYTES_MLNO", 0x400091C8, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD14_NBYTES_MLOFFNO", 0x400091C8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD14_NBYTES_MLOFFYES", 0x400091C8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD14_SLAST", 0x400091CC, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD14_DADDR", 0x400091D0, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD14_DOFF", 0x400091D4, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD14_CITER_ELINKNO", 0x400091D6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD14_CITER_ELINKYES", 0x400091D6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD14_DLASTSGA", 0x400091D8, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD14_CSR", 0x400091DC, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD14_BITER_ELINKNO", 0x400091DE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD14_BITER_ELINKYES", 0x400091DE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
            Register("TCD15_SADDR", 0x400091E0, 32, "TCD Source Address", [
                Field("SADDR", 0, 32, "Source Address", [
                ]),
            ]),
            Register("TCD15_SOFF", 0x400091E4, 16, "TCD Signed Source Address Offset", [
                Field("SOFF", 0, 16, "Source address signed offset", [
                ]),
            ]),
            Register("TCD15_ATTR", 0x400091E6, 16, "TCD Transfer Attributes", [
                Field("SMOD", 11, 5, "Source Address Modulo", [
                    EnumVal("DISABLED", "0", "Source address modulo feature is disabled"),
                    EnumVal("ENABLED", "0x1", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x2", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x3", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x4", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x5", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x6", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x7", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x8", "Value defines address range used to set up circular data queue"),
                    EnumVal("ENABLED", "0x9", "Value defines address range used to set up circular data queue"),
                ]),
                Field("SSIZE", 8, 3, "Source data transfer size", [
                    EnumVal("EIGHT", "0", "8-bit"),
                    EnumVal("SIXTEEN_BIT", "0x1", "16-bit"),
                    EnumVal("THIRTYTWO_BIT", "0x2", "32-bit"),
                    EnumVal("SIXTEEN_BYTE", "0x4", "16-byte burst"),
                    EnumVal("THIRTYTWO_BYTE", "0x5", "32-byte burst"),
                ]),
                Field("DMOD", 3, 5, "Destination Address Modulo", [
                ]),
                Field("DSIZE", 0, 3, "Destination data transfer size", [
                ]),
            ]),
            Register("TCD15_NBYTES_MLNO", 0x400091E8, 32, "TCD Minor Byte Count (Minor Loop Mapping Disabled)", [
                Field("NBYTES", 0, 32, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD15_NBYTES_MLOFFNO", 0x400091E8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("NBYTES", 0, 30, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD15_NBYTES_MLOFFYES", 0x400091E8, 32, "TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)", [
                Field("SMLOE", 31, 1, "Source Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the SADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the SADDR"),
                ]),
                Field("DMLOE", 30, 1, "Destination Minor Loop Offset Enable", [
                    EnumVal("DISABLED", "0", "The minor loop offset is not applied to the DADDR"),
                    EnumVal("ENABLED", "0x1", "The minor loop offset is applied to the DADDR"),
                ]),
                Field("MLOFF", 10, 20, "If SMLOE = 1 or DMLOE = 1, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.", [
                ]),
                Field("NBYTES", 0, 10, "Minor Byte Transfer Count", [
                ]),
            ]),
            Register("TCD15_SLAST", 0x400091EC, 32, "TCD Last Source Address Adjustment", [
                Field("SLAST", 0, 32, "Last Source Address Adjustment", [
                ]),
            ]),
            Register("TCD15_DADDR", 0x400091F0, 32, "TCD Destination Address", [
                Field("DADDR", 0, 32, "Destination Address", [
                ]),
            ]),
            Register("TCD15_DOFF", 0x400091F4, 16, "TCD Signed Destination Address Offset", [
                Field("DOFF", 0, 16, "Destination Address Signed Offset", [
                ]),
            ]),
            Register("TCD15_CITER_ELINKNO", 0x400091F6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("CITER", 0, 15, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD15_CITER_ELINKYES", 0x400091F6, 16, "TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enable channel-to-channel linking on minor-loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Minor Loop Link Channel Number", [
                ]),
                Field("CITER", 0, 9, "Current Major Iteration Count", [
                ]),
            ]),
            Register("TCD15_DLASTSGA", 0x400091F8, 32, "TCD Last Destination Address Adjustment/Scatter Gather Address", [
                Field("DLASTSGA", 0, 32, "Destination last address adjustment, or next memory address TCD for channel (scatter/gather)", [
                ]),
            ]),
            Register("TCD15_CSR", 0x400091FC, 16, "TCD Control and Status", [
                Field("BWC", 14, 2, "Bandwidth Control", [
                    EnumVal("DISABLED", "0", "No eDMA engine stalls"),
                    EnumVal("STALL4", "0x2", "eDMA engine stalls for 4 cycles after each R/W"),
                    EnumVal("STALL8", "0x3", "eDMA engine stalls for 8 cycles after each R/W"),
                ]),
                Field("MAJORLINKCH", 8, 4, "Major Loop Link Channel Number", [
                ]),
                Field("DONE", 7, 1, "Channel Done", [
                ]),
                Field("ACTIVE", 6, 1, "Channel Active", [
                ]),
                Field("MAJORELINK", 5, 1, "Enable channel-to-channel linking on major loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("ESG", 4, 1, "Enable Scatter/Gather Processing", [
                    EnumVal("NORMAL", "0", "The current channel's TCD is normal format"),
                    EnumVal("SCATTER", "0x1", "The current channel's TCD specifies a scatter gather format"),
                ]),
                Field("DREQ", 3, 1, "Disable Request", [
                    EnumVal("NO_CLEAR", "0", "The channel's ERQ field is not affected"),
                    EnumVal("CLEAR", "0x1", "The channel's ERQ field value changes to 0 when the major loop is complete"),
                ]),
                Field("INTHALF", 2, 1, "Enable an interrupt when major counter is half complete.", [
                    EnumVal("DISABLED", "0", "Half-point interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "Half-point interrupt is enabled"),
                ]),
                Field("INTMAJOR", 1, 1, "Enable an interrupt when major iteration count completes.", [
                    EnumVal("DISABLED", "0", "End of major loop interrupt is disabled"),
                    EnumVal("ENABLED", "0x1", "End of major loop interrupt is enabled"),
                ]),
                Field("START", 0, 1, "Channel Start", [
                    EnumVal("NO_START", "0", "Channel is not explicitly started"),
                    EnumVal("START", "0x1", "Channel is explicitly started via a software initiated service request"),
                ]),
            ]),
            Register("TCD15_BITER_ELINKNO", 0x400091FE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("BITER", 0, 15, "Starting Major Iteration Count", [
                ]),
            ]),
            Register("TCD15_BITER_ELINKYES", 0x400091FE, 16, "TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)", [
                Field("ELINK", 15, 1, "Enables channel-to-channel linking on minor loop complete", [
                    EnumVal("DISABLED", "0", "Channel-to-channel linking is disabled"),
                    EnumVal("ENABLED", "0x1", "Channel-to-channel linking is enabled"),
                ]),
                Field("LINKCH", 9, 4, "Link Channel Number", [
                ]),
                Field("BITER", 0, 9, "Starting major iteration count", [
                ]),
            ]),
        ])

class Module_DMAMUX(Peripheral):
    def __init__(self):
        super().__init__("DMAMUX", 0x40021000, 0x10, [
            Register("CHCFG[0]", 0x40021000, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[1]", 0x40021001, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[2]", 0x40021002, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[3]", 0x40021003, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[4]", 0x40021004, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[5]", 0x40021005, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[6]", 0x40021006, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[7]", 0x40021007, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[8]", 0x40021008, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[9]", 0x40021009, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[10]", 0x4002100A, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[11]", 0x4002100B, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[12]", 0x4002100C, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[13]", 0x4002100D, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[14]", 0x4002100E, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
            Register("CHCFG[15]", 0x4002100F, 8, "Channel Configuration register", [
                Field("ENBL", 7, 1, "DMA Channel Enable", [
                    EnumVal("ENBL_0", "0", "DMA channel is disabled. This mode is primarily used during configuration of the DMAMux. The DMA has separate channel enables/disables, which should be used to disable or reconfigure a DMA channel."),
                    EnumVal("ENBL_1", "0x1", "DMA channel is enabled"),
                ]),
                Field("TRIG", 6, 1, "DMA Channel Trigger Enable", [
                    EnumVal("TRIG_0", "0", "Triggering is disabled. If triggering is disabled and ENBL is set, the DMA Channel will simply route the specified source to the DMA channel. (Normal mode)"),
                    EnumVal("TRIG_1", "0x1", "Triggering is enabled. If triggering is enabled and ENBL is set, the DMAMUX is in Periodic Trigger mode."),
                ]),
                Field("SOURCE", 0, 6, "DMA Channel Source (Slot)", [
                ]),
            ]),
        ])

class Module_EIM(Peripheral):
    def __init__(self):
        super().__init__("EIM", 0x40019000, 0x208, [
            Register("EIMCR", 0x40019000, 32, "Error Injection Module Configuration Register", [
                Field("GEIEN", 0, 1, "Global Error Injection Enable", [
                    EnumVal("GEIEN_0", "0", "Disabled"),
                    EnumVal("GEIEN_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("EICHEN", 0x40019004, 32, "Error Injection Channel Enable register", [
                Field("EICH0EN", 31, 1, "Error Injection Channel 0 Enable", [
                    EnumVal("EICH0EN_0", "0", "Error injection is disabled on Error Injection Channel 0"),
                    EnumVal("EICH0EN_1", "0x1", "Error injection is enabled on Error Injection Channel 0"),
                ]),
                Field("EICH1EN", 30, 1, "Error Injection Channel 1 Enable", [
                    EnumVal("EICH1EN_0", "0", "Error injection is disabled on Error Injection Channel 1"),
                    EnumVal("EICH1EN_1", "0x1", "Error injection is enabled on Error Injection Channel 1"),
                ]),
            ]),
            Register("EICHD0_WORD0", 0x40019100, 32, "Error Injection Channel Descriptor n, Word0", [
                Field("CHKBIT_MASK", 25, 7, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD0_WORD1", 0x40019104, 32, "Error Injection Channel Descriptor n, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
            Register("EICHD1_WORD0", 0x40019200, 32, "Error Injection Channel Descriptor n, Word0", [
                Field("CHKBIT_MASK", 25, 7, "Checkbit Mask", [
                ]),
            ]),
            Register("EICHD1_WORD1", 0x40019204, 32, "Error Injection Channel Descriptor n, Word1", [
                Field("B0_3DATA_MASK", 0, 32, "Data Mask Bytes 0-3", [
                ]),
            ]),
        ])

class Module_ENET(Peripheral):
    def __init__(self):
        super().__init__("ENET", 0x40079000, 0x628, [
            Register("EIR", 0x40079004, 32, "Interrupt Event Register", [
                Field("BABR", 30, 1, "Babbling Receive Error", [
                ]),
                Field("BABT", 29, 1, "Babbling Transmit Error", [
                ]),
                Field("GRA", 28, 1, "Graceful Stop Complete", [
                ]),
                Field("TXF", 27, 1, "Transmit Frame Interrupt", [
                ]),
                Field("TXB", 26, 1, "Transmit Buffer Interrupt", [
                ]),
                Field("RXF", 25, 1, "Receive Frame Interrupt", [
                ]),
                Field("RXB", 24, 1, "Receive Buffer Interrupt", [
                ]),
                Field("MII", 23, 1, "MII Interrupt.", [
                ]),
                Field("EBERR", 22, 1, "Ethernet Bus Error", [
                ]),
                Field("LC", 21, 1, "Late Collision", [
                ]),
                Field("RL", 20, 1, "Collision Retry Limit", [
                ]),
                Field("UN", 19, 1, "Transmit FIFO Underrun", [
                ]),
                Field("PLR", 18, 1, "Payload Receive Error", [
                ]),
                Field("WAKEUP", 17, 1, "Node Wakeup Request Indication", [
                ]),
                Field("TS_AVAIL", 16, 1, "Transmit Timestamp Available", [
                ]),
                Field("TS_TIMER", 15, 1, "Timestamp Timer", [
                ]),
            ]),
            Register("EIMR", 0x40079008, 32, "Interrupt Mask Register", [
                Field("BABR", 30, 1, "BABR Interrupt Mask", [
                    EnumVal("BABR_0", "0", "The corresponding interrupt source is masked."),
                    EnumVal("BABR_1", "0x1", "The corresponding interrupt source is not masked."),
                ]),
                Field("BABT", 29, 1, "BABT Interrupt Mask", [
                    EnumVal("BABT_0", "0", "The corresponding interrupt source is masked."),
                    EnumVal("BABT_1", "0x1", "The corresponding interrupt source is not masked."),
                ]),
                Field("GRA", 28, 1, "GRA Interrupt Mask", [
                    EnumVal("GRA_0", "0", "The corresponding interrupt source is masked."),
                    EnumVal("GRA_1", "0x1", "The corresponding interrupt source is not masked."),
                ]),
                Field("TXF", 27, 1, "TXF Interrupt Mask", [
                    EnumVal("TXF_0", "0", "The corresponding interrupt source is masked."),
                    EnumVal("TXF_1", "0x1", "The corresponding interrupt source is not masked."),
                ]),
                Field("TXB", 26, 1, "TXB Interrupt Mask", [
                    EnumVal("TXB_0", "0", "The corresponding interrupt source is masked."),
                    EnumVal("TXB_1", "0x1", "The corresponding interrupt source is not masked."),
                ]),
                Field("RXF", 25, 1, "RXF Interrupt Mask", [
                ]),
                Field("RXB", 24, 1, "RXB Interrupt Mask", [
                ]),
                Field("MII", 23, 1, "MII Interrupt Mask", [
                ]),
                Field("EBERR", 22, 1, "EBERR Interrupt Mask", [
                ]),
                Field("LC", 21, 1, "LC Interrupt Mask", [
                ]),
                Field("RL", 20, 1, "RL Interrupt Mask", [
                ]),
                Field("UN", 19, 1, "UN Interrupt Mask", [
                ]),
                Field("PLR", 18, 1, "PLR Interrupt Mask", [
                ]),
                Field("WAKEUP", 17, 1, "WAKEUP Interrupt Mask", [
                ]),
                Field("TS_AVAIL", 16, 1, "TS_AVAIL Interrupt Mask", [
                ]),
                Field("TS_TIMER", 15, 1, "TS_TIMER Interrupt Mask", [
                ]),
            ]),
            Register("RDAR", 0x40079010, 32, "Receive Descriptor Active Register", [
                Field("RDAR", 24, 1, "Receive Descriptor Active", [
                ]),
            ]),
            Register("TDAR", 0x40079014, 32, "Transmit Descriptor Active Register", [
                Field("TDAR", 24, 1, "Transmit Descriptor Active", [
                ]),
            ]),
            Register("ECR", 0x40079024, 32, "Ethernet Control Register", [
                Field("DBSWP", 8, 1, "Descriptor Byte Swapping Enable", [
                    EnumVal("DBSWP_0", "0", "The buffer descriptor bytes are not swapped to support big-endian devices."),
                    EnumVal("DBSWP_1", "0x1", "The buffer descriptor bytes are swapped to support little-endian devices."),
                ]),
                Field("DBGEN", 6, 1, "Debug Enable", [
                    EnumVal("DBGEN_0", "0", "MAC continues operation in debug mode."),
                    EnumVal("DBGEN_1", "0x1", "MAC enters hardware freeze mode when the processor is in debug mode."),
                ]),
                Field("EN1588", 4, 1, "EN1588 Enable", [
                    EnumVal("EN1588_0", "0", "Legacy FEC buffer descriptors and functions enabled."),
                    EnumVal("EN1588_1", "0x1", "Enhanced frame time-stamping functions enabled."),
                ]),
                Field("SLEEP", 3, 1, "Sleep Mode Enable", [
                    EnumVal("SLEEP_0", "0", "Normal operating mode."),
                    EnumVal("SLEEP_1", "0x1", "Sleep mode."),
                ]),
                Field("MAGICEN", 2, 1, "Magic Packet Detection Enable", [
                    EnumVal("MAGICEN_0", "0", "Magic detection logic disabled."),
                    EnumVal("MAGICEN_1", "0x1", "The MAC core detects magic packets and asserts EIR[WAKEUP] when a frame is detected."),
                ]),
                Field("ETHEREN", 1, 1, "Ethernet Enable", [
                    EnumVal("ETHEREN_0", "0", "Reception immediately stops and transmission stops after a bad CRC is appended to any currently transmitted frame."),
                    EnumVal("ETHEREN_1", "0x1", "MAC is enabled, and reception and transmission are possible."),
                ]),
                Field("RESET", 0, 1, "Ethernet MAC Reset", [
                ]),
            ]),
            Register("MMFR", 0x40079040, 32, "MII Management Frame Register", [
                Field("ST", 30, 2, "Start Of Frame Delimiter", [
                ]),
                Field("OP", 28, 2, "Operation Code", [
                ]),
                Field("PA", 23, 5, "PHY Address", [
                ]),
                Field("RA", 18, 5, "Register Address", [
                ]),
                Field("TA", 16, 2, "Turn Around", [
                ]),
                Field("DATA", 0, 16, "Management Frame Data", [
                ]),
            ]),
            Register("MSCR", 0x40079044, 32, "MII Speed Control Register", [
                Field("HOLDTIME", 8, 3, "Hold time On MDIO Output", [
                    EnumVal("HOLDTIME_0", "0", "1 internal module clock cycle"),
                    EnumVal("HOLDTIME_1", "0x1", "2 internal module clock cycles"),
                    EnumVal("HOLDTIME_2", "0x2", "3 internal module clock cycles"),
                    EnumVal("HOLDTIME_7", "0x7", "8 internal module clock cycles"),
                ]),
                Field("DIS_PRE", 7, 1, "Disable Preamble", [
                    EnumVal("DIS_PRE_0", "0", "Preamble enabled."),
                    EnumVal("DIS_PRE_1", "0x1", "Preamble (32 ones) is not prepended to the MII management frame."),
                ]),
                Field("MII_SPEED", 1, 6, "MII Speed", [
                ]),
            ]),
            Register("MIBC", 0x40079064, 32, "MIB Control Register", [
                Field("MIB_DIS", 31, 1, "Disable MIB Logic", [
                    EnumVal("MIB_DIS_0", "0", "MIB logic is enabled."),
                    EnumVal("MIB_DIS_1", "0x1", "MIB logic is disabled. The MIB logic halts and does not update any MIB counters."),
                ]),
                Field("MIB_IDLE", 30, 1, "MIB Idle", [
                    EnumVal("MIB_IDLE_0", "0", "The MIB block is updating MIB counters."),
                    EnumVal("MIB_IDLE_1", "0x1", "The MIB block is not currently updating any MIB counters."),
                ]),
                Field("MIB_CLEAR", 29, 1, "MIB Clear", [
                    EnumVal("MIB_CLEAR_0", "0", "See note above."),
                    EnumVal("MIB_CLEAR_1", "0x1", "All statistics counters are reset to 0."),
                ]),
            ]),
            Register("RCR", 0x40079084, 32, "Receive Control Register", [
                Field("GRS", 31, 1, "Graceful Receive Stopped", [
                ]),
                Field("NLC", 30, 1, "Payload Length Check Disable", [
                    EnumVal("NLC_0", "0", "The payload length check is disabled."),
                    EnumVal("NLC_1", "0x1", "The core checks the frame's payload length with the frame length/type field. Errors are indicated in the EIR[PLR] field."),
                ]),
                Field("MAX_FL", 16, 14, "Maximum Frame Length", [
                ]),
                Field("CFEN", 15, 1, "MAC Control Frame Enable", [
                    EnumVal("CFEN_0", "0", "MAC control frames with any opcode other than 0x0001 (pause frame) are accepted and forwarded to the client interface."),
                    EnumVal("CFEN_1", "0x1", "MAC control frames with any opcode other than 0x0001 (pause frame) are silently discarded."),
                ]),
                Field("CRCFWD", 14, 1, "Terminate/Forward Received CRC", [
                    EnumVal("CRCFWD_0", "0", "The CRC field of received frames is transmitted to the user application."),
                    EnumVal("CRCFWD_1", "0x1", "The CRC field is stripped from the frame."),
                ]),
                Field("PAUFWD", 13, 1, "Terminate/Forward Pause Frames", [
                    EnumVal("PAUFWD_0", "0", "Pause frames are terminated and discarded in the MAC."),
                    EnumVal("PAUFWD_1", "0x1", "Pause frames are forwarded to the user application."),
                ]),
                Field("PADEN", 12, 1, "Enable Frame Padding Remove On Receive", [
                    EnumVal("PADEN_0", "0", "No padding is removed on receive by the MAC."),
                    EnumVal("PADEN_1", "0x1", "Padding is removed from received frames."),
                ]),
                Field("RMII_10T", 9, 1, "Enables 10-Mbit/s mode of the RMII .", [
                    EnumVal("RMII_10T_0", "0", "100-Mbit/s operation."),
                    EnumVal("RMII_10T_1", "0x1", "10-Mbit/s operation."),
                ]),
                Field("RMII_MODE", 8, 1, "RMII Mode Enable", [
                    EnumVal("RMII_MODE_0", "0", "MAC configured for MII mode."),
                    EnumVal("RMII_MODE_1", "0x1", "MAC configured for RMII operation."),
                ]),
                Field("FCE", 5, 1, "Flow Control Enable", [
                ]),
                Field("BC_REJ", 4, 1, "Broadcast Frame Reject", [
                ]),
                Field("PROM", 3, 1, "Promiscuous Mode", [
                    EnumVal("PROM_0", "0", "Disabled."),
                    EnumVal("PROM_1", "0x1", "Enabled."),
                ]),
                Field("MII_MODE", 2, 1, "Media Independent Interface Mode", [
                    EnumVal("MII_MODE_1", "0x1", "MII or RMII mode, as indicated by the RMII_MODE field."),
                ]),
                Field("DRT", 1, 1, "Disable Receive On Transmit", [
                    EnumVal("DRT_0", "0", "Receive path operates independently of transmit (i.e., full-duplex mode). Can also be used to monitor transmit activity in half-duplex mode."),
                    EnumVal("DRT_1", "0x1", "Disable reception of frames while transmitting. (Normally used for half-duplex mode.)"),
                ]),
                Field("LOOP", 0, 1, "Internal Loopback", [
                    EnumVal("LOOP_0", "0", "Loopback disabled."),
                    EnumVal("LOOP_1", "0x1", "Transmitted frames are looped back internal to the device and transmit MII output signals are not asserted. DRT must be cleared."),
                ]),
            ]),
            Register("TCR", 0x400790C4, 32, "Transmit Control Register", [
                Field("CRCFWD", 9, 1, "Forward Frame From Application With CRC", [
                    EnumVal("CRCFWD_0", "0", "TxBD[TC] controls whether the frame has a CRC from the application."),
                    EnumVal("CRCFWD_1", "0x1", "The transmitter does not append any CRC to transmitted frames, as it is expecting a frame with CRC from the application."),
                ]),
                Field("ADDINS", 8, 1, "Set MAC Address On Transmit", [
                    EnumVal("ADDINS_0", "0", "The source MAC address is not modified by the MAC."),
                    EnumVal("ADDINS_1", "0x1", "The MAC overwrites the source MAC address with the programmed MAC address according to ADDSEL."),
                ]),
                Field("ADDSEL", 5, 3, "Source MAC Address Select On Transmit", [
                    EnumVal("ADDSEL_0", "0", "Node MAC address programmed on PADDR1/2 registers."),
                ]),
                Field("RFC_PAUSE", 4, 1, "Receive Frame Control Pause", [
                ]),
                Field("TFC_PAUSE", 3, 1, "Transmit Frame Control Pause", [
                    EnumVal("TFC_PAUSE_0", "0", "No PAUSE frame transmitted."),
                    EnumVal("TFC_PAUSE_1", "0x1", "The MAC stops transmission of data frames after the current transmission is complete."),
                ]),
                Field("FDEN", 2, 1, "Full-Duplex Enable", [
                ]),
                Field("GTS", 0, 1, "Graceful Transmit Stop", [
                ]),
            ]),
            Register("PALR", 0x400790E4, 32, "Physical Address Lower Register", [
                Field("PADDR1", 0, 32, "Pause Address", [
                ]),
            ]),
            Register("PAUR", 0x400790E8, 32, "Physical Address Upper Register", [
                Field("PADDR2", 16, 16, "Bytes 4 (bits 31:24) and 5 (bits 23:16) of the 6-byte individual address used for exact match, and the source address field in PAUSE frames", [
                ]),
                Field("TYPE", 0, 16, "Type Field In PAUSE Frames", [
                ]),
            ]),
            Register("OPD", 0x400790EC, 32, "Opcode/Pause Duration Register", [
                Field("OPCODE", 16, 16, "Opcode Field In PAUSE Frames", [
                ]),
                Field("PAUSE_DUR", 0, 16, "Pause Duration", [
                ]),
            ]),
            Register("IAUR", 0x40079118, 32, "Descriptor Individual Upper Address Register", [
                Field("IADDR1", 0, 32, "Contains the upper 32 bits of the 64-bit hash table used in the address recognition process for receive frames with a unicast address", [
                ]),
            ]),
            Register("IALR", 0x4007911C, 32, "Descriptor Individual Lower Address Register", [
                Field("IADDR2", 0, 32, "Contains the lower 32 bits of the 64-bit hash table used in the address recognition process for receive frames with a unicast address", [
                ]),
            ]),
            Register("GAUR", 0x40079120, 32, "Descriptor Group Upper Address Register", [
                Field("GADDR1", 0, 32, "Contains the upper 32 bits of the 64-bit hash table used in the address recognition process for receive frames with a multicast address", [
                ]),
            ]),
            Register("GALR", 0x40079124, 32, "Descriptor Group Lower Address Register", [
                Field("GADDR2", 0, 32, "Contains the lower 32 bits of the 64-bit hash table used in the address recognition process for receive frames with a multicast address", [
                ]),
            ]),
            Register("TFWR", 0x40079144, 32, "Transmit FIFO Watermark Register", [
                Field("STRFWD", 8, 1, "Store And Forward Enable", [
                    EnumVal("STRFWD_0", "0", "Reset. The transmission start threshold is programmed in TFWR[TFWR]."),
                    EnumVal("STRFWD_1", "0x1", "Enabled."),
                ]),
                Field("TFWR", 0, 6, "Transmit FIFO Write", [
                    EnumVal("TFWR_0", "0", "64 bytes written."),
                    EnumVal("TFWR_1", "0x1", "64 bytes written."),
                    EnumVal("TFWR_2", "0x2", "128 bytes written."),
                    EnumVal("TFWR_3", "0x3", "192 bytes written."),
                    EnumVal("TFWR_31", "0x1F", "1984 bytes written."),
                ]),
            ]),
            Register("RDSR", 0x40079180, 32, "Receive Descriptor Ring Start Register", [
                Field("R_DES_START", 3, 29, "Pointer to the beginning of the receive buffer descriptor queue.", [
                ]),
            ]),
            Register("TDSR", 0x40079184, 32, "Transmit Buffer Descriptor Ring Start Register", [
                Field("X_DES_START", 3, 29, "Pointer to the beginning of the transmit buffer descriptor queue.", [
                ]),
            ]),
            Register("MRBR", 0x40079188, 32, "Maximum Receive Buffer Size Register", [
                Field("R_BUF_SIZE", 4, 10, "Receive buffer size in bytes", [
                ]),
            ]),
            Register("RSFL", 0x40079190, 32, "Receive FIFO Section Full Threshold", [
                Field("RX_SECTION_FULL", 0, 8, "Value Of Receive FIFO Section Full Threshold", [
                ]),
            ]),
            Register("RSEM", 0x40079194, 32, "Receive FIFO Section Empty Threshold", [
                Field("STAT_SECTION_EMPTY", 16, 5, "RX Status FIFO Section Empty Threshold", [
                ]),
                Field("RX_SECTION_EMPTY", 0, 8, "Value Of The Receive FIFO Section Empty Threshold", [
                ]),
            ]),
            Register("RAEM", 0x40079198, 32, "Receive FIFO Almost Empty Threshold", [
                Field("RX_ALMOST_EMPTY", 0, 8, "Value Of The Receive FIFO Almost Empty Threshold", [
                ]),
            ]),
            Register("RAFL", 0x4007919C, 32, "Receive FIFO Almost Full Threshold", [
                Field("RX_ALMOST_FULL", 0, 8, "Value Of The Receive FIFO Almost Full Threshold", [
                ]),
            ]),
            Register("TSEM", 0x400791A0, 32, "Transmit FIFO Section Empty Threshold", [
                Field("TX_SECTION_EMPTY", 0, 8, "Value Of The Transmit FIFO Section Empty Threshold", [
                ]),
            ]),
            Register("TAEM", 0x400791A4, 32, "Transmit FIFO Almost Empty Threshold", [
                Field("TX_ALMOST_EMPTY", 0, 8, "Value of Transmit FIFO Almost Empty Threshold", [
                ]),
            ]),
            Register("TAFL", 0x400791A8, 32, "Transmit FIFO Almost Full Threshold", [
                Field("TX_ALMOST_FULL", 0, 8, "Value Of The Transmit FIFO Almost Full Threshold", [
                ]),
            ]),
            Register("TIPG", 0x400791AC, 32, "Transmit Inter-Packet Gap", [
                Field("IPG", 0, 5, "Transmit Inter-Packet Gap", [
                ]),
            ]),
            Register("FTRL", 0x400791B0, 32, "Frame Truncation Length", [
                Field("TRUNC_FL", 0, 14, "Frame Truncation Length", [
                ]),
            ]),
            Register("TACC", 0x400791C0, 32, "Transmit Accelerator Function Configuration", [
                Field("PROCHK", 4, 1, "Enables insertion of protocol checksum.", [
                    EnumVal("PROCHK_0", "0", "Checksum not inserted."),
                    EnumVal("PROCHK_1", "0x1", "If an IP frame with a known protocol is transmitted, the checksum is inserted automatically into the frame. The checksum field must be cleared. The other frames are not modified."),
                ]),
                Field("IPCHK", 3, 1, "Enables insertion of IP header checksum.", [
                    EnumVal("IPCHK_0", "0", "Checksum is not inserted."),
                    EnumVal("IPCHK_1", "0x1", "If an IP frame is transmitted, the checksum is inserted automatically. The IP header checksum field must be cleared. If a non-IP frame is transmitted the frame is not modified."),
                ]),
                Field("SHIFT16", 0, 1, "TX FIFO Shift-16", [
                    EnumVal("SHIFT16_0", "0", "Disabled."),
                    EnumVal("SHIFT16_1", "0x1", "Indicates to the transmit data FIFO that the written frames contain two additional octets before the frame data. This means the actual frame begins at bit 16 of the first word written into the FIFO. This function allows putting the frame payload on a 32-bit boundary in memory, as the 14-byte Ethernet header is extended to a 16-byte header."),
                ]),
            ]),
            Register("RACC", 0x400791C4, 32, "Receive Accelerator Function Configuration", [
                Field("SHIFT16", 7, 1, "RX FIFO Shift-16", [
                    EnumVal("SHIFT16_0", "0", "Disabled."),
                    EnumVal("SHIFT16_1", "0x1", "Instructs the MAC to write two additional bytes in front of each frame received into the RX FIFO."),
                ]),
                Field("LINEDIS", 6, 1, "Enable Discard Of Frames With MAC Layer Errors", [
                    EnumVal("LINEDIS_0", "0", "Frames with errors are not discarded."),
                    EnumVal("LINEDIS_1", "0x1", "Any frame received with a CRC, length, or PHY error is automatically discarded and not forwarded to the user application interface."),
                ]),
                Field("PRODIS", 2, 1, "Enable Discard Of Frames With Wrong Protocol Checksum", [
                    EnumVal("PRODIS_0", "0", "Frames with wrong checksum are not discarded."),
                    EnumVal("PRODIS_1", "0x1", "If a TCP/IP, UDP/IP, or ICMP/IP frame is received that has a wrong TCP, UDP, or ICMP checksum, the frame is discarded. Discarding is only available when the RX FIFO operates in store and forward mode (RSFL cleared)."),
                ]),
                Field("IPDIS", 1, 1, "Enable Discard Of Frames With Wrong IPv4 Header Checksum", [
                    EnumVal("IPDIS_0", "0", "Frames with wrong IPv4 header checksum are not discarded."),
                    EnumVal("IPDIS_1", "0x1", "If an IPv4 frame is received with a mismatching header checksum, the frame is discarded. IPv6 has no header checksum and is not affected by this setting. Discarding is only available when the RX FIFO operates in store and forward mode (RSFL cleared)."),
                ]),
                Field("PADREM", 0, 1, "Enable Padding Removal For Short IP Frames", [
                    EnumVal("PADREM_0", "0", "Padding not removed."),
                    EnumVal("PADREM_1", "0x1", "Any bytes following the IP payload section of the frame are removed from the frame."),
                ]),
            ]),
            Register("RMON_T_DROP", 0x40079200, 32, "Reserved Statistic Register", [
            ]),
            Register("RMON_T_PACKETS", 0x40079204, 32, "Tx Packet Count Statistic Register", [
                Field("TXPKTS", 0, 16, "Packet count", [
                ]),
            ]),
            Register("RMON_T_BC_PKT", 0x40079208, 32, "Tx Broadcast Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Broadcast packets", [
                ]),
            ]),
            Register("RMON_T_MC_PKT", 0x4007920C, 32, "Tx Multicast Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Multicast packets", [
                ]),
            ]),
            Register("RMON_T_CRC_ALIGN", 0x40079210, 32, "Tx Packets with CRC/Align Error Statistic Register", [
                Field("TXPKTS", 0, 16, "Packets with CRC/align error", [
                ]),
            ]),
            Register("RMON_T_UNDERSIZE", 0x40079214, 32, "Tx Packets Less Than Bytes and Good CRC Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of transmit packets less than 64 bytes with good CRC", [
                ]),
            ]),
            Register("RMON_T_OVERSIZE", 0x40079218, 32, "Tx Packets GT MAX_FL bytes and Good CRC Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of transmit packets greater than MAX_FL bytes with good CRC", [
                ]),
            ]),
            Register("RMON_T_FRAG", 0x4007921C, 32, "Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of packets less than 64 bytes with bad CRC", [
                ]),
            ]),
            Register("RMON_T_JAB", 0x40079220, 32, "Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of transmit packets greater than MAX_FL bytes and bad CRC", [
                ]),
            ]),
            Register("RMON_T_COL", 0x40079224, 32, "Tx Collision Count Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of transmit collisions", [
                ]),
            ]),
            Register("RMON_T_P64", 0x40079228, 32, "Tx 64-Byte Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of 64-byte transmit packets", [
                ]),
            ]),
            Register("RMON_T_P65TO127", 0x4007922C, 32, "Tx 65- to 127-byte Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of 65- to 127-byte transmit packets", [
                ]),
            ]),
            Register("RMON_T_P128TO255", 0x40079230, 32, "Tx 128- to 255-byte Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of 128- to 255-byte transmit packets", [
                ]),
            ]),
            Register("RMON_T_P256TO511", 0x40079234, 32, "Tx 256- to 511-byte Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of 256- to 511-byte transmit packets", [
                ]),
            ]),
            Register("RMON_T_P512TO1023", 0x40079238, 32, "Tx 512- to 1023-byte Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of 512- to 1023-byte transmit packets", [
                ]),
            ]),
            Register("RMON_T_P1024TO2047", 0x4007923C, 32, "Tx 1024- to 2047-byte Packets Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of 1024- to 2047-byte transmit packets", [
                ]),
            ]),
            Register("RMON_T_P_GTE2048", 0x40079240, 32, "Tx Packets Greater Than 2048 Bytes Statistic Register", [
                Field("TXPKTS", 0, 16, "Number of transmit packets greater than 2048 bytes", [
                ]),
            ]),
            Register("RMON_T_OCTETS", 0x40079244, 32, "Tx Octets Statistic Register", [
                Field("TXOCTS", 0, 32, "Number of transmit octets", [
                ]),
            ]),
            Register("IEEE_T_DROP", 0x40079248, 32, "Reserved Statistic Register", [
            ]),
            Register("IEEE_T_FRAME_OK", 0x4007924C, 32, "Frames Transmitted OK Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted OK", [
                ]),
            ]),
            Register("IEEE_T_1COL", 0x40079250, 32, "Frames Transmitted with Single Collision Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted with one collision", [
                ]),
            ]),
            Register("IEEE_T_MCOL", 0x40079254, 32, "Frames Transmitted with Multiple Collisions Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted with multiple collisions", [
                ]),
            ]),
            Register("IEEE_T_DEF", 0x40079258, 32, "Frames Transmitted after Deferral Delay Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted with deferral delay", [
                ]),
            ]),
            Register("IEEE_T_LCOL", 0x4007925C, 32, "Frames Transmitted with Late Collision Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted with late collision", [
                ]),
            ]),
            Register("IEEE_T_EXCOL", 0x40079260, 32, "Frames Transmitted with Excessive Collisions Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted with excessive collisions", [
                ]),
            ]),
            Register("IEEE_T_MACERR", 0x40079264, 32, "Frames Transmitted with Tx FIFO Underrun Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted with transmit FIFO underrun", [
                ]),
            ]),
            Register("IEEE_T_CSERR", 0x40079268, 32, "Frames Transmitted with Carrier Sense Error Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames transmitted with carrier sense error", [
                ]),
            ]),
            Register("IEEE_T_SQE", 0x4007926C, 32, "Reserved Statistic Register", [
                Field("COUNT", 0, 16, "This read-only field is reserved and always has the value 0", [
                ]),
            ]),
            Register("IEEE_T_FDXFC", 0x40079270, 32, "Flow Control Pause Frames Transmitted Statistic Register", [
                Field("COUNT", 0, 16, "Number of flow-control pause frames transmitted", [
                ]),
            ]),
            Register("IEEE_T_OCTETS_OK", 0x40079274, 32, "Octet Count for Frames Transmitted w/o Error Statistic Register", [
                Field("COUNT", 0, 32, "Octet count for frames transmitted without error Counts total octets (includes header and FCS fields).", [
                ]),
            ]),
            Register("RMON_R_PACKETS", 0x40079284, 32, "Rx Packet Count Statistic Register", [
                Field("COUNT", 0, 16, "Number of packets received", [
                ]),
            ]),
            Register("RMON_R_BC_PKT", 0x40079288, 32, "Rx Broadcast Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of receive broadcast packets", [
                ]),
            ]),
            Register("RMON_R_MC_PKT", 0x4007928C, 32, "Rx Multicast Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of receive multicast packets", [
                ]),
            ]),
            Register("RMON_R_CRC_ALIGN", 0x40079290, 32, "Rx Packets with CRC/Align Error Statistic Register", [
                Field("COUNT", 0, 16, "Number of receive packets with CRC or align error", [
                ]),
            ]),
            Register("RMON_R_UNDERSIZE", 0x40079294, 32, "Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register", [
                Field("COUNT", 0, 16, "Number of receive packets with less than 64 bytes and good CRC", [
                ]),
            ]),
            Register("RMON_R_OVERSIZE", 0x40079298, 32, "Rx Packets Greater Than MAX_FL and Good CRC Statistic Register", [
                Field("COUNT", 0, 16, "Number of receive packets greater than MAX_FL and good CRC", [
                ]),
            ]),
            Register("RMON_R_FRAG", 0x4007929C, 32, "Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register", [
                Field("COUNT", 0, 16, "Number of receive packets with less than 64 bytes and bad CRC", [
                ]),
            ]),
            Register("RMON_R_JAB", 0x400792A0, 32, "Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register", [
                Field("COUNT", 0, 16, "Number of receive packets greater than MAX_FL and bad CRC", [
                ]),
            ]),
            Register("RMON_R_RESVD_0", 0x400792A4, 32, "Reserved Statistic Register", [
            ]),
            Register("RMON_R_P64", 0x400792A8, 32, "Rx 64-Byte Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of 64-byte receive packets", [
                ]),
            ]),
            Register("RMON_R_P65TO127", 0x400792AC, 32, "Rx 65- to 127-Byte Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of 65- to 127-byte recieve packets", [
                ]),
            ]),
            Register("RMON_R_P128TO255", 0x400792B0, 32, "Rx 128- to 255-Byte Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of 128- to 255-byte recieve packets", [
                ]),
            ]),
            Register("RMON_R_P256TO511", 0x400792B4, 32, "Rx 256- to 511-Byte Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of 256- to 511-byte recieve packets", [
                ]),
            ]),
            Register("RMON_R_P512TO1023", 0x400792B8, 32, "Rx 512- to 1023-Byte Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of 512- to 1023-byte recieve packets", [
                ]),
            ]),
            Register("RMON_R_P1024TO2047", 0x400792BC, 32, "Rx 1024- to 2047-Byte Packets Statistic Register", [
                Field("COUNT", 0, 16, "Number of 1024- to 2047-byte recieve packets", [
                ]),
            ]),
            Register("RMON_R_P_GTE2048", 0x400792C0, 32, "Rx Packets Greater than 2048 Bytes Statistic Register", [
                Field("COUNT", 0, 16, "Number of greater-than-2048-byte recieve packets", [
                ]),
            ]),
            Register("RMON_R_OCTETS", 0x400792C4, 32, "Rx Octets Statistic Register", [
                Field("COUNT", 0, 32, "Number of receive octets", [
                ]),
            ]),
            Register("IEEE_R_DROP", 0x400792C8, 32, "Frames not Counted Correctly Statistic Register", [
                Field("COUNT", 0, 16, "Frame count", [
                ]),
            ]),
            Register("IEEE_R_FRAME_OK", 0x400792CC, 32, "Frames Received OK Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames received OK", [
                ]),
            ]),
            Register("IEEE_R_CRC", 0x400792D0, 32, "Frames Received with CRC Error Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames received with CRC error", [
                ]),
            ]),
            Register("IEEE_R_ALIGN", 0x400792D4, 32, "Frames Received with Alignment Error Statistic Register", [
                Field("COUNT", 0, 16, "Number of frames received with alignment error", [
                ]),
            ]),
            Register("IEEE_R_MACERR", 0x400792D8, 32, "Receive FIFO Overflow Count Statistic Register", [
                Field("COUNT", 0, 16, "Receive FIFO overflow count", [
                ]),
            ]),
            Register("IEEE_R_FDXFC", 0x400792DC, 32, "Flow Control Pause Frames Received Statistic Register", [
                Field("COUNT", 0, 16, "Number of flow-control pause frames received", [
                ]),
            ]),
            Register("IEEE_R_OCTETS_OK", 0x400792E0, 32, "Octet Count for Frames Received without Error Statistic Register", [
                Field("COUNT", 0, 32, "Number of octets for frames received without error", [
                ]),
            ]),
            Register("ATCR", 0x40079400, 32, "Adjustable Timer Control Register", [
                Field("SLAVE", 13, 1, "Enable Timer Slave Mode", [
                    EnumVal("SLAVE_0", "0", "The timer is active and all configuration fields in this register are relevant."),
                    EnumVal("SLAVE_1", "0x1", "The internal timer is disabled and the externally provided timer value is used. All other fields, except CAPTURE, in this register have no effect. CAPTURE can still be used to capture the current timer value."),
                ]),
                Field("CAPTURE", 11, 1, "Capture Timer Value", [
                    EnumVal("CAPTURE_0", "0", "No effect."),
                    EnumVal("CAPTURE_1", "0x1", "The current time is captured and can be read from the ATVR register."),
                ]),
                Field("RESTART", 9, 1, "Reset Timer", [
                ]),
                Field("PINPER", 7, 1, "Enables event signal output assertion on period event", [
                    EnumVal("PINPER_0", "0", "Disable."),
                    EnumVal("PINPER_1", "0x1", "Enable."),
                ]),
                Field("PEREN", 4, 1, "Enable Periodical Event", [
                    EnumVal("PEREN_0", "0", "Disable."),
                    EnumVal("PEREN_1", "0x1", "A period event interrupt can be generated (EIR[TS_TIMER]) and the event signal output is asserted when the timer wraps around according to the periodic setting ATPER. The timer period value must be set before setting this bit. Not all devices contain the event signal output. See the chip configuration details."),
                ]),
                Field("OFFRST", 3, 1, "Reset Timer On Offset Event", [
                    EnumVal("OFFRST_0", "0", "The timer is not affected and no action occurs, besides clearing OFFEN, when the offset is reached."),
                    EnumVal("OFFRST_1", "0x1", "If OFFEN is set, the timer resets to zero when the offset setting is reached. The offset event does not cause a timer interrupt."),
                ]),
                Field("OFFEN", 2, 1, "Enable One-Shot Offset Event", [
                    EnumVal("OFFEN_0", "0", "Disable."),
                    EnumVal("OFFEN_1", "0x1", "The timer can be reset to zero when the given offset time is reached (offset event). The field is cleared when the offset event is reached, so no further event occurs until the field is set again. The timer offset value must be set before setting this field."),
                ]),
                Field("EN", 0, 1, "Enable Timer", [
                    EnumVal("EN_0", "0", "The timer stops at the current value."),
                    EnumVal("EN_1", "0x1", "The timer starts incrementing."),
                ]),
            ]),
            Register("ATVR", 0x40079404, 32, "Timer Value Register", [
                Field("ATIME", 0, 32, "A write sets the timer", [
                ]),
            ]),
            Register("ATOFF", 0x40079408, 32, "Timer Offset Register", [
                Field("OFFSET", 0, 32, "Offset value for one-shot event generation", [
                ]),
            ]),
            Register("ATPER", 0x4007940C, 32, "Timer Period Register", [
                Field("PERIOD", 0, 32, "Value for generating periodic events", [
                ]),
            ]),
            Register("ATCOR", 0x40079410, 32, "Timer Correction Register", [
                Field("COR", 0, 31, "Correction Counter Wrap-Around Value", [
                ]),
            ]),
            Register("ATINC", 0x40079414, 32, "Time-Stamping Clock Period Register", [
                Field("INC_CORR", 8, 7, "Correction Increment Value", [
                ]),
                Field("INC", 0, 7, "Clock Period Of The Timestamping Clock (ts_clk) In Nanoseconds", [
                ]),
            ]),
            Register("ATSTMP", 0x40079418, 32, "Timestamp of Last Transmitted Frame", [
                Field("TIMESTAMP", 0, 32, "Timestamp of the last frame transmitted by the core that had TxBD[TS] set", [
                ]),
            ]),
            Register("TGSR", 0x40079604, 32, "Timer Global Status Register", [
                Field("TF3", 3, 1, "Copy Of Timer Flag For Channel 3", [
                    EnumVal("TF3_0", "0", "Timer Flag for Channel 3 is clear"),
                    EnumVal("TF3_1", "0x1", "Timer Flag for Channel 3 is set"),
                ]),
                Field("TF2", 2, 1, "Copy Of Timer Flag For Channel 2", [
                    EnumVal("TF2_0", "0", "Timer Flag for Channel 2 is clear"),
                    EnumVal("TF2_1", "0x1", "Timer Flag for Channel 2 is set"),
                ]),
                Field("TF1", 1, 1, "Copy Of Timer Flag For Channel 1", [
                    EnumVal("TF1_0", "0", "Timer Flag for Channel 1 is clear"),
                    EnumVal("TF1_1", "0x1", "Timer Flag for Channel 1 is set"),
                ]),
                Field("TF0", 0, 1, "Copy Of Timer Flag For Channel 0", [
                    EnumVal("TF0_0", "0", "Timer Flag for Channel 0 is clear"),
                    EnumVal("TF0_1", "0x1", "Timer Flag for Channel 0 is set"),
                ]),
            ]),
            Register("TCSR0", 0x40079608, 32, "Timer Control Status Register", [
                Field("TF", 7, 1, "Timer Flag", [
                    EnumVal("TF_0", "0", "Input Capture or Output Compare has not occurred."),
                    EnumVal("TF_1", "0x1", "Input Capture or Output Compare has occurred."),
                ]),
                Field("TIE", 6, 1, "Timer Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Interrupt is disabled"),
                    EnumVal("TIE_1", "0x1", "Interrupt is enabled"),
                ]),
                Field("TMODE", 2, 4, "Timer Mode", [
                    EnumVal("TMODE_0", "0", "Timer Channel is disabled."),
                    EnumVal("TMODE_1", "0x1", "Timer Channel is configured for Input Capture on rising edge."),
                    EnumVal("TMODE_2", "0x2", "Timer Channel is configured for Input Capture on falling edge."),
                    EnumVal("TMODE_3", "0x3", "Timer Channel is configured for Input Capture on both edges."),
                    EnumVal("TMODE_4", "0x4", "Timer Channel is configured for Output Compare - software only."),
                    EnumVal("TMODE_5", "0x5", "Timer Channel is configured for Output Compare - toggle output on compare."),
                    EnumVal("TMODE_6", "0x6", "Timer Channel is configured for Output Compare - clear output on compare."),
                    EnumVal("TMODE_7", "0x7", "Timer Channel is configured for Output Compare - set output on compare."),
                    EnumVal("TMODE_9", "#10x1", "Timer Channel is configured for Output Compare - set output on compare, clear output on overflow."),
                    EnumVal("TMODE_10", "0xA", "Timer Channel is configured for Output Compare - clear output on compare, set output on overflow."),
                    EnumVal("TMODE_14", "0xE", "Timer Channel is configured for Output Compare - pulse output low on compare for one 1588-clock cycle."),
                    EnumVal("TMODE_15", "0xF", "Timer Channel is configured for Output Compare - pulse output high on compare for one 1588-clock cycle."),
                ]),
                Field("TDRE", 0, 1, "Timer DMA Request Enable", [
                    EnumVal("TDRE_0", "0", "DMA request is disabled"),
                    EnumVal("TDRE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("TCSR1", 0x40079610, 32, "Timer Control Status Register", [
                Field("TF", 7, 1, "Timer Flag", [
                    EnumVal("TF_0", "0", "Input Capture or Output Compare has not occurred."),
                    EnumVal("TF_1", "0x1", "Input Capture or Output Compare has occurred."),
                ]),
                Field("TIE", 6, 1, "Timer Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Interrupt is disabled"),
                    EnumVal("TIE_1", "0x1", "Interrupt is enabled"),
                ]),
                Field("TMODE", 2, 4, "Timer Mode", [
                    EnumVal("TMODE_0", "0", "Timer Channel is disabled."),
                    EnumVal("TMODE_1", "0x1", "Timer Channel is configured for Input Capture on rising edge."),
                    EnumVal("TMODE_2", "0x2", "Timer Channel is configured for Input Capture on falling edge."),
                    EnumVal("TMODE_3", "0x3", "Timer Channel is configured for Input Capture on both edges."),
                    EnumVal("TMODE_4", "0x4", "Timer Channel is configured for Output Compare - software only."),
                    EnumVal("TMODE_5", "0x5", "Timer Channel is configured for Output Compare - toggle output on compare."),
                    EnumVal("TMODE_6", "0x6", "Timer Channel is configured for Output Compare - clear output on compare."),
                    EnumVal("TMODE_7", "0x7", "Timer Channel is configured for Output Compare - set output on compare."),
                    EnumVal("TMODE_9", "#10x1", "Timer Channel is configured for Output Compare - set output on compare, clear output on overflow."),
                    EnumVal("TMODE_10", "0xA", "Timer Channel is configured for Output Compare - clear output on compare, set output on overflow."),
                    EnumVal("TMODE_14", "0xE", "Timer Channel is configured for Output Compare - pulse output low on compare for one 1588-clock cycle."),
                    EnumVal("TMODE_15", "0xF", "Timer Channel is configured for Output Compare - pulse output high on compare for one 1588-clock cycle."),
                ]),
                Field("TDRE", 0, 1, "Timer DMA Request Enable", [
                    EnumVal("TDRE_0", "0", "DMA request is disabled"),
                    EnumVal("TDRE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("TCSR2", 0x40079618, 32, "Timer Control Status Register", [
                Field("TF", 7, 1, "Timer Flag", [
                    EnumVal("TF_0", "0", "Input Capture or Output Compare has not occurred."),
                    EnumVal("TF_1", "0x1", "Input Capture or Output Compare has occurred."),
                ]),
                Field("TIE", 6, 1, "Timer Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Interrupt is disabled"),
                    EnumVal("TIE_1", "0x1", "Interrupt is enabled"),
                ]),
                Field("TMODE", 2, 4, "Timer Mode", [
                    EnumVal("TMODE_0", "0", "Timer Channel is disabled."),
                    EnumVal("TMODE_1", "0x1", "Timer Channel is configured for Input Capture on rising edge."),
                    EnumVal("TMODE_2", "0x2", "Timer Channel is configured for Input Capture on falling edge."),
                    EnumVal("TMODE_3", "0x3", "Timer Channel is configured for Input Capture on both edges."),
                    EnumVal("TMODE_4", "0x4", "Timer Channel is configured for Output Compare - software only."),
                    EnumVal("TMODE_5", "0x5", "Timer Channel is configured for Output Compare - toggle output on compare."),
                    EnumVal("TMODE_6", "0x6", "Timer Channel is configured for Output Compare - clear output on compare."),
                    EnumVal("TMODE_7", "0x7", "Timer Channel is configured for Output Compare - set output on compare."),
                    EnumVal("TMODE_9", "#10x1", "Timer Channel is configured for Output Compare - set output on compare, clear output on overflow."),
                    EnumVal("TMODE_10", "0xA", "Timer Channel is configured for Output Compare - clear output on compare, set output on overflow."),
                    EnumVal("TMODE_14", "0xE", "Timer Channel is configured for Output Compare - pulse output low on compare for one 1588-clock cycle."),
                    EnumVal("TMODE_15", "0xF", "Timer Channel is configured for Output Compare - pulse output high on compare for one 1588-clock cycle."),
                ]),
                Field("TDRE", 0, 1, "Timer DMA Request Enable", [
                    EnumVal("TDRE_0", "0", "DMA request is disabled"),
                    EnumVal("TDRE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("TCSR3", 0x40079620, 32, "Timer Control Status Register", [
                Field("TF", 7, 1, "Timer Flag", [
                    EnumVal("TF_0", "0", "Input Capture or Output Compare has not occurred."),
                    EnumVal("TF_1", "0x1", "Input Capture or Output Compare has occurred."),
                ]),
                Field("TIE", 6, 1, "Timer Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Interrupt is disabled"),
                    EnumVal("TIE_1", "0x1", "Interrupt is enabled"),
                ]),
                Field("TMODE", 2, 4, "Timer Mode", [
                    EnumVal("TMODE_0", "0", "Timer Channel is disabled."),
                    EnumVal("TMODE_1", "0x1", "Timer Channel is configured for Input Capture on rising edge."),
                    EnumVal("TMODE_2", "0x2", "Timer Channel is configured for Input Capture on falling edge."),
                    EnumVal("TMODE_3", "0x3", "Timer Channel is configured for Input Capture on both edges."),
                    EnumVal("TMODE_4", "0x4", "Timer Channel is configured for Output Compare - software only."),
                    EnumVal("TMODE_5", "0x5", "Timer Channel is configured for Output Compare - toggle output on compare."),
                    EnumVal("TMODE_6", "0x6", "Timer Channel is configured for Output Compare - clear output on compare."),
                    EnumVal("TMODE_7", "0x7", "Timer Channel is configured for Output Compare - set output on compare."),
                    EnumVal("TMODE_9", "#10x1", "Timer Channel is configured for Output Compare - set output on compare, clear output on overflow."),
                    EnumVal("TMODE_10", "0xA", "Timer Channel is configured for Output Compare - clear output on compare, set output on overflow."),
                    EnumVal("TMODE_14", "0xE", "Timer Channel is configured for Output Compare - pulse output low on compare for one 1588-clock cycle."),
                    EnumVal("TMODE_15", "0xF", "Timer Channel is configured for Output Compare - pulse output high on compare for one 1588-clock cycle."),
                ]),
                Field("TDRE", 0, 1, "Timer DMA Request Enable", [
                    EnumVal("TDRE_0", "0", "DMA request is disabled"),
                    EnumVal("TDRE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("TCCR0", 0x4007960C, 32, "Timer Compare Capture Register", [
                Field("TCC", 0, 32, "Timer Capture Compare", [
                ]),
            ]),
            Register("TCCR1", 0x40079614, 32, "Timer Compare Capture Register", [
                Field("TCC", 0, 32, "Timer Capture Compare", [
                ]),
            ]),
            Register("TCCR2", 0x4007961C, 32, "Timer Compare Capture Register", [
                Field("TCC", 0, 32, "Timer Capture Compare", [
                ]),
            ]),
            Register("TCCR3", 0x40079624, 32, "Timer Compare Capture Register", [
                Field("TCC", 0, 32, "Timer Capture Compare", [
                ]),
            ]),
        ])

class Module_ERM(Peripheral):
    def __init__(self):
        super().__init__("ERM", 0x40018000, 0x114, [
            Register("CR0", 0x40018000, 32, "ERM Configuration Register 0", [
                Field("ESCIE0", 31, 1, "ESCIE0", [
                    EnumVal("ESCIE0_0", "0", "Interrupt notification of Memory 0 single-bit correction events is disabled."),
                    EnumVal("ESCIE0_1", "0x1", "Interrupt notification of Memory 0 single-bit correction events is enabled."),
                ]),
                Field("ENCIE0", 30, 1, "ENCIE0", [
                    EnumVal("ENCIE0_0", "0", "Interrupt notification of Memory 0 non-correctable error events is disabled."),
                    EnumVal("ENCIE0_1", "0x1", "Interrupt notification of Memory 0 non-correctable error events is enabled."),
                ]),
                Field("ESCIE1", 27, 1, "ESCIE1", [
                    EnumVal("ESCIE1_0", "0", "Interrupt notification of Memory 1 single-bit correction events is disabled."),
                    EnumVal("ESCIE1_1", "0x1", "Interrupt notification of Memory 1 single-bit correction events is enabled."),
                ]),
                Field("ENCIE1", 26, 1, "ENCIE1", [
                    EnumVal("ENCIE1_0", "0", "Interrupt notification of Memory 1 non-correctable error events is disabled."),
                    EnumVal("ENCIE1_1", "0x1", "Interrupt notification of Memory 1 non-correctable error events is enabled."),
                ]),
            ]),
            Register("SR0", 0x40018010, 32, "ERM Status Register 0", [
                Field("SBC0", 31, 1, "SBC0", [
                    EnumVal("SBC0_0", "0", "No single-bit correction event on Memory 0 detected."),
                    EnumVal("SBC0_1", "0x1", "Single-bit correction event on Memory 0 detected."),
                ]),
                Field("NCE0", 30, 1, "NCE0", [
                    EnumVal("NCE0_0", "0", "No non-correctable error event on Memory 0 detected."),
                    EnumVal("NCE0_1", "0x1", "Non-correctable error event on Memory 0 detected."),
                ]),
                Field("SBC1", 27, 1, "SBC1", [
                    EnumVal("SBC1_0", "0", "No single-bit correction event on Memory 1 detected."),
                    EnumVal("SBC1_1", "0x1", "Single-bit correction event on Memory 1 detected."),
                ]),
                Field("NCE1", 26, 1, "NCE1", [
                    EnumVal("NCE1_0", "0", "No non-correctable error event on Memory 1 detected."),
                    EnumVal("NCE1_1", "0x1", "Non-correctable error event on Memory 1 detected."),
                ]),
            ]),
            Register("EAR0", 0x40018100, 32, "ERM Memory n Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
            Register("EAR1", 0x40018110, 32, "ERM Memory n Error Address Register", [
                Field("EAR", 0, 32, "EAR", [
                ]),
            ]),
        ])

class Module_EWM(Peripheral):
    def __init__(self):
        super().__init__("EWM", 0x40061000, 0x6, [
            Register("CTRL", 0x40061000, 8, "Control Register", [
                Field("INTEN", 3, 1, "Interrupt Enable.", [
                ]),
                Field("INEN", 2, 1, "Input Enable.", [
                ]),
                Field("ASSIN", 1, 1, "EWM_in's Assertion State Select.", [
                ]),
                Field("EWMEN", 0, 1, "EWM enable.", [
                ]),
            ]),
            Register("SERV", 0x40061001, 8, "Service Register", [
                Field("SERVICE", 0, 8, "SERVICE", [
                ]),
            ]),
            Register("CMPL", 0x40061002, 8, "Compare Low Register", [
                Field("COMPAREL", 0, 8, "COMPAREL", [
                ]),
            ]),
            Register("CMPH", 0x40061003, 8, "Compare High Register", [
                Field("COMPAREH", 0, 8, "COMPAREH", [
                ]),
            ]),
            Register("CLKPRESCALER", 0x40061005, 8, "Clock Prescaler Register", [
                Field("CLK_DIV", 0, 8, "CLK_DIV", [
                ]),
            ]),
        ])

class Module_FLEXCAN0(Peripheral):
    def __init__(self):
        super().__init__("FLEXCAN0", 0x40024000, 0xC0C, [
            Register("MCR", 0x40024000, 32, "Module Configuration Register", [
                Field("MDIS", 31, 1, "Module Disable", [
                    EnumVal("flexcan_enabled", "0", "Enable the FlexCAN module."),
                    EnumVal("flexcan_disabled", "0x1", "Disable the FlexCAN module."),
                ]),
                Field("FRZ", 30, 1, "Freeze Enable", [
                    EnumVal("freeze_mode_disabled", "0", "Not enabled to enter Freeze mode."),
                    EnumVal("freeze_mode_enabled", "0x1", "Enabled to enter Freeze mode."),
                ]),
                Field("RFEN", 29, 1, "Rx FIFO Enable", [
                    EnumVal("id2", "0", "Rx FIFO not enabled."),
                    EnumVal("id4", "0x1", "Rx FIFO enabled."),
                ]),
                Field("HALT", 28, 1, "Halt FlexCAN", [
                    EnumVal("HALT_disable", "0", "No Freeze mode request."),
                    EnumVal("HALT_enable", "0x1", "Enters Freeze mode if the FRZ bit is asserted."),
                ]),
                Field("NOTRDY", 27, 1, "FlexCAN Not Ready", [
                    EnumVal("id1", "0", "FlexCAN module is either in Normal mode, Listen-Only mode, or Loop-Back mode."),
                    EnumVal("id4", "0x1", "FlexCAN module is either in Disable mode, Stop mode, or Freeze mode."),
                ]),
                Field("SOFTRST", 25, 1, "Soft Reset", [
                    EnumVal("SOFTRST_no_reset_request", "0", "No reset request."),
                    EnumVal("SOFTRST_reset_registers", "0x1", "Resets the registers affected by soft reset."),
                ]),
                Field("FRZACK", 24, 1, "Freeze Mode Acknowledge", [
                    EnumVal("freeze_mode_no", "0", "FlexCAN not in Freeze mode, prescaler running."),
                    EnumVal("freeze_mode_yes", "0x1", "FlexCAN in Freeze mode, prescaler stopped."),
                ]),
                Field("SUPV", 23, 1, "Supervisor Mode", [
                    EnumVal("id2", "0", "FlexCAN is in User mode. Affected registers allow both Supervisor and Unrestricted accesses."),
                    EnumVal("id4", "0x1", "FlexCAN is in Supervisor mode. Affected registers allow only Supervisor access. Unrestricted access behaves as though the access was done to an unimplemented register location."),
                ]),
                Field("WRNEN", 21, 1, "Warning Interrupt Enable", [
                    EnumVal("TWRNINT_RWRNINT_inactive", "0", "TWRNINT and RWRNINT bits are zero, independent of the values in the error counters."),
                    EnumVal("TWRNINT_RWRNINT_active", "0x1", "TWRNINT and RWRNINT bits are set when the respective error counter transitions from less than 96 to greater than or equal to 96."),
                ]),
                Field("LPMACK", 20, 1, "Low-Power Mode Acknowledge", [
                    EnumVal("low_power_no", "0", "FlexCAN is not in a low-power mode."),
                    EnumVal("low_power_yes", "0x1", "FlexCAN is in a low-power mode."),
                ]),
                Field("SRXDIS", 17, 1, "Self Reception Disable", [
                    EnumVal("self_reception_enabled", "0", "Self-reception enabled."),
                    EnumVal("self_reception_disabled", "0x1", "Self-reception disabled."),
                ]),
                Field("IRMQ", 16, 1, "Individual Rx Masking And Queue Enable", [
                    EnumVal("individual_rx_masking_disabled", "0", "Individual Rx masking and queue feature are disabled. For backward compatibility with legacy applications, the reading of C/S word locks the MB even if it is EMPTY."),
                    EnumVal("individual_rx_masking_enabled", "0x1", "Individual Rx masking and queue feature are enabled."),
                ]),
                Field("DMA", 15, 1, "DMA Enable", [
                    EnumVal("id2", "0", "DMA feature for RX FIFO disabled."),
                    EnumVal("id4", "0x1", "DMA feature for RX FIFO enabled."),
                ]),
                Field("PNET_EN", 14, 1, "Pretended Networking Enable", [
                    EnumVal("PN_disabled", "0", "Pretended Networking mode is disabled."),
                    EnumVal("PN_enabled", "0x1", "Pretended Networking mode is enabled."),
                ]),
                Field("LPRIOEN", 13, 1, "Local Priority Enable", [
                    EnumVal("local_priority_disabled", "0", "Local Priority disabled."),
                    EnumVal("local_priority_enabled", "0x1", "Local Priority enabled."),
                ]),
                Field("AEN", 12, 1, "Abort Enable", [
                    EnumVal("abort_disabled", "0", "Abort disabled."),
                    EnumVal("abort_enabled", "0x1", "Abort enabled."),
                ]),
                Field("FDEN", 11, 1, "CAN FD operation enable", [
                    EnumVal("CAN_FD_disabled", "0", "CAN FD is disabled. FlexCAN is able to receive and transmit messages in CAN 2.0 format."),
                    EnumVal("CAN_FD_enabled", "0x1", "CAN FD is enabled. FlexCAN is able to receive and transmit messages in both CAN FD and CAN 2.0 formats."),
                ]),
                Field("IDAM", 8, 2, "ID Acceptance Mode", [
                    EnumVal("one_full_ID", "0", "Format A: One full ID (standard and extended) per ID filter table element."),
                    EnumVal("two_full_ID", "0x1", "Format B: Two full standard IDs or two partial 14-bit (standard and extended) IDs per ID filter table element."),
                    EnumVal("four_partial_ID", "0x2", "Format C: Four partial 8-bit standard IDs per ID filter table element."),
                    EnumVal("all_frames_rejected", "0x3", "Format D: All frames rejected."),
                ]),
                Field("MAXMB", 0, 7, "Number Of The Last Message Buffer", [
                ]),
            ]),
            Register("CTRL1", 0x40024004, 32, "Control 1 Register", [
                Field("PRESDIV", 24, 8, "Prescaler Division Factor", [
                ]),
                Field("RJW", 22, 2, "Resync Jump Width", [
                ]),
                Field("PSEG1", 19, 3, "Phase Segment 1", [
                ]),
                Field("PSEG2", 16, 3, "Phase Segment 2", [
                ]),
                Field("BOFFMSK", 15, 1, "Bus Off Interrupt Mask", [
                    EnumVal("bus_off_int_disabled", "0", "Bus Off interrupt disabled."),
                    EnumVal("bus_off_int_enabled", "0x1", "Bus Off interrupt enabled."),
                ]),
                Field("ERRMSK", 14, 1, "Error Interrupt Mask", [
                    EnumVal("error_int_disabled", "0", "Error interrupt disabled."),
                    EnumVal("error_int_enabled", "0x1", "Error interrupt enabled."),
                ]),
                Field("CLKSRC", 13, 1, "CAN Engine Clock Source", [
                    EnumVal("oscillator_clock", "0", "The CAN engine clock source is the oscillator clock. Under this condition, the oscillator clock frequency must be lower than the bus clock."),
                    EnumVal("peripheral_clock", "0x1", "The CAN engine clock source is the peripheral clock."),
                ]),
                Field("LPB", 12, 1, "Loop Back Mode", [
                    EnumVal("loopback_disabled", "0", "Loop Back disabled."),
                    EnumVal("loopback_enabled", "0x1", "Loop Back enabled."),
                ]),
                Field("TWRNMSK", 11, 1, "Tx Warning Interrupt Mask", [
                    EnumVal("tx_warning_int_disabled", "0", "Tx Warning interrupt disabled."),
                    EnumVal("tx_warning_int_enabled", "0x1", "Tx Warning interrupt enabled."),
                ]),
                Field("RWRNMSK", 10, 1, "Rx Warning Interrupt Mask", [
                    EnumVal("rx_warning_int_disabled", "0", "Rx Warning interrupt disabled."),
                    EnumVal("rx_warning_int_enabled", "0x1", "Rx Warning interrupt enabled."),
                ]),
                Field("SMP", 7, 1, "CAN Bit Sampling", [
                    EnumVal("one_sample", "0", "Just one sample is used to determine the bit value."),
                    EnumVal("three_sample", "0x1", "Three samples are used to determine the value of the received bit: the regular one (sample point) and two preceding samples; a majority rule is used."),
                ]),
                Field("BOFFREC", 6, 1, "Bus Off Recovery", [
                    EnumVal("auto_recover_enabled", "0", "Automatic recovering from Bus Off state enabled."),
                    EnumVal("auto_recover_disabled", "0x1", "Automatic recovering from Bus Off state disabled."),
                ]),
                Field("TSYN", 5, 1, "Timer Sync", [
                    EnumVal("timer_sync_disabled", "0", "Timer sync feature disabled"),
                    EnumVal("timer_sync_enabled", "0x1", "Timer sync feature enabled"),
                ]),
                Field("LBUF", 4, 1, "Lowest Buffer Transmitted First", [
                    EnumVal("highest_buffer_first", "0", "Buffer with highest priority is transmitted first."),
                    EnumVal("lowest_buffer_first", "0x1", "Lowest number buffer is transmitted first."),
                ]),
                Field("LOM", 3, 1, "Listen-Only Mode", [
                    EnumVal("listen_only_mode_disabled", "0", "Listen-Only mode is deactivated."),
                    EnumVal("listen_only_mode_enabled", "0x1", "FlexCAN module operates in Listen-Only mode."),
                ]),
                Field("PROPSEG", 0, 3, "Propagation Segment", [
                ]),
            ]),
            Register("TIMER", 0x40024008, 32, "Free Running Timer", [
                Field("TIMER", 0, 16, "Timer Value", [
                ]),
            ]),
            Register("RXMGMASK", 0x40024010, 32, "Rx Mailboxes Global Mask Register", [
                Field("MG", 0, 32, "Rx Mailboxes Global Mask Bits", [
                ]),
            ]),
            Register("RX14MASK", 0x40024014, 32, "Rx 14 Mask Register", [
                Field("RX14M", 0, 32, "Rx Buffer 14 Mask Bits", [
                ]),
            ]),
            Register("RX15MASK", 0x40024018, 32, "Rx 15 Mask Register", [
                Field("RX15M", 0, 32, "Rx Buffer 15 Mask Bits", [
                ]),
            ]),
            Register("ECR", 0x4002401C, 32, "Error Counter", [
                Field("RXERRCNT_FAST", 24, 8, "Receive Error Counter for fast bits", [
                ]),
                Field("TXERRCNT_FAST", 16, 8, "Transmit Error Counter for fast bits", [
                ]),
                Field("RXERRCNT", 8, 8, "Receive Error Counter", [
                ]),
                Field("TXERRCNT", 0, 8, "Transmit Error Counter", [
                ]),
            ]),
            Register("ESR1", 0x40024020, 32, "Error and Status 1 Register", [
                Field("BIT1ERR_FAST", 31, 1, "Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR_FAST", 30, 1, "Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("CRCERR_FAST", 28, 1, "Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR_FAST", 27, 1, "Form Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A form error occurred since last read of this register."),
                ]),
                Field("STFERR_FAST", 26, 1, "Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("ERROVR", 21, 1, "Error Overrun", [
                    EnumVal("overrun_not_occurred", "0", "Overrun has not occurred."),
                    EnumVal("overrun_occurred", "0x1", "Overrun has occurred."),
                ]),
                Field("ERRINT_FAST", 20, 1, "Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set", [
                    EnumVal("errors_data_phase_no", "0", "No such occurrence."),
                    EnumVal("errors_data_phase_yes", "0x1", "Indicates setting of any error bit detected in the data phase of CAN FD frames with the BRS bit set."),
                ]),
                Field("BOFFDONEINT", 19, 1, "Bus Off Done Interrupt", [
                    EnumVal("bus_off_not_done", "0", "No such occurrence."),
                    EnumVal("bus_off_done", "0x1", "FlexCAN module has completed Bus Off process."),
                ]),
                Field("SYNCH", 18, 1, "CAN Synchronization Status", [
                    EnumVal("CAN_bus_sync_no", "0", "FlexCAN is not synchronized to the CAN bus."),
                    EnumVal("CAN_bus_sync_yes", "0x1", "FlexCAN is synchronized to the CAN bus."),
                ]),
                Field("TWRNINT", 17, 1, "Tx Warning Interrupt Flag", [
                    EnumVal("Tx_warning_int_no", "0", "No such occurrence."),
                    EnumVal("Tx_warning_int_yes", "0x1", "The Tx error counter transitioned from less than 96 to greater than or equal to 96."),
                ]),
                Field("RWRNINT", 16, 1, "Rx Warning Interrupt Flag", [
                    EnumVal("Rx_warning_int_no", "0", "No such occurrence."),
                    EnumVal("Rx_warning_int_yes", "0x1", "The Rx error counter transitioned from less than 96 to greater than or equal to 96."),
                ]),
                Field("BIT1ERR", 15, 1, "Bit1 Error", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR", 14, 1, "Bit0 Error", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("ACKERR", 13, 1, "Acknowledge Error", [
                    EnumVal("ACK_error_no", "0", "No such occurrence."),
                    EnumVal("ACK_error_yes", "0x1", "An ACK error occurred since last read of this register."),
                ]),
                Field("CRCERR", 12, 1, "Cyclic Redundancy Check Error", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR", 11, 1, "Form Error", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A Form Error occurred since last read of this register."),
                ]),
                Field("STFERR", 10, 1, "Stuffing Error", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("TXWRN", 9, 1, "TX Error Warning", [
                    EnumVal("TXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("TXERRCNT_GTE_96", "0x1", "TXERRCNT is greater than or equal to 96."),
                ]),
                Field("RXWRN", 8, 1, "Rx Error Warning", [
                    EnumVal("RXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("RXERRCNT_GTE_96", "0x1", "RXERRCNT is greater than or equal to 96."),
                ]),
                Field("IDLE", 7, 1, "IDLE", [
                    EnumVal("can_bus_not_idle", "0", "No such occurrence."),
                    EnumVal("can_bus_idle", "0x1", "CAN bus is now IDLE."),
                ]),
                Field("TX", 6, 1, "FlexCAN In Transmission", [
                    EnumVal("transmit_message_no", "0", "FlexCAN is not transmitting a message."),
                    EnumVal("transmit_message_yes", "0x1", "FlexCAN is transmitting a message."),
                ]),
                Field("FLTCONF", 4, 2, "Fault Confinement State", [
                    EnumVal("error_active", "0", "Error Active"),
                    EnumVal("error_passive", "0x1", "Error Passive"),
                    EnumVal("bus_off", "#1x", "Bus Off"),
                ]),
                Field("RX", 3, 1, "FlexCAN In Reception", [
                    EnumVal("DISABLE", "0", "FlexCAN is not receiving a message."),
                    EnumVal("ENABLE", "0x1", "FlexCAN is receiving a message."),
                ]),
                Field("BOFFINT", 2, 1, "Bus Off Interrupt", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "FlexCAN module entered Bus Off state."),
                ]),
                Field("ERRINT", 1, 1, "Error Interrupt", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "Indicates setting of any error bit in the Error and Status register."),
                ]),
            ]),
            Register("IMASK1", 0x40024028, 32, "Interrupt Masks 1 Register", [
                Field("BUF31TO0M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IFLAG1", 0x40024030, 32, "Interrupt Flags 1 Register", [
                Field("BUF31TO8I", 8, 24, "Buffer MBi Interrupt", [
                ]),
                Field("BUF7I", 7, 1, "Buffer MB7 Interrupt Or Rx FIFO Overflow", [
                    EnumVal("id2", "0", "No occurrence of MB7 completing transmission/reception when MCR[RFEN]=0, or of Rx FIFO overflow when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB7 completed transmission/reception when MCR[RFEN]=0, or Rx FIFO overflow when MCR[RFEN]=1"),
                ]),
                Field("BUF6I", 6, 1, "Buffer MB6 Interrupt Or Rx FIFO Warning", [
                    EnumVal("id2", "0", "No occurrence of MB6 completing transmission/reception when MCR[RFEN]=0, or of Rx FIFO almost full when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB6 completed transmission/reception when MCR[RFEN]=0, or Rx FIFO almost full when MCR[RFEN]=1"),
                ]),
                Field("BUF5I", 5, 1, "Buffer MB5 Interrupt Or Frames available in Rx FIFO", [
                    EnumVal("id2", "0", "No occurrence of MB5 completing transmission/reception when MCR[RFEN]=0, or of frame(s) available in the FIFO, when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB5 completed transmission/reception when MCR[RFEN]=0, or frame(s) available in the Rx FIFO when MCR[RFEN]=1. It generates a DMA request in case of MCR[RFEN] and MCR[DMA] are enabled."),
                ]),
                Field("BUF4TO1I", 1, 4, "Buffer MBi Interrupt Or Reserved", [
                ]),
                Field("BUF0I", 0, 1, "Buffer MB0 Interrupt Or Clear FIFO bit", [
                    EnumVal("buffer_Tx_Rx_not_complete", "0", "The corresponding buffer has no occurrence of successfully completed transmission or reception when MCR[RFEN]=0."),
                    EnumVal("buffer_Tx_Rx_complete", "0x1", "The corresponding buffer has successfully completed transmission or reception when MCR[RFEN]=0."),
                ]),
            ]),
            Register("CTRL2", 0x40024034, 32, "Control 2 Register", [
                Field("ERRMSK_FAST", 31, 1, "Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames", [
                    EnumVal("DISABLE", "0", "ERRINT_FAST error interrupt disabled."),
                    EnumVal("ENABLE", "0x1", "ERRINT_FAST error interrupt enabled."),
                ]),
                Field("BOFFDONEMSK", 30, 1, "Bus Off Done Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Bus off done interrupt disabled."),
                    EnumVal("ENABLE", "0x1", "Bus off done interrupt enabled."),
                ]),
                Field("RFFN", 24, 4, "Number Of Rx FIFO Filters", [
                ]),
                Field("TASD", 19, 5, "Tx Arbitration Start Delay", [
                ]),
                Field("MRP", 18, 1, "Mailboxes Reception Priority", [
                    EnumVal("id2", "0", "Matching starts from Rx FIFO and continues on mailboxes."),
                    EnumVal("id4", "0x1", "Matching starts from mailboxes and continues on Rx FIFO."),
                ]),
                Field("RRS", 17, 1, "Remote Request Storing", [
                    EnumVal("remote_response_frame_not_generated", "0", "Remote response frame is generated."),
                    EnumVal("remote_response_frame_generated", "0x1", "Remote request frame is stored."),
                ]),
                Field("EACEN", 16, 1, "Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes", [
                    EnumVal("RTR_compare_no", "0", "Rx mailbox filter's IDE bit is always compared and RTR is never compared despite mask bits."),
                    EnumVal("RTR_compare_yes", "0x1", "Enables the comparison of both Rx mailbox filter's IDE and RTR bit with their corresponding bits within the incoming frame. Mask bits do apply."),
                ]),
                Field("TIMER_SRC", 15, 1, "Timer Source", [
                    EnumVal("CAN_bit_clock", "0", "The free running timer is clocked by the CAN bit clock, which defines the baud rate on the CAN bus."),
                    EnumVal("external_clock", "0x1", "The free running timer is clocked by an external time tick. The period can be either adjusted to be equal to the baud rate on the CAN bus, or a different value as required. See the device-specific section for details about the external time tick."),
                ]),
                Field("PREXCEN", 14, 1, "Protocol Exception Enable", [
                    EnumVal("DISABLE", "0", "Protocol exception is disabled."),
                    EnumVal("ENABLE", "0x1", "Protocol exception is enabled."),
                ]),
                Field("ISOCANFDEN", 12, 1, "ISO CAN FD Enable", [
                    EnumVal("non_ISO", "0", "FlexCAN operates using the non-ISO CAN FD protocol."),
                    EnumVal("ISO", "0x1", "FlexCAN operates using the ISO CAN FD protocol (ISO 11898-1)."),
                ]),
                Field("EDFLTDIS", 11, 1, "Edge Filter Disable", [
                    EnumVal("ENABLE", "0", "Edge filter is enabled"),
                    EnumVal("DISABLE", "0x1", "Edge filter is disabled"),
                ]),
            ]),
            Register("ESR2", 0x40024038, 32, "Error and Status 2 Register", [
                Field("LPTM", 16, 7, "Lowest Priority Tx Mailbox", [
                ]),
                Field("VPS", 14, 1, "Valid Priority Status", [
                    EnumVal("invalid", "0", "Contents of IMB and LPTM are invalid."),
                    EnumVal("valid", "0x1", "Contents of IMB and LPTM are valid."),
                ]),
                Field("IMB", 13, 1, "Inactive Mailbox", [
                    EnumVal("inactive_mailbox_no", "0", "If ESR2[VPS] is asserted, the ESR2[LPTM] is not an inactive mailbox."),
                    EnumVal("inactive_mailbox_yes", "0x1", "If ESR2[VPS] is asserted, there is at least one inactive mailbox. LPTM content is the number of the first one."),
                ]),
            ]),
            Register("CRCR", 0x40024044, 32, "CRC Register", [
                Field("MBCRC", 16, 7, "CRC Mailbox", [
                ]),
                Field("TXCRC", 0, 15, "Transmitted CRC value", [
                ]),
            ]),
            Register("RXFGMASK", 0x40024048, 32, "Rx FIFO Global Mask Register", [
                Field("FGM", 0, 32, "Rx FIFO Global Mask Bits", [
                ]),
            ]),
            Register("RXFIR", 0x4002404C, 32, "Rx FIFO Information Register", [
                Field("IDHIT", 0, 9, "Identifier Acceptance Filter Hit Indicator", [
                ]),
            ]),
            Register("CBT", 0x40024050, 32, "CAN Bit Timing Register", [
                Field("BTF", 31, 1, "Bit Timing Format Enable", [
                    EnumVal("DISABLE", "0", "Extended bit time definitions disabled."),
                    EnumVal("ENABLE", "0x1", "Extended bit time definitions enabled."),
                ]),
                Field("EPRESDIV", 21, 10, "Extended Prescaler Division Factor", [
                ]),
                Field("ERJW", 16, 5, "Extended Resync Jump Width", [
                ]),
                Field("EPROPSEG", 10, 6, "Extended Propagation Segment", [
                ]),
                Field("EPSEG1", 5, 5, "Extended Phase Segment 1", [
                ]),
                Field("EPSEG2", 0, 5, "Extended Phase Segment 2", [
                ]),
            ]),
            Register("RAMn[0]", 0x40024080, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[1]", 0x40024084, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[2]", 0x40024088, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[3]", 0x4002408C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[4]", 0x40024090, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[5]", 0x40024094, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[6]", 0x40024098, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[7]", 0x4002409C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[8]", 0x400240A0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[9]", 0x400240A4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[10]", 0x400240A8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[11]", 0x400240AC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[12]", 0x400240B0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[13]", 0x400240B4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[14]", 0x400240B8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[15]", 0x400240BC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[16]", 0x400240C0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[17]", 0x400240C4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[18]", 0x400240C8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[19]", 0x400240CC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[20]", 0x400240D0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[21]", 0x400240D4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[22]", 0x400240D8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[23]", 0x400240DC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[24]", 0x400240E0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[25]", 0x400240E4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[26]", 0x400240E8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[27]", 0x400240EC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[28]", 0x400240F0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[29]", 0x400240F4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[30]", 0x400240F8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[31]", 0x400240FC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[32]", 0x40024100, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[33]", 0x40024104, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[34]", 0x40024108, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[35]", 0x4002410C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[36]", 0x40024110, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[37]", 0x40024114, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[38]", 0x40024118, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[39]", 0x4002411C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[40]", 0x40024120, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[41]", 0x40024124, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[42]", 0x40024128, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[43]", 0x4002412C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[44]", 0x40024130, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[45]", 0x40024134, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[46]", 0x40024138, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[47]", 0x4002413C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[48]", 0x40024140, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[49]", 0x40024144, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[50]", 0x40024148, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[51]", 0x4002414C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[52]", 0x40024150, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[53]", 0x40024154, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[54]", 0x40024158, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[55]", 0x4002415C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[56]", 0x40024160, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[57]", 0x40024164, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[58]", 0x40024168, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[59]", 0x4002416C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[60]", 0x40024170, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[61]", 0x40024174, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[62]", 0x40024178, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[63]", 0x4002417C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[64]", 0x40024180, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[65]", 0x40024184, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[66]", 0x40024188, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[67]", 0x4002418C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[68]", 0x40024190, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[69]", 0x40024194, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[70]", 0x40024198, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[71]", 0x4002419C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[72]", 0x400241A0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[73]", 0x400241A4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[74]", 0x400241A8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[75]", 0x400241AC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[76]", 0x400241B0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[77]", 0x400241B4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[78]", 0x400241B8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[79]", 0x400241BC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[80]", 0x400241C0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[81]", 0x400241C4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[82]", 0x400241C8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[83]", 0x400241CC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[84]", 0x400241D0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[85]", 0x400241D4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[86]", 0x400241D8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[87]", 0x400241DC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[88]", 0x400241E0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[89]", 0x400241E4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[90]", 0x400241E8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[91]", 0x400241EC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[92]", 0x400241F0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[93]", 0x400241F4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[94]", 0x400241F8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[95]", 0x400241FC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[96]", 0x40024200, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[97]", 0x40024204, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[98]", 0x40024208, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[99]", 0x4002420C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[100]", 0x40024210, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[101]", 0x40024214, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[102]", 0x40024218, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[103]", 0x4002421C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[104]", 0x40024220, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[105]", 0x40024224, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[106]", 0x40024228, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[107]", 0x4002422C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[108]", 0x40024230, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[109]", 0x40024234, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[110]", 0x40024238, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[111]", 0x4002423C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[112]", 0x40024240, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[113]", 0x40024244, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[114]", 0x40024248, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[115]", 0x4002424C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[116]", 0x40024250, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[117]", 0x40024254, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[118]", 0x40024258, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[119]", 0x4002425C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[120]", 0x40024260, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[121]", 0x40024264, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[122]", 0x40024268, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[123]", 0x4002426C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[124]", 0x40024270, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[125]", 0x40024274, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[126]", 0x40024278, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[127]", 0x4002427C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RXIMR[0]", 0x40024880, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[1]", 0x40024884, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[2]", 0x40024888, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[3]", 0x4002488C, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[4]", 0x40024890, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[5]", 0x40024894, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[6]", 0x40024898, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[7]", 0x4002489C, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[8]", 0x400248A0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[9]", 0x400248A4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[10]", 0x400248A8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[11]", 0x400248AC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[12]", 0x400248B0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[13]", 0x400248B4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[14]", 0x400248B8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[15]", 0x400248BC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[16]", 0x400248C0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[17]", 0x400248C4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[18]", 0x400248C8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[19]", 0x400248CC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[20]", 0x400248D0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[21]", 0x400248D4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[22]", 0x400248D8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[23]", 0x400248DC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[24]", 0x400248E0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[25]", 0x400248E4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[26]", 0x400248E8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[27]", 0x400248EC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[28]", 0x400248F0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[29]", 0x400248F4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[30]", 0x400248F8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[31]", 0x400248FC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("CTRL1_PN", 0x40024B00, 32, "Pretended Networking Control 1 Register", [
                Field("WTOF_MSK", 17, 1, "Wake Up by Timeout Flag Mask Bit", [
                    EnumVal("DISABLE", "0", "Timeout wakeup event is disabled"),
                    EnumVal("ENABLE", "0x1", "Timeout wakeup event is enabled"),
                ]),
                Field("WUMF_MSK", 16, 1, "Wake Up by Match Flag Mask Bit", [
                    EnumVal("DISABLE", "0", "Wakeup match event is disabled"),
                    EnumVal("ENABLE", "0x1", "Wakeup match event is enabled"),
                ]),
                Field("NMATCH", 8, 8, "Number of Messages Matching the Same Filtering Criteria", [
                    EnumVal("match_1", "0x1", "Received message must match the predefined filtering criteria for ID and/or PL once before generating a wakeup event."),
                    EnumVal("match_2", "0x2", "Received message must match the predefined filtering criteria for ID and/or PL twice before generating a wakeup event."),
                    EnumVal("match_255", "0xFF", "Received message must match the predefined filtering criteria for ID and/or PL 255 times before generating a wakeup event."),
                ]),
                Field("PLFS", 4, 2, "Payload Filtering Selection", [
                    EnumVal("match_exact", "0", "Match upon a payload contents against an exact target value"),
                    EnumVal("match_GTE", "0x1", "Match upon a payload value greater than or equal to a specified target value"),
                    EnumVal("match_LTE", "0x2", "Match upon a payload value smaller than or equal to a specified target value"),
                    EnumVal("match_range", "0x3", "Match upon a payload value inside a range, greater than or equal to a specified lower limit, and smaller than or equal to a specified upper limit"),
                ]),
                Field("IDFS", 2, 2, "ID Filtering Selection", [
                    EnumVal("match_exact", "0", "Match upon ID contents against an exact target value"),
                    EnumVal("match_GTE", "0x1", "Match upon an ID value greater than or equal to a specified target value"),
                    EnumVal("match_LTE", "0x2", "Match upon an ID value smaller than or equal to a specified target value"),
                    EnumVal("match_range", "0x3", "Match upon an ID value inside a range, greater than or equal to a specified lower limit, and smaller than or equal to a specified upper limit"),
                ]),
                Field("FCS", 0, 2, "Filtering Combination Selection", [
                    EnumVal("ID_filtering", "0", "Message ID filtering only"),
                    EnumVal("ID_payload_filtering", "0x1", "Message ID filtering and payload filtering"),
                    EnumVal("ID_filtering_number", "0x2", "Message ID filtering occurring a specified number of times"),
                    EnumVal("ID_payload_filtering_number", "0x3", "Message ID filtering and payload filtering a specified number of times"),
                ]),
            ]),
            Register("CTRL2_PN", 0x40024B04, 32, "Pretended Networking Control 2 Register", [
                Field("MATCHTO", 0, 16, "Timeout for No Message Matching the Filtering Criteria", [
                ]),
            ]),
            Register("WU_MTC", 0x40024B08, 32, "Pretended Networking Wake Up Match Register", [
                Field("WTOF", 17, 1, "Wake Up by Timeout Flag Bit", [
                    EnumVal("no_wakeup", "0", "No wakeup by timeout event detected"),
                    EnumVal("wakeup", "0x1", "Wakeup by timeout event detected"),
                ]),
                Field("WUMF", 16, 1, "Wake Up by Match Flag Bit", [
                    EnumVal("no_match", "0", "No wakeup by match event detected"),
                    EnumVal("match", "0x1", "Wakeup by match event detected"),
                ]),
                Field("MCOUNTER", 8, 8, "Number of Matches when in Pretended Networking", [
                ]),
            ]),
            Register("FLT_ID1", 0x40024B0C, 32, "Pretended Networking ID Filter 1 Register", [
                Field("FLT_IDE", 30, 1, "ID Extended Filter", [
                    EnumVal("standard", "0", "Accept standard frame format"),
                    EnumVal("extended", "0x1", "Accept extended frame format"),
                ]),
                Field("FLT_RTR", 29, 1, "Remote Transmission Request Filter", [
                    EnumVal("reject", "0", "Reject remote frame (accept data frame)"),
                    EnumVal("accept", "0x1", "Accept remote frame"),
                ]),
                Field("FLT_ID1", 0, 29, "ID Filter 1 for Pretended Networking filtering", [
                ]),
            ]),
            Register("FLT_DLC", 0x40024B10, 32, "Pretended Networking DLC Filter Register", [
                Field("FLT_DLC_LO", 16, 4, "Lower Limit for Length of Data Bytes Filter", [
                ]),
                Field("FLT_DLC_HI", 0, 4, "Upper Limit for Length of Data Bytes Filter", [
                ]),
            ]),
            Register("PL1_LO", 0x40024B14, 32, "Pretended Networking Payload Low Filter 1 Register", [
                Field("Data_byte_0", 24, 8, "Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to data byte 0.", [
                ]),
                Field("Data_byte_1", 16, 8, "Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to data byte 1.", [
                ]),
                Field("Data_byte_2", 8, 8, "Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to data byte 2.", [
                ]),
                Field("Data_byte_3", 0, 8, "Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to data byte 3.", [
                ]),
            ]),
            Register("PL1_HI", 0x40024B18, 32, "Pretended Networking Payload High Filter 1 Register", [
                Field("Data_byte_4", 24, 8, "Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to data byte 4.", [
                ]),
                Field("Data_byte_5", 16, 8, "Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to data byte 5.", [
                ]),
                Field("Data_byte_6", 8, 8, "Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to data byte 6.", [
                ]),
                Field("Data_byte_7", 0, 8, "Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to data byte 7.", [
                ]),
            ]),
            Register("FLT_ID2_IDMASK", 0x40024B1C, 32, "Pretended Networking ID Filter 2 Register / ID Mask Register", [
                Field("IDE_MSK", 30, 1, "ID Extended Mask Bit", [
                    EnumVal("frame_format_no", "0", "The corresponding bit in the filter is \"don't care\""),
                    EnumVal("frame_format_yes", "0x1", "The corresponding bit in the filter is checked"),
                ]),
                Field("RTR_MSK", 29, 1, "Remote Transmission Request Mask Bit", [
                    EnumVal("frame_type_no", "0", "The corresponding bit in the filter is \"don't care\""),
                    EnumVal("frame_type_yes", "0x1", "The corresponding bit in the filter is checked"),
                ]),
                Field("FLT_ID2_IDMASK", 0, 29, "ID Filter 2 for Pretended Networking Filtering / ID Mask Bits for Pretended Networking ID Filtering", [
                ]),
            ]),
            Register("PL2_PLMASK_LO", 0x40024B20, 32, "Pretended Networking Payload Low Filter 2 Register / Payload Low Mask register", [
                Field("Data_byte_0", 24, 8, "Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 0.", [
                ]),
                Field("Data_byte_1", 16, 8, "Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 1.", [
                ]),
                Field("Data_byte_2", 8, 8, "Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 2.", [
                ]),
                Field("Data_byte_3", 0, 8, "Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 3.", [
                ]),
            ]),
            Register("PL2_PLMASK_HI", 0x40024B24, 32, "Pretended Networking Payload High Filter 2 low order bits / Payload High Mask register", [
                Field("Data_byte_4", 24, 8, "Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 4.", [
                ]),
                Field("Data_byte_5", 16, 8, "Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 5.", [
                ]),
                Field("Data_byte_6", 8, 8, "Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 6.", [
                ]),
                Field("Data_byte_7", 0, 8, "Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 7.", [
                ]),
            ]),
            Register("FDCTRL", 0x40024C00, 32, "CAN FD Control Register", [
                Field("FDRATE", 31, 1, "Bit Rate Switch Enable", [
                    EnumVal("nominal", "0", "Transmit a frame in nominal rate. The BRS bit in the Tx MB has no effect."),
                    EnumVal("bit_rate_switching", "0x1", "Transmit a frame with bit rate switching if the BRS bit in the Tx MB is recessive."),
                ]),
                Field("MBDSR0", 16, 2, "Message Buffer Data Size for Region 0", [
                    EnumVal("R0_8_bytes", "0", "Selects 8 bytes per message buffer."),
                    EnumVal("R0_16_bytes", "0x1", "Selects 16 bytes per message buffer."),
                    EnumVal("R0_32_bytes", "0x2", "Selects 32 bytes per message buffer."),
                    EnumVal("R0_64_bytes", "0x3", "Selects 64 bytes per message buffer."),
                ]),
                Field("TDCEN", 15, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "TDC is disabled"),
                    EnumVal("ENABLE", "0x1", "TDC is enabled"),
                ]),
                Field("TDCFAIL", 14, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "Measured loop delay is in range."),
                    EnumVal("out_of_range", "0x1", "Measured loop delay is out of range."),
                ]),
                Field("TDCOFF", 8, 5, "Transceiver Delay Compensation Offset", [
                ]),
                Field("TDCVAL", 0, 6, "Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCBT", 0x40024C04, 32, "CAN FD Bit Timing Register", [
                Field("FPRESDIV", 20, 10, "Fast Prescaler Division Factor", [
                ]),
                Field("FRJW", 16, 3, "Fast Resync Jump Width", [
                ]),
                Field("FPROPSEG", 10, 5, "Fast Propagation Segment", [
                ]),
                Field("FPSEG1", 5, 3, "Fast Phase Segment 1", [
                ]),
                Field("FPSEG2", 0, 3, "Fast Phase Segment 2", [
                ]),
            ]),
            Register("FDCRC", 0x40024C08, 32, "CAN FD CRC Register", [
                Field("FD_MBCRC", 24, 7, "CRC Mailbox Number for FD_TXCRC", [
                ]),
                Field("FD_TXCRC", 0, 21, "Extended Transmitted CRC value", [
                ]),
            ]),
        ])

class Module_FLEXCAN1(Peripheral):
    def __init__(self):
        super().__init__("FLEXCAN1", 0x40025000, 0xC0C, [
            Register("MCR", 0x40025000, 32, "Module Configuration Register", [
                Field("MDIS", 31, 1, "Module Disable", [
                    EnumVal("flexcan_enabled", "0", "Enable the FlexCAN module."),
                    EnumVal("flexcan_disabled", "0x1", "Disable the FlexCAN module."),
                ]),
                Field("FRZ", 30, 1, "Freeze Enable", [
                    EnumVal("freeze_mode_disabled", "0", "Not enabled to enter Freeze mode."),
                    EnumVal("freeze_mode_enabled", "0x1", "Enabled to enter Freeze mode."),
                ]),
                Field("RFEN", 29, 1, "Rx FIFO Enable", [
                    EnumVal("id2", "0", "Rx FIFO not enabled."),
                    EnumVal("id4", "0x1", "Rx FIFO enabled."),
                ]),
                Field("HALT", 28, 1, "Halt FlexCAN", [
                    EnumVal("HALT_disable", "0", "No Freeze mode request."),
                    EnumVal("HALT_enable", "0x1", "Enters Freeze mode if the FRZ bit is asserted."),
                ]),
                Field("NOTRDY", 27, 1, "FlexCAN Not Ready", [
                    EnumVal("id1", "0", "FlexCAN module is either in Normal mode, Listen-Only mode, or Loop-Back mode."),
                    EnumVal("id4", "0x1", "FlexCAN module is either in Disable mode, Stop mode, or Freeze mode."),
                ]),
                Field("SOFTRST", 25, 1, "Soft Reset", [
                    EnumVal("SOFTRST_no_reset_request", "0", "No reset request."),
                    EnumVal("SOFTRST_reset_registers", "0x1", "Resets the registers affected by soft reset."),
                ]),
                Field("FRZACK", 24, 1, "Freeze Mode Acknowledge", [
                    EnumVal("freeze_mode_no", "0", "FlexCAN not in Freeze mode, prescaler running."),
                    EnumVal("freeze_mode_yes", "0x1", "FlexCAN in Freeze mode, prescaler stopped."),
                ]),
                Field("SUPV", 23, 1, "Supervisor Mode", [
                    EnumVal("id2", "0", "FlexCAN is in User mode. Affected registers allow both Supervisor and Unrestricted accesses."),
                    EnumVal("id4", "0x1", "FlexCAN is in Supervisor mode. Affected registers allow only Supervisor access. Unrestricted access behaves as though the access was done to an unimplemented register location."),
                ]),
                Field("WRNEN", 21, 1, "Warning Interrupt Enable", [
                    EnumVal("TWRNINT_RWRNINT_inactive", "0", "TWRNINT and RWRNINT bits are zero, independent of the values in the error counters."),
                    EnumVal("TWRNINT_RWRNINT_active", "0x1", "TWRNINT and RWRNINT bits are set when the respective error counter transitions from less than 96 to greater than or equal to 96."),
                ]),
                Field("LPMACK", 20, 1, "Low-Power Mode Acknowledge", [
                    EnumVal("low_power_no", "0", "FlexCAN is not in a low-power mode."),
                    EnumVal("low_power_yes", "0x1", "FlexCAN is in a low-power mode."),
                ]),
                Field("SRXDIS", 17, 1, "Self Reception Disable", [
                    EnumVal("self_reception_enabled", "0", "Self-reception enabled."),
                    EnumVal("self_reception_disabled", "0x1", "Self-reception disabled."),
                ]),
                Field("IRMQ", 16, 1, "Individual Rx Masking And Queue Enable", [
                    EnumVal("individual_rx_masking_disabled", "0", "Individual Rx masking and queue feature are disabled. For backward compatibility with legacy applications, the reading of C/S word locks the MB even if it is EMPTY."),
                    EnumVal("individual_rx_masking_enabled", "0x1", "Individual Rx masking and queue feature are enabled."),
                ]),
                Field("DMA", 15, 1, "DMA Enable", [
                    EnumVal("id2", "0", "DMA feature for RX FIFO disabled."),
                    EnumVal("id4", "0x1", "DMA feature for RX FIFO enabled."),
                ]),
                Field("LPRIOEN", 13, 1, "Local Priority Enable", [
                    EnumVal("local_priority_disabled", "0", "Local Priority disabled."),
                    EnumVal("local_priority_enabled", "0x1", "Local Priority enabled."),
                ]),
                Field("AEN", 12, 1, "Abort Enable", [
                    EnumVal("abort_disabled", "0", "Abort disabled."),
                    EnumVal("abort_enabled", "0x1", "Abort enabled."),
                ]),
                Field("FDEN", 11, 1, "CAN FD operation enable", [
                    EnumVal("CAN_FD_disabled", "0", "CAN FD is disabled. FlexCAN is able to receive and transmit messages in CAN 2.0 format."),
                    EnumVal("CAN_FD_enabled", "0x1", "CAN FD is enabled. FlexCAN is able to receive and transmit messages in both CAN FD and CAN 2.0 formats."),
                ]),
                Field("IDAM", 8, 2, "ID Acceptance Mode", [
                    EnumVal("one_full_ID", "0", "Format A: One full ID (standard and extended) per ID filter table element."),
                    EnumVal("two_full_ID", "0x1", "Format B: Two full standard IDs or two partial 14-bit (standard and extended) IDs per ID filter table element."),
                    EnumVal("four_partial_ID", "0x2", "Format C: Four partial 8-bit standard IDs per ID filter table element."),
                    EnumVal("all_frames_rejected", "0x3", "Format D: All frames rejected."),
                ]),
                Field("MAXMB", 0, 7, "Number Of The Last Message Buffer", [
                ]),
            ]),
            Register("CTRL1", 0x40025004, 32, "Control 1 Register", [
                Field("PRESDIV", 24, 8, "Prescaler Division Factor", [
                ]),
                Field("RJW", 22, 2, "Resync Jump Width", [
                ]),
                Field("PSEG1", 19, 3, "Phase Segment 1", [
                ]),
                Field("PSEG2", 16, 3, "Phase Segment 2", [
                ]),
                Field("BOFFMSK", 15, 1, "Bus Off Interrupt Mask", [
                    EnumVal("bus_off_int_disabled", "0", "Bus Off interrupt disabled."),
                    EnumVal("bus_off_int_enabled", "0x1", "Bus Off interrupt enabled."),
                ]),
                Field("ERRMSK", 14, 1, "Error Interrupt Mask", [
                    EnumVal("error_int_disabled", "0", "Error interrupt disabled."),
                    EnumVal("error_int_enabled", "0x1", "Error interrupt enabled."),
                ]),
                Field("CLKSRC", 13, 1, "CAN Engine Clock Source", [
                    EnumVal("oscillator_clock", "0", "The CAN engine clock source is the oscillator clock. Under this condition, the oscillator clock frequency must be lower than the bus clock."),
                    EnumVal("peripheral_clock", "0x1", "The CAN engine clock source is the peripheral clock."),
                ]),
                Field("LPB", 12, 1, "Loop Back Mode", [
                    EnumVal("loopback_disabled", "0", "Loop Back disabled."),
                    EnumVal("loopback_enabled", "0x1", "Loop Back enabled."),
                ]),
                Field("TWRNMSK", 11, 1, "Tx Warning Interrupt Mask", [
                    EnumVal("tx_warning_int_disabled", "0", "Tx Warning interrupt disabled."),
                    EnumVal("tx_warning_int_enabled", "0x1", "Tx Warning interrupt enabled."),
                ]),
                Field("RWRNMSK", 10, 1, "Rx Warning Interrupt Mask", [
                    EnumVal("rx_warning_int_disabled", "0", "Rx Warning interrupt disabled."),
                    EnumVal("rx_warning_int_enabled", "0x1", "Rx Warning interrupt enabled."),
                ]),
                Field("SMP", 7, 1, "CAN Bit Sampling", [
                    EnumVal("one_sample", "0", "Just one sample is used to determine the bit value."),
                    EnumVal("three_sample", "0x1", "Three samples are used to determine the value of the received bit: the regular one (sample point) and two preceding samples; a majority rule is used."),
                ]),
                Field("BOFFREC", 6, 1, "Bus Off Recovery", [
                    EnumVal("auto_recover_enabled", "0", "Automatic recovering from Bus Off state enabled."),
                    EnumVal("auto_recover_disabled", "0x1", "Automatic recovering from Bus Off state disabled."),
                ]),
                Field("TSYN", 5, 1, "Timer Sync", [
                    EnumVal("timer_sync_disabled", "0", "Timer sync feature disabled"),
                    EnumVal("timer_sync_enabled", "0x1", "Timer sync feature enabled"),
                ]),
                Field("LBUF", 4, 1, "Lowest Buffer Transmitted First", [
                    EnumVal("highest_buffer_first", "0", "Buffer with highest priority is transmitted first."),
                    EnumVal("lowest_buffer_first", "0x1", "Lowest number buffer is transmitted first."),
                ]),
                Field("LOM", 3, 1, "Listen-Only Mode", [
                    EnumVal("listen_only_mode_disabled", "0", "Listen-Only mode is deactivated."),
                    EnumVal("listen_only_mode_enabled", "0x1", "FlexCAN module operates in Listen-Only mode."),
                ]),
                Field("PROPSEG", 0, 3, "Propagation Segment", [
                ]),
            ]),
            Register("TIMER", 0x40025008, 32, "Free Running Timer", [
                Field("TIMER", 0, 16, "Timer Value", [
                ]),
            ]),
            Register("RXMGMASK", 0x40025010, 32, "Rx Mailboxes Global Mask Register", [
                Field("MG", 0, 32, "Rx Mailboxes Global Mask Bits", [
                ]),
            ]),
            Register("RX14MASK", 0x40025014, 32, "Rx 14 Mask Register", [
                Field("RX14M", 0, 32, "Rx Buffer 14 Mask Bits", [
                ]),
            ]),
            Register("RX15MASK", 0x40025018, 32, "Rx 15 Mask Register", [
                Field("RX15M", 0, 32, "Rx Buffer 15 Mask Bits", [
                ]),
            ]),
            Register("ECR", 0x4002501C, 32, "Error Counter", [
                Field("RXERRCNT_FAST", 24, 8, "Receive Error Counter for fast bits", [
                ]),
                Field("TXERRCNT_FAST", 16, 8, "Transmit Error Counter for fast bits", [
                ]),
                Field("RXERRCNT", 8, 8, "Receive Error Counter", [
                ]),
                Field("TXERRCNT", 0, 8, "Transmit Error Counter", [
                ]),
            ]),
            Register("ESR1", 0x40025020, 32, "Error and Status 1 Register", [
                Field("BIT1ERR_FAST", 31, 1, "Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR_FAST", 30, 1, "Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("CRCERR_FAST", 28, 1, "Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR_FAST", 27, 1, "Form Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A form error occurred since last read of this register."),
                ]),
                Field("STFERR_FAST", 26, 1, "Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("ERROVR", 21, 1, "Error Overrun", [
                    EnumVal("overrun_not_occurred", "0", "Overrun has not occurred."),
                    EnumVal("overrun_occurred", "0x1", "Overrun has occurred."),
                ]),
                Field("ERRINT_FAST", 20, 1, "Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set", [
                    EnumVal("errors_data_phase_no", "0", "No such occurrence."),
                    EnumVal("errors_data_phase_yes", "0x1", "Indicates setting of any error bit detected in the data phase of CAN FD frames with the BRS bit set."),
                ]),
                Field("BOFFDONEINT", 19, 1, "Bus Off Done Interrupt", [
                    EnumVal("bus_off_not_done", "0", "No such occurrence."),
                    EnumVal("bus_off_done", "0x1", "FlexCAN module has completed Bus Off process."),
                ]),
                Field("SYNCH", 18, 1, "CAN Synchronization Status", [
                    EnumVal("CAN_bus_sync_no", "0", "FlexCAN is not synchronized to the CAN bus."),
                    EnumVal("CAN_bus_sync_yes", "0x1", "FlexCAN is synchronized to the CAN bus."),
                ]),
                Field("TWRNINT", 17, 1, "Tx Warning Interrupt Flag", [
                    EnumVal("Tx_warning_int_no", "0", "No such occurrence."),
                    EnumVal("Tx_warning_int_yes", "0x1", "The Tx error counter transitioned from less than 96 to greater than or equal to 96."),
                ]),
                Field("RWRNINT", 16, 1, "Rx Warning Interrupt Flag", [
                    EnumVal("Rx_warning_int_no", "0", "No such occurrence."),
                    EnumVal("Rx_warning_int_yes", "0x1", "The Rx error counter transitioned from less than 96 to greater than or equal to 96."),
                ]),
                Field("BIT1ERR", 15, 1, "Bit1 Error", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR", 14, 1, "Bit0 Error", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("ACKERR", 13, 1, "Acknowledge Error", [
                    EnumVal("ACK_error_no", "0", "No such occurrence."),
                    EnumVal("ACK_error_yes", "0x1", "An ACK error occurred since last read of this register."),
                ]),
                Field("CRCERR", 12, 1, "Cyclic Redundancy Check Error", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR", 11, 1, "Form Error", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A Form Error occurred since last read of this register."),
                ]),
                Field("STFERR", 10, 1, "Stuffing Error", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("TXWRN", 9, 1, "TX Error Warning", [
                    EnumVal("TXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("TXERRCNT_GTE_96", "0x1", "TXERRCNT is greater than or equal to 96."),
                ]),
                Field("RXWRN", 8, 1, "Rx Error Warning", [
                    EnumVal("RXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("RXERRCNT_GTE_96", "0x1", "RXERRCNT is greater than or equal to 96."),
                ]),
                Field("IDLE", 7, 1, "IDLE", [
                    EnumVal("can_bus_not_idle", "0", "No such occurrence."),
                    EnumVal("can_bus_idle", "0x1", "CAN bus is now IDLE."),
                ]),
                Field("TX", 6, 1, "FlexCAN In Transmission", [
                    EnumVal("transmit_message_no", "0", "FlexCAN is not transmitting a message."),
                    EnumVal("transmit_message_yes", "0x1", "FlexCAN is transmitting a message."),
                ]),
                Field("FLTCONF", 4, 2, "Fault Confinement State", [
                    EnumVal("error_active", "0", "Error Active"),
                    EnumVal("error_passive", "0x1", "Error Passive"),
                    EnumVal("bus_off", "#1x", "Bus Off"),
                ]),
                Field("RX", 3, 1, "FlexCAN In Reception", [
                    EnumVal("DISABLE", "0", "FlexCAN is not receiving a message."),
                    EnumVal("ENABLE", "0x1", "FlexCAN is receiving a message."),
                ]),
                Field("BOFFINT", 2, 1, "Bus Off Interrupt", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "FlexCAN module entered Bus Off state."),
                ]),
                Field("ERRINT", 1, 1, "Error Interrupt", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "Indicates setting of any error bit in the Error and Status register."),
                ]),
            ]),
            Register("IMASK1", 0x40025028, 32, "Interrupt Masks 1 Register", [
                Field("BUF31TO0M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IFLAG1", 0x40025030, 32, "Interrupt Flags 1 Register", [
                Field("BUF31TO8I", 8, 24, "Buffer MBi Interrupt", [
                ]),
                Field("BUF7I", 7, 1, "Buffer MB7 Interrupt Or Rx FIFO Overflow", [
                    EnumVal("id2", "0", "No occurrence of MB7 completing transmission/reception when MCR[RFEN]=0, or of Rx FIFO overflow when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB7 completed transmission/reception when MCR[RFEN]=0, or Rx FIFO overflow when MCR[RFEN]=1"),
                ]),
                Field("BUF6I", 6, 1, "Buffer MB6 Interrupt Or Rx FIFO Warning", [
                    EnumVal("id2", "0", "No occurrence of MB6 completing transmission/reception when MCR[RFEN]=0, or of Rx FIFO almost full when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB6 completed transmission/reception when MCR[RFEN]=0, or Rx FIFO almost full when MCR[RFEN]=1"),
                ]),
                Field("BUF5I", 5, 1, "Buffer MB5 Interrupt Or Frames available in Rx FIFO", [
                    EnumVal("id2", "0", "No occurrence of MB5 completing transmission/reception when MCR[RFEN]=0, or of frame(s) available in the FIFO, when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB5 completed transmission/reception when MCR[RFEN]=0, or frame(s) available in the Rx FIFO when MCR[RFEN]=1. It generates a DMA request in case of MCR[RFEN] and MCR[DMA] are enabled."),
                ]),
                Field("BUF4TO1I", 1, 4, "Buffer MBi Interrupt Or Reserved", [
                ]),
                Field("BUF0I", 0, 1, "Buffer MB0 Interrupt Or Clear FIFO bit", [
                    EnumVal("buffer_Tx_Rx_not_complete", "0", "The corresponding buffer has no occurrence of successfully completed transmission or reception when MCR[RFEN]=0."),
                    EnumVal("buffer_Tx_Rx_complete", "0x1", "The corresponding buffer has successfully completed transmission or reception when MCR[RFEN]=0."),
                ]),
            ]),
            Register("CTRL2", 0x40025034, 32, "Control 2 Register", [
                Field("ERRMSK_FAST", 31, 1, "Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames", [
                    EnumVal("DISABLE", "0", "ERRINT_FAST error interrupt disabled."),
                    EnumVal("ENABLE", "0x1", "ERRINT_FAST error interrupt enabled."),
                ]),
                Field("BOFFDONEMSK", 30, 1, "Bus Off Done Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Bus off done interrupt disabled."),
                    EnumVal("ENABLE", "0x1", "Bus off done interrupt enabled."),
                ]),
                Field("RFFN", 24, 4, "Number Of Rx FIFO Filters", [
                ]),
                Field("TASD", 19, 5, "Tx Arbitration Start Delay", [
                ]),
                Field("MRP", 18, 1, "Mailboxes Reception Priority", [
                    EnumVal("id2", "0", "Matching starts from Rx FIFO and continues on mailboxes."),
                    EnumVal("id4", "0x1", "Matching starts from mailboxes and continues on Rx FIFO."),
                ]),
                Field("RRS", 17, 1, "Remote Request Storing", [
                    EnumVal("remote_response_frame_not_generated", "0", "Remote response frame is generated."),
                    EnumVal("remote_response_frame_generated", "0x1", "Remote request frame is stored."),
                ]),
                Field("EACEN", 16, 1, "Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes", [
                    EnumVal("RTR_compare_no", "0", "Rx mailbox filter's IDE bit is always compared and RTR is never compared despite mask bits."),
                    EnumVal("RTR_compare_yes", "0x1", "Enables the comparison of both Rx mailbox filter's IDE and RTR bit with their corresponding bits within the incoming frame. Mask bits do apply."),
                ]),
                Field("PREXCEN", 14, 1, "Protocol Exception Enable", [
                    EnumVal("DISABLE", "0", "Protocol exception is disabled."),
                    EnumVal("ENABLE", "0x1", "Protocol exception is enabled."),
                ]),
                Field("ISOCANFDEN", 12, 1, "ISO CAN FD Enable", [
                    EnumVal("non_ISO", "0", "FlexCAN operates using the non-ISO CAN FD protocol."),
                    EnumVal("ISO", "0x1", "FlexCAN operates using the ISO CAN FD protocol (ISO 11898-1)."),
                ]),
                Field("EDFLTDIS", 11, 1, "Edge Filter Disable", [
                    EnumVal("ENABLE", "0", "Edge filter is enabled"),
                    EnumVal("DISABLE", "0x1", "Edge filter is disabled"),
                ]),
            ]),
            Register("ESR2", 0x40025038, 32, "Error and Status 2 Register", [
                Field("LPTM", 16, 7, "Lowest Priority Tx Mailbox", [
                ]),
                Field("VPS", 14, 1, "Valid Priority Status", [
                    EnumVal("invalid", "0", "Contents of IMB and LPTM are invalid."),
                    EnumVal("valid", "0x1", "Contents of IMB and LPTM are valid."),
                ]),
                Field("IMB", 13, 1, "Inactive Mailbox", [
                    EnumVal("inactive_mailbox_no", "0", "If ESR2[VPS] is asserted, the ESR2[LPTM] is not an inactive mailbox."),
                    EnumVal("inactive_mailbox_yes", "0x1", "If ESR2[VPS] is asserted, there is at least one inactive mailbox. LPTM content is the number of the first one."),
                ]),
            ]),
            Register("CRCR", 0x40025044, 32, "CRC Register", [
                Field("MBCRC", 16, 7, "CRC Mailbox", [
                ]),
                Field("TXCRC", 0, 15, "Transmitted CRC value", [
                ]),
            ]),
            Register("RXFGMASK", 0x40025048, 32, "Rx FIFO Global Mask Register", [
                Field("FGM", 0, 32, "Rx FIFO Global Mask Bits", [
                ]),
            ]),
            Register("RXFIR", 0x4002504C, 32, "Rx FIFO Information Register", [
                Field("IDHIT", 0, 9, "Identifier Acceptance Filter Hit Indicator", [
                ]),
            ]),
            Register("CBT", 0x40025050, 32, "CAN Bit Timing Register", [
                Field("BTF", 31, 1, "Bit Timing Format Enable", [
                    EnumVal("DISABLE", "0", "Extended bit time definitions disabled."),
                    EnumVal("ENABLE", "0x1", "Extended bit time definitions enabled."),
                ]),
                Field("EPRESDIV", 21, 10, "Extended Prescaler Division Factor", [
                ]),
                Field("ERJW", 16, 5, "Extended Resync Jump Width", [
                ]),
                Field("EPROPSEG", 10, 6, "Extended Propagation Segment", [
                ]),
                Field("EPSEG1", 5, 5, "Extended Phase Segment 1", [
                ]),
                Field("EPSEG2", 0, 5, "Extended Phase Segment 2", [
                ]),
            ]),
            Register("RAMn[0]", 0x40025080, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[1]", 0x40025084, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[2]", 0x40025088, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[3]", 0x4002508C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[4]", 0x40025090, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[5]", 0x40025094, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[6]", 0x40025098, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[7]", 0x4002509C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[8]", 0x400250A0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[9]", 0x400250A4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[10]", 0x400250A8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[11]", 0x400250AC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[12]", 0x400250B0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[13]", 0x400250B4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[14]", 0x400250B8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[15]", 0x400250BC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[16]", 0x400250C0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[17]", 0x400250C4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[18]", 0x400250C8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[19]", 0x400250CC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[20]", 0x400250D0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[21]", 0x400250D4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[22]", 0x400250D8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[23]", 0x400250DC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[24]", 0x400250E0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[25]", 0x400250E4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[26]", 0x400250E8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[27]", 0x400250EC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[28]", 0x400250F0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[29]", 0x400250F4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[30]", 0x400250F8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[31]", 0x400250FC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[32]", 0x40025100, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[33]", 0x40025104, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[34]", 0x40025108, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[35]", 0x4002510C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[36]", 0x40025110, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[37]", 0x40025114, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[38]", 0x40025118, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[39]", 0x4002511C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[40]", 0x40025120, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[41]", 0x40025124, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[42]", 0x40025128, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[43]", 0x4002512C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[44]", 0x40025130, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[45]", 0x40025134, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[46]", 0x40025138, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[47]", 0x4002513C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[48]", 0x40025140, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[49]", 0x40025144, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[50]", 0x40025148, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[51]", 0x4002514C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[52]", 0x40025150, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[53]", 0x40025154, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[54]", 0x40025158, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[55]", 0x4002515C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[56]", 0x40025160, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[57]", 0x40025164, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[58]", 0x40025168, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[59]", 0x4002516C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[60]", 0x40025170, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[61]", 0x40025174, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[62]", 0x40025178, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[63]", 0x4002517C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[64]", 0x40025180, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[65]", 0x40025184, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[66]", 0x40025188, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[67]", 0x4002518C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[68]", 0x40025190, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[69]", 0x40025194, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[70]", 0x40025198, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[71]", 0x4002519C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[72]", 0x400251A0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[73]", 0x400251A4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[74]", 0x400251A8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[75]", 0x400251AC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[76]", 0x400251B0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[77]", 0x400251B4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[78]", 0x400251B8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[79]", 0x400251BC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[80]", 0x400251C0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[81]", 0x400251C4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[82]", 0x400251C8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[83]", 0x400251CC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[84]", 0x400251D0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[85]", 0x400251D4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[86]", 0x400251D8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[87]", 0x400251DC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[88]", 0x400251E0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[89]", 0x400251E4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[90]", 0x400251E8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[91]", 0x400251EC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[92]", 0x400251F0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[93]", 0x400251F4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[94]", 0x400251F8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[95]", 0x400251FC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[96]", 0x40025200, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[97]", 0x40025204, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[98]", 0x40025208, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[99]", 0x4002520C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[100]", 0x40025210, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[101]", 0x40025214, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[102]", 0x40025218, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[103]", 0x4002521C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[104]", 0x40025220, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[105]", 0x40025224, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[106]", 0x40025228, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[107]", 0x4002522C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[108]", 0x40025230, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[109]", 0x40025234, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[110]", 0x40025238, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[111]", 0x4002523C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[112]", 0x40025240, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[113]", 0x40025244, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[114]", 0x40025248, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[115]", 0x4002524C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[116]", 0x40025250, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[117]", 0x40025254, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[118]", 0x40025258, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[119]", 0x4002525C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[120]", 0x40025260, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[121]", 0x40025264, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[122]", 0x40025268, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[123]", 0x4002526C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[124]", 0x40025270, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[125]", 0x40025274, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[126]", 0x40025278, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[127]", 0x4002527C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RXIMR[0]", 0x40025880, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[1]", 0x40025884, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[2]", 0x40025888, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[3]", 0x4002588C, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[4]", 0x40025890, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[5]", 0x40025894, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[6]", 0x40025898, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[7]", 0x4002589C, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[8]", 0x400258A0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[9]", 0x400258A4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[10]", 0x400258A8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[11]", 0x400258AC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[12]", 0x400258B0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[13]", 0x400258B4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[14]", 0x400258B8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[15]", 0x400258BC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[16]", 0x400258C0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[17]", 0x400258C4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[18]", 0x400258C8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[19]", 0x400258CC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[20]", 0x400258D0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[21]", 0x400258D4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[22]", 0x400258D8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[23]", 0x400258DC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[24]", 0x400258E0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[25]", 0x400258E4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[26]", 0x400258E8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[27]", 0x400258EC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[28]", 0x400258F0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[29]", 0x400258F4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[30]", 0x400258F8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[31]", 0x400258FC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("FDCTRL", 0x40025C00, 32, "CAN FD Control Register", [
                Field("FDRATE", 31, 1, "Bit Rate Switch Enable", [
                    EnumVal("nominal", "0", "Transmit a frame in nominal rate. The BRS bit in the Tx MB has no effect."),
                    EnumVal("bit_rate_switching", "0x1", "Transmit a frame with bit rate switching if the BRS bit in the Tx MB is recessive."),
                ]),
                Field("MBDSR0", 16, 2, "Message Buffer Data Size for Region 0", [
                    EnumVal("R0_8_bytes", "0", "Selects 8 bytes per message buffer."),
                    EnumVal("R0_16_bytes", "0x1", "Selects 16 bytes per message buffer."),
                    EnumVal("R0_32_bytes", "0x2", "Selects 32 bytes per message buffer."),
                    EnumVal("R0_64_bytes", "0x3", "Selects 64 bytes per message buffer."),
                ]),
                Field("TDCEN", 15, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "TDC is disabled"),
                    EnumVal("ENABLE", "0x1", "TDC is enabled"),
                ]),
                Field("TDCFAIL", 14, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "Measured loop delay is in range."),
                    EnumVal("out_of_range", "0x1", "Measured loop delay is out of range."),
                ]),
                Field("TDCOFF", 8, 5, "Transceiver Delay Compensation Offset", [
                ]),
                Field("TDCVAL", 0, 6, "Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCBT", 0x40025C04, 32, "CAN FD Bit Timing Register", [
                Field("FPRESDIV", 20, 10, "Fast Prescaler Division Factor", [
                ]),
                Field("FRJW", 16, 3, "Fast Resync Jump Width", [
                ]),
                Field("FPROPSEG", 10, 5, "Fast Propagation Segment", [
                ]),
                Field("FPSEG1", 5, 3, "Fast Phase Segment 1", [
                ]),
                Field("FPSEG2", 0, 3, "Fast Phase Segment 2", [
                ]),
            ]),
            Register("FDCRC", 0x40025C08, 32, "CAN FD CRC Register", [
                Field("FD_MBCRC", 24, 7, "CRC Mailbox Number for FD_TXCRC", [
                ]),
                Field("FD_TXCRC", 0, 21, "Extended Transmitted CRC value", [
                ]),
            ]),
        ])

class Module_FLEXCAN2(Peripheral):
    def __init__(self):
        super().__init__("FLEXCAN2", 0x4002B000, 0xC0C, [
            Register("MCR", 0x4002B000, 32, "Module Configuration Register", [
                Field("MDIS", 31, 1, "Module Disable", [
                    EnumVal("flexcan_enabled", "0", "Enable the FlexCAN module."),
                    EnumVal("flexcan_disabled", "0x1", "Disable the FlexCAN module."),
                ]),
                Field("FRZ", 30, 1, "Freeze Enable", [
                    EnumVal("freeze_mode_disabled", "0", "Not enabled to enter Freeze mode."),
                    EnumVal("freeze_mode_enabled", "0x1", "Enabled to enter Freeze mode."),
                ]),
                Field("RFEN", 29, 1, "Rx FIFO Enable", [
                    EnumVal("id2", "0", "Rx FIFO not enabled."),
                    EnumVal("id4", "0x1", "Rx FIFO enabled."),
                ]),
                Field("HALT", 28, 1, "Halt FlexCAN", [
                    EnumVal("HALT_disable", "0", "No Freeze mode request."),
                    EnumVal("HALT_enable", "0x1", "Enters Freeze mode if the FRZ bit is asserted."),
                ]),
                Field("NOTRDY", 27, 1, "FlexCAN Not Ready", [
                    EnumVal("id1", "0", "FlexCAN module is either in Normal mode, Listen-Only mode, or Loop-Back mode."),
                    EnumVal("id4", "0x1", "FlexCAN module is either in Disable mode, Stop mode, or Freeze mode."),
                ]),
                Field("SOFTRST", 25, 1, "Soft Reset", [
                    EnumVal("SOFTRST_no_reset_request", "0", "No reset request."),
                    EnumVal("SOFTRST_reset_registers", "0x1", "Resets the registers affected by soft reset."),
                ]),
                Field("FRZACK", 24, 1, "Freeze Mode Acknowledge", [
                    EnumVal("freeze_mode_no", "0", "FlexCAN not in Freeze mode, prescaler running."),
                    EnumVal("freeze_mode_yes", "0x1", "FlexCAN in Freeze mode, prescaler stopped."),
                ]),
                Field("SUPV", 23, 1, "Supervisor Mode", [
                    EnumVal("id2", "0", "FlexCAN is in User mode. Affected registers allow both Supervisor and Unrestricted accesses."),
                    EnumVal("id4", "0x1", "FlexCAN is in Supervisor mode. Affected registers allow only Supervisor access. Unrestricted access behaves as though the access was done to an unimplemented register location."),
                ]),
                Field("WRNEN", 21, 1, "Warning Interrupt Enable", [
                    EnumVal("TWRNINT_RWRNINT_inactive", "0", "TWRNINT and RWRNINT bits are zero, independent of the values in the error counters."),
                    EnumVal("TWRNINT_RWRNINT_active", "0x1", "TWRNINT and RWRNINT bits are set when the respective error counter transitions from less than 96 to greater than or equal to 96."),
                ]),
                Field("LPMACK", 20, 1, "Low-Power Mode Acknowledge", [
                    EnumVal("low_power_no", "0", "FlexCAN is not in a low-power mode."),
                    EnumVal("low_power_yes", "0x1", "FlexCAN is in a low-power mode."),
                ]),
                Field("SRXDIS", 17, 1, "Self Reception Disable", [
                    EnumVal("self_reception_enabled", "0", "Self-reception enabled."),
                    EnumVal("self_reception_disabled", "0x1", "Self-reception disabled."),
                ]),
                Field("IRMQ", 16, 1, "Individual Rx Masking And Queue Enable", [
                    EnumVal("individual_rx_masking_disabled", "0", "Individual Rx masking and queue feature are disabled. For backward compatibility with legacy applications, the reading of C/S word locks the MB even if it is EMPTY."),
                    EnumVal("individual_rx_masking_enabled", "0x1", "Individual Rx masking and queue feature are enabled."),
                ]),
                Field("DMA", 15, 1, "DMA Enable", [
                    EnumVal("id2", "0", "DMA feature for RX FIFO disabled."),
                    EnumVal("id4", "0x1", "DMA feature for RX FIFO enabled."),
                ]),
                Field("LPRIOEN", 13, 1, "Local Priority Enable", [
                    EnumVal("local_priority_disabled", "0", "Local Priority disabled."),
                    EnumVal("local_priority_enabled", "0x1", "Local Priority enabled."),
                ]),
                Field("AEN", 12, 1, "Abort Enable", [
                    EnumVal("abort_disabled", "0", "Abort disabled."),
                    EnumVal("abort_enabled", "0x1", "Abort enabled."),
                ]),
                Field("FDEN", 11, 1, "CAN FD operation enable", [
                    EnumVal("CAN_FD_disabled", "0", "CAN FD is disabled. FlexCAN is able to receive and transmit messages in CAN 2.0 format."),
                    EnumVal("CAN_FD_enabled", "0x1", "CAN FD is enabled. FlexCAN is able to receive and transmit messages in both CAN FD and CAN 2.0 formats."),
                ]),
                Field("IDAM", 8, 2, "ID Acceptance Mode", [
                    EnumVal("one_full_ID", "0", "Format A: One full ID (standard and extended) per ID filter table element."),
                    EnumVal("two_full_ID", "0x1", "Format B: Two full standard IDs or two partial 14-bit (standard and extended) IDs per ID filter table element."),
                    EnumVal("four_partial_ID", "0x2", "Format C: Four partial 8-bit standard IDs per ID filter table element."),
                    EnumVal("all_frames_rejected", "0x3", "Format D: All frames rejected."),
                ]),
                Field("MAXMB", 0, 7, "Number Of The Last Message Buffer", [
                ]),
            ]),
            Register("CTRL1", 0x4002B004, 32, "Control 1 Register", [
                Field("PRESDIV", 24, 8, "Prescaler Division Factor", [
                ]),
                Field("RJW", 22, 2, "Resync Jump Width", [
                ]),
                Field("PSEG1", 19, 3, "Phase Segment 1", [
                ]),
                Field("PSEG2", 16, 3, "Phase Segment 2", [
                ]),
                Field("BOFFMSK", 15, 1, "Bus Off Interrupt Mask", [
                    EnumVal("bus_off_int_disabled", "0", "Bus Off interrupt disabled."),
                    EnumVal("bus_off_int_enabled", "0x1", "Bus Off interrupt enabled."),
                ]),
                Field("ERRMSK", 14, 1, "Error Interrupt Mask", [
                    EnumVal("error_int_disabled", "0", "Error interrupt disabled."),
                    EnumVal("error_int_enabled", "0x1", "Error interrupt enabled."),
                ]),
                Field("CLKSRC", 13, 1, "CAN Engine Clock Source", [
                    EnumVal("oscillator_clock", "0", "The CAN engine clock source is the oscillator clock. Under this condition, the oscillator clock frequency must be lower than the bus clock."),
                    EnumVal("peripheral_clock", "0x1", "The CAN engine clock source is the peripheral clock."),
                ]),
                Field("LPB", 12, 1, "Loop Back Mode", [
                    EnumVal("loopback_disabled", "0", "Loop Back disabled."),
                    EnumVal("loopback_enabled", "0x1", "Loop Back enabled."),
                ]),
                Field("TWRNMSK", 11, 1, "Tx Warning Interrupt Mask", [
                    EnumVal("tx_warning_int_disabled", "0", "Tx Warning interrupt disabled."),
                    EnumVal("tx_warning_int_enabled", "0x1", "Tx Warning interrupt enabled."),
                ]),
                Field("RWRNMSK", 10, 1, "Rx Warning Interrupt Mask", [
                    EnumVal("rx_warning_int_disabled", "0", "Rx Warning interrupt disabled."),
                    EnumVal("rx_warning_int_enabled", "0x1", "Rx Warning interrupt enabled."),
                ]),
                Field("SMP", 7, 1, "CAN Bit Sampling", [
                    EnumVal("one_sample", "0", "Just one sample is used to determine the bit value."),
                    EnumVal("three_sample", "0x1", "Three samples are used to determine the value of the received bit: the regular one (sample point) and two preceding samples; a majority rule is used."),
                ]),
                Field("BOFFREC", 6, 1, "Bus Off Recovery", [
                    EnumVal("auto_recover_enabled", "0", "Automatic recovering from Bus Off state enabled."),
                    EnumVal("auto_recover_disabled", "0x1", "Automatic recovering from Bus Off state disabled."),
                ]),
                Field("TSYN", 5, 1, "Timer Sync", [
                    EnumVal("timer_sync_disabled", "0", "Timer sync feature disabled"),
                    EnumVal("timer_sync_enabled", "0x1", "Timer sync feature enabled"),
                ]),
                Field("LBUF", 4, 1, "Lowest Buffer Transmitted First", [
                    EnumVal("highest_buffer_first", "0", "Buffer with highest priority is transmitted first."),
                    EnumVal("lowest_buffer_first", "0x1", "Lowest number buffer is transmitted first."),
                ]),
                Field("LOM", 3, 1, "Listen-Only Mode", [
                    EnumVal("listen_only_mode_disabled", "0", "Listen-Only mode is deactivated."),
                    EnumVal("listen_only_mode_enabled", "0x1", "FlexCAN module operates in Listen-Only mode."),
                ]),
                Field("PROPSEG", 0, 3, "Propagation Segment", [
                ]),
            ]),
            Register("TIMER", 0x4002B008, 32, "Free Running Timer", [
                Field("TIMER", 0, 16, "Timer Value", [
                ]),
            ]),
            Register("RXMGMASK", 0x4002B010, 32, "Rx Mailboxes Global Mask Register", [
                Field("MG", 0, 32, "Rx Mailboxes Global Mask Bits", [
                ]),
            ]),
            Register("RX14MASK", 0x4002B014, 32, "Rx 14 Mask Register", [
                Field("RX14M", 0, 32, "Rx Buffer 14 Mask Bits", [
                ]),
            ]),
            Register("RX15MASK", 0x4002B018, 32, "Rx 15 Mask Register", [
                Field("RX15M", 0, 32, "Rx Buffer 15 Mask Bits", [
                ]),
            ]),
            Register("ECR", 0x4002B01C, 32, "Error Counter", [
                Field("RXERRCNT_FAST", 24, 8, "Receive Error Counter for fast bits", [
                ]),
                Field("TXERRCNT_FAST", 16, 8, "Transmit Error Counter for fast bits", [
                ]),
                Field("RXERRCNT", 8, 8, "Receive Error Counter", [
                ]),
                Field("TXERRCNT", 0, 8, "Transmit Error Counter", [
                ]),
            ]),
            Register("ESR1", 0x4002B020, 32, "Error and Status 1 Register", [
                Field("BIT1ERR_FAST", 31, 1, "Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR_FAST", 30, 1, "Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("CRCERR_FAST", 28, 1, "Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR_FAST", 27, 1, "Form Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A form error occurred since last read of this register."),
                ]),
                Field("STFERR_FAST", 26, 1, "Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("ERROVR", 21, 1, "Error Overrun", [
                    EnumVal("overrun_not_occurred", "0", "Overrun has not occurred."),
                    EnumVal("overrun_occurred", "0x1", "Overrun has occurred."),
                ]),
                Field("ERRINT_FAST", 20, 1, "Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set", [
                    EnumVal("errors_data_phase_no", "0", "No such occurrence."),
                    EnumVal("errors_data_phase_yes", "0x1", "Indicates setting of any error bit detected in the data phase of CAN FD frames with the BRS bit set."),
                ]),
                Field("BOFFDONEINT", 19, 1, "Bus Off Done Interrupt", [
                    EnumVal("bus_off_not_done", "0", "No such occurrence."),
                    EnumVal("bus_off_done", "0x1", "FlexCAN module has completed Bus Off process."),
                ]),
                Field("SYNCH", 18, 1, "CAN Synchronization Status", [
                    EnumVal("CAN_bus_sync_no", "0", "FlexCAN is not synchronized to the CAN bus."),
                    EnumVal("CAN_bus_sync_yes", "0x1", "FlexCAN is synchronized to the CAN bus."),
                ]),
                Field("TWRNINT", 17, 1, "Tx Warning Interrupt Flag", [
                    EnumVal("Tx_warning_int_no", "0", "No such occurrence."),
                    EnumVal("Tx_warning_int_yes", "0x1", "The Tx error counter transitioned from less than 96 to greater than or equal to 96."),
                ]),
                Field("RWRNINT", 16, 1, "Rx Warning Interrupt Flag", [
                    EnumVal("Rx_warning_int_no", "0", "No such occurrence."),
                    EnumVal("Rx_warning_int_yes", "0x1", "The Rx error counter transitioned from less than 96 to greater than or equal to 96."),
                ]),
                Field("BIT1ERR", 15, 1, "Bit1 Error", [
                    EnumVal("bit1_error_no", "0", "No such occurrence."),
                    EnumVal("bit1_error_yes", "0x1", "At least one bit sent as recessive is received as dominant."),
                ]),
                Field("BIT0ERR", 14, 1, "Bit0 Error", [
                    EnumVal("bit0_error_no", "0", "No such occurrence."),
                    EnumVal("bit0_error_yes", "0x1", "At least one bit sent as dominant is received as recessive."),
                ]),
                Field("ACKERR", 13, 1, "Acknowledge Error", [
                    EnumVal("ACK_error_no", "0", "No such occurrence."),
                    EnumVal("ACK_error_yes", "0x1", "An ACK error occurred since last read of this register."),
                ]),
                Field("CRCERR", 12, 1, "Cyclic Redundancy Check Error", [
                    EnumVal("CRC_error_no", "0", "No such occurrence."),
                    EnumVal("CRC_error_yes", "0x1", "A CRC error occurred since last read of this register."),
                ]),
                Field("FRMERR", 11, 1, "Form Error", [
                    EnumVal("form_error_no", "0", "No such occurrence."),
                    EnumVal("form_error_yes", "0x1", "A Form Error occurred since last read of this register."),
                ]),
                Field("STFERR", 10, 1, "Stuffing Error", [
                    EnumVal("stuffing_error_no", "0", "No such occurrence."),
                    EnumVal("stuffing_error_yes", "0x1", "A stuffing error occurred since last read of this register."),
                ]),
                Field("TXWRN", 9, 1, "TX Error Warning", [
                    EnumVal("TXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("TXERRCNT_GTE_96", "0x1", "TXERRCNT is greater than or equal to 96."),
                ]),
                Field("RXWRN", 8, 1, "Rx Error Warning", [
                    EnumVal("RXERRCNT_LT_96", "0", "No such occurrence."),
                    EnumVal("RXERRCNT_GTE_96", "0x1", "RXERRCNT is greater than or equal to 96."),
                ]),
                Field("IDLE", 7, 1, "IDLE", [
                    EnumVal("can_bus_not_idle", "0", "No such occurrence."),
                    EnumVal("can_bus_idle", "0x1", "CAN bus is now IDLE."),
                ]),
                Field("TX", 6, 1, "FlexCAN In Transmission", [
                    EnumVal("transmit_message_no", "0", "FlexCAN is not transmitting a message."),
                    EnumVal("transmit_message_yes", "0x1", "FlexCAN is transmitting a message."),
                ]),
                Field("FLTCONF", 4, 2, "Fault Confinement State", [
                    EnumVal("error_active", "0", "Error Active"),
                    EnumVal("error_passive", "0x1", "Error Passive"),
                    EnumVal("bus_off", "#1x", "Bus Off"),
                ]),
                Field("RX", 3, 1, "FlexCAN In Reception", [
                    EnumVal("DISABLE", "0", "FlexCAN is not receiving a message."),
                    EnumVal("ENABLE", "0x1", "FlexCAN is receiving a message."),
                ]),
                Field("BOFFINT", 2, 1, "Bus Off Interrupt", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "FlexCAN module entered Bus Off state."),
                ]),
                Field("ERRINT", 1, 1, "Error Interrupt", [
                    EnumVal("DISABLE", "0", "No such occurrence."),
                    EnumVal("ENABLE", "0x1", "Indicates setting of any error bit in the Error and Status register."),
                ]),
            ]),
            Register("IMASK1", 0x4002B028, 32, "Interrupt Masks 1 Register", [
                Field("BUF31TO0M", 0, 32, "Buffer MBi Mask", [
                ]),
            ]),
            Register("IFLAG1", 0x4002B030, 32, "Interrupt Flags 1 Register", [
                Field("BUF31TO8I", 8, 24, "Buffer MBi Interrupt", [
                ]),
                Field("BUF7I", 7, 1, "Buffer MB7 Interrupt Or Rx FIFO Overflow", [
                    EnumVal("id2", "0", "No occurrence of MB7 completing transmission/reception when MCR[RFEN]=0, or of Rx FIFO overflow when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB7 completed transmission/reception when MCR[RFEN]=0, or Rx FIFO overflow when MCR[RFEN]=1"),
                ]),
                Field("BUF6I", 6, 1, "Buffer MB6 Interrupt Or Rx FIFO Warning", [
                    EnumVal("id2", "0", "No occurrence of MB6 completing transmission/reception when MCR[RFEN]=0, or of Rx FIFO almost full when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB6 completed transmission/reception when MCR[RFEN]=0, or Rx FIFO almost full when MCR[RFEN]=1"),
                ]),
                Field("BUF5I", 5, 1, "Buffer MB5 Interrupt Or Frames available in Rx FIFO", [
                    EnumVal("id2", "0", "No occurrence of MB5 completing transmission/reception when MCR[RFEN]=0, or of frame(s) available in the FIFO, when MCR[RFEN]=1"),
                    EnumVal("id4", "0x1", "MB5 completed transmission/reception when MCR[RFEN]=0, or frame(s) available in the Rx FIFO when MCR[RFEN]=1. It generates a DMA request in case of MCR[RFEN] and MCR[DMA] are enabled."),
                ]),
                Field("BUF4TO1I", 1, 4, "Buffer MBi Interrupt Or Reserved", [
                ]),
                Field("BUF0I", 0, 1, "Buffer MB0 Interrupt Or Clear FIFO bit", [
                    EnumVal("buffer_Tx_Rx_not_complete", "0", "The corresponding buffer has no occurrence of successfully completed transmission or reception when MCR[RFEN]=0."),
                    EnumVal("buffer_Tx_Rx_complete", "0x1", "The corresponding buffer has successfully completed transmission or reception when MCR[RFEN]=0."),
                ]),
            ]),
            Register("CTRL2", 0x4002B034, 32, "Control 2 Register", [
                Field("ERRMSK_FAST", 31, 1, "Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames", [
                    EnumVal("DISABLE", "0", "ERRINT_FAST error interrupt disabled."),
                    EnumVal("ENABLE", "0x1", "ERRINT_FAST error interrupt enabled."),
                ]),
                Field("BOFFDONEMSK", 30, 1, "Bus Off Done Interrupt Mask", [
                    EnumVal("DISABLE", "0", "Bus off done interrupt disabled."),
                    EnumVal("ENABLE", "0x1", "Bus off done interrupt enabled."),
                ]),
                Field("RFFN", 24, 4, "Number Of Rx FIFO Filters", [
                ]),
                Field("TASD", 19, 5, "Tx Arbitration Start Delay", [
                ]),
                Field("MRP", 18, 1, "Mailboxes Reception Priority", [
                    EnumVal("id2", "0", "Matching starts from Rx FIFO and continues on mailboxes."),
                    EnumVal("id4", "0x1", "Matching starts from mailboxes and continues on Rx FIFO."),
                ]),
                Field("RRS", 17, 1, "Remote Request Storing", [
                    EnumVal("remote_response_frame_not_generated", "0", "Remote response frame is generated."),
                    EnumVal("remote_response_frame_generated", "0x1", "Remote request frame is stored."),
                ]),
                Field("EACEN", 16, 1, "Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes", [
                    EnumVal("RTR_compare_no", "0", "Rx mailbox filter's IDE bit is always compared and RTR is never compared despite mask bits."),
                    EnumVal("RTR_compare_yes", "0x1", "Enables the comparison of both Rx mailbox filter's IDE and RTR bit with their corresponding bits within the incoming frame. Mask bits do apply."),
                ]),
                Field("PREXCEN", 14, 1, "Protocol Exception Enable", [
                    EnumVal("DISABLE", "0", "Protocol exception is disabled."),
                    EnumVal("ENABLE", "0x1", "Protocol exception is enabled."),
                ]),
                Field("ISOCANFDEN", 12, 1, "ISO CAN FD Enable", [
                    EnumVal("non_ISO", "0", "FlexCAN operates using the non-ISO CAN FD protocol."),
                    EnumVal("ISO", "0x1", "FlexCAN operates using the ISO CAN FD protocol (ISO 11898-1)."),
                ]),
                Field("EDFLTDIS", 11, 1, "Edge Filter Disable", [
                    EnumVal("ENABLE", "0", "Edge filter is enabled"),
                    EnumVal("DISABLE", "0x1", "Edge filter is disabled"),
                ]),
            ]),
            Register("ESR2", 0x4002B038, 32, "Error and Status 2 Register", [
                Field("LPTM", 16, 7, "Lowest Priority Tx Mailbox", [
                ]),
                Field("VPS", 14, 1, "Valid Priority Status", [
                    EnumVal("invalid", "0", "Contents of IMB and LPTM are invalid."),
                    EnumVal("valid", "0x1", "Contents of IMB and LPTM are valid."),
                ]),
                Field("IMB", 13, 1, "Inactive Mailbox", [
                    EnumVal("inactive_mailbox_no", "0", "If ESR2[VPS] is asserted, the ESR2[LPTM] is not an inactive mailbox."),
                    EnumVal("inactive_mailbox_yes", "0x1", "If ESR2[VPS] is asserted, there is at least one inactive mailbox. LPTM content is the number of the first one."),
                ]),
            ]),
            Register("CRCR", 0x4002B044, 32, "CRC Register", [
                Field("MBCRC", 16, 7, "CRC Mailbox", [
                ]),
                Field("TXCRC", 0, 15, "Transmitted CRC value", [
                ]),
            ]),
            Register("RXFGMASK", 0x4002B048, 32, "Rx FIFO Global Mask Register", [
                Field("FGM", 0, 32, "Rx FIFO Global Mask Bits", [
                ]),
            ]),
            Register("RXFIR", 0x4002B04C, 32, "Rx FIFO Information Register", [
                Field("IDHIT", 0, 9, "Identifier Acceptance Filter Hit Indicator", [
                ]),
            ]),
            Register("CBT", 0x4002B050, 32, "CAN Bit Timing Register", [
                Field("BTF", 31, 1, "Bit Timing Format Enable", [
                    EnumVal("DISABLE", "0", "Extended bit time definitions disabled."),
                    EnumVal("ENABLE", "0x1", "Extended bit time definitions enabled."),
                ]),
                Field("EPRESDIV", 21, 10, "Extended Prescaler Division Factor", [
                ]),
                Field("ERJW", 16, 5, "Extended Resync Jump Width", [
                ]),
                Field("EPROPSEG", 10, 6, "Extended Propagation Segment", [
                ]),
                Field("EPSEG1", 5, 5, "Extended Phase Segment 1", [
                ]),
                Field("EPSEG2", 0, 5, "Extended Phase Segment 2", [
                ]),
            ]),
            Register("RAMn[0]", 0x4002B080, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[1]", 0x4002B084, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[2]", 0x4002B088, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[3]", 0x4002B08C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[4]", 0x4002B090, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[5]", 0x4002B094, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[6]", 0x4002B098, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[7]", 0x4002B09C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[8]", 0x4002B0A0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[9]", 0x4002B0A4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[10]", 0x4002B0A8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[11]", 0x4002B0AC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[12]", 0x4002B0B0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[13]", 0x4002B0B4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[14]", 0x4002B0B8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[15]", 0x4002B0BC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[16]", 0x4002B0C0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[17]", 0x4002B0C4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[18]", 0x4002B0C8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[19]", 0x4002B0CC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[20]", 0x4002B0D0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[21]", 0x4002B0D4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[22]", 0x4002B0D8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[23]", 0x4002B0DC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[24]", 0x4002B0E0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[25]", 0x4002B0E4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[26]", 0x4002B0E8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[27]", 0x4002B0EC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[28]", 0x4002B0F0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[29]", 0x4002B0F4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[30]", 0x4002B0F8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[31]", 0x4002B0FC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[32]", 0x4002B100, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[33]", 0x4002B104, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[34]", 0x4002B108, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[35]", 0x4002B10C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[36]", 0x4002B110, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[37]", 0x4002B114, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[38]", 0x4002B118, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[39]", 0x4002B11C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[40]", 0x4002B120, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[41]", 0x4002B124, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[42]", 0x4002B128, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[43]", 0x4002B12C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[44]", 0x4002B130, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[45]", 0x4002B134, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[46]", 0x4002B138, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[47]", 0x4002B13C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[48]", 0x4002B140, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[49]", 0x4002B144, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[50]", 0x4002B148, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[51]", 0x4002B14C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[52]", 0x4002B150, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[53]", 0x4002B154, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[54]", 0x4002B158, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[55]", 0x4002B15C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[56]", 0x4002B160, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[57]", 0x4002B164, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[58]", 0x4002B168, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[59]", 0x4002B16C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[60]", 0x4002B170, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[61]", 0x4002B174, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[62]", 0x4002B178, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[63]", 0x4002B17C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[64]", 0x4002B180, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[65]", 0x4002B184, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[66]", 0x4002B188, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[67]", 0x4002B18C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[68]", 0x4002B190, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[69]", 0x4002B194, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[70]", 0x4002B198, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[71]", 0x4002B19C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[72]", 0x4002B1A0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[73]", 0x4002B1A4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[74]", 0x4002B1A8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[75]", 0x4002B1AC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[76]", 0x4002B1B0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[77]", 0x4002B1B4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[78]", 0x4002B1B8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[79]", 0x4002B1BC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[80]", 0x4002B1C0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[81]", 0x4002B1C4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[82]", 0x4002B1C8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[83]", 0x4002B1CC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[84]", 0x4002B1D0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[85]", 0x4002B1D4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[86]", 0x4002B1D8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[87]", 0x4002B1DC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[88]", 0x4002B1E0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[89]", 0x4002B1E4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[90]", 0x4002B1E8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[91]", 0x4002B1EC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[92]", 0x4002B1F0, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[93]", 0x4002B1F4, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[94]", 0x4002B1F8, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[95]", 0x4002B1FC, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[96]", 0x4002B200, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[97]", 0x4002B204, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[98]", 0x4002B208, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[99]", 0x4002B20C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[100]", 0x4002B210, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[101]", 0x4002B214, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[102]", 0x4002B218, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[103]", 0x4002B21C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[104]", 0x4002B220, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[105]", 0x4002B224, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[106]", 0x4002B228, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[107]", 0x4002B22C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[108]", 0x4002B230, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[109]", 0x4002B234, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[110]", 0x4002B238, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[111]", 0x4002B23C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[112]", 0x4002B240, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[113]", 0x4002B244, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[114]", 0x4002B248, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[115]", 0x4002B24C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[116]", 0x4002B250, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[117]", 0x4002B254, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[118]", 0x4002B258, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[119]", 0x4002B25C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[120]", 0x4002B260, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[121]", 0x4002B264, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[122]", 0x4002B268, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[123]", 0x4002B26C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[124]", 0x4002B270, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[125]", 0x4002B274, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[126]", 0x4002B278, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RAMn[127]", 0x4002B27C, 32, "Embedded RAM", [
                Field("DATA_BYTE_0", 24, 8, "Data byte 0 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_1", 16, 8, "Data byte 1 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_2", 8, 8, "Data byte 2 of Rx/Tx frame.", [
                ]),
                Field("DATA_BYTE_3", 0, 8, "Data byte 3 of Rx/Tx frame.", [
                ]),
            ]),
            Register("RXIMR[0]", 0x4002B880, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[1]", 0x4002B884, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[2]", 0x4002B888, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[3]", 0x4002B88C, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[4]", 0x4002B890, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[5]", 0x4002B894, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[6]", 0x4002B898, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[7]", 0x4002B89C, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[8]", 0x4002B8A0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[9]", 0x4002B8A4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[10]", 0x4002B8A8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[11]", 0x4002B8AC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[12]", 0x4002B8B0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[13]", 0x4002B8B4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[14]", 0x4002B8B8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[15]", 0x4002B8BC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[16]", 0x4002B8C0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[17]", 0x4002B8C4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[18]", 0x4002B8C8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[19]", 0x4002B8CC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[20]", 0x4002B8D0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[21]", 0x4002B8D4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[22]", 0x4002B8D8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[23]", 0x4002B8DC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[24]", 0x4002B8E0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[25]", 0x4002B8E4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[26]", 0x4002B8E8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[27]", 0x4002B8EC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[28]", 0x4002B8F0, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[29]", 0x4002B8F4, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[30]", 0x4002B8F8, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("RXIMR[31]", 0x4002B8FC, 32, "Rx Individual Mask Registers", [
                Field("MI", 0, 32, "Individual Mask Bits", [
                ]),
            ]),
            Register("FDCTRL", 0x4002BC00, 32, "CAN FD Control Register", [
                Field("FDRATE", 31, 1, "Bit Rate Switch Enable", [
                    EnumVal("nominal", "0", "Transmit a frame in nominal rate. The BRS bit in the Tx MB has no effect."),
                    EnumVal("bit_rate_switching", "0x1", "Transmit a frame with bit rate switching if the BRS bit in the Tx MB is recessive."),
                ]),
                Field("MBDSR0", 16, 2, "Message Buffer Data Size for Region 0", [
                    EnumVal("R0_8_bytes", "0", "Selects 8 bytes per message buffer."),
                    EnumVal("R0_16_bytes", "0x1", "Selects 16 bytes per message buffer."),
                    EnumVal("R0_32_bytes", "0x2", "Selects 32 bytes per message buffer."),
                    EnumVal("R0_64_bytes", "0x3", "Selects 64 bytes per message buffer."),
                ]),
                Field("TDCEN", 15, 1, "Transceiver Delay Compensation Enable", [
                    EnumVal("DISABLE", "0", "TDC is disabled"),
                    EnumVal("ENABLE", "0x1", "TDC is enabled"),
                ]),
                Field("TDCFAIL", 14, 1, "Transceiver Delay Compensation Fail", [
                    EnumVal("in_range", "0", "Measured loop delay is in range."),
                    EnumVal("out_of_range", "0x1", "Measured loop delay is out of range."),
                ]),
                Field("TDCOFF", 8, 5, "Transceiver Delay Compensation Offset", [
                ]),
                Field("TDCVAL", 0, 6, "Transceiver Delay Compensation Value", [
                ]),
            ]),
            Register("FDCBT", 0x4002BC04, 32, "CAN FD Bit Timing Register", [
                Field("FPRESDIV", 20, 10, "Fast Prescaler Division Factor", [
                ]),
                Field("FRJW", 16, 3, "Fast Resync Jump Width", [
                ]),
                Field("FPROPSEG", 10, 5, "Fast Propagation Segment", [
                ]),
                Field("FPSEG1", 5, 3, "Fast Phase Segment 1", [
                ]),
                Field("FPSEG2", 0, 3, "Fast Phase Segment 2", [
                ]),
            ]),
            Register("FDCRC", 0x4002BC08, 32, "CAN FD CRC Register", [
                Field("FD_MBCRC", 24, 7, "CRC Mailbox Number for FD_TXCRC", [
                ]),
                Field("FD_TXCRC", 0, 21, "Extended Transmitted CRC value", [
                ]),
            ]),
        ])

class Module_FLEXIO(Peripheral):
    def __init__(self):
        super().__init__("FLEXIO", 0x4005A000, 0x510, [
            Register("VERID", 0x4005A000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("FEATURE_0", "0", "Standard features implemented."),
                    EnumVal("FEATURE_1", "0x1", "Supports state, logic and parallel modes."),
                ]),
            ]),
            Register("PARAM", 0x4005A004, 32, "Parameter Register", [
                Field("TRIGGER", 24, 8, "Trigger Number", [
                ]),
                Field("PIN", 16, 8, "Pin Number", [
                ]),
                Field("TIMER", 8, 8, "Timer Number", [
                ]),
                Field("SHIFTER", 0, 8, "Shifter Number", [
                ]),
            ]),
            Register("CTRL", 0x4005A008, 32, "FlexIO Control Register", [
                Field("DOZEN", 31, 1, "Doze Enable", [
                    EnumVal("DOZEN_0", "0", "FlexIO enabled in Doze modes."),
                    EnumVal("DOZEN_1", "0x1", "FlexIO disabled in Doze modes."),
                ]),
                Field("DBGE", 30, 1, "Debug Enable", [
                    EnumVal("DBGE_0", "0", "FlexIO is disabled in debug modes."),
                    EnumVal("DBGE_1", "0x1", "FlexIO is enabled in debug modes"),
                ]),
                Field("FASTACC", 2, 1, "Fast Access", [
                    EnumVal("FASTACC_0", "0", "Configures for normal register accesses to FlexIO"),
                    EnumVal("FASTACC_1", "0x1", "Configures for fast register accesses to FlexIO"),
                ]),
                Field("SWRST", 1, 1, "Software Reset", [
                    EnumVal("SWRST_0", "0", "Software reset is disabled"),
                    EnumVal("SWRST_1", "0x1", "Software reset is enabled, all FlexIO registers except the Control Register are reset."),
                ]),
                Field("FLEXEN", 0, 1, "FlexIO Enable", [
                    EnumVal("FLEXEN_0", "0", "FlexIO module is disabled."),
                    EnumVal("FLEXEN_1", "0x1", "FlexIO module is enabled."),
                ]),
            ]),
            Register("PIN", 0x4005A00C, 32, "Pin State Register", [
                Field("PDI", 0, 8, "Pin Data Input", [
                ]),
            ]),
            Register("SHIFTSTAT", 0x4005A010, 32, "Shifter Status Register", [
                Field("SSF", 0, 4, "Shifter Status Flag", [
                ]),
            ]),
            Register("SHIFTERR", 0x4005A014, 32, "Shifter Error Register", [
                Field("SEF", 0, 4, "Shifter Error Flags", [
                ]),
            ]),
            Register("TIMSTAT", 0x4005A018, 32, "Timer Status Register", [
                Field("TSF", 0, 4, "Timer Status Flags", [
                ]),
            ]),
            Register("SHIFTSIEN", 0x4005A020, 32, "Shifter Status Interrupt Enable", [
                Field("SSIE", 0, 4, "Shifter Status Interrupt Enable", [
                ]),
            ]),
            Register("SHIFTEIEN", 0x4005A024, 32, "Shifter Error Interrupt Enable", [
                Field("SEIE", 0, 4, "Shifter Error Interrupt Enable", [
                ]),
            ]),
            Register("TIMIEN", 0x4005A028, 32, "Timer Interrupt Enable Register", [
                Field("TEIE", 0, 4, "Timer Status Interrupt Enable", [
                ]),
            ]),
            Register("SHIFTSDEN", 0x4005A030, 32, "Shifter Status DMA Enable", [
                Field("SSDE", 0, 4, "Shifter Status DMA Enable", [
                ]),
            ]),
            Register("SHIFTCTL[0]", 0x4005A080, 32, "Shifter Control N Register", [
                Field("TIMSEL", 24, 2, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("TIMPOL_0", "0", "Shift on posedge of Shift clock"),
                    EnumVal("TIMPOL_1", "0x1", "Shift on negedge of Shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Shifter pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Shifter pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 3, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("SMOD_0", "0", "Disabled."),
                    EnumVal("SMOD_1", "0x1", "Receive mode. Captures the current Shifter content into the SHIFTBUF on expiration of the Timer."),
                    EnumVal("SMOD_2", "0x2", "Transmit mode. Load SHIFTBUF contents into the Shifter on expiration of the Timer."),
                    EnumVal("SMOD_4", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the Timer."),
                    EnumVal("SMOD_5", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                ]),
            ]),
            Register("SHIFTCTL[1]", 0x4005A084, 32, "Shifter Control N Register", [
                Field("TIMSEL", 24, 2, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("TIMPOL_0", "0", "Shift on posedge of Shift clock"),
                    EnumVal("TIMPOL_1", "0x1", "Shift on negedge of Shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Shifter pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Shifter pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 3, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("SMOD_0", "0", "Disabled."),
                    EnumVal("SMOD_1", "0x1", "Receive mode. Captures the current Shifter content into the SHIFTBUF on expiration of the Timer."),
                    EnumVal("SMOD_2", "0x2", "Transmit mode. Load SHIFTBUF contents into the Shifter on expiration of the Timer."),
                    EnumVal("SMOD_4", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the Timer."),
                    EnumVal("SMOD_5", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                ]),
            ]),
            Register("SHIFTCTL[2]", 0x4005A088, 32, "Shifter Control N Register", [
                Field("TIMSEL", 24, 2, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("TIMPOL_0", "0", "Shift on posedge of Shift clock"),
                    EnumVal("TIMPOL_1", "0x1", "Shift on negedge of Shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Shifter pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Shifter pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 3, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("SMOD_0", "0", "Disabled."),
                    EnumVal("SMOD_1", "0x1", "Receive mode. Captures the current Shifter content into the SHIFTBUF on expiration of the Timer."),
                    EnumVal("SMOD_2", "0x2", "Transmit mode. Load SHIFTBUF contents into the Shifter on expiration of the Timer."),
                    EnumVal("SMOD_4", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the Timer."),
                    EnumVal("SMOD_5", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                ]),
            ]),
            Register("SHIFTCTL[3]", 0x4005A08C, 32, "Shifter Control N Register", [
                Field("TIMSEL", 24, 2, "Timer Select", [
                ]),
                Field("TIMPOL", 23, 1, "Timer Polarity", [
                    EnumVal("TIMPOL_0", "0", "Shift on posedge of Shift clock"),
                    EnumVal("TIMPOL_1", "0x1", "Shift on negedge of Shift clock"),
                ]),
                Field("PINCFG", 16, 2, "Shifter Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Shifter pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Shifter pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Shifter pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Shifter pin output"),
                ]),
                Field("PINSEL", 8, 3, "Shifter Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Shifter Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("SMOD", 0, 3, "Shifter Mode", [
                    EnumVal("SMOD_0", "0", "Disabled."),
                    EnumVal("SMOD_1", "0x1", "Receive mode. Captures the current Shifter content into the SHIFTBUF on expiration of the Timer."),
                    EnumVal("SMOD_2", "0x2", "Transmit mode. Load SHIFTBUF contents into the Shifter on expiration of the Timer."),
                    EnumVal("SMOD_4", "0x4", "Match Store mode. Shifter data is compared to SHIFTBUF content on expiration of the Timer."),
                    EnumVal("SMOD_5", "0x5", "Match Continuous mode. Shifter data is continuously compared to SHIFTBUF contents."),
                ]),
            ]),
            Register("SHIFTCFG[0]", 0x4005A100, 32, "Shifter Configuration N Register", [
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("INSRC_0", "0", "Pin"),
                    EnumVal("INSRC_1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("SSTOP_0", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("SSTOP_2", "0x2", "Transmitter outputs stop bit value 0 on store, receiver/match store sets error flag if stop bit is not 0"),
                    EnumVal("SSTOP_3", "0x3", "Transmitter outputs stop bit value 1 on store, receiver/match store sets error flag if stop bit is not 1"),
                ]),
                Field("SSTART", 0, 2, "Shifter Start bit", [
                    EnumVal("SSTART_0", "0", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on enable"),
                    EnumVal("SSTART_1", "0x1", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on first shift"),
                    EnumVal("SSTART_2", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift, receiver/match store sets error flag if start bit is not 0"),
                    EnumVal("SSTART_3", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift, receiver/match store sets error flag if start bit is not 1"),
                ]),
            ]),
            Register("SHIFTCFG[1]", 0x4005A104, 32, "Shifter Configuration N Register", [
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("INSRC_0", "0", "Pin"),
                    EnumVal("INSRC_1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("SSTOP_0", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("SSTOP_2", "0x2", "Transmitter outputs stop bit value 0 on store, receiver/match store sets error flag if stop bit is not 0"),
                    EnumVal("SSTOP_3", "0x3", "Transmitter outputs stop bit value 1 on store, receiver/match store sets error flag if stop bit is not 1"),
                ]),
                Field("SSTART", 0, 2, "Shifter Start bit", [
                    EnumVal("SSTART_0", "0", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on enable"),
                    EnumVal("SSTART_1", "0x1", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on first shift"),
                    EnumVal("SSTART_2", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift, receiver/match store sets error flag if start bit is not 0"),
                    EnumVal("SSTART_3", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift, receiver/match store sets error flag if start bit is not 1"),
                ]),
            ]),
            Register("SHIFTCFG[2]", 0x4005A108, 32, "Shifter Configuration N Register", [
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("INSRC_0", "0", "Pin"),
                    EnumVal("INSRC_1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("SSTOP_0", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("SSTOP_2", "0x2", "Transmitter outputs stop bit value 0 on store, receiver/match store sets error flag if stop bit is not 0"),
                    EnumVal("SSTOP_3", "0x3", "Transmitter outputs stop bit value 1 on store, receiver/match store sets error flag if stop bit is not 1"),
                ]),
                Field("SSTART", 0, 2, "Shifter Start bit", [
                    EnumVal("SSTART_0", "0", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on enable"),
                    EnumVal("SSTART_1", "0x1", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on first shift"),
                    EnumVal("SSTART_2", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift, receiver/match store sets error flag if start bit is not 0"),
                    EnumVal("SSTART_3", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift, receiver/match store sets error flag if start bit is not 1"),
                ]),
            ]),
            Register("SHIFTCFG[3]", 0x4005A10C, 32, "Shifter Configuration N Register", [
                Field("INSRC", 8, 1, "Input Source", [
                    EnumVal("INSRC_0", "0", "Pin"),
                    EnumVal("INSRC_1", "0x1", "Shifter N+1 Output"),
                ]),
                Field("SSTOP", 4, 2, "Shifter Stop bit", [
                    EnumVal("SSTOP_0", "0", "Stop bit disabled for transmitter/receiver/match store"),
                    EnumVal("SSTOP_2", "0x2", "Transmitter outputs stop bit value 0 on store, receiver/match store sets error flag if stop bit is not 0"),
                    EnumVal("SSTOP_3", "0x3", "Transmitter outputs stop bit value 1 on store, receiver/match store sets error flag if stop bit is not 1"),
                ]),
                Field("SSTART", 0, 2, "Shifter Start bit", [
                    EnumVal("SSTART_0", "0", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on enable"),
                    EnumVal("SSTART_1", "0x1", "Start bit disabled for transmitter/receiver/match store, transmitter loads data on first shift"),
                    EnumVal("SSTART_2", "0x2", "Transmitter outputs start bit value 0 before loading data on first shift, receiver/match store sets error flag if start bit is not 0"),
                    EnumVal("SSTART_3", "0x3", "Transmitter outputs start bit value 1 before loading data on first shift, receiver/match store sets error flag if start bit is not 1"),
                ]),
            ]),
            Register("SHIFTBUF[0]", 0x4005A200, 32, "Shifter Buffer N Register", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[1]", 0x4005A204, 32, "Shifter Buffer N Register", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[2]", 0x4005A208, 32, "Shifter Buffer N Register", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUF[3]", 0x4005A20C, 32, "Shifter Buffer N Register", [
                Field("SHIFTBUF", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[0]", 0x4005A280, 32, "Shifter Buffer N Bit Swapped Register", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[1]", 0x4005A284, 32, "Shifter Buffer N Bit Swapped Register", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[2]", 0x4005A288, 32, "Shifter Buffer N Bit Swapped Register", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBIS[3]", 0x4005A28C, 32, "Shifter Buffer N Bit Swapped Register", [
                Field("SHIFTBUFBIS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[0]", 0x4005A300, 32, "Shifter Buffer N Byte Swapped Register", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[1]", 0x4005A304, 32, "Shifter Buffer N Byte Swapped Register", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[2]", 0x4005A308, 32, "Shifter Buffer N Byte Swapped Register", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBYS[3]", 0x4005A30C, 32, "Shifter Buffer N Byte Swapped Register", [
                Field("SHIFTBUFBYS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[0]", 0x4005A380, 32, "Shifter Buffer N Bit Byte Swapped Register", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[1]", 0x4005A384, 32, "Shifter Buffer N Bit Byte Swapped Register", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[2]", 0x4005A388, 32, "Shifter Buffer N Bit Byte Swapped Register", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("SHIFTBUFBBS[3]", 0x4005A38C, 32, "Shifter Buffer N Bit Byte Swapped Register", [
                Field("SHIFTBUFBBS", 0, 32, "Shift Buffer", [
                ]),
            ]),
            Register("TIMCTL[0]", 0x4005A400, 32, "Timer Control N Register", [
                Field("TRGSEL", 24, 4, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("TRGPOL_0", "0", "Trigger active high"),
                    EnumVal("TRGPOL_1", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("TRGSRC_0", "0", "External trigger selected"),
                    EnumVal("TRGSRC_1", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Timer pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Timer pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 3, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("TIMOD", 0, 2, "Timer Mode", [
                    EnumVal("TIMOD_0", "0", "Timer Disabled."),
                    EnumVal("TIMOD_1", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("TIMOD_2", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("TIMOD_3", "0x3", "Single 16-bit counter mode."),
                ]),
            ]),
            Register("TIMCTL[1]", 0x4005A404, 32, "Timer Control N Register", [
                Field("TRGSEL", 24, 4, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("TRGPOL_0", "0", "Trigger active high"),
                    EnumVal("TRGPOL_1", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("TRGSRC_0", "0", "External trigger selected"),
                    EnumVal("TRGSRC_1", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Timer pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Timer pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 3, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("TIMOD", 0, 2, "Timer Mode", [
                    EnumVal("TIMOD_0", "0", "Timer Disabled."),
                    EnumVal("TIMOD_1", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("TIMOD_2", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("TIMOD_3", "0x3", "Single 16-bit counter mode."),
                ]),
            ]),
            Register("TIMCTL[2]", 0x4005A408, 32, "Timer Control N Register", [
                Field("TRGSEL", 24, 4, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("TRGPOL_0", "0", "Trigger active high"),
                    EnumVal("TRGPOL_1", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("TRGSRC_0", "0", "External trigger selected"),
                    EnumVal("TRGSRC_1", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Timer pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Timer pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 3, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("TIMOD", 0, 2, "Timer Mode", [
                    EnumVal("TIMOD_0", "0", "Timer Disabled."),
                    EnumVal("TIMOD_1", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("TIMOD_2", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("TIMOD_3", "0x3", "Single 16-bit counter mode."),
                ]),
            ]),
            Register("TIMCTL[3]", 0x4005A40C, 32, "Timer Control N Register", [
                Field("TRGSEL", 24, 4, "Trigger Select", [
                ]),
                Field("TRGPOL", 23, 1, "Trigger Polarity", [
                    EnumVal("TRGPOL_0", "0", "Trigger active high"),
                    EnumVal("TRGPOL_1", "0x1", "Trigger active low"),
                ]),
                Field("TRGSRC", 22, 1, "Trigger Source", [
                    EnumVal("TRGSRC_0", "0", "External trigger selected"),
                    EnumVal("TRGSRC_1", "0x1", "Internal trigger selected"),
                ]),
                Field("PINCFG", 16, 2, "Timer Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "Timer pin output disabled"),
                    EnumVal("PINCFG_1", "0x1", "Timer pin open drain or bidirectional output enable"),
                    EnumVal("PINCFG_2", "0x2", "Timer pin bidirectional output data"),
                    EnumVal("PINCFG_3", "0x3", "Timer pin output"),
                ]),
                Field("PINSEL", 8, 3, "Timer Pin Select", [
                ]),
                Field("PINPOL", 7, 1, "Timer Pin Polarity", [
                    EnumVal("PINPOL_0", "0", "Pin is active high"),
                    EnumVal("PINPOL_1", "0x1", "Pin is active low"),
                ]),
                Field("TIMOD", 0, 2, "Timer Mode", [
                    EnumVal("TIMOD_0", "0", "Timer Disabled."),
                    EnumVal("TIMOD_1", "0x1", "Dual 8-bit counters baud mode."),
                    EnumVal("TIMOD_2", "0x2", "Dual 8-bit counters PWM high mode."),
                    EnumVal("TIMOD_3", "0x3", "Single 16-bit counter mode."),
                ]),
            ]),
            Register("TIMCFG[0]", 0x4005A480, 32, "Timer Configuration N Register", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("TIMOUT_0", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_1", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_2", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("TIMOUT_3", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 2, "Timer Decrement", [
                    EnumVal("TIMDEC_0", "0", "Decrement counter on FlexIO clock, Shift clock equals Timer output."),
                    EnumVal("TIMDEC_1", "0x1", "Decrement counter on Trigger input (both edges), Shift clock equals Timer output."),
                    EnumVal("TIMDEC_2", "0x2", "Decrement counter on Pin input (both edges), Shift clock equals Pin input."),
                    EnumVal("TIMDEC_3", "0x3", "Decrement counter on Trigger input (both edges), Shift clock equals Trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("TIMRST_0", "0", "Timer never reset"),
                    EnumVal("TIMRST_2", "0x2", "Timer reset on Timer Pin equal to Timer Output"),
                    EnumVal("TIMRST_3", "0x3", "Timer reset on Timer Trigger equal to Timer Output"),
                    EnumVal("TIMRST_4", "0x4", "Timer reset on Timer Pin rising edge"),
                    EnumVal("TIMRST_6", "0x6", "Timer reset on Trigger rising edge"),
                    EnumVal("TIMRST_7", "0x7", "Timer reset on Trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("TIMDIS_0", "0", "Timer never disabled"),
                    EnumVal("TIMDIS_1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("TIMDIS_2", "0x2", "Timer disabled on Timer compare (upper 8-bits match and decrement)"),
                    EnumVal("TIMDIS_3", "0x3", "Timer disabled on Timer compare (upper 8-bits match and decrement) and Trigger Low"),
                    EnumVal("TIMDIS_4", "0x4", "Timer disabled on Pin rising or falling edge"),
                    EnumVal("TIMDIS_5", "0x5", "Timer disabled on Pin rising or falling edge provided Trigger is high"),
                    EnumVal("TIMDIS_6", "0x6", "Timer disabled on Trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("TIMENA_0", "0", "Timer always enabled"),
                    EnumVal("TIMENA_1", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("TIMENA_2", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("TIMENA_3", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("TIMENA_4", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("TIMENA_5", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("TIMENA_6", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("TIMENA_7", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("TSTOP_0", "0", "Stop bit disabled"),
                    EnumVal("TSTOP_1", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("TSTOP_2", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("TSTOP_3", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("TSTART_0", "0", "Start bit disabled"),
                    EnumVal("TSTART_1", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[1]", 0x4005A484, 32, "Timer Configuration N Register", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("TIMOUT_0", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_1", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_2", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("TIMOUT_3", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 2, "Timer Decrement", [
                    EnumVal("TIMDEC_0", "0", "Decrement counter on FlexIO clock, Shift clock equals Timer output."),
                    EnumVal("TIMDEC_1", "0x1", "Decrement counter on Trigger input (both edges), Shift clock equals Timer output."),
                    EnumVal("TIMDEC_2", "0x2", "Decrement counter on Pin input (both edges), Shift clock equals Pin input."),
                    EnumVal("TIMDEC_3", "0x3", "Decrement counter on Trigger input (both edges), Shift clock equals Trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("TIMRST_0", "0", "Timer never reset"),
                    EnumVal("TIMRST_2", "0x2", "Timer reset on Timer Pin equal to Timer Output"),
                    EnumVal("TIMRST_3", "0x3", "Timer reset on Timer Trigger equal to Timer Output"),
                    EnumVal("TIMRST_4", "0x4", "Timer reset on Timer Pin rising edge"),
                    EnumVal("TIMRST_6", "0x6", "Timer reset on Trigger rising edge"),
                    EnumVal("TIMRST_7", "0x7", "Timer reset on Trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("TIMDIS_0", "0", "Timer never disabled"),
                    EnumVal("TIMDIS_1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("TIMDIS_2", "0x2", "Timer disabled on Timer compare (upper 8-bits match and decrement)"),
                    EnumVal("TIMDIS_3", "0x3", "Timer disabled on Timer compare (upper 8-bits match and decrement) and Trigger Low"),
                    EnumVal("TIMDIS_4", "0x4", "Timer disabled on Pin rising or falling edge"),
                    EnumVal("TIMDIS_5", "0x5", "Timer disabled on Pin rising or falling edge provided Trigger is high"),
                    EnumVal("TIMDIS_6", "0x6", "Timer disabled on Trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("TIMENA_0", "0", "Timer always enabled"),
                    EnumVal("TIMENA_1", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("TIMENA_2", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("TIMENA_3", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("TIMENA_4", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("TIMENA_5", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("TIMENA_6", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("TIMENA_7", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("TSTOP_0", "0", "Stop bit disabled"),
                    EnumVal("TSTOP_1", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("TSTOP_2", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("TSTOP_3", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("TSTART_0", "0", "Start bit disabled"),
                    EnumVal("TSTART_1", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[2]", 0x4005A488, 32, "Timer Configuration N Register", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("TIMOUT_0", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_1", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_2", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("TIMOUT_3", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 2, "Timer Decrement", [
                    EnumVal("TIMDEC_0", "0", "Decrement counter on FlexIO clock, Shift clock equals Timer output."),
                    EnumVal("TIMDEC_1", "0x1", "Decrement counter on Trigger input (both edges), Shift clock equals Timer output."),
                    EnumVal("TIMDEC_2", "0x2", "Decrement counter on Pin input (both edges), Shift clock equals Pin input."),
                    EnumVal("TIMDEC_3", "0x3", "Decrement counter on Trigger input (both edges), Shift clock equals Trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("TIMRST_0", "0", "Timer never reset"),
                    EnumVal("TIMRST_2", "0x2", "Timer reset on Timer Pin equal to Timer Output"),
                    EnumVal("TIMRST_3", "0x3", "Timer reset on Timer Trigger equal to Timer Output"),
                    EnumVal("TIMRST_4", "0x4", "Timer reset on Timer Pin rising edge"),
                    EnumVal("TIMRST_6", "0x6", "Timer reset on Trigger rising edge"),
                    EnumVal("TIMRST_7", "0x7", "Timer reset on Trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("TIMDIS_0", "0", "Timer never disabled"),
                    EnumVal("TIMDIS_1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("TIMDIS_2", "0x2", "Timer disabled on Timer compare (upper 8-bits match and decrement)"),
                    EnumVal("TIMDIS_3", "0x3", "Timer disabled on Timer compare (upper 8-bits match and decrement) and Trigger Low"),
                    EnumVal("TIMDIS_4", "0x4", "Timer disabled on Pin rising or falling edge"),
                    EnumVal("TIMDIS_5", "0x5", "Timer disabled on Pin rising or falling edge provided Trigger is high"),
                    EnumVal("TIMDIS_6", "0x6", "Timer disabled on Trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("TIMENA_0", "0", "Timer always enabled"),
                    EnumVal("TIMENA_1", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("TIMENA_2", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("TIMENA_3", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("TIMENA_4", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("TIMENA_5", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("TIMENA_6", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("TIMENA_7", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("TSTOP_0", "0", "Stop bit disabled"),
                    EnumVal("TSTOP_1", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("TSTOP_2", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("TSTOP_3", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("TSTART_0", "0", "Start bit disabled"),
                    EnumVal("TSTART_1", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCFG[3]", 0x4005A48C, 32, "Timer Configuration N Register", [
                Field("TIMOUT", 24, 2, "Timer Output", [
                    EnumVal("TIMOUT_0", "0", "Timer output is logic one when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_1", "0x1", "Timer output is logic zero when enabled and is not affected by timer reset"),
                    EnumVal("TIMOUT_2", "0x2", "Timer output is logic one when enabled and on timer reset"),
                    EnumVal("TIMOUT_3", "0x3", "Timer output is logic zero when enabled and on timer reset"),
                ]),
                Field("TIMDEC", 20, 2, "Timer Decrement", [
                    EnumVal("TIMDEC_0", "0", "Decrement counter on FlexIO clock, Shift clock equals Timer output."),
                    EnumVal("TIMDEC_1", "0x1", "Decrement counter on Trigger input (both edges), Shift clock equals Timer output."),
                    EnumVal("TIMDEC_2", "0x2", "Decrement counter on Pin input (both edges), Shift clock equals Pin input."),
                    EnumVal("TIMDEC_3", "0x3", "Decrement counter on Trigger input (both edges), Shift clock equals Trigger input."),
                ]),
                Field("TIMRST", 16, 3, "Timer Reset", [
                    EnumVal("TIMRST_0", "0", "Timer never reset"),
                    EnumVal("TIMRST_2", "0x2", "Timer reset on Timer Pin equal to Timer Output"),
                    EnumVal("TIMRST_3", "0x3", "Timer reset on Timer Trigger equal to Timer Output"),
                    EnumVal("TIMRST_4", "0x4", "Timer reset on Timer Pin rising edge"),
                    EnumVal("TIMRST_6", "0x6", "Timer reset on Trigger rising edge"),
                    EnumVal("TIMRST_7", "0x7", "Timer reset on Trigger rising or falling edge"),
                ]),
                Field("TIMDIS", 12, 3, "Timer Disable", [
                    EnumVal("TIMDIS_0", "0", "Timer never disabled"),
                    EnumVal("TIMDIS_1", "0x1", "Timer disabled on Timer N-1 disable"),
                    EnumVal("TIMDIS_2", "0x2", "Timer disabled on Timer compare (upper 8-bits match and decrement)"),
                    EnumVal("TIMDIS_3", "0x3", "Timer disabled on Timer compare (upper 8-bits match and decrement) and Trigger Low"),
                    EnumVal("TIMDIS_4", "0x4", "Timer disabled on Pin rising or falling edge"),
                    EnumVal("TIMDIS_5", "0x5", "Timer disabled on Pin rising or falling edge provided Trigger is high"),
                    EnumVal("TIMDIS_6", "0x6", "Timer disabled on Trigger falling edge"),
                ]),
                Field("TIMENA", 8, 3, "Timer Enable", [
                    EnumVal("TIMENA_0", "0", "Timer always enabled"),
                    EnumVal("TIMENA_1", "0x1", "Timer enabled on Timer N-1 enable"),
                    EnumVal("TIMENA_2", "0x2", "Timer enabled on Trigger high"),
                    EnumVal("TIMENA_3", "0x3", "Timer enabled on Trigger high and Pin high"),
                    EnumVal("TIMENA_4", "0x4", "Timer enabled on Pin rising edge"),
                    EnumVal("TIMENA_5", "0x5", "Timer enabled on Pin rising edge and Trigger high"),
                    EnumVal("TIMENA_6", "0x6", "Timer enabled on Trigger rising edge"),
                    EnumVal("TIMENA_7", "0x7", "Timer enabled on Trigger rising or falling edge"),
                ]),
                Field("TSTOP", 4, 2, "Timer Stop Bit", [
                    EnumVal("TSTOP_0", "0", "Stop bit disabled"),
                    EnumVal("TSTOP_1", "0x1", "Stop bit is enabled on timer compare"),
                    EnumVal("TSTOP_2", "0x2", "Stop bit is enabled on timer disable"),
                    EnumVal("TSTOP_3", "0x3", "Stop bit is enabled on timer compare and timer disable"),
                ]),
                Field("TSTART", 1, 1, "Timer Start Bit", [
                    EnumVal("TSTART_0", "0", "Start bit disabled"),
                    EnumVal("TSTART_1", "0x1", "Start bit enabled"),
                ]),
            ]),
            Register("TIMCMP[0]", 0x4005A500, 32, "Timer Compare N Register", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[1]", 0x4005A504, 32, "Timer Compare N Register", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[2]", 0x4005A508, 32, "Timer Compare N Register", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
            Register("TIMCMP[3]", 0x4005A50C, 32, "Timer Compare N Register", [
                Field("CMP", 0, 16, "Timer Compare Value", [
                ]),
            ]),
        ])

class Module_FTFC(Peripheral):
    def __init__(self):
        super().__init__("FTFC", 0x40020000, 0x30, [
            Register("FSTAT", 0x40020000, 8, "Flash Status Register", [
                Field("CCIF", 7, 1, "Command Complete Interrupt Flag", [
                    EnumVal("CCIF_0", "0", "FTFC command or emulated EEPROM file system operation in progress"),
                    EnumVal("CCIF_1", "0x1", "FTFC command or emulated EEPROM file system operation has completed"),
                ]),
                Field("RDCOLERR", 6, 1, "FTFC Read Collision Error Flag", [
                    EnumVal("RDCOLERR_0", "0", "No collision error detected"),
                    EnumVal("RDCOLERR_1", "0x1", "Collision error detected"),
                ]),
                Field("ACCERR", 5, 1, "Flash Access Error Flag", [
                    EnumVal("ACCERR_0", "0", "No access error detected"),
                    EnumVal("ACCERR_1", "0x1", "Access error detected"),
                ]),
                Field("FPVIOL", 4, 1, "Flash Protection Violation Flag", [
                    EnumVal("FPVIOL_0", "0", "No protection violation detected"),
                    EnumVal("FPVIOL_1", "0x1", "Protection violation detected"),
                ]),
                Field("MGSTAT0", 0, 1, "Memory Controller Command Completion Status Flag", [
                ]),
            ]),
            Register("FCNFG", 0x40020001, 8, "Flash Configuration Register", [
                Field("CCIE", 7, 1, "Command Complete Interrupt Enable", [
                    EnumVal("CCIE_0", "0", "Command complete interrupt disabled"),
                    EnumVal("CCIE_1", "0x1", "Command complete interrupt enabled. An interrupt request is generated whenever the FSTAT[CCIF] flag is set."),
                ]),
                Field("RDCOLLIE", 6, 1, "Read Collision Error Interrupt Enable", [
                    EnumVal("RDCOLLIE_0", "0", "Read collision error interrupt disabled"),
                    EnumVal("RDCOLLIE_1", "0x1", "Read collision error interrupt enabled. An interrupt request is generated whenever an FTFC read collision error is detected (see the description of FSTAT[RDCOLERR])."),
                ]),
                Field("ERSAREQ", 5, 1, "Erase All Request", [
                    EnumVal("ERSAREQ_0", "0", "No request or request complete"),
                    EnumVal("ERSAREQ_1", "0x1", "Request to: (1) run the Erase All Blocks command, (2) verify the erased state, (3) program the security byte in the Flash Configuration Field to the unsecure state, and (4) release MCU security by setting the FSEC[SEC] field to the unsecure state."),
                ]),
                Field("ERSSUSP", 4, 1, "Erase Suspend", [
                    EnumVal("ERSSUSP_0", "0", "No suspend requested"),
                    EnumVal("ERSSUSP_1", "0x1", "Suspend the current Erase Flash Sector command execution"),
                ]),
                Field("RAMRDY", 1, 1, "RAM Ready", [
                    EnumVal("RAMRDY_0", "0", "FlexRAM is not available for traditional RAM access"),
                    EnumVal("RAMRDY_1", "0x1", "FlexRAM is available as traditional RAM only; writes to the FlexRAM do not trigger EEPROM operations"),
                ]),
                Field("EEERDY", 0, 1, "EEERDY", [
                    EnumVal("EEERDY_0", "0", "FlexRAM is not available for emulated EEPROM operation"),
                    EnumVal("EEERDY_1", "0x1", "FlexRAM is available for EEPROM operations where: (1) reads from the FlexRAM return data previously written to the FlexRAM in emulated EEPROM mode and (2) writes launch an EEPROM operation to store the written data in the FlexRAM and EEPROM backup."),
                ]),
            ]),
            Register("FSEC", 0x40020002, 8, "Flash Security Register", [
                Field("KEYEN", 6, 2, "Backdoor Key Security Enable", [
                    EnumVal("KEYEN_0", "0", "Backdoor key access disabled"),
                    EnumVal("KEYEN_1", "0x1", "Backdoor key access disabled (preferred KEYEN state to disable backdoor key access)"),
                    EnumVal("KEYEN_2", "0x2", "Backdoor key access enabled"),
                    EnumVal("KEYEN_3", "0x3", "Backdoor key access disabled"),
                ]),
                Field("MEEN", 4, 2, "Mass Erase Enable Bits", [
                    EnumVal("MEEN_0", "0", "Mass erase is enabled"),
                    EnumVal("MEEN_1", "0x1", "Mass erase is enabled"),
                    EnumVal("MEEN_2", "0x2", "Mass erase is disabled"),
                    EnumVal("MEEN_3", "0x3", "Mass erase is enabled"),
                ]),
                Field("FSLACC", 2, 2, "Factory Failure Analysis Access Code", [
                    EnumVal("FSLACC_0", "0", "Factory access granted"),
                    EnumVal("FSLACC_1", "0x1", "Factory access denied"),
                    EnumVal("FSLACC_2", "0x2", "Factory access denied"),
                    EnumVal("FSLACC_3", "0x3", "Factory access granted"),
                ]),
                Field("SEC", 0, 2, "Flash Security", [
                    EnumVal("SEC_0", "0", "MCU security status is secure"),
                    EnumVal("SEC_1", "0x1", "MCU security status is secure"),
                    EnumVal("SEC_2", "0x2", "MCU security status is unsecure (The standard shipping condition of the FTFC is unsecure.)"),
                    EnumVal("SEC_3", "0x3", "MCU security status is secure"),
                ]),
            ]),
            Register("FOPT", 0x40020003, 8, "Flash Option Register", [
                Field("OPT", 0, 8, "Nonvolatile Option", [
                ]),
            ]),
            Register("FCCOB0", 0x40020004, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB1", 0x40020005, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB2", 0x40020006, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB3", 0x40020007, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB4", 0x40020008, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB5", 0x40020009, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB6", 0x4002000A, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB7", 0x4002000B, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB8", 0x4002000C, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB9", 0x4002000D, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB10", 0x4002000E, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FCCOB11", 0x4002000F, 8, "Flash Common Command Object Registers", [
                Field("CCOBn", 0, 8, "CCOBn", [
                ]),
            ]),
            Register("FPROT0", 0x40020010, 8, "Program Flash Protection Registers", [
                Field("PROT", 0, 8, "Program Flash Region Protect", [
                ]),
            ]),
            Register("FPROT1", 0x40020011, 8, "Program Flash Protection Registers", [
                Field("PROT", 0, 8, "Program Flash Region Protect", [
                ]),
            ]),
            Register("FPROT2", 0x40020012, 8, "Program Flash Protection Registers", [
                Field("PROT", 0, 8, "Program Flash Region Protect", [
                ]),
            ]),
            Register("FPROT3", 0x40020013, 8, "Program Flash Protection Registers", [
                Field("PROT", 0, 8, "Program Flash Region Protect", [
                ]),
            ]),
            Register("FEPROT", 0x40020016, 8, "EEPROM Protection Register", [
                Field("EPROT", 0, 8, "EEPROM Region Protect", [
                    EnumVal("EPROT_0", "0", "EEPROM region is protected"),
                    EnumVal("EPROT_1", "0x1", "EEPROM region is not protected"),
                ]),
            ]),
            Register("FDPROT", 0x40020017, 8, "Data Flash Protection Register", [
                Field("DPROT", 0, 8, "Data Flash Region Protect", [
                    EnumVal("DPROT_0", "0", "Data Flash region is protected"),
                    EnumVal("DPROT_1", "0x1", "Data Flash region is not protected"),
                ]),
            ]),
            Register("FCSESTAT", 0x4002002C, 8, "Flash CSEc Status Register", [
                Field("IDB", 7, 1, "Internal Debug", [
                    EnumVal("IDB_0", "0", "Internal debug functions are disabled"),
                    EnumVal("IDB_1", "0x1", "Internal debugger functions are enabled"),
                ]),
                Field("EDB", 6, 1, "External Debug", [
                    EnumVal("EDB_0", "0", "External debugger not attached"),
                    EnumVal("EDB_1", "0x1", "External debugger is attached"),
                ]),
                Field("RIN", 5, 1, "Random Number Generator Initialized", [
                    EnumVal("RIN_0", "0", "Random number generator is not initialized."),
                    EnumVal("RIN_1", "0x1", "Random number generator is initialized."),
                ]),
                Field("BOK", 4, 1, "Secure Boot OK", [
                    EnumVal("BOK_0", "0", "Secure boot is not complete, or secure boot failure"),
                    EnumVal("BOK_1", "0x1", "Secure boot was successful."),
                ]),
                Field("BFN", 3, 1, "Secure Boot Finished", [
                    EnumVal("BFN_0", "0", "Secure Boot is not finished."),
                    EnumVal("BFN_1", "0x1", "Secure Boot has finished"),
                ]),
                Field("BIN", 2, 1, "Secure Boot Initialization", [
                    EnumVal("BIN_0", "0", "Secure boot personalization not completed."),
                    EnumVal("BIN_1", "0x1", "Secure boot personalization has completed"),
                ]),
                Field("SB", 1, 1, "Secure Boot", [
                    EnumVal("SB_0", "0", "Secure boot not activated"),
                    EnumVal("SB_1", "0x1", "Secure boot is activated"),
                ]),
                Field("BSY", 0, 1, "Busy", [
                    EnumVal("BSY_0", "0", "CSEc command processing has completed"),
                    EnumVal("BSY_1", "0x1", "CSEc command processing is in progress"),
                ]),
            ]),
            Register("FERSTAT", 0x4002002E, 8, "Flash Error Status Register", [
                Field("DFDIF", 1, 1, "Double Bit Fault Detect Interrupt Flag", [
                    EnumVal("DFDIF_0", "0", "Double bit fault not detected during a valid flash read access from the platform flash controller"),
                    EnumVal("DFDIF_1", "0x1", "Double bit fault detected (or FERCNFG[FDFD] is set) during a valid flash read access from the platform flash controller"),
                ]),
            ]),
            Register("FERCNFG", 0x4002002F, 8, "Flash Error Configuration Register", [
                Field("FDFD", 5, 1, "Force Double Bit Fault Detect", [
                    EnumVal("FDFD_0", "0", "FERSTAT[DFDIF] sets only if a double bit fault is detected during read access from the platform flash controller"),
                    EnumVal("FDFD_1", "0x1", "FERSTAT[DFDIF] sets during any valid flash read access from the platform flash controller. An interrupt request is generated if the DFDIE bit is set."),
                ]),
                Field("DFDIE", 1, 1, "Double Bit Fault Detect Interrupt Enable", [
                    EnumVal("DFDIE_0", "0", "Double bit fault detect interrupt disabled"),
                    EnumVal("DFDIE_1", "0x1", "Double bit fault detect interrupt enabled. An interrupt request is generated whenever the FERSTAT[DFDIF] flag is set."),
                ]),
            ]),
        ])

class Module_FTM0(Peripheral):
    def __init__(self):
        super().__init__("FTM0", 0x40038000, 0xBC, [
            Register("SC", 0x40038000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x40038004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x40038008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4003804C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x40038050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x40038054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x40038058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4003805C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x40038060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x40038064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x40038068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4003806C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x40038070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x40038074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF3", 3, 1, "Fault Detection Flag 3", [
                    EnumVal("FAULTF3_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF3_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF2", 2, 1, "Fault Detection Flag 2", [
                    EnumVal("FAULTF2_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF2_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x40038078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4003807C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR3EN", 7, 1, "Fault Input 3 Filter Enable", [
                    EnumVal("FFLTR3EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR3EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR2EN", 6, 1, "Fault Input 2 Filter Enable", [
                    EnumVal("FFLTR2EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR2EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT3EN", 3, 1, "Fault Input 3 Enable", [
                    EnumVal("FAULT3EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT3EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT2EN", 2, 1, "Fault Input 2 Enable", [
                    EnumVal("FAULT2EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT2EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("CONF", 0x40038084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x40038088, 32, "FTM Fault Input Polarity", [
                Field("FLT3POL", 3, 1, "Fault Input 3 Polarity", [
                    EnumVal("FLT3POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT3POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT2POL", 2, 1, "Fault Input 2 Polarity", [
                    EnumVal("FLT2POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT2POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4003808C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x40038090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x40038094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x40038098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4003809C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x400380A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x400380A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x400380B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x400380B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
        ])

class Module_FTM1(Peripheral):
    def __init__(self):
        super().__init__("FTM1", 0x40039000, 0x224, [
            Register("SC", 0x40039000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x40039004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x40039008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4003904C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x40039050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x40039054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x40039058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4003905C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x40039060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x40039064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x40039068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4003906C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x40039070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x40039074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF3", 3, 1, "Fault Detection Flag 3", [
                    EnumVal("FAULTF3_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF3_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF2", 2, 1, "Fault Detection Flag 2", [
                    EnumVal("FAULTF2_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF2_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x40039078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4003907C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR3EN", 7, 1, "Fault Input 3 Filter Enable", [
                    EnumVal("FFLTR3EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR3EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR2EN", 6, 1, "Fault Input 2 Filter Enable", [
                    EnumVal("FFLTR2EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR2EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT3EN", 3, 1, "Fault Input 3 Enable", [
                    EnumVal("FAULT3EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT3EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT2EN", 2, 1, "Fault Input 2 Enable", [
                    EnumVal("FAULT2EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT2EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("QDCTRL", 0x40039080, 32, "Quadrature Decoder Control And Status", [
                Field("PHAFLTREN", 7, 1, "Phase A Input Filter Enable", [
                    EnumVal("PHAFLTREN_0", "0", "Phase A input filter is disabled."),
                    EnumVal("PHAFLTREN_1", "0x1", "Phase A input filter is enabled."),
                ]),
                Field("PHBFLTREN", 6, 1, "Phase B Input Filter Enable", [
                    EnumVal("PHBFLTREN_0", "0", "Phase B input filter is disabled."),
                    EnumVal("PHBFLTREN_1", "0x1", "Phase B input filter is enabled."),
                ]),
                Field("PHAPOL", 5, 1, "Phase A Input Polarity", [
                    EnumVal("PHAPOL_0", "0", "Normal polarity. Phase A input signal is not inverted before identifying the rising and falling edges of this signal."),
                    EnumVal("PHAPOL_1", "0x1", "Inverted polarity. Phase A input signal is inverted before identifying the rising and falling edges of this signal."),
                ]),
                Field("PHBPOL", 4, 1, "Phase B Input Polarity", [
                    EnumVal("PHBPOL_0", "0", "Normal polarity. Phase B input signal is not inverted before identifying the rising and falling edges of this signal."),
                    EnumVal("PHBPOL_1", "0x1", "Inverted polarity. Phase B input signal is inverted before identifying the rising and falling edges of this signal."),
                ]),
                Field("QUADMODE", 3, 1, "Quadrature Decoder Mode", [
                    EnumVal("QUADMODE_0", "0", "Phase A and phase B encoding mode."),
                    EnumVal("QUADMODE_1", "0x1", "Count and direction encoding mode."),
                ]),
                Field("QUADIR", 2, 1, "FTM Counter Direction In Quadrature Decoder Mode", [
                    EnumVal("QUADIR_0", "0", "Counting direction is decreasing (FTM counter decrement)."),
                    EnumVal("QUADIR_1", "0x1", "Counting direction is increasing (FTM counter increment)."),
                ]),
                Field("TOFDIR", 1, 1, "Timer Overflow Direction In Quadrature Decoder Mode", [
                    EnumVal("TOFDIR_0", "0", "TOF bit was set on the bottom of counting. There was an FTM counter decrement and FTM counter changes from its minimum value (CNTIN register) to its maximum value (MOD register)."),
                    EnumVal("TOFDIR_1", "0x1", "TOF bit was set on the top of counting. There was an FTM counter increment and FTM counter changes from its maximum value (MOD register) to its minimum value (CNTIN register)."),
                ]),
                Field("QUADEN", 0, 1, "Quadrature Decoder Mode Enable", [
                    EnumVal("QUADEN_0", "0", "Quadrature Decoder mode is disabled."),
                    EnumVal("QUADEN_1", "0x1", "Quadrature Decoder mode is enabled."),
                ]),
            ]),
            Register("CONF", 0x40039084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x40039088, 32, "FTM Fault Input Polarity", [
                Field("FLT3POL", 3, 1, "Fault Input 3 Polarity", [
                    EnumVal("FLT3POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT3POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT2POL", 2, 1, "Fault Input 2 Polarity", [
                    EnumVal("FLT2POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT2POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4003908C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x40039090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x40039094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x40039098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4003909C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x400390A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x400390A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x400390B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x400390B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("MOD_MIRROR", 0x40039200, 32, "Mirror of Modulo Value", [
                Field("MOD", 16, 16, "Mirror of the Modulo Integer Value", [
                ]),
                Field("FRACMOD", 11, 5, "Modulo Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[0]", 0x40039204, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[1]", 0x40039208, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[2]", 0x4003920C, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[3]", 0x40039210, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[4]", 0x40039214, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[5]", 0x40039218, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[6]", 0x4003921C, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[7]", 0x40039220, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
        ])

class Module_FTM2(Peripheral):
    def __init__(self):
        super().__init__("FTM2", 0x4003A000, 0x224, [
            Register("SC", 0x4003A000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x4003A004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x4003A008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4003A04C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x4003A050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x4003A054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x4003A058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4003A05C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x4003A060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x4003A064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x4003A068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4003A06C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x4003A070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x4003A074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF3", 3, 1, "Fault Detection Flag 3", [
                    EnumVal("FAULTF3_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF3_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF2", 2, 1, "Fault Detection Flag 2", [
                    EnumVal("FAULTF2_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF2_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x4003A078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4003A07C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR3EN", 7, 1, "Fault Input 3 Filter Enable", [
                    EnumVal("FFLTR3EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR3EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR2EN", 6, 1, "Fault Input 2 Filter Enable", [
                    EnumVal("FFLTR2EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR2EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT3EN", 3, 1, "Fault Input 3 Enable", [
                    EnumVal("FAULT3EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT3EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT2EN", 2, 1, "Fault Input 2 Enable", [
                    EnumVal("FAULT2EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT2EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("QDCTRL", 0x4003A080, 32, "Quadrature Decoder Control And Status", [
                Field("PHAFLTREN", 7, 1, "Phase A Input Filter Enable", [
                    EnumVal("PHAFLTREN_0", "0", "Phase A input filter is disabled."),
                    EnumVal("PHAFLTREN_1", "0x1", "Phase A input filter is enabled."),
                ]),
                Field("PHBFLTREN", 6, 1, "Phase B Input Filter Enable", [
                    EnumVal("PHBFLTREN_0", "0", "Phase B input filter is disabled."),
                    EnumVal("PHBFLTREN_1", "0x1", "Phase B input filter is enabled."),
                ]),
                Field("PHAPOL", 5, 1, "Phase A Input Polarity", [
                    EnumVal("PHAPOL_0", "0", "Normal polarity. Phase A input signal is not inverted before identifying the rising and falling edges of this signal."),
                    EnumVal("PHAPOL_1", "0x1", "Inverted polarity. Phase A input signal is inverted before identifying the rising and falling edges of this signal."),
                ]),
                Field("PHBPOL", 4, 1, "Phase B Input Polarity", [
                    EnumVal("PHBPOL_0", "0", "Normal polarity. Phase B input signal is not inverted before identifying the rising and falling edges of this signal."),
                    EnumVal("PHBPOL_1", "0x1", "Inverted polarity. Phase B input signal is inverted before identifying the rising and falling edges of this signal."),
                ]),
                Field("QUADMODE", 3, 1, "Quadrature Decoder Mode", [
                    EnumVal("QUADMODE_0", "0", "Phase A and phase B encoding mode."),
                    EnumVal("QUADMODE_1", "0x1", "Count and direction encoding mode."),
                ]),
                Field("QUADIR", 2, 1, "FTM Counter Direction In Quadrature Decoder Mode", [
                    EnumVal("QUADIR_0", "0", "Counting direction is decreasing (FTM counter decrement)."),
                    EnumVal("QUADIR_1", "0x1", "Counting direction is increasing (FTM counter increment)."),
                ]),
                Field("TOFDIR", 1, 1, "Timer Overflow Direction In Quadrature Decoder Mode", [
                    EnumVal("TOFDIR_0", "0", "TOF bit was set on the bottom of counting. There was an FTM counter decrement and FTM counter changes from its minimum value (CNTIN register) to its maximum value (MOD register)."),
                    EnumVal("TOFDIR_1", "0x1", "TOF bit was set on the top of counting. There was an FTM counter increment and FTM counter changes from its maximum value (MOD register) to its minimum value (CNTIN register)."),
                ]),
                Field("QUADEN", 0, 1, "Quadrature Decoder Mode Enable", [
                    EnumVal("QUADEN_0", "0", "Quadrature Decoder mode is disabled."),
                    EnumVal("QUADEN_1", "0x1", "Quadrature Decoder mode is enabled."),
                ]),
            ]),
            Register("CONF", 0x4003A084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x4003A088, 32, "FTM Fault Input Polarity", [
                Field("FLT3POL", 3, 1, "Fault Input 3 Polarity", [
                    EnumVal("FLT3POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT3POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT2POL", 2, 1, "Fault Input 2 Polarity", [
                    EnumVal("FLT2POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT2POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4003A08C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x4003A090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x4003A094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x4003A098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4003A09C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x4003A0A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x4003A0A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x4003A0B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x4003A0B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("MOD_MIRROR", 0x4003A200, 32, "Mirror of Modulo Value", [
                Field("MOD", 16, 16, "Mirror of the Modulo Integer Value", [
                ]),
                Field("FRACMOD", 11, 5, "Modulo Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[0]", 0x4003A204, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[1]", 0x4003A208, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[2]", 0x4003A20C, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[3]", 0x4003A210, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[4]", 0x4003A214, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[5]", 0x4003A218, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[6]", 0x4003A21C, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
            Register("CV_MIRROR[7]", 0x4003A220, 32, "Mirror of Channel (n) Match Value", [
                Field("VAL", 16, 16, "Mirror of the Channel (n) Match Integer Value", [
                ]),
                Field("FRACVAL", 11, 5, "Channel (n) Match Fractional Value", [
                ]),
            ]),
        ])

class Module_FTM3(Peripheral):
    def __init__(self):
        super().__init__("FTM3", 0x40026000, 0xBC, [
            Register("SC", 0x40026000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x40026004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x40026008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4002604C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x40026050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x40026054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x40026058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4002605C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x40026060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x40026064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x40026068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4002606C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x40026070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x40026074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF3", 3, 1, "Fault Detection Flag 3", [
                    EnumVal("FAULTF3_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF3_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF2", 2, 1, "Fault Detection Flag 2", [
                    EnumVal("FAULTF2_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF2_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x40026078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4002607C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR3EN", 7, 1, "Fault Input 3 Filter Enable", [
                    EnumVal("FFLTR3EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR3EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR2EN", 6, 1, "Fault Input 2 Filter Enable", [
                    EnumVal("FFLTR2EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR2EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT3EN", 3, 1, "Fault Input 3 Enable", [
                    EnumVal("FAULT3EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT3EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT2EN", 2, 1, "Fault Input 2 Enable", [
                    EnumVal("FAULT2EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT2EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("CONF", 0x40026084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x40026088, 32, "FTM Fault Input Polarity", [
                Field("FLT3POL", 3, 1, "Fault Input 3 Polarity", [
                    EnumVal("FLT3POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT3POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT2POL", 2, 1, "Fault Input 2 Polarity", [
                    EnumVal("FLT2POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT2POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4002608C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x40026090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x40026094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x40026098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4002609C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x400260A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x400260A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x400260B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x400260B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
        ])

class Module_FTM4(Peripheral):
    def __init__(self):
        super().__init__("FTM4", 0x4006E000, 0xBC, [
            Register("SC", 0x4006E000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x4006E004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x4006E008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4006E04C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x4006E050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x4006E054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x4006E058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4006E05C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x4006E060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x4006E064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x4006E068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4006E06C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x4006E070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x4006E074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x4006E078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4006E07C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("QDCTRL", 0x4006E080, 32, "Quadrature Decoder Control And Status", [
                Field("PHAPOL", 5, 1, "Phase A Input Polarity", [
                    EnumVal("PHAPOL_0", "0", "Normal polarity. Phase A input signal is not inverted before identifying the rising and falling edges of this signal."),
                    EnumVal("PHAPOL_1", "0x1", "Inverted polarity. Phase A input signal is inverted before identifying the rising and falling edges of this signal."),
                ]),
                Field("PHBPOL", 4, 1, "Phase B Input Polarity", [
                    EnumVal("PHBPOL_0", "0", "Normal polarity. Phase B input signal is not inverted before identifying the rising and falling edges of this signal."),
                    EnumVal("PHBPOL_1", "0x1", "Inverted polarity. Phase B input signal is inverted before identifying the rising and falling edges of this signal."),
                ]),
                Field("QUADMODE", 3, 1, "Quadrature Decoder Mode", [
                    EnumVal("QUADMODE_0", "0", "Phase A and phase B encoding mode."),
                    EnumVal("QUADMODE_1", "0x1", "Count and direction encoding mode."),
                ]),
                Field("QUADIR", 2, 1, "FTM Counter Direction In Quadrature Decoder Mode", [
                    EnumVal("QUADIR_0", "0", "Counting direction is decreasing (FTM counter decrement)."),
                    EnumVal("QUADIR_1", "0x1", "Counting direction is increasing (FTM counter increment)."),
                ]),
                Field("TOFDIR", 1, 1, "Timer Overflow Direction In Quadrature Decoder Mode", [
                    EnumVal("TOFDIR_0", "0", "TOF bit was set on the bottom of counting. There was an FTM counter decrement and FTM counter changes from its minimum value (CNTIN register) to its maximum value (MOD register)."),
                    EnumVal("TOFDIR_1", "0x1", "TOF bit was set on the top of counting. There was an FTM counter increment and FTM counter changes from its maximum value (MOD register) to its minimum value (CNTIN register)."),
                ]),
                Field("QUADEN", 0, 1, "Quadrature Decoder Mode Enable", [
                    EnumVal("QUADEN_0", "0", "Quadrature Decoder mode is disabled."),
                    EnumVal("QUADEN_1", "0x1", "Quadrature Decoder mode is enabled."),
                ]),
            ]),
            Register("CONF", 0x4006E084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x4006E088, 32, "FTM Fault Input Polarity", [
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4006E08C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x4006E090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x4006E094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x4006E098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4006E09C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x4006E0A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x4006E0A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x4006E0B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x4006E0B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
        ])

class Module_FTM5(Peripheral):
    def __init__(self):
        super().__init__("FTM5", 0x4006F000, 0xBC, [
            Register("SC", 0x4006F000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x4006F004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x4006F008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4006F04C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x4006F050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x4006F054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x4006F058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4006F05C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x4006F060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x4006F064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x4006F068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4006F06C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x4006F070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x4006F074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF3", 3, 1, "Fault Detection Flag 3", [
                    EnumVal("FAULTF3_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF3_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF2", 2, 1, "Fault Detection Flag 2", [
                    EnumVal("FAULTF2_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF2_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x4006F078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4006F07C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR3EN", 7, 1, "Fault Input 3 Filter Enable", [
                    EnumVal("FFLTR3EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR3EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR2EN", 6, 1, "Fault Input 2 Filter Enable", [
                    EnumVal("FFLTR2EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR2EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT3EN", 3, 1, "Fault Input 3 Enable", [
                    EnumVal("FAULT3EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT3EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT2EN", 2, 1, "Fault Input 2 Enable", [
                    EnumVal("FAULT2EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT2EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("CONF", 0x4006F084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x4006F088, 32, "FTM Fault Input Polarity", [
                Field("FLT3POL", 3, 1, "Fault Input 3 Polarity", [
                    EnumVal("FLT3POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT3POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT2POL", 2, 1, "Fault Input 2 Polarity", [
                    EnumVal("FLT2POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT2POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4006F08C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x4006F090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x4006F094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x4006F098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4006F09C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x4006F0A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x4006F0A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x4006F0B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x4006F0B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
        ])

class Module_FTM6(Peripheral):
    def __init__(self):
        super().__init__("FTM6", 0x40070000, 0xBC, [
            Register("SC", 0x40070000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x40070004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x40070008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4007004C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x40070050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x40070054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x40070058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4007005C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x40070060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x40070064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x40070068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4007006C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x40070070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x40070074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF3", 3, 1, "Fault Detection Flag 3", [
                    EnumVal("FAULTF3_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF3_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF2", 2, 1, "Fault Detection Flag 2", [
                    EnumVal("FAULTF2_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF2_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x40070078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4007007C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR3EN", 7, 1, "Fault Input 3 Filter Enable", [
                    EnumVal("FFLTR3EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR3EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR2EN", 6, 1, "Fault Input 2 Filter Enable", [
                    EnumVal("FFLTR2EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR2EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT3EN", 3, 1, "Fault Input 3 Enable", [
                    EnumVal("FAULT3EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT3EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT2EN", 2, 1, "Fault Input 2 Enable", [
                    EnumVal("FAULT2EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT2EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("CONF", 0x40070084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x40070088, 32, "FTM Fault Input Polarity", [
                Field("FLT3POL", 3, 1, "Fault Input 3 Polarity", [
                    EnumVal("FLT3POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT3POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT2POL", 2, 1, "Fault Input 2 Polarity", [
                    EnumVal("FLT2POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT2POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4007008C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x40070090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x40070094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x40070098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4007009C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x400700A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x400700A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x400700B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x400700B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
        ])

class Module_FTM7(Peripheral):
    def __init__(self):
        super().__init__("FTM7", 0x40071000, 0xBC, [
            Register("SC", 0x40071000, 32, "Status And Control", [
                Field("FLTPS", 24, 4, "Filter Prescaler", [
                    EnumVal("FLTPS_0", "0", "Divide by 1"),
                    EnumVal("FLTPS_1", "0x1", "Divide by 2"),
                    EnumVal("FLTPS_2", "0x2", "Divide by 3"),
                    EnumVal("FLTPS_3", "0x3", "Divide by 4"),
                    EnumVal("FLTPS_4", "0x4", "Divide by 5"),
                    EnumVal("FLTPS_5", "0x5", "Divide by 6"),
                    EnumVal("FLTPS_6", "0x6", "Divide by 7"),
                    EnumVal("FLTPS_7", "0x7", "Divide by 8"),
                    EnumVal("FLTPS_8", "0x8", "Divide by 9"),
                    EnumVal("FLTPS_9", "0x9", "Divide by 10"),
                    EnumVal("FLTPS_10", "0xA", "Divide by 11"),
                    EnumVal("FLTPS_11", "0xB", "Divide by 12"),
                    EnumVal("FLTPS_12", "0xC", "Divide by 13"),
                    EnumVal("FLTPS_13", "0xD", "Divide by 14"),
                    EnumVal("FLTPS_14", "0xE", "Divide by 15"),
                    EnumVal("FLTPS_15", "0xF", "Divide by 16"),
                ]),
                Field("PWMEN7", 23, 1, "Channel 7 PWM enable bit", [
                    EnumVal("PWMEN7_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN7_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN6", 22, 1, "Channel 6 PWM enable bit", [
                    EnumVal("PWMEN6_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN6_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN5", 21, 1, "Channel 5 PWM enable bit", [
                    EnumVal("PWMEN5_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN5_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN4", 20, 1, "Channel 4 PWM enable bit", [
                    EnumVal("PWMEN4_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN4_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN3", 19, 1, "Channel 3 PWM enable bit", [
                    EnumVal("PWMEN3_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN3_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN2", 18, 1, "Channel 2 PWM enable bit", [
                    EnumVal("PWMEN2_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN2_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN1", 17, 1, "Channel 1 PWM enable bit", [
                    EnumVal("PWMEN1_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN1_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("PWMEN0", 16, 1, "Channel 0 PWM enable bit", [
                    EnumVal("PWMEN0_0", "0", "Channel output port is disabled."),
                    EnumVal("PWMEN0_1", "0x1", "Channel output port is enabled."),
                ]),
                Field("TOF", 9, 1, "Timer Overflow Flag", [
                    EnumVal("TOF_0", "0", "FTM counter has not overflowed."),
                    EnumVal("TOF_1", "0x1", "FTM counter has overflowed."),
                ]),
                Field("TOIE", 8, 1, "Timer Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Disable TOF interrupts. Use software polling."),
                    EnumVal("TOIE_1", "0x1", "Enable TOF interrupts. An interrupt is generated when TOF equals one."),
                ]),
                Field("RF", 7, 1, "Reload Flag", [
                    EnumVal("RF_0", "0", "A selected reload point did not happen."),
                    EnumVal("RF_1", "0x1", "A selected reload point happened."),
                ]),
                Field("RIE", 6, 1, "Reload Point Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Reload point interrupt is disabled."),
                    EnumVal("RIE_1", "0x1", "Reload point interrupt is enabled."),
                ]),
                Field("CPWMS", 5, 1, "Center-Aligned PWM Select", [
                    EnumVal("CPWMS_0", "0", "FTM counter operates in Up Counting mode."),
                    EnumVal("CPWMS_1", "0x1", "FTM counter operates in Up-Down Counting mode."),
                ]),
                Field("CLKS", 3, 2, "Clock Source Selection", [
                    EnumVal("CLKS_0", "0", "No clock selected. This in effect disables the FTM counter."),
                    EnumVal("CLKS_1", "0x1", "FTM input clock"),
                    EnumVal("CLKS_2", "0x2", "Fixed frequency clock"),
                    EnumVal("CLKS_3", "0x3", "External clock"),
                ]),
                Field("PS", 0, 3, "Prescale Factor Selection", [
                    EnumVal("PS_0", "0", "Divide by 1"),
                    EnumVal("PS_1", "0x1", "Divide by 2"),
                    EnumVal("PS_2", "0x2", "Divide by 4"),
                    EnumVal("PS_3", "0x3", "Divide by 8"),
                    EnumVal("PS_4", "0x4", "Divide by 16"),
                    EnumVal("PS_5", "0x5", "Divide by 32"),
                    EnumVal("PS_6", "0x6", "Divide by 64"),
                    EnumVal("PS_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("CNT", 0x40071004, 32, "Counter", [
                Field("COUNT", 0, 16, "Counter Value", [
                ]),
            ]),
            Register("MOD", 0x40071008, 32, "Modulo", [
                Field("MOD", 0, 16, "MOD", [
                ]),
            ]),
            Register("CNTIN", 0x4007104C, 32, "Counter Initial Value", [
                Field("INIT", 0, 16, "INIT", [
                ]),
            ]),
            Register("STATUS", 0x40071050, 32, "Capture And Compare Status", [
                Field("CH7F", 7, 1, "Channel 7 Flag", [
                    EnumVal("CH7F_0", "0", "No channel event has occurred."),
                    EnumVal("CH7F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH6F", 6, 1, "Channel 6 Flag", [
                    EnumVal("CH6F_0", "0", "No channel event has occurred."),
                    EnumVal("CH6F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH5F", 5, 1, "Channel 5 Flag", [
                    EnumVal("CH5F_0", "0", "No channel event has occurred."),
                    EnumVal("CH5F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH4F", 4, 1, "Channel 4 Flag", [
                    EnumVal("CH4F_0", "0", "No channel event has occurred."),
                    EnumVal("CH4F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH3F", 3, 1, "Channel 3 Flag", [
                    EnumVal("CH3F_0", "0", "No channel event has occurred."),
                    EnumVal("CH3F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH2F", 2, 1, "Channel 2 Flag", [
                    EnumVal("CH2F_0", "0", "No channel event has occurred."),
                    EnumVal("CH2F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH1F", 1, 1, "Channel 1 Flag", [
                    EnumVal("CH1F_0", "0", "No channel event has occurred."),
                    EnumVal("CH1F_1", "0x1", "A channel event has occurred."),
                ]),
                Field("CH0F", 0, 1, "Channel 0 Flag", [
                    EnumVal("CH0F_0", "0", "No channel event has occurred."),
                    EnumVal("CH0F_1", "0x1", "A channel event has occurred."),
                ]),
            ]),
            Register("MODE", 0x40071054, 32, "Features Mode Selection", [
                Field("FAULTIE", 7, 1, "Fault Interrupt Enable", [
                    EnumVal("FAULTIE_0", "0", "Fault control interrupt is disabled."),
                    EnumVal("FAULTIE_1", "0x1", "Fault control interrupt is enabled."),
                ]),
                Field("FAULTM", 5, 2, "Fault Control Mode", [
                    EnumVal("FAULTM_0", "0", "Fault control is disabled for all channels."),
                    EnumVal("FAULTM_1", "0x1", "Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_2", "0x2", "Fault control is enabled for all channels, and the selected mode is the manual fault clearing."),
                    EnumVal("FAULTM_3", "0x3", "Fault control is enabled for all channels, and the selected mode is the automatic fault clearing."),
                ]),
                Field("CAPTEST", 4, 1, "Capture Test Mode Enable", [
                    EnumVal("CAPTEST_0", "0", "Capture test mode is disabled."),
                    EnumVal("CAPTEST_1", "0x1", "Capture test mode is enabled."),
                ]),
                Field("PWMSYNC", 3, 1, "PWM Synchronization Mode", [
                    EnumVal("PWMSYNC_0", "0", "No restrictions. Software and hardware triggers can be used by MOD, CnV, OUTMASK, and FTM counter synchronization."),
                    EnumVal("PWMSYNC_1", "0x1", "Software trigger can only be used by MOD and CnV synchronization, and hardware triggers can only be used by OUTMASK and FTM counter synchronization."),
                ]),
                Field("WPDIS", 2, 1, "Write Protection Disable", [
                    EnumVal("WPDIS_0", "0", "Write protection is enabled."),
                    EnumVal("WPDIS_1", "0x1", "Write protection is disabled."),
                ]),
                Field("INIT", 1, 1, "Initialize The Channels Output", [
                ]),
                Field("FTMEN", 0, 1, "FTM Enable", [
                    EnumVal("FTMEN_0", "0", "TPM compatibility. Free running counter and synchronization compatible with TPM."),
                    EnumVal("FTMEN_1", "0x1", "Free running counter and synchronization are different from TPM behavior."),
                ]),
            ]),
            Register("SYNC", 0x40071058, 32, "Synchronization", [
                Field("SWSYNC", 7, 1, "PWM Synchronization Software Trigger", [
                    EnumVal("SWSYNC_0", "0", "Software trigger is not selected."),
                    EnumVal("SWSYNC_1", "0x1", "Software trigger is selected."),
                ]),
                Field("TRIG2", 6, 1, "PWM Synchronization Hardware Trigger 2", [
                    EnumVal("TRIG2_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG2_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG1", 5, 1, "PWM Synchronization Hardware Trigger 1", [
                    EnumVal("TRIG1_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG1_1", "0x1", "Trigger is enabled."),
                ]),
                Field("TRIG0", 4, 1, "PWM Synchronization Hardware Trigger 0", [
                    EnumVal("TRIG0_0", "0", "Trigger is disabled."),
                    EnumVal("TRIG0_1", "0x1", "Trigger is enabled."),
                ]),
                Field("SYNCHOM", 3, 1, "Output Mask Synchronization", [
                    EnumVal("SYNCHOM_0", "0", "OUTMASK register is updated with the value of its buffer in all rising edges of the FTM input clock."),
                    EnumVal("SYNCHOM_1", "0x1", "OUTMASK register is updated with the value of its buffer only by the PWM synchronization."),
                ]),
                Field("REINIT", 2, 1, "FTM Counter Reinitialization by Synchronization", [
                    EnumVal("REINIT_0", "0", "FTM counter continues to count normally."),
                    EnumVal("REINIT_1", "0x1", "FTM counter is updated with its initial value when the selected trigger is detected."),
                ]),
                Field("CNTMAX", 1, 1, "Maximum Loading Point Enable", [
                    EnumVal("CNTMAX_0", "0", "The maximum loading point is disabled."),
                    EnumVal("CNTMAX_1", "0x1", "The maximum loading point is enabled."),
                ]),
                Field("CNTMIN", 0, 1, "Minimum Loading Point Enable", [
                    EnumVal("CNTMIN_0", "0", "The minimum loading point is disabled."),
                    EnumVal("CNTMIN_1", "0x1", "The minimum loading point is enabled."),
                ]),
            ]),
            Register("OUTINIT", 0x4007105C, 32, "Initial State For Channels Output", [
                Field("CH7OI", 7, 1, "Channel 7 Output Initialization Value", [
                    EnumVal("CH7OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH7OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH6OI", 6, 1, "Channel 6 Output Initialization Value", [
                    EnumVal("CH6OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH6OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH5OI", 5, 1, "Channel 5 Output Initialization Value", [
                    EnumVal("CH5OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH5OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH4OI", 4, 1, "Channel 4 Output Initialization Value", [
                    EnumVal("CH4OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH4OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH3OI", 3, 1, "Channel 3 Output Initialization Value", [
                    EnumVal("CH3OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH3OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH2OI", 2, 1, "Channel 2 Output Initialization Value", [
                    EnumVal("CH2OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH2OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH1OI", 1, 1, "Channel 1 Output Initialization Value", [
                    EnumVal("CH1OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH1OI_1", "0x1", "The initialization value is 1."),
                ]),
                Field("CH0OI", 0, 1, "Channel 0 Output Initialization Value", [
                    EnumVal("CH0OI_0", "0", "The initialization value is 0."),
                    EnumVal("CH0OI_1", "0x1", "The initialization value is 1."),
                ]),
            ]),
            Register("OUTMASK", 0x40071060, 32, "Output Mask", [
                Field("CH7OM", 7, 1, "Channel 7 Output Mask", [
                    EnumVal("CH7OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH7OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH6OM", 6, 1, "Channel 6 Output Mask", [
                    EnumVal("CH6OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH6OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH5OM", 5, 1, "Channel 5 Output Mask", [
                    EnumVal("CH5OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH5OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH4OM", 4, 1, "Channel 4 Output Mask", [
                    EnumVal("CH4OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH4OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH3OM", 3, 1, "Channel 3 Output Mask", [
                    EnumVal("CH3OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH3OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH2OM", 2, 1, "Channel 2 Output Mask", [
                    EnumVal("CH2OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH2OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH1OM", 1, 1, "Channel 1 Output Mask", [
                    EnumVal("CH1OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH1OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
                Field("CH0OM", 0, 1, "Channel 0 Output Mask", [
                    EnumVal("CH0OM_0", "0", "Channel output is not masked. It continues to operate normally."),
                    EnumVal("CH0OM_1", "0x1", "Channel output is masked. It is forced to its inactive state."),
                ]),
            ]),
            Register("COMBINE", 0x40071064, 32, "Function For Linked Channels", [
                Field("MCOMBINE3", 31, 1, "Modified Combine Mode For n = 6", [
                ]),
                Field("FAULTEN3", 30, 1, "Fault Control Enable For n = 6", [
                    EnumVal("FAULTEN3_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN3_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN3", 29, 1, "Synchronization Enable For n = 6", [
                    EnumVal("SYNCEN3_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN3_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN3", 28, 1, "Deadtime Enable For n = 6", [
                    EnumVal("DTEN3_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN3_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP3", 27, 1, "Dual Edge Capture Mode Captures For n = 6", [
                    EnumVal("DECAP3_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP3_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN3", 26, 1, "Dual Edge Capture Mode Enable For n = 6", [
                ]),
                Field("COMP3", 25, 1, "Complement Of Channel (n) for n = 6", [
                    EnumVal("COMP3_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP3_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE3", 24, 1, "Combine Channels For n = 6", [
                ]),
                Field("MCOMBINE2", 23, 1, "Modified Combine Mode For n = 4", [
                ]),
                Field("FAULTEN2", 22, 1, "Fault Control Enable For n = 4", [
                    EnumVal("FAULTEN2_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN2_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN2", 21, 1, "Synchronization Enable For n = 4", [
                    EnumVal("SYNCEN2_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN2_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN2", 20, 1, "Deadtime Enable For n = 4", [
                    EnumVal("DTEN2_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN2_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP2", 19, 1, "Dual Edge Capture Mode Captures For n = 4", [
                    EnumVal("DECAP2_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP2_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN2", 18, 1, "Dual Edge Capture Mode Enable For n = 4", [
                ]),
                Field("COMP2", 17, 1, "Complement Of Channel (n) For n = 4", [
                    EnumVal("COMP2_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP2_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE2", 16, 1, "Combine Channels For n = 4", [
                ]),
                Field("MCOMBINE1", 15, 1, "Modified Combine Mode For n = 2", [
                ]),
                Field("FAULTEN1", 14, 1, "Fault Control Enable For n = 2", [
                    EnumVal("FAULTEN1_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN1_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN1", 13, 1, "Synchronization Enable For n = 2", [
                    EnumVal("SYNCEN1_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN1_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN1", 12, 1, "Deadtime Enable For n = 2", [
                    EnumVal("DTEN1_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN1_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP1", 11, 1, "Dual Edge Capture Mode Captures For n = 2", [
                    EnumVal("DECAP1_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP1_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN1", 10, 1, "Dual Edge Capture Mode Enable For n = 2", [
                ]),
                Field("COMP1", 9, 1, "Complement Of Channel (n) For n = 2", [
                    EnumVal("COMP1_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP1_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE1", 8, 1, "Combine Channels For n = 2", [
                ]),
                Field("MCOMBINE0", 7, 1, "Modified Combine Mode For n = 0", [
                ]),
                Field("FAULTEN0", 6, 1, "Fault Control Enable For n = 0", [
                    EnumVal("FAULTEN0_0", "0", "The fault control in this pair of channels is disabled."),
                    EnumVal("FAULTEN0_1", "0x1", "The fault control in this pair of channels is enabled."),
                ]),
                Field("SYNCEN0", 5, 1, "Synchronization Enable For n = 0", [
                    EnumVal("SYNCEN0_0", "0", "The PWM synchronization in this pair of channels is disabled."),
                    EnumVal("SYNCEN0_1", "0x1", "The PWM synchronization in this pair of channels is enabled."),
                ]),
                Field("DTEN0", 4, 1, "Deadtime Enable For n = 0", [
                    EnumVal("DTEN0_0", "0", "The deadtime insertion in this pair of channels is disabled."),
                    EnumVal("DTEN0_1", "0x1", "The deadtime insertion in this pair of channels is enabled."),
                ]),
                Field("DECAP0", 3, 1, "Dual Edge Capture Mode Captures For n = 0", [
                    EnumVal("DECAP0_0", "0", "The dual edge captures are inactive."),
                    EnumVal("DECAP0_1", "0x1", "The dual edge captures are active."),
                ]),
                Field("DECAPEN0", 2, 1, "Dual Edge Capture Mode Enable For n = 0", [
                ]),
                Field("COMP0", 1, 1, "Complement Of Channel (n) For n = 0", [
                    EnumVal("COMP0_0", "0", "If the channels (n) and (n+1) are in Combine Mode or Modified Combine PWM Mode, the channel (n+1) output is the same as the channel (n) output. If the channel (n+1) is in Output Compare Mode, EPWM or CPWM, the channel (n+1) output is independent from channel (n) output."),
                    EnumVal("COMP0_1", "0x1", "The channel (n+1) output is the complement of the channel (n) output."),
                ]),
                Field("COMBINE0", 0, 1, "Combine Channels For n = 0", [
                ]),
            ]),
            Register("DEADTIME", 0x40071068, 32, "Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("EXTTRIG", 0x4007106C, 32, "FTM External Trigger", [
                Field("CH7TRIG", 9, 1, "Channel 7 External Trigger Enable", [
                    EnumVal("CH7TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH7TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH6TRIG", 8, 1, "Channel 6 External Trigger Enable", [
                    EnumVal("CH6TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH6TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("TRIGF", 7, 1, "Channel Trigger Flag", [
                    EnumVal("TRIGF_0", "0", "No channel trigger was generated."),
                    EnumVal("TRIGF_1", "0x1", "A channel trigger was generated."),
                ]),
                Field("INITTRIGEN", 6, 1, "Initialization Trigger Enable", [
                    EnumVal("INITTRIGEN_0", "0", "The generation of initialization trigger is disabled."),
                    EnumVal("INITTRIGEN_1", "0x1", "The generation of initialization trigger is enabled."),
                ]),
                Field("CH1TRIG", 5, 1, "Channel 1 External Trigger Enable", [
                    EnumVal("CH1TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH1TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH0TRIG", 4, 1, "Channel 0 External Trigger Enable", [
                    EnumVal("CH0TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH0TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH5TRIG", 3, 1, "Channel 5 External Trigger Enable", [
                    EnumVal("CH5TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH5TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH4TRIG", 2, 1, "Channel 4 External Trigger Enable", [
                    EnumVal("CH4TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH4TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH3TRIG", 1, 1, "Channel 3 External Trigger Enable", [
                    EnumVal("CH3TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH3TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
                Field("CH2TRIG", 0, 1, "Channel 2 External Trigger Enable", [
                    EnumVal("CH2TRIG_0", "0", "The generation of this external trigger is disabled."),
                    EnumVal("CH2TRIG_1", "0x1", "The generation of this external trigger is enabled."),
                ]),
            ]),
            Register("POL", 0x40071070, 32, "Channels Polarity", [
                Field("POL7", 7, 1, "Channel 7 Polarity", [
                    EnumVal("POL7_0", "0", "The channel polarity is active high."),
                    EnumVal("POL7_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL6", 6, 1, "Channel 6 Polarity", [
                    EnumVal("POL6_0", "0", "The channel polarity is active high."),
                    EnumVal("POL6_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL5", 5, 1, "Channel 5 Polarity", [
                    EnumVal("POL5_0", "0", "The channel polarity is active high."),
                    EnumVal("POL5_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL4", 4, 1, "Channel 4 Polarity", [
                    EnumVal("POL4_0", "0", "The channel polarity is active high."),
                    EnumVal("POL4_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL3", 3, 1, "Channel 3 Polarity", [
                    EnumVal("POL3_0", "0", "The channel polarity is active high."),
                    EnumVal("POL3_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL2", 2, 1, "Channel 2 Polarity", [
                    EnumVal("POL2_0", "0", "The channel polarity is active high."),
                    EnumVal("POL2_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL1", 1, 1, "Channel 1 Polarity", [
                    EnumVal("POL1_0", "0", "The channel polarity is active high."),
                    EnumVal("POL1_1", "0x1", "The channel polarity is active low."),
                ]),
                Field("POL0", 0, 1, "Channel 0 Polarity", [
                    EnumVal("POL0_0", "0", "The channel polarity is active high."),
                    EnumVal("POL0_1", "0x1", "The channel polarity is active low."),
                ]),
            ]),
            Register("FMS", 0x40071074, 32, "Fault Mode Status", [
                Field("FAULTF", 7, 1, "Fault Detection Flag", [
                    EnumVal("FAULTF_0", "0", "No fault condition was detected."),
                    EnumVal("FAULTF_1", "0x1", "A fault condition was detected."),
                ]),
                Field("WPEN", 6, 1, "Write Protection Enable", [
                    EnumVal("WPEN_0", "0", "Write protection is disabled. Write protected bits can be written."),
                    EnumVal("WPEN_1", "0x1", "Write protection is enabled. Write protected bits cannot be written."),
                ]),
                Field("FAULTIN", 5, 1, "Fault Inputs", [
                    EnumVal("FAULTIN_0", "0", "The logic OR of the enabled fault inputs is 0."),
                    EnumVal("FAULTIN_1", "0x1", "The logic OR of the enabled fault inputs is 1."),
                ]),
                Field("FAULTF3", 3, 1, "Fault Detection Flag 3", [
                    EnumVal("FAULTF3_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF3_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF2", 2, 1, "Fault Detection Flag 2", [
                    EnumVal("FAULTF2_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF2_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF1", 1, 1, "Fault Detection Flag 1", [
                    EnumVal("FAULTF1_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF1_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
                Field("FAULTF0", 0, 1, "Fault Detection Flag 0", [
                    EnumVal("FAULTF0_0", "0", "No fault condition was detected at the fault input."),
                    EnumVal("FAULTF0_1", "0x1", "A fault condition was detected at the fault input."),
                ]),
            ]),
            Register("FILTER", 0x40071078, 32, "Input Capture Filter Control", [
                Field("CH3FVAL", 12, 4, "Channel 3 Input Filter", [
                ]),
                Field("CH2FVAL", 8, 4, "Channel 2 Input Filter", [
                ]),
                Field("CH1FVAL", 4, 4, "Channel 1 Input Filter", [
                ]),
                Field("CH0FVAL", 0, 4, "Channel 0 Input Filter", [
                ]),
            ]),
            Register("FLTCTRL", 0x4007107C, 32, "Fault Control", [
                Field("FSTATE", 15, 1, "Fault output state", [
                    EnumVal("FSTATE_0", "0", "FTM outputs will be placed into safe values when fault events in ongoing (defined by POL bits)."),
                    EnumVal("FSTATE_1", "0x1", "FTM outputs will be tri-stated when fault event is ongoing"),
                ]),
                Field("FFVAL", 8, 4, "Fault Input Filter", [
                ]),
                Field("FFLTR3EN", 7, 1, "Fault Input 3 Filter Enable", [
                    EnumVal("FFLTR3EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR3EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR2EN", 6, 1, "Fault Input 2 Filter Enable", [
                    EnumVal("FFLTR2EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR2EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR1EN", 5, 1, "Fault Input 1 Filter Enable", [
                    EnumVal("FFLTR1EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR1EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FFLTR0EN", 4, 1, "Fault Input 0 Filter Enable", [
                    EnumVal("FFLTR0EN_0", "0", "Fault input filter is disabled."),
                    EnumVal("FFLTR0EN_1", "0x1", "Fault input filter is enabled."),
                ]),
                Field("FAULT3EN", 3, 1, "Fault Input 3 Enable", [
                    EnumVal("FAULT3EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT3EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT2EN", 2, 1, "Fault Input 2 Enable", [
                    EnumVal("FAULT2EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT2EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT1EN", 1, 1, "Fault Input 1 Enable", [
                    EnumVal("FAULT1EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT1EN_1", "0x1", "Fault input is enabled."),
                ]),
                Field("FAULT0EN", 0, 1, "Fault Input 0 Enable", [
                    EnumVal("FAULT0EN_0", "0", "Fault input is disabled."),
                    EnumVal("FAULT0EN_1", "0x1", "Fault input is enabled."),
                ]),
            ]),
            Register("CONF", 0x40071084, 32, "Configuration", [
                Field("ITRIGR", 11, 1, "Initialization trigger on Reload Point", [
                    EnumVal("ITRIGR_0", "0", "Initialization trigger is generated on counter wrap events."),
                    EnumVal("ITRIGR_1", "0x1", "Initialization trigger is generated when a reload point is reached."),
                ]),
                Field("GTBEOUT", 10, 1, "Global Time Base Output", [
                    EnumVal("GTBEOUT_0", "0", "A global time base signal generation is disabled."),
                    EnumVal("GTBEOUT_1", "0x1", "A global time base signal generation is enabled."),
                ]),
                Field("GTBEEN", 9, 1, "Global Time Base Enable", [
                    EnumVal("GTBEEN_0", "0", "Use of an external global time base is disabled."),
                    EnumVal("GTBEEN_1", "0x1", "Use of an external global time base is enabled."),
                ]),
                Field("BDMMODE", 6, 2, "Debug Mode", [
                ]),
                Field("LDFQ", 0, 5, "Frequency of the Reload Opportunities", [
                ]),
            ]),
            Register("FLTPOL", 0x40071088, 32, "FTM Fault Input Polarity", [
                Field("FLT3POL", 3, 1, "Fault Input 3 Polarity", [
                    EnumVal("FLT3POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT3POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT2POL", 2, 1, "Fault Input 2 Polarity", [
                    EnumVal("FLT2POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT2POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT1POL", 1, 1, "Fault Input 1 Polarity", [
                    EnumVal("FLT1POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT1POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
                Field("FLT0POL", 0, 1, "Fault Input 0 Polarity", [
                    EnumVal("FLT0POL_0", "0", "The fault input polarity is active high. A 1 at the fault input indicates a fault."),
                    EnumVal("FLT0POL_1", "0x1", "The fault input polarity is active low. A 0 at the fault input indicates a fault."),
                ]),
            ]),
            Register("SYNCONF", 0x4007108C, 32, "Synchronization Configuration", [
                Field("HWSOC", 20, 1, "Software output control synchronization is activated by a hardware trigger", [
                    EnumVal("HWSOC_0", "0", "A hardware trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("HWSOC_1", "0x1", "A hardware trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("HWINVC", 19, 1, "Inverting control synchronization is activated by a hardware trigger", [
                    EnumVal("HWINVC_0", "0", "A hardware trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("HWINVC_1", "0x1", "A hardware trigger activates the INVCTRL register synchronization."),
                ]),
                Field("HWOM", 18, 1, "Output mask synchronization is activated by a hardware trigger", [
                    EnumVal("HWOM_0", "0", "A hardware trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("HWOM_1", "0x1", "A hardware trigger activates the OUTMASK register synchronization."),
                ]),
                Field("HWWRBUF", 17, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger", [
                    EnumVal("HWWRBUF_0", "0", "A hardware trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("HWWRBUF_1", "0x1", "A hardware trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("HWRSTCNT", 16, 1, "FTM counter synchronization is activated by a hardware trigger", [
                    EnumVal("HWRSTCNT_0", "0", "A hardware trigger does not activate the FTM counter synchronization."),
                    EnumVal("HWRSTCNT_1", "0x1", "A hardware trigger activates the FTM counter synchronization."),
                ]),
                Field("SWSOC", 12, 1, "Software output control synchronization is activated by the software trigger", [
                    EnumVal("SWSOC_0", "0", "The software trigger does not activate the SWOCTRL register synchronization."),
                    EnumVal("SWSOC_1", "0x1", "The software trigger activates the SWOCTRL register synchronization."),
                ]),
                Field("SWINVC", 11, 1, "Inverting control synchronization is activated by the software trigger", [
                    EnumVal("SWINVC_0", "0", "The software trigger does not activate the INVCTRL register synchronization."),
                    EnumVal("SWINVC_1", "0x1", "The software trigger activates the INVCTRL register synchronization."),
                ]),
                Field("SWOM", 10, 1, "Output mask synchronization is activated by the software trigger", [
                    EnumVal("SWOM_0", "0", "The software trigger does not activate the OUTMASK register synchronization."),
                    EnumVal("SWOM_1", "0x1", "The software trigger activates the OUTMASK register synchronization."),
                ]),
                Field("SWWRBUF", 9, 1, "MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger", [
                    EnumVal("SWWRBUF_0", "0", "The software trigger does not activate MOD, HCR, CNTIN, and CV registers synchronization."),
                    EnumVal("SWWRBUF_1", "0x1", "The software trigger activates MOD, HCR, CNTIN, and CV registers synchronization."),
                ]),
                Field("SWRSTCNT", 8, 1, "FTM counter synchronization is activated by the software trigger", [
                    EnumVal("SWRSTCNT_0", "0", "The software trigger does not activate the FTM counter synchronization."),
                    EnumVal("SWRSTCNT_1", "0x1", "The software trigger activates the FTM counter synchronization."),
                ]),
                Field("SYNCMODE", 7, 1, "Synchronization Mode", [
                    EnumVal("SYNCMODE_0", "0", "Legacy PWM synchronization is selected."),
                    EnumVal("SYNCMODE_1", "0x1", "Enhanced PWM synchronization is selected."),
                ]),
                Field("SWOC", 5, 1, "SWOCTRL Register Synchronization", [
                    EnumVal("SWOC_0", "0", "SWOCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("SWOC_1", "0x1", "SWOCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("INVC", 4, 1, "INVCTRL Register Synchronization", [
                    EnumVal("INVC_0", "0", "INVCTRL register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("INVC_1", "0x1", "INVCTRL register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("CNTINC", 2, 1, "CNTIN Register Synchronization", [
                    EnumVal("CNTINC_0", "0", "CNTIN register is updated with its buffer value at all rising edges of FTM input clock."),
                    EnumVal("CNTINC_1", "0x1", "CNTIN register is updated with its buffer value by the PWM synchronization."),
                ]),
                Field("HWTRIGMODE", 0, 1, "Hardware Trigger Mode", [
                    EnumVal("HWTRIGMODE_0", "0", "FTM clears the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                    EnumVal("HWTRIGMODE_1", "0x1", "FTM does not clear the TRIGj bit when the hardware trigger j is detected, where j = 0, 1,2."),
                ]),
            ]),
            Register("INVCTRL", 0x40071090, 32, "FTM Inverting Control", [
                Field("INV3EN", 3, 1, "Pair Channels 3 Inverting Enable", [
                    EnumVal("INV3EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV3EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV2EN", 2, 1, "Pair Channels 2 Inverting Enable", [
                    EnumVal("INV2EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV2EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV1EN", 1, 1, "Pair Channels 1 Inverting Enable", [
                    EnumVal("INV1EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV1EN_1", "0x1", "Inverting is enabled."),
                ]),
                Field("INV0EN", 0, 1, "Pair Channels 0 Inverting Enable", [
                    EnumVal("INV0EN_0", "0", "Inverting is disabled."),
                    EnumVal("INV0EN_1", "0x1", "Inverting is enabled."),
                ]),
            ]),
            Register("SWOCTRL", 0x40071094, 32, "FTM Software Output Control", [
                Field("CH7OCV", 15, 1, "Channel 7 Software Output Control Value", [
                    EnumVal("CH7OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH7OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH6OCV", 14, 1, "Channel 6 Software Output Control Value", [
                    EnumVal("CH6OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH6OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH5OCV", 13, 1, "Channel 5 Software Output Control Value", [
                    EnumVal("CH5OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH5OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH4OCV", 12, 1, "Channel 4 Software Output Control Value", [
                    EnumVal("CH4OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH4OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH3OCV", 11, 1, "Channel 3 Software Output Control Value", [
                    EnumVal("CH3OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH3OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH2OCV", 10, 1, "Channel 2 Software Output Control Value", [
                    EnumVal("CH2OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH2OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH1OCV", 9, 1, "Channel 1 Software Output Control Value", [
                    EnumVal("CH1OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH1OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH0OCV", 8, 1, "Channel 0 Software Output Control Value", [
                    EnumVal("CH0OCV_0", "0", "The software output control forces 0 to the channel output."),
                    EnumVal("CH0OCV_1", "0x1", "The software output control forces 1 to the channel output."),
                ]),
                Field("CH7OC", 7, 1, "Channel 7 Software Output Control Enable", [
                    EnumVal("CH7OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH7OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH6OC", 6, 1, "Channel 6 Software Output Control Enable", [
                    EnumVal("CH6OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH6OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH5OC", 5, 1, "Channel 5 Software Output Control Enable", [
                    EnumVal("CH5OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH5OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH4OC", 4, 1, "Channel 4 Software Output Control Enable", [
                    EnumVal("CH4OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH4OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH3OC", 3, 1, "Channel 3 Software Output Control Enable", [
                    EnumVal("CH3OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH3OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH2OC", 2, 1, "Channel 2 Software Output Control Enable", [
                    EnumVal("CH2OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH2OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH1OC", 1, 1, "Channel 1 Software Output Control Enable", [
                    EnumVal("CH1OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH1OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
                Field("CH0OC", 0, 1, "Channel 0 Software Output Control Enable", [
                    EnumVal("CH0OC_0", "0", "The channel output is not affected by software output control."),
                    EnumVal("CH0OC_1", "0x1", "The channel output is affected by software output control."),
                ]),
            ]),
            Register("PWMLOAD", 0x40071098, 32, "FTM PWM Load", [
                Field("GLDOK", 11, 1, "Global Load OK", [
                    EnumVal("GLDOK_0", "0", "No action."),
                    EnumVal("GLDOK_1", "0x1", "LDOK bit is set."),
                ]),
                Field("GLEN", 10, 1, "Global Load Enable", [
                    EnumVal("GLEN_0", "0", "Global Load Ok disabled."),
                    EnumVal("GLEN_1", "0x1", "Global Load OK enabled. A pulse event on the module global load input sets the LDOK bit."),
                ]),
                Field("LDOK", 9, 1, "Load Enable", [
                    EnumVal("LDOK_0", "0", "Loading updated values is disabled."),
                    EnumVal("LDOK_1", "0x1", "Loading updated values is enabled."),
                ]),
                Field("HCSEL", 8, 1, "Half Cycle Select", [
                    EnumVal("HCSEL_0", "0", "Half cycle reload is disabled and it is not considered as a reload opportunity."),
                    EnumVal("HCSEL_1", "0x1", "Half cycle reload is enabled and it is considered as a reload opportunity."),
                ]),
                Field("CH7SEL", 7, 1, "Channel 7 Select", [
                    EnumVal("CH7SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH7SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH6SEL", 6, 1, "Channel 6 Select", [
                    EnumVal("CH6SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH6SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH5SEL", 5, 1, "Channel 5 Select", [
                    EnumVal("CH5SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH5SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH4SEL", 4, 1, "Channel 4 Select", [
                    EnumVal("CH4SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH4SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH3SEL", 3, 1, "Channel 3 Select", [
                    EnumVal("CH3SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH3SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH2SEL", 2, 1, "Channel 2 Select", [
                    EnumVal("CH2SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH2SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH1SEL", 1, 1, "Channel 1 Select", [
                    EnumVal("CH1SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH1SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
                Field("CH0SEL", 0, 1, "Channel 0 Select", [
                    EnumVal("CH0SEL_0", "0", "Channel match is not included as a reload opportunity."),
                    EnumVal("CH0SEL_1", "0x1", "Channel match is included as a reload opportunity."),
                ]),
            ]),
            Register("HCR", 0x4007109C, 32, "Half Cycle Register", [
                Field("HCVAL", 0, 16, "Half Cycle Value", [
                ]),
            ]),
            Register("PAIR0DEADTIME", 0x400710A0, 32, "Pair 0 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR1DEADTIME", 0x400710A8, 32, "Pair 1 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR2DEADTIME", 0x400710B0, 32, "Pair 2 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
            Register("PAIR3DEADTIME", 0x400710B8, 32, "Pair 3 Deadtime Configuration", [
                Field("DTVALEX", 16, 4, "Extended Deadtime Value", [
                ]),
                Field("DTPS", 6, 2, "Deadtime Prescaler Value", [
                    EnumVal("DTPS_0", "#0x", "Divide the FTM input clock by 1."),
                    EnumVal("DTPS_2", "0x2", "Divide the FTM input clock by 4."),
                    EnumVal("DTPS_3", "0x3", "Divide the FTM input clock by 16."),
                ]),
                Field("DTVAL", 0, 6, "Deadtime Value", [
                ]),
            ]),
        ])

class Module_LMEM(Peripheral):
    def __init__(self):
        super().__init__("LMEM", 0xE0082000, 0x24, [
            Register("PCCCR", 0xE0082000, 32, "Cache control register", [
                Field("GO", 31, 1, "Initiate Cache Command", [
                    EnumVal("GO_0", "0", "Write: no effect. Read: no cache command active."),
                    EnumVal("GO_1", "0x1", "Write: initiate command indicated by bits 27-24. Read: cache command active."),
                ]),
                Field("PUSHW1", 27, 1, "Push Way 1", [
                    EnumVal("PUSHW1_0", "0", "No operation"),
                    EnumVal("PUSHW1_1", "0x1", "When setting the GO bit, push all modified lines in way 1"),
                ]),
                Field("INVW1", 26, 1, "Invalidate Way 1", [
                    EnumVal("INVW1_0", "0", "No operation"),
                    EnumVal("INVW1_1", "0x1", "When setting the GO bit, invalidate all lines in way 1"),
                ]),
                Field("PUSHW0", 25, 1, "Push Way 0", [
                    EnumVal("PUSHW0_0", "0", "No operation"),
                    EnumVal("PUSHW0_1", "0x1", "When setting the GO bit, push all modified lines in way 0"),
                ]),
                Field("INVW0", 24, 1, "Invalidate Way 0", [
                    EnumVal("INVW0_0", "0", "No operation"),
                    EnumVal("INVW0_1", "0x1", "When setting the GO bit, invalidate all lines in way 0."),
                ]),
                Field("PCCR3", 3, 1, "Forces no allocation on cache misses (must also have PCCR2 asserted)", [
                ]),
                Field("PCCR2", 2, 1, "Forces all cacheable spaces to write through", [
                ]),
                Field("ENCACHE", 0, 1, "Cache enable", [
                    EnumVal("ENCACHE_0", "0", "Cache disabled"),
                    EnumVal("ENCACHE_1", "0x1", "Cache enabled"),
                ]),
            ]),
            Register("PCCLCR", 0xE0082004, 32, "Cache line control register", [
                Field("LACC", 27, 1, "Line access type", [
                    EnumVal("LACC_0", "0", "Read"),
                    EnumVal("LACC_1", "0x1", "Write"),
                ]),
                Field("LADSEL", 26, 1, "Line Address Select", [
                    EnumVal("LADSEL_0", "0", "Cache address"),
                    EnumVal("LADSEL_1", "0x1", "Physical address"),
                ]),
                Field("LCMD", 24, 2, "Line Command", [
                    EnumVal("LCMD_0", "0", "Search and read or write"),
                    EnumVal("LCMD_1", "0x1", "Invalidate"),
                    EnumVal("LCMD_2", "0x2", "Push"),
                    EnumVal("LCMD_3", "0x3", "Clear"),
                ]),
                Field("LCWAY", 22, 1, "Line Command Way", [
                ]),
                Field("LCIMB", 21, 1, "Line Command Initial Modified Bit", [
                ]),
                Field("LCIVB", 20, 1, "Line Command Initial Valid Bit", [
                ]),
                Field("TDSEL", 16, 1, "Tag/Data Select", [
                    EnumVal("TDSEL_0", "0", "Data"),
                    EnumVal("TDSEL_1", "0x1", "Tag"),
                ]),
                Field("WSEL", 14, 1, "Way select", [
                    EnumVal("WSEL_0", "0", "Way 0"),
                    EnumVal("WSEL_1", "0x1", "Way 1"),
                ]),
                Field("CACHEADDR", 2, 12, "Cache address", [
                ]),
                Field("LGO", 0, 1, "Initiate Cache Line Command", [
                    EnumVal("LGO_0", "0", "Write: no effect. Read: no line command active."),
                    EnumVal("LGO_1", "0x1", "Write: initiate line command indicated by bits 27-24. Read: line command active."),
                ]),
            ]),
            Register("PCCSAR", 0xE0082008, 32, "Cache search address register", [
                Field("PHYADDR", 2, 30, "Physical Address", [
                ]),
                Field("LGO", 0, 1, "Initiate Cache Line Command", [
                    EnumVal("LGO_0", "0", "Write: no effect. Read: no line command active."),
                    EnumVal("LGO_1", "0x1", "Write: initiate line command indicated by bits CLCR[27:24]. Read: line command active."),
                ]),
            ]),
            Register("PCCCVR", 0xE008200C, 32, "Cache read/write value register", [
                Field("DATA", 0, 32, "Cache read/write Data", [
                ]),
            ]),
            Register("PCCRMR", 0xE0082020, 32, "Cache regions mode register", [
                Field("R0", 30, 2, "Region 0 mode", [
                    EnumVal("R0_0", "0", "Non-cacheable"),
                    EnumVal("R0_1", "0x1", "Non-cacheable"),
                    EnumVal("R0_2", "0x2", "Write-through"),
                    EnumVal("R0_3", "0x3", "Write-back"),
                ]),
                Field("R1", 28, 2, "Region 1 mode", [
                    EnumVal("R1_0", "0", "Non-cacheable"),
                    EnumVal("R1_1", "0x1", "Non-cacheable"),
                    EnumVal("R1_2", "0x2", "Write-through"),
                    EnumVal("R1_3", "0x3", "Write-back"),
                ]),
                Field("R2", 26, 2, "Region 2 mode", [
                    EnumVal("R2_0", "0", "Non-cacheable"),
                    EnumVal("R2_1", "0x1", "Non-cacheable"),
                    EnumVal("R2_2", "0x2", "Write-through"),
                    EnumVal("R2_3", "0x3", "Write-back"),
                ]),
                Field("R3", 24, 2, "Region 3 mode", [
                    EnumVal("R3_0", "0", "Non-cacheable"),
                    EnumVal("R3_1", "0x1", "Non-cacheable"),
                    EnumVal("R3_2", "0x2", "Write-through"),
                    EnumVal("R3_3", "0x3", "Write-back"),
                ]),
                Field("R4", 22, 2, "Region 4 mode", [
                    EnumVal("R4_0", "0", "Non-cacheable"),
                    EnumVal("R4_1", "0x1", "Non-cacheable"),
                    EnumVal("R4_2", "0x2", "Write-through"),
                    EnumVal("R4_3", "0x3", "Write-back"),
                ]),
                Field("R5", 20, 2, "Region 5 mode", [
                    EnumVal("R5_0", "0", "Non-cacheable"),
                    EnumVal("R5_1", "0x1", "Non-cacheable"),
                    EnumVal("R5_2", "0x2", "Write-through"),
                    EnumVal("R5_3", "0x3", "Write-back"),
                ]),
                Field("R6", 18, 2, "Region 6 mode", [
                    EnumVal("R6_0", "0", "Non-cacheable"),
                    EnumVal("R6_1", "0x1", "Non-cacheable"),
                    EnumVal("R6_2", "0x2", "Write-through"),
                    EnumVal("R6_3", "0x3", "Write-back"),
                ]),
                Field("R7", 16, 2, "Region 7 mode", [
                    EnumVal("R7_0", "0", "Non-cacheable"),
                    EnumVal("R7_1", "0x1", "Non-cacheable"),
                    EnumVal("R7_2", "0x2", "Write-through"),
                    EnumVal("R7_3", "0x3", "Write-back"),
                ]),
                Field("R8", 14, 2, "Region 8 mode", [
                    EnumVal("R8_0", "0", "Non-cacheable"),
                    EnumVal("R8_1", "0x1", "Non-cacheable"),
                    EnumVal("R8_2", "0x2", "Write-through"),
                    EnumVal("R8_3", "0x3", "Write-back"),
                ]),
                Field("R9", 12, 2, "Region 9 mode", [
                    EnumVal("R9_0", "0", "Non-cacheable"),
                    EnumVal("R9_1", "0x1", "Non-cacheable"),
                    EnumVal("R9_2", "0x2", "Write-through"),
                    EnumVal("R9_3", "0x3", "Write-back"),
                ]),
                Field("R10", 10, 2, "Region 10 mode", [
                    EnumVal("R10_0", "0", "Non-cacheable"),
                    EnumVal("R10_1", "0x1", "Non-cacheable"),
                    EnumVal("R10_2", "0x2", "Write-through"),
                    EnumVal("R10_3", "0x3", "Write-back"),
                ]),
                Field("R11", 8, 2, "Region 11 mode", [
                    EnumVal("R11_0", "0", "Non-cacheable"),
                    EnumVal("R11_1", "0x1", "Non-cacheable"),
                    EnumVal("R11_2", "0x2", "Write-through"),
                    EnumVal("R11_3", "0x3", "Write-back"),
                ]),
                Field("R12", 6, 2, "Region 12 mode", [
                    EnumVal("R12_0", "0", "Non-cacheable"),
                    EnumVal("R12_1", "0x1", "Non-cacheable"),
                    EnumVal("R12_2", "0x2", "Write-through"),
                    EnumVal("R12_3", "0x3", "Write-back"),
                ]),
                Field("R13", 4, 2, "Region 13 mode", [
                    EnumVal("R13_0", "0", "Non-cacheable"),
                    EnumVal("R13_1", "0x1", "Non-cacheable"),
                    EnumVal("R13_2", "0x2", "Write-through"),
                    EnumVal("R13_3", "0x3", "Write-back"),
                ]),
                Field("R14", 2, 2, "Region 14 mode", [
                    EnumVal("R14_0", "0", "Non-cacheable"),
                    EnumVal("R14_1", "0x1", "Non-cacheable"),
                    EnumVal("R14_2", "0x2", "Write-through"),
                    EnumVal("R14_3", "0x3", "Write-back"),
                ]),
                Field("R15", 0, 2, "Region 15 mode", [
                    EnumVal("R15_0", "0", "Non-cacheable"),
                    EnumVal("R15_1", "0x1", "Non-cacheable"),
                    EnumVal("R15_2", "0x2", "Write-through"),
                    EnumVal("R15_3", "0x3", "Write-back"),
                ]),
            ]),
        ])

class Module_LPI2C0(Peripheral):
    def __init__(self):
        super().__init__("LPI2C0", 0x40066000, 0x174, [
            Register("VERID", 0x40066000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("FEATURE_2", "0x2", "Master only, with standard feature set"),
                    EnumVal("FEATURE_3", "0x3", "Master and slave, with standard feature set"),
                ]),
            ]),
            Register("PARAM", 0x40066004, 32, "Parameter Register", [
                Field("MRXFIFO", 8, 4, "Master Receive FIFO Size", [
                ]),
                Field("MTXFIFO", 0, 4, "Master Transmit FIFO Size", [
                ]),
            ]),
            Register("MCR", 0x40066010, 32, "Master Control Register", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("RRF_0", "0", "No effect"),
                    EnumVal("RRF_1", "0x1", "Receive FIFO is reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("RTF_0", "0", "No effect"),
                    EnumVal("RTF_1", "0x1", "Transmit FIFO is reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DBGEN_0", "0", "Master is disabled in debug mode"),
                    EnumVal("DBGEN_1", "0x1", "Master is enabled in debug mode"),
                ]),
                Field("DOZEN", 2, 1, "Doze mode enable", [
                    EnumVal("DOZEN_0", "0", "Master is enabled in Doze mode"),
                    EnumVal("DOZEN_1", "0x1", "Master is disabled in Doze mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("RST_0", "0", "Master logic is not reset"),
                    EnumVal("RST_1", "0x1", "Master logic is reset"),
                ]),
                Field("MEN", 0, 1, "Master Enable", [
                    EnumVal("MEN_0", "0", "Master logic is disabled"),
                    EnumVal("MEN_1", "0x1", "Master logic is enabled"),
                ]),
            ]),
            Register("MSR", 0x40066014, 32, "Master Status Register", [
                Field("BBF", 25, 1, "Bus Busy Flag", [
                    EnumVal("BBF_0", "0", "I2C Bus is idle"),
                    EnumVal("BBF_1", "0x1", "I2C Bus is busy"),
                ]),
                Field("MBF", 24, 1, "Master Busy Flag", [
                    EnumVal("MBF_0", "0", "I2C Master is idle"),
                    EnumVal("MBF_1", "0x1", "I2C Master is busy"),
                ]),
                Field("DMF", 14, 1, "Data Match Flag", [
                    EnumVal("DMF_0", "0", "Have not received matching data"),
                    EnumVal("DMF_1", "0x1", "Have received matching data"),
                ]),
                Field("PLTF", 13, 1, "Pin Low Timeout Flag", [
                    EnumVal("PLTF_0", "0", "Pin low timeout has not occurred or is disabled"),
                    EnumVal("PLTF_1", "0x1", "Pin low timeout has occurred"),
                ]),
                Field("FEF", 12, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "No error"),
                    EnumVal("FEF_1", "0x1", "Master sending or receiving data without a START condition"),
                ]),
                Field("ALF", 11, 1, "Arbitration Lost Flag", [
                    EnumVal("ALF_0", "0", "Master has not lost arbitration"),
                    EnumVal("ALF_1", "0x1", "Master has lost arbitration"),
                ]),
                Field("NDF", 10, 1, "NACK Detect Flag", [
                    EnumVal("NDF_0", "0", "Unexpected NACK was not detected"),
                    EnumVal("NDF_1", "0x1", "Unexpected NACK was detected"),
                ]),
                Field("SDF", 9, 1, "STOP Detect Flag", [
                    EnumVal("SDF_0", "0", "Master has not generated a STOP condition"),
                    EnumVal("SDF_1", "0x1", "Master has generated a STOP condition"),
                ]),
                Field("EPF", 8, 1, "End Packet Flag", [
                    EnumVal("EPF_0", "0", "Master has not generated a STOP or Repeated START condition"),
                    EnumVal("EPF_1", "0x1", "Master has generated a STOP or Repeated START condition"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("RDF_0", "0", "Receive Data is not ready"),
                    EnumVal("RDF_1", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TDF_0", "0", "Transmit data is not requested"),
                    EnumVal("TDF_1", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("MIER", 0x40066018, 32, "Master Interrupt Enable Register", [
                Field("DMIE", 14, 1, "Data Match Interrupt Enable", [
                    EnumVal("DMIE_0", "0", "Disabled"),
                    EnumVal("DMIE_1", "0x1", "Enabled"),
                ]),
                Field("PLTIE", 13, 1, "Pin Low Timeout Interrupt Enable", [
                    EnumVal("PLTIE_0", "0", "Disabled"),
                    EnumVal("PLTIE_1", "0x1", "Enabled"),
                ]),
                Field("FEIE", 12, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Enabled"),
                    EnumVal("FEIE_1", "0x1", "Disabled"),
                ]),
                Field("ALIE", 11, 1, "Arbitration Lost Interrupt Enable", [
                    EnumVal("ALIE_0", "0", "Disabled"),
                    EnumVal("ALIE_1", "0x1", "Enabled"),
                ]),
                Field("NDIE", 10, 1, "NACK Detect Interrupt Enable", [
                    EnumVal("NDIE_0", "0", "Disabled"),
                    EnumVal("NDIE_1", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP Detect Interrupt Enable", [
                    EnumVal("SDIE_0", "0", "Disabled"),
                    EnumVal("SDIE_1", "0x1", "Enabled"),
                ]),
                Field("EPIE", 8, 1, "End Packet Interrupt Enable", [
                    EnumVal("EPIE_0", "0", "Disabled"),
                    EnumVal("EPIE_1", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("RDIE_0", "0", "Disabled"),
                    EnumVal("RDIE_1", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("TDIE_0", "0", "Disabled"),
                    EnumVal("TDIE_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("MDER", 0x4006601C, 32, "Master DMA Enable Register", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("RDDE_0", "0", "DMA request is disabled"),
                    EnumVal("RDDE_1", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("TDDE_0", "0", "DMA request is disabled"),
                    EnumVal("TDDE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("MCFGR0", 0x40066020, 32, "Master Configuration Register 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("RDMO_0", "0", "Received data is stored in the receive FIFO"),
                    EnumVal("RDMO_1", "0x1", "Received data is discarded unless the the Data Match Flag (MSR[DMF]) is set"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("CIRFIFO_0", "0", "Circular FIFO is disabled"),
                    EnumVal("CIRFIFO_1", "0x1", "Circular FIFO is enabled"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HRSEL_0", "0", "Host request input is pin HREQ"),
                    EnumVal("HRSEL_1", "0x1", "Host request input is input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("HRPOL_0", "0", "Active low"),
                    EnumVal("HRPOL_1", "0x1", "Active high"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("HREN_0", "0", "Host request input is disabled"),
                    EnumVal("HREN_1", "0x1", "Host request input is enabled"),
                ]),
            ]),
            Register("MCFGR1", 0x40066024, 32, "Master Configuration Register 1", [
                Field("PINCFG", 24, 3, "Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "2-pin open drain mode"),
                    EnumVal("PINCFG_1", "0x1", "2-pin output only mode (ultra-fast mode)"),
                    EnumVal("PINCFG_2", "0x2", "2-pin push-pull mode"),
                    EnumVal("PINCFG_3", "0x3", "4-pin push-pull mode"),
                    EnumVal("PINCFG_4", "0x4", "2-pin open drain mode with separate LPI2C slave"),
                    EnumVal("PINCFG_5", "0x5", "2-pin output only mode (ultra-fast mode) with separate LPI2C slave"),
                    EnumVal("PINCFG_6", "0x6", "2-pin push-pull mode with separate LPI2C slave"),
                    EnumVal("PINCFG_7", "0x7", "4-pin push-pull mode (inverted outputs)"),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("MATCFG_0", "0", "Match is disabled"),
                    EnumVal("MATCFG_2", "0x2", "Match is enabled (1st data word equals MATCH0 OR MATCH1)"),
                    EnumVal("MATCFG_3", "0x3", "Match is enabled (any data word equals MATCH0 OR MATCH1)"),
                    EnumVal("MATCFG_4", "0x4", "Match is enabled (1st data word equals MATCH0 AND 2nd data word equals MATCH1)"),
                    EnumVal("MATCFG_5", "0x5", "Match is enabled (any data word equals MATCH0 AND next data word equals MATCH1)"),
                    EnumVal("MATCFG_6", "0x6", "Match is enabled (1st data word AND MATCH1 equals MATCH0 AND MATCH1)"),
                    EnumVal("MATCFG_7", "0x7", "Match is enabled (any data word AND MATCH1 equals MATCH0 AND MATCH1)"),
                ]),
                Field("TIMECFG", 10, 1, "Timeout Configuration", [
                    EnumVal("TIMECFG_0", "0", "Pin Low Timeout Flag will set if SCL is low for longer than the configured timeout"),
                    EnumVal("TIMECFG_1", "0x1", "Pin Low Timeout Flag will set if either SCL or SDA is low for longer than the configured timeout"),
                ]),
                Field("IGNACK", 9, 1, "IGNACK", [
                    EnumVal("IGNACK_0", "0", "LPI2C Master will receive ACK and NACK normally"),
                    EnumVal("IGNACK_1", "0x1", "LPI2C Master will treat a received NACK as if it (NACK) was an ACK"),
                ]),
                Field("AUTOSTOP", 8, 1, "Automatic STOP Generation", [
                    EnumVal("AUTOSTOP_0", "0", "No effect"),
                    EnumVal("AUTOSTOP_1", "0x1", "STOP condition is automatically generated whenever the transmit FIFO is empty and the LPI2C master is busy"),
                ]),
                Field("PRESCALE", 0, 3, "Prescaler", [
                    EnumVal("PRESCALE_0", "0", "Divide by 1"),
                    EnumVal("PRESCALE_1", "0x1", "Divide by 2"),
                    EnumVal("PRESCALE_2", "0x2", "Divide by 4"),
                    EnumVal("PRESCALE_3", "0x3", "Divide by 8"),
                    EnumVal("PRESCALE_4", "0x4", "Divide by 16"),
                    EnumVal("PRESCALE_5", "0x5", "Divide by 32"),
                    EnumVal("PRESCALE_6", "0x6", "Divide by 64"),
                    EnumVal("PRESCALE_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("MCFGR2", 0x40066028, 32, "Master Configuration Register 2", [
                Field("FILTSDA", 24, 4, "Glitch Filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch Filter SCL", [
                ]),
                Field("BUSIDLE", 0, 12, "Bus Idle Timeout", [
                ]),
            ]),
            Register("MCFGR3", 0x4006602C, 32, "Master Configuration Register 3", [
                Field("PINLOW", 8, 12, "Pin Low Timeout", [
                ]),
            ]),
            Register("MDMR", 0x40066040, 32, "Master Data Match Register", [
                Field("MATCH1", 16, 8, "Match 1 Value", [
                ]),
                Field("MATCH0", 0, 8, "Match 0 Value", [
                ]),
            ]),
            Register("MCCR0", 0x40066048, 32, "Master Clock Configuration Register 0", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MCCR1", 0x40066050, 32, "Master Clock Configuration Register 1", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MFCR", 0x40066058, 32, "Master FIFO Control Register", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("MFSR", 0x4006605C, 32, "Master FIFO Status Register", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("MTDR", 0x40066060, 32, "Master Transmit Data Register", [
                Field("CMD", 8, 3, "Command Data", [
                    EnumVal("CMD_0", "0", "Transmit DATA[7:0]"),
                    EnumVal("CMD_1", "0x1", "Receive (DATA[7:0] + 1) bytes"),
                    EnumVal("CMD_2", "0x2", "Generate STOP condition"),
                    EnumVal("CMD_3", "0x3", "Receive and discard (DATA[7:0] + 1) bytes"),
                    EnumVal("CMD_4", "0x4", "Generate (repeated) START and transmit address in DATA[7:0]"),
                    EnumVal("CMD_5", "0x5", "Generate (repeated) START and transmit address in DATA[7:0]. This transfer expects a NACK to be returned."),
                    EnumVal("CMD_6", "0x6", "Generate (repeated) START and transmit address in DATA[7:0] using high speed mode"),
                    EnumVal("CMD_7", "0x7", "Generate (repeated) START and transmit address in DATA[7:0] using high speed mode. This transfer expects a NACK to be returned."),
                ]),
                Field("DATA", 0, 8, "Transmit Data", [
                ]),
            ]),
            Register("MRDR", 0x40066070, 32, "Master Receive Data Register", [
                Field("RXEMPTY", 14, 1, "RX Empty", [
                    EnumVal("RXEMPTY_0", "0", "Receive FIFO is not empty"),
                    EnumVal("RXEMPTY_1", "0x1", "Receive FIFO is empty"),
                ]),
                Field("DATA", 0, 8, "Receive Data", [
                ]),
            ]),
            Register("SCR", 0x40066110, 32, "Slave Control Register", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("RRF_0", "0", "No effect"),
                    EnumVal("RRF_1", "0x1", "Receive Data Register is now empty"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("RTF_0", "0", "No effect"),
                    EnumVal("RTF_1", "0x1", "Transmit Data Register is now empty"),
                ]),
                Field("FILTDZ", 5, 1, "Filter Doze Enable", [
                    EnumVal("FILTDZ_0", "0", "Filter remains enabled in Doze mode"),
                    EnumVal("FILTDZ_1", "0x1", "Filter is disabled in Doze mode"),
                ]),
                Field("FILTEN", 4, 1, "Filter Enable", [
                    EnumVal("FILTEN_0", "0", "Disable digital filter and output delay counter for slave mode"),
                    EnumVal("FILTEN_1", "0x1", "Enable digital filter and output delay counter for slave mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("RST_0", "0", "Slave mode logic is not reset"),
                    EnumVal("RST_1", "0x1", "Slave mode logic is reset"),
                ]),
                Field("SEN", 0, 1, "Slave Enable", [
                    EnumVal("SEN_0", "0", "I2C Slave mode is disabled"),
                    EnumVal("SEN_1", "0x1", "I2C Slave mode is enabled"),
                ]),
            ]),
            Register("SSR", 0x40066114, 32, "Slave Status Register", [
                Field("BBF", 25, 1, "Bus Busy Flag", [
                    EnumVal("BBF_0", "0", "I2C Bus is idle"),
                    EnumVal("BBF_1", "0x1", "I2C Bus is busy"),
                ]),
                Field("SBF", 24, 1, "Slave Busy Flag", [
                    EnumVal("SBF_0", "0", "I2C Slave is idle"),
                    EnumVal("SBF_1", "0x1", "I2C Slave is busy"),
                ]),
                Field("SARF", 15, 1, "SMBus Alert Response Flag", [
                    EnumVal("SARF_0", "0", "SMBus Alert Response is disabled or not detected"),
                    EnumVal("SARF_1", "0x1", "SMBus Alert Response is enabled and detected"),
                ]),
                Field("GCF", 14, 1, "General Call Flag", [
                    EnumVal("GCF_0", "0", "Slave has not detected the General Call Address or the General Call Address is disabled"),
                    EnumVal("GCF_1", "0x1", "Slave has detected the General Call Address"),
                ]),
                Field("AM1F", 13, 1, "Address Match 1 Flag", [
                    EnumVal("AM1F_0", "0", "Have not received an ADDR1 or ADDR0/ADDR1 range matching address"),
                    EnumVal("AM1F_1", "0x1", "Have received an ADDR1 or ADDR0/ADDR1 range matching address"),
                ]),
                Field("AM0F", 12, 1, "Address Match 0 Flag", [
                    EnumVal("AM0F_0", "0", "Have not received an ADDR0 matching address"),
                    EnumVal("AM0F_1", "0x1", "Have received an ADDR0 matching address"),
                ]),
                Field("FEF", 11, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "FIFO underflow or overflow was not detected"),
                    EnumVal("FEF_1", "0x1", "FIFO underflow or overflow was detected"),
                ]),
                Field("BEF", 10, 1, "Bit Error Flag", [
                    EnumVal("BEF_0", "0", "Slave has not detected a bit error"),
                    EnumVal("BEF_1", "0x1", "Slave has detected a bit error"),
                ]),
                Field("SDF", 9, 1, "STOP Detect Flag", [
                    EnumVal("SDF_0", "0", "Slave has not detected a STOP condition"),
                    EnumVal("SDF_1", "0x1", "Slave has detected a STOP condition"),
                ]),
                Field("RSF", 8, 1, "Repeated Start Flag", [
                    EnumVal("RSF_0", "0", "Slave has not detected a Repeated START condition"),
                    EnumVal("RSF_1", "0x1", "Slave has detected a Repeated START condition"),
                ]),
                Field("TAF", 3, 1, "Transmit ACK Flag", [
                    EnumVal("TAF_0", "0", "Transmit ACK/NACK is not required"),
                    EnumVal("TAF_1", "0x1", "Transmit ACK/NACK is required"),
                ]),
                Field("AVF", 2, 1, "Address Valid Flag", [
                    EnumVal("AVF_0", "0", "Address Status Register is not valid"),
                    EnumVal("AVF_1", "0x1", "Address Status Register is valid"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("RDF_0", "0", "Receive data is not ready"),
                    EnumVal("RDF_1", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TDF_0", "0", "Transmit data not requested"),
                    EnumVal("TDF_1", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("SIER", 0x40066118, 32, "Slave Interrupt Enable Register", [
                Field("SARIE", 15, 1, "SMBus Alert Response Interrupt Enable", [
                    EnumVal("SARIE_0", "0", "Disabled"),
                    EnumVal("SARIE_1", "0x1", "Enabled"),
                ]),
                Field("GCIE", 14, 1, "General Call Interrupt Enable", [
                    EnumVal("GCIE_0", "0", "Disabled"),
                    EnumVal("GCIE_1", "0x1", "Enabled"),
                ]),
                Field("AM1F", 13, 1, "Address Match 1 Interrupt Enable", [
                    EnumVal("AM1F_0", "0", "Disabled"),
                    EnumVal("AM1F_1", "0x1", "Enabled"),
                ]),
                Field("AM0IE", 12, 1, "Address Match 0 Interrupt Enable", [
                    EnumVal("AM0IE_0", "0", "Enabled"),
                    EnumVal("AM0IE_1", "0x1", "Disabled"),
                ]),
                Field("FEIE", 11, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Disabled"),
                    EnumVal("FEIE_1", "0x1", "Enabled"),
                ]),
                Field("BEIE", 10, 1, "Bit Error Interrupt Enable", [
                    EnumVal("BEIE_0", "0", "Disabled"),
                    EnumVal("BEIE_1", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP Detect Interrupt Enable", [
                    EnumVal("SDIE_0", "0", "Disabled"),
                    EnumVal("SDIE_1", "0x1", "Enabled"),
                ]),
                Field("RSIE", 8, 1, "Repeated Start Interrupt Enable", [
                    EnumVal("RSIE_0", "0", "Disabled"),
                    EnumVal("RSIE_1", "0x1", "Enabled"),
                ]),
                Field("TAIE", 3, 1, "Transmit ACK Interrupt Enable", [
                    EnumVal("TAIE_0", "0", "Disabled"),
                    EnumVal("TAIE_1", "0x1", "Enabled"),
                ]),
                Field("AVIE", 2, 1, "Address Valid Interrupt Enable", [
                    EnumVal("AVIE_0", "0", "Disabled"),
                    EnumVal("AVIE_1", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("RDIE_0", "0", "Disabled"),
                    EnumVal("RDIE_1", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("TDIE_0", "0", "Disabled"),
                    EnumVal("TDIE_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("SDER", 0x4006611C, 32, "Slave DMA Enable Register", [
                Field("AVDE", 2, 1, "Address Valid DMA Enable", [
                    EnumVal("AVDE_0", "0", "DMA request is disabled"),
                    EnumVal("AVDE_1", "0x1", "DMA request is enabled"),
                ]),
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("RDDE_0", "0", "DMA request is disabled"),
                    EnumVal("RDDE_1", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("TDDE_0", "0", "DMA request is disabled"),
                    EnumVal("TDDE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("SCFGR1", 0x40066124, 32, "Slave Configuration Register 1", [
                Field("ADDRCFG", 16, 3, "Address Configuration", [
                    EnumVal("ADDRCFG_0", "0", "Address match 0 (7-bit)"),
                    EnumVal("ADDRCFG_1", "0x1", "Address match 0 (10-bit)"),
                    EnumVal("ADDRCFG_2", "0x2", "Address match 0 (7-bit) or Address match 1 (7-bit)"),
                    EnumVal("ADDRCFG_3", "0x3", "Address match 0 (10-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRCFG_4", "0x4", "Address match 0 (7-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRCFG_5", "0x5", "Address match 0 (10-bit) or Address match 1 (7-bit)"),
                    EnumVal("ADDRCFG_6", "0x6", "From Address match 0 (7-bit) to Address match 1 (7-bit)"),
                    EnumVal("ADDRCFG_7", "0x7", "From Address match 0 (10-bit) to Address match 1 (10-bit)"),
                ]),
                Field("HSMEN", 13, 1, "High Speed Mode Enable", [
                    EnumVal("HSMEN_0", "0", "Disables detection of HS-mode master code"),
                    EnumVal("HSMEN_1", "0x1", "Enables detection of HS-mode master code"),
                ]),
                Field("IGNACK", 12, 1, "Ignore NACK", [
                    EnumVal("IGNACK_0", "0", "Slave will end transfer when NACK is detected"),
                    EnumVal("IGNACK_1", "0x1", "Slave will not end transfer when NACK detected"),
                ]),
                Field("RXCFG", 11, 1, "Receive Data Configuration", [
                    EnumVal("RXCFG_0", "0", "Reading the Receive Data register will return received data and clear the Receive Data flag (MSR[RDF])."),
                    EnumVal("RXCFG_1", "0x1", "Reading the Receive Data register when the Address Valid flag (SSR[AVF])is set, will return the Address Status register and clear the Address Valid flag. Reading the Receive Data register when the Address Valid flag is clear, will return received data and clear the Receive Data flag (MSR[RDF])."),
                ]),
                Field("TXCFG", 10, 1, "Transmit Flag Configuration", [
                    EnumVal("TXCFG_0", "0", "Transmit Data Flag will only assert during a slave-transmit transfer when the Transmit Data register is empty"),
                    EnumVal("TXCFG_1", "0x1", "Transmit Data Flag will assert whenever the Transmit Data register is empty"),
                ]),
                Field("SAEN", 9, 1, "SMBus Alert Enable", [
                    EnumVal("SAEN_0", "0", "Disables match on SMBus Alert"),
                    EnumVal("SAEN_1", "0x1", "Enables match on SMBus Alert"),
                ]),
                Field("GCEN", 8, 1, "General Call Enable", [
                    EnumVal("GCEN_0", "0", "General Call address is disabled"),
                    EnumVal("GCEN_1", "0x1", "General Call address is enabled"),
                ]),
                Field("ACKSTALL", 3, 1, "ACK SCL Stall", [
                    EnumVal("ACKSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("ACKSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
                Field("TXDSTALL", 2, 1, "TX Data SCL Stall", [
                    EnumVal("TXDSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("TXDSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
                Field("RXSTALL", 1, 1, "RX SCL Stall", [
                    EnumVal("RXSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("RXSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
                Field("ADRSTALL", 0, 1, "Address SCL Stall", [
                    EnumVal("ADRSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("ADRSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
            ]),
            Register("SCFGR2", 0x40066128, 32, "Slave Configuration Register 2", [
                Field("FILTSDA", 24, 4, "Glitch Filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch Filter SCL", [
                ]),
                Field("DATAVD", 8, 6, "Data Valid Delay", [
                ]),
                Field("CLKHOLD", 0, 4, "Clock Hold Time", [
                ]),
            ]),
            Register("SAMR", 0x40066140, 32, "Slave Address Match Register", [
                Field("ADDR1", 17, 10, "Address 1 Value", [
                ]),
                Field("ADDR0", 1, 10, "Address 0 Value", [
                ]),
            ]),
            Register("SASR", 0x40066150, 32, "Slave Address Status Register", [
                Field("ANV", 14, 1, "Address Not Valid", [
                    EnumVal("ANV_0", "0", "Received Address (RADDR) is valid"),
                    EnumVal("ANV_1", "0x1", "Received Address (RADDR) is not valid"),
                ]),
                Field("RADDR", 0, 11, "Received Address", [
                ]),
            ]),
            Register("STAR", 0x40066154, 32, "Slave Transmit ACK Register", [
                Field("TXNACK", 0, 1, "Transmit NACK", [
                    EnumVal("TXNACK_0", "0", "Write a Transmit ACK for each received word"),
                    EnumVal("TXNACK_1", "0x1", "Write a Transmit NACK for each received word"),
                ]),
            ]),
            Register("STDR", 0x40066160, 32, "Slave Transmit Data Register", [
                Field("DATA", 0, 8, "Transmit Data", [
                ]),
            ]),
            Register("SRDR", 0x40066170, 32, "Slave Receive Data Register", [
                Field("SOF", 15, 1, "Start Of Frame", [
                    EnumVal("SOF_0", "0", "Indicates this is not the first data word since a (repeated) START or STOP condition"),
                    EnumVal("SOF_1", "0x1", "Indicates this is the first data word since a (repeated) START or STOP condition"),
                ]),
                Field("RXEMPTY", 14, 1, "RX Empty", [
                    EnumVal("RXEMPTY_0", "0", "The Receive Data Register is not empty"),
                    EnumVal("RXEMPTY_1", "0x1", "The Receive Data Register is empty"),
                ]),
                Field("DATA", 0, 8, "Receive Data", [
                ]),
            ]),
        ])

class Module_LPI2C1(Peripheral):
    def __init__(self):
        super().__init__("LPI2C1", 0x40067000, 0x174, [
            Register("VERID", 0x40067000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("FEATURE_2", "0x2", "Master only, with standard feature set"),
                    EnumVal("FEATURE_3", "0x3", "Master and slave, with standard feature set"),
                ]),
            ]),
            Register("PARAM", 0x40067004, 32, "Parameter Register", [
                Field("MRXFIFO", 8, 4, "Master Receive FIFO Size", [
                ]),
                Field("MTXFIFO", 0, 4, "Master Transmit FIFO Size", [
                ]),
            ]),
            Register("MCR", 0x40067010, 32, "Master Control Register", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("RRF_0", "0", "No effect"),
                    EnumVal("RRF_1", "0x1", "Receive FIFO is reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("RTF_0", "0", "No effect"),
                    EnumVal("RTF_1", "0x1", "Transmit FIFO is reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DBGEN_0", "0", "Master is disabled in debug mode"),
                    EnumVal("DBGEN_1", "0x1", "Master is enabled in debug mode"),
                ]),
                Field("DOZEN", 2, 1, "Doze mode enable", [
                    EnumVal("DOZEN_0", "0", "Master is enabled in Doze mode"),
                    EnumVal("DOZEN_1", "0x1", "Master is disabled in Doze mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("RST_0", "0", "Master logic is not reset"),
                    EnumVal("RST_1", "0x1", "Master logic is reset"),
                ]),
                Field("MEN", 0, 1, "Master Enable", [
                    EnumVal("MEN_0", "0", "Master logic is disabled"),
                    EnumVal("MEN_1", "0x1", "Master logic is enabled"),
                ]),
            ]),
            Register("MSR", 0x40067014, 32, "Master Status Register", [
                Field("BBF", 25, 1, "Bus Busy Flag", [
                    EnumVal("BBF_0", "0", "I2C Bus is idle"),
                    EnumVal("BBF_1", "0x1", "I2C Bus is busy"),
                ]),
                Field("MBF", 24, 1, "Master Busy Flag", [
                    EnumVal("MBF_0", "0", "I2C Master is idle"),
                    EnumVal("MBF_1", "0x1", "I2C Master is busy"),
                ]),
                Field("DMF", 14, 1, "Data Match Flag", [
                    EnumVal("DMF_0", "0", "Have not received matching data"),
                    EnumVal("DMF_1", "0x1", "Have received matching data"),
                ]),
                Field("PLTF", 13, 1, "Pin Low Timeout Flag", [
                    EnumVal("PLTF_0", "0", "Pin low timeout has not occurred or is disabled"),
                    EnumVal("PLTF_1", "0x1", "Pin low timeout has occurred"),
                ]),
                Field("FEF", 12, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "No error"),
                    EnumVal("FEF_1", "0x1", "Master sending or receiving data without a START condition"),
                ]),
                Field("ALF", 11, 1, "Arbitration Lost Flag", [
                    EnumVal("ALF_0", "0", "Master has not lost arbitration"),
                    EnumVal("ALF_1", "0x1", "Master has lost arbitration"),
                ]),
                Field("NDF", 10, 1, "NACK Detect Flag", [
                    EnumVal("NDF_0", "0", "Unexpected NACK was not detected"),
                    EnumVal("NDF_1", "0x1", "Unexpected NACK was detected"),
                ]),
                Field("SDF", 9, 1, "STOP Detect Flag", [
                    EnumVal("SDF_0", "0", "Master has not generated a STOP condition"),
                    EnumVal("SDF_1", "0x1", "Master has generated a STOP condition"),
                ]),
                Field("EPF", 8, 1, "End Packet Flag", [
                    EnumVal("EPF_0", "0", "Master has not generated a STOP or Repeated START condition"),
                    EnumVal("EPF_1", "0x1", "Master has generated a STOP or Repeated START condition"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("RDF_0", "0", "Receive Data is not ready"),
                    EnumVal("RDF_1", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TDF_0", "0", "Transmit data is not requested"),
                    EnumVal("TDF_1", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("MIER", 0x40067018, 32, "Master Interrupt Enable Register", [
                Field("DMIE", 14, 1, "Data Match Interrupt Enable", [
                    EnumVal("DMIE_0", "0", "Disabled"),
                    EnumVal("DMIE_1", "0x1", "Enabled"),
                ]),
                Field("PLTIE", 13, 1, "Pin Low Timeout Interrupt Enable", [
                    EnumVal("PLTIE_0", "0", "Disabled"),
                    EnumVal("PLTIE_1", "0x1", "Enabled"),
                ]),
                Field("FEIE", 12, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Enabled"),
                    EnumVal("FEIE_1", "0x1", "Disabled"),
                ]),
                Field("ALIE", 11, 1, "Arbitration Lost Interrupt Enable", [
                    EnumVal("ALIE_0", "0", "Disabled"),
                    EnumVal("ALIE_1", "0x1", "Enabled"),
                ]),
                Field("NDIE", 10, 1, "NACK Detect Interrupt Enable", [
                    EnumVal("NDIE_0", "0", "Disabled"),
                    EnumVal("NDIE_1", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP Detect Interrupt Enable", [
                    EnumVal("SDIE_0", "0", "Disabled"),
                    EnumVal("SDIE_1", "0x1", "Enabled"),
                ]),
                Field("EPIE", 8, 1, "End Packet Interrupt Enable", [
                    EnumVal("EPIE_0", "0", "Disabled"),
                    EnumVal("EPIE_1", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("RDIE_0", "0", "Disabled"),
                    EnumVal("RDIE_1", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("TDIE_0", "0", "Disabled"),
                    EnumVal("TDIE_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("MDER", 0x4006701C, 32, "Master DMA Enable Register", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("RDDE_0", "0", "DMA request is disabled"),
                    EnumVal("RDDE_1", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("TDDE_0", "0", "DMA request is disabled"),
                    EnumVal("TDDE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("MCFGR0", 0x40067020, 32, "Master Configuration Register 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("RDMO_0", "0", "Received data is stored in the receive FIFO"),
                    EnumVal("RDMO_1", "0x1", "Received data is discarded unless the the Data Match Flag (MSR[DMF]) is set"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("CIRFIFO_0", "0", "Circular FIFO is disabled"),
                    EnumVal("CIRFIFO_1", "0x1", "Circular FIFO is enabled"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HRSEL_0", "0", "Host request input is pin HREQ"),
                    EnumVal("HRSEL_1", "0x1", "Host request input is input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("HRPOL_0", "0", "Active low"),
                    EnumVal("HRPOL_1", "0x1", "Active high"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("HREN_0", "0", "Host request input is disabled"),
                    EnumVal("HREN_1", "0x1", "Host request input is enabled"),
                ]),
            ]),
            Register("MCFGR1", 0x40067024, 32, "Master Configuration Register 1", [
                Field("PINCFG", 24, 3, "Pin Configuration", [
                    EnumVal("PINCFG_0", "0", "2-pin open drain mode"),
                    EnumVal("PINCFG_1", "0x1", "2-pin output only mode (ultra-fast mode)"),
                    EnumVal("PINCFG_2", "0x2", "2-pin push-pull mode"),
                    EnumVal("PINCFG_3", "0x3", "4-pin push-pull mode"),
                    EnumVal("PINCFG_4", "0x4", "2-pin open drain mode with separate LPI2C slave"),
                    EnumVal("PINCFG_5", "0x5", "2-pin output only mode (ultra-fast mode) with separate LPI2C slave"),
                    EnumVal("PINCFG_6", "0x6", "2-pin push-pull mode with separate LPI2C slave"),
                    EnumVal("PINCFG_7", "0x7", "4-pin push-pull mode (inverted outputs)"),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("MATCFG_0", "0", "Match is disabled"),
                    EnumVal("MATCFG_2", "0x2", "Match is enabled (1st data word equals MATCH0 OR MATCH1)"),
                    EnumVal("MATCFG_3", "0x3", "Match is enabled (any data word equals MATCH0 OR MATCH1)"),
                    EnumVal("MATCFG_4", "0x4", "Match is enabled (1st data word equals MATCH0 AND 2nd data word equals MATCH1)"),
                    EnumVal("MATCFG_5", "0x5", "Match is enabled (any data word equals MATCH0 AND next data word equals MATCH1)"),
                    EnumVal("MATCFG_6", "0x6", "Match is enabled (1st data word AND MATCH1 equals MATCH0 AND MATCH1)"),
                    EnumVal("MATCFG_7", "0x7", "Match is enabled (any data word AND MATCH1 equals MATCH0 AND MATCH1)"),
                ]),
                Field("TIMECFG", 10, 1, "Timeout Configuration", [
                    EnumVal("TIMECFG_0", "0", "Pin Low Timeout Flag will set if SCL is low for longer than the configured timeout"),
                    EnumVal("TIMECFG_1", "0x1", "Pin Low Timeout Flag will set if either SCL or SDA is low for longer than the configured timeout"),
                ]),
                Field("IGNACK", 9, 1, "IGNACK", [
                    EnumVal("IGNACK_0", "0", "LPI2C Master will receive ACK and NACK normally"),
                    EnumVal("IGNACK_1", "0x1", "LPI2C Master will treat a received NACK as if it (NACK) was an ACK"),
                ]),
                Field("AUTOSTOP", 8, 1, "Automatic STOP Generation", [
                    EnumVal("AUTOSTOP_0", "0", "No effect"),
                    EnumVal("AUTOSTOP_1", "0x1", "STOP condition is automatically generated whenever the transmit FIFO is empty and the LPI2C master is busy"),
                ]),
                Field("PRESCALE", 0, 3, "Prescaler", [
                    EnumVal("PRESCALE_0", "0", "Divide by 1"),
                    EnumVal("PRESCALE_1", "0x1", "Divide by 2"),
                    EnumVal("PRESCALE_2", "0x2", "Divide by 4"),
                    EnumVal("PRESCALE_3", "0x3", "Divide by 8"),
                    EnumVal("PRESCALE_4", "0x4", "Divide by 16"),
                    EnumVal("PRESCALE_5", "0x5", "Divide by 32"),
                    EnumVal("PRESCALE_6", "0x6", "Divide by 64"),
                    EnumVal("PRESCALE_7", "0x7", "Divide by 128"),
                ]),
            ]),
            Register("MCFGR2", 0x40067028, 32, "Master Configuration Register 2", [
                Field("FILTSDA", 24, 4, "Glitch Filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch Filter SCL", [
                ]),
                Field("BUSIDLE", 0, 12, "Bus Idle Timeout", [
                ]),
            ]),
            Register("MCFGR3", 0x4006702C, 32, "Master Configuration Register 3", [
                Field("PINLOW", 8, 12, "Pin Low Timeout", [
                ]),
            ]),
            Register("MDMR", 0x40067040, 32, "Master Data Match Register", [
                Field("MATCH1", 16, 8, "Match 1 Value", [
                ]),
                Field("MATCH0", 0, 8, "Match 0 Value", [
                ]),
            ]),
            Register("MCCR0", 0x40067048, 32, "Master Clock Configuration Register 0", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MCCR1", 0x40067050, 32, "Master Clock Configuration Register 1", [
                Field("DATAVD", 24, 6, "Data Valid Delay", [
                ]),
                Field("SETHOLD", 16, 6, "Setup Hold Delay", [
                ]),
                Field("CLKHI", 8, 6, "Clock High Period", [
                ]),
                Field("CLKLO", 0, 6, "Clock Low Period", [
                ]),
            ]),
            Register("MFCR", 0x40067058, 32, "Master FIFO Control Register", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("MFSR", 0x4006705C, 32, "Master FIFO Status Register", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("MTDR", 0x40067060, 32, "Master Transmit Data Register", [
                Field("CMD", 8, 3, "Command Data", [
                    EnumVal("CMD_0", "0", "Transmit DATA[7:0]"),
                    EnumVal("CMD_1", "0x1", "Receive (DATA[7:0] + 1) bytes"),
                    EnumVal("CMD_2", "0x2", "Generate STOP condition"),
                    EnumVal("CMD_3", "0x3", "Receive and discard (DATA[7:0] + 1) bytes"),
                    EnumVal("CMD_4", "0x4", "Generate (repeated) START and transmit address in DATA[7:0]"),
                    EnumVal("CMD_5", "0x5", "Generate (repeated) START and transmit address in DATA[7:0]. This transfer expects a NACK to be returned."),
                    EnumVal("CMD_6", "0x6", "Generate (repeated) START and transmit address in DATA[7:0] using high speed mode"),
                    EnumVal("CMD_7", "0x7", "Generate (repeated) START and transmit address in DATA[7:0] using high speed mode. This transfer expects a NACK to be returned."),
                ]),
                Field("DATA", 0, 8, "Transmit Data", [
                ]),
            ]),
            Register("MRDR", 0x40067070, 32, "Master Receive Data Register", [
                Field("RXEMPTY", 14, 1, "RX Empty", [
                    EnumVal("RXEMPTY_0", "0", "Receive FIFO is not empty"),
                    EnumVal("RXEMPTY_1", "0x1", "Receive FIFO is empty"),
                ]),
                Field("DATA", 0, 8, "Receive Data", [
                ]),
            ]),
            Register("SCR", 0x40067110, 32, "Slave Control Register", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("RRF_0", "0", "No effect"),
                    EnumVal("RRF_1", "0x1", "Receive Data Register is now empty"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("RTF_0", "0", "No effect"),
                    EnumVal("RTF_1", "0x1", "Transmit Data Register is now empty"),
                ]),
                Field("FILTDZ", 5, 1, "Filter Doze Enable", [
                    EnumVal("FILTDZ_0", "0", "Filter remains enabled in Doze mode"),
                    EnumVal("FILTDZ_1", "0x1", "Filter is disabled in Doze mode"),
                ]),
                Field("FILTEN", 4, 1, "Filter Enable", [
                    EnumVal("FILTEN_0", "0", "Disable digital filter and output delay counter for slave mode"),
                    EnumVal("FILTEN_1", "0x1", "Enable digital filter and output delay counter for slave mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("RST_0", "0", "Slave mode logic is not reset"),
                    EnumVal("RST_1", "0x1", "Slave mode logic is reset"),
                ]),
                Field("SEN", 0, 1, "Slave Enable", [
                    EnumVal("SEN_0", "0", "I2C Slave mode is disabled"),
                    EnumVal("SEN_1", "0x1", "I2C Slave mode is enabled"),
                ]),
            ]),
            Register("SSR", 0x40067114, 32, "Slave Status Register", [
                Field("BBF", 25, 1, "Bus Busy Flag", [
                    EnumVal("BBF_0", "0", "I2C Bus is idle"),
                    EnumVal("BBF_1", "0x1", "I2C Bus is busy"),
                ]),
                Field("SBF", 24, 1, "Slave Busy Flag", [
                    EnumVal("SBF_0", "0", "I2C Slave is idle"),
                    EnumVal("SBF_1", "0x1", "I2C Slave is busy"),
                ]),
                Field("SARF", 15, 1, "SMBus Alert Response Flag", [
                    EnumVal("SARF_0", "0", "SMBus Alert Response is disabled or not detected"),
                    EnumVal("SARF_1", "0x1", "SMBus Alert Response is enabled and detected"),
                ]),
                Field("GCF", 14, 1, "General Call Flag", [
                    EnumVal("GCF_0", "0", "Slave has not detected the General Call Address or the General Call Address is disabled"),
                    EnumVal("GCF_1", "0x1", "Slave has detected the General Call Address"),
                ]),
                Field("AM1F", 13, 1, "Address Match 1 Flag", [
                    EnumVal("AM1F_0", "0", "Have not received an ADDR1 or ADDR0/ADDR1 range matching address"),
                    EnumVal("AM1F_1", "0x1", "Have received an ADDR1 or ADDR0/ADDR1 range matching address"),
                ]),
                Field("AM0F", 12, 1, "Address Match 0 Flag", [
                    EnumVal("AM0F_0", "0", "Have not received an ADDR0 matching address"),
                    EnumVal("AM0F_1", "0x1", "Have received an ADDR0 matching address"),
                ]),
                Field("FEF", 11, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "FIFO underflow or overflow was not detected"),
                    EnumVal("FEF_1", "0x1", "FIFO underflow or overflow was detected"),
                ]),
                Field("BEF", 10, 1, "Bit Error Flag", [
                    EnumVal("BEF_0", "0", "Slave has not detected a bit error"),
                    EnumVal("BEF_1", "0x1", "Slave has detected a bit error"),
                ]),
                Field("SDF", 9, 1, "STOP Detect Flag", [
                    EnumVal("SDF_0", "0", "Slave has not detected a STOP condition"),
                    EnumVal("SDF_1", "0x1", "Slave has detected a STOP condition"),
                ]),
                Field("RSF", 8, 1, "Repeated Start Flag", [
                    EnumVal("RSF_0", "0", "Slave has not detected a Repeated START condition"),
                    EnumVal("RSF_1", "0x1", "Slave has detected a Repeated START condition"),
                ]),
                Field("TAF", 3, 1, "Transmit ACK Flag", [
                    EnumVal("TAF_0", "0", "Transmit ACK/NACK is not required"),
                    EnumVal("TAF_1", "0x1", "Transmit ACK/NACK is required"),
                ]),
                Field("AVF", 2, 1, "Address Valid Flag", [
                    EnumVal("AVF_0", "0", "Address Status Register is not valid"),
                    EnumVal("AVF_1", "0x1", "Address Status Register is valid"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("RDF_0", "0", "Receive data is not ready"),
                    EnumVal("RDF_1", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TDF_0", "0", "Transmit data not requested"),
                    EnumVal("TDF_1", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("SIER", 0x40067118, 32, "Slave Interrupt Enable Register", [
                Field("SARIE", 15, 1, "SMBus Alert Response Interrupt Enable", [
                    EnumVal("SARIE_0", "0", "Disabled"),
                    EnumVal("SARIE_1", "0x1", "Enabled"),
                ]),
                Field("GCIE", 14, 1, "General Call Interrupt Enable", [
                    EnumVal("GCIE_0", "0", "Disabled"),
                    EnumVal("GCIE_1", "0x1", "Enabled"),
                ]),
                Field("AM1F", 13, 1, "Address Match 1 Interrupt Enable", [
                    EnumVal("AM1F_0", "0", "Disabled"),
                    EnumVal("AM1F_1", "0x1", "Enabled"),
                ]),
                Field("AM0IE", 12, 1, "Address Match 0 Interrupt Enable", [
                    EnumVal("AM0IE_0", "0", "Enabled"),
                    EnumVal("AM0IE_1", "0x1", "Disabled"),
                ]),
                Field("FEIE", 11, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Disabled"),
                    EnumVal("FEIE_1", "0x1", "Enabled"),
                ]),
                Field("BEIE", 10, 1, "Bit Error Interrupt Enable", [
                    EnumVal("BEIE_0", "0", "Disabled"),
                    EnumVal("BEIE_1", "0x1", "Enabled"),
                ]),
                Field("SDIE", 9, 1, "STOP Detect Interrupt Enable", [
                    EnumVal("SDIE_0", "0", "Disabled"),
                    EnumVal("SDIE_1", "0x1", "Enabled"),
                ]),
                Field("RSIE", 8, 1, "Repeated Start Interrupt Enable", [
                    EnumVal("RSIE_0", "0", "Disabled"),
                    EnumVal("RSIE_1", "0x1", "Enabled"),
                ]),
                Field("TAIE", 3, 1, "Transmit ACK Interrupt Enable", [
                    EnumVal("TAIE_0", "0", "Disabled"),
                    EnumVal("TAIE_1", "0x1", "Enabled"),
                ]),
                Field("AVIE", 2, 1, "Address Valid Interrupt Enable", [
                    EnumVal("AVIE_0", "0", "Disabled"),
                    EnumVal("AVIE_1", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("RDIE_0", "0", "Disabled"),
                    EnumVal("RDIE_1", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("TDIE_0", "0", "Disabled"),
                    EnumVal("TDIE_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("SDER", 0x4006711C, 32, "Slave DMA Enable Register", [
                Field("AVDE", 2, 1, "Address Valid DMA Enable", [
                    EnumVal("AVDE_0", "0", "DMA request is disabled"),
                    EnumVal("AVDE_1", "0x1", "DMA request is enabled"),
                ]),
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("RDDE_0", "0", "DMA request is disabled"),
                    EnumVal("RDDE_1", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("TDDE_0", "0", "DMA request is disabled"),
                    EnumVal("TDDE_1", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("SCFGR1", 0x40067124, 32, "Slave Configuration Register 1", [
                Field("ADDRCFG", 16, 3, "Address Configuration", [
                    EnumVal("ADDRCFG_0", "0", "Address match 0 (7-bit)"),
                    EnumVal("ADDRCFG_1", "0x1", "Address match 0 (10-bit)"),
                    EnumVal("ADDRCFG_2", "0x2", "Address match 0 (7-bit) or Address match 1 (7-bit)"),
                    EnumVal("ADDRCFG_3", "0x3", "Address match 0 (10-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRCFG_4", "0x4", "Address match 0 (7-bit) or Address match 1 (10-bit)"),
                    EnumVal("ADDRCFG_5", "0x5", "Address match 0 (10-bit) or Address match 1 (7-bit)"),
                    EnumVal("ADDRCFG_6", "0x6", "From Address match 0 (7-bit) to Address match 1 (7-bit)"),
                    EnumVal("ADDRCFG_7", "0x7", "From Address match 0 (10-bit) to Address match 1 (10-bit)"),
                ]),
                Field("HSMEN", 13, 1, "High Speed Mode Enable", [
                    EnumVal("HSMEN_0", "0", "Disables detection of HS-mode master code"),
                    EnumVal("HSMEN_1", "0x1", "Enables detection of HS-mode master code"),
                ]),
                Field("IGNACK", 12, 1, "Ignore NACK", [
                    EnumVal("IGNACK_0", "0", "Slave will end transfer when NACK is detected"),
                    EnumVal("IGNACK_1", "0x1", "Slave will not end transfer when NACK detected"),
                ]),
                Field("RXCFG", 11, 1, "Receive Data Configuration", [
                    EnumVal("RXCFG_0", "0", "Reading the Receive Data register will return received data and clear the Receive Data flag (MSR[RDF])."),
                    EnumVal("RXCFG_1", "0x1", "Reading the Receive Data register when the Address Valid flag (SSR[AVF])is set, will return the Address Status register and clear the Address Valid flag. Reading the Receive Data register when the Address Valid flag is clear, will return received data and clear the Receive Data flag (MSR[RDF])."),
                ]),
                Field("TXCFG", 10, 1, "Transmit Flag Configuration", [
                    EnumVal("TXCFG_0", "0", "Transmit Data Flag will only assert during a slave-transmit transfer when the Transmit Data register is empty"),
                    EnumVal("TXCFG_1", "0x1", "Transmit Data Flag will assert whenever the Transmit Data register is empty"),
                ]),
                Field("SAEN", 9, 1, "SMBus Alert Enable", [
                    EnumVal("SAEN_0", "0", "Disables match on SMBus Alert"),
                    EnumVal("SAEN_1", "0x1", "Enables match on SMBus Alert"),
                ]),
                Field("GCEN", 8, 1, "General Call Enable", [
                    EnumVal("GCEN_0", "0", "General Call address is disabled"),
                    EnumVal("GCEN_1", "0x1", "General Call address is enabled"),
                ]),
                Field("ACKSTALL", 3, 1, "ACK SCL Stall", [
                    EnumVal("ACKSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("ACKSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
                Field("TXDSTALL", 2, 1, "TX Data SCL Stall", [
                    EnumVal("TXDSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("TXDSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
                Field("RXSTALL", 1, 1, "RX SCL Stall", [
                    EnumVal("RXSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("RXSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
                Field("ADRSTALL", 0, 1, "Address SCL Stall", [
                    EnumVal("ADRSTALL_0", "0", "Clock stretching is disabled"),
                    EnumVal("ADRSTALL_1", "0x1", "Clock stretching is enabled"),
                ]),
            ]),
            Register("SCFGR2", 0x40067128, 32, "Slave Configuration Register 2", [
                Field("FILTSDA", 24, 4, "Glitch Filter SDA", [
                ]),
                Field("FILTSCL", 16, 4, "Glitch Filter SCL", [
                ]),
                Field("DATAVD", 8, 6, "Data Valid Delay", [
                ]),
                Field("CLKHOLD", 0, 4, "Clock Hold Time", [
                ]),
            ]),
            Register("SAMR", 0x40067140, 32, "Slave Address Match Register", [
                Field("ADDR1", 17, 10, "Address 1 Value", [
                ]),
                Field("ADDR0", 1, 10, "Address 0 Value", [
                ]),
            ]),
            Register("SASR", 0x40067150, 32, "Slave Address Status Register", [
                Field("ANV", 14, 1, "Address Not Valid", [
                    EnumVal("ANV_0", "0", "Received Address (RADDR) is valid"),
                    EnumVal("ANV_1", "0x1", "Received Address (RADDR) is not valid"),
                ]),
                Field("RADDR", 0, 11, "Received Address", [
                ]),
            ]),
            Register("STAR", 0x40067154, 32, "Slave Transmit ACK Register", [
                Field("TXNACK", 0, 1, "Transmit NACK", [
                    EnumVal("TXNACK_0", "0", "Write a Transmit ACK for each received word"),
                    EnumVal("TXNACK_1", "0x1", "Write a Transmit NACK for each received word"),
                ]),
            ]),
            Register("STDR", 0x40067160, 32, "Slave Transmit Data Register", [
                Field("DATA", 0, 8, "Transmit Data", [
                ]),
            ]),
            Register("SRDR", 0x40067170, 32, "Slave Receive Data Register", [
                Field("SOF", 15, 1, "Start Of Frame", [
                    EnumVal("SOF_0", "0", "Indicates this is not the first data word since a (repeated) START or STOP condition"),
                    EnumVal("SOF_1", "0x1", "Indicates this is the first data word since a (repeated) START or STOP condition"),
                ]),
                Field("RXEMPTY", 14, 1, "RX Empty", [
                    EnumVal("RXEMPTY_0", "0", "The Receive Data Register is not empty"),
                    EnumVal("RXEMPTY_1", "0x1", "The Receive Data Register is empty"),
                ]),
                Field("DATA", 0, 8, "Receive Data", [
                ]),
            ]),
        ])

class Module_LPIT0(Peripheral):
    def __init__(self):
        super().__init__("LPIT0", 0x40037000, 0x5C, [
            Register("VERID", 0x40037000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Number", [
                ]),
            ]),
            Register("PARAM", 0x40037004, 32, "Parameter Register", [
                Field("EXT_TRIG", 8, 8, "Number of External Trigger Inputs", [
                ]),
                Field("CHANNEL", 0, 8, "Number of Timer Channels", [
                ]),
            ]),
            Register("MCR", 0x40037008, 32, "Module Control Register", [
                Field("DBG_EN", 3, 1, "Debug Enable Bit", [
                    EnumVal("DBG_EN_0", "0", "Stop timer channels in Debug mode"),
                    EnumVal("DBG_EN_1", "0x1", "Allow timer channels to continue to run in Debug mode"),
                ]),
                Field("DOZE_EN", 2, 1, "DOZE Mode Enable Bit", [
                    EnumVal("DOZE_EN_0", "0", "Stop timer channels in DOZE mode"),
                    EnumVal("DOZE_EN_1", "0x1", "Allow timer channels to continue to run in DOZE mode"),
                ]),
                Field("SW_RST", 1, 1, "Software Reset Bit", [
                    EnumVal("SW_RST_0", "0", "Timer channels and registers are not reset"),
                    EnumVal("SW_RST_1", "0x1", "Reset timer channels and registers"),
                ]),
                Field("M_CEN", 0, 1, "Module Clock Enable", [
                    EnumVal("M_CEN_0", "0", "Disable peripheral clock to timers"),
                    EnumVal("M_CEN_1", "0x1", "Enable peripheral clock to timers"),
                ]),
            ]),
            Register("MSR", 0x4003700C, 32, "Module Status Register", [
                Field("TIF3", 3, 1, "Channel 3 Timer Interrupt Flag", [
                    EnumVal("TIF3_0", "0", "Timer has not timed out"),
                    EnumVal("TIF3_1", "0x1", "Timeout has occurred (timer has timed out)"),
                ]),
                Field("TIF2", 2, 1, "Channel 2 Timer Interrupt Flag", [
                    EnumVal("TIF2_0", "0", "Timer has not timed out"),
                    EnumVal("TIF2_1", "0x1", "Timeout has occurred (timer has timed out)"),
                ]),
                Field("TIF1", 1, 1, "Channel 1 Timer Interrupt Flag", [
                    EnumVal("TIF1_0", "0", "Timer has not timed out"),
                    EnumVal("TIF1_1", "0x1", "Timeout has occurred (timer has timed out)"),
                ]),
                Field("TIF0", 0, 1, "Channel 0 Timer Interrupt Flag", [
                    EnumVal("TIF0_0", "0", "Timer has not timed out"),
                    EnumVal("TIF0_1", "0x1", "Timeout has occurred (timer has timed out)"),
                ]),
            ]),
            Register("MIER", 0x40037010, 32, "Module Interrupt Enable Register", [
                Field("TIE3", 3, 1, "Channel 3 Timer Interrupt Enable", [
                    EnumVal("TIE3_0", "0", "Disabled"),
                    EnumVal("TIE3_1", "0x1", "Enabled"),
                ]),
                Field("TIE2", 2, 1, "Channel 2 Timer Interrupt Enable", [
                    EnumVal("TIE2_0", "0", "Disabled"),
                    EnumVal("TIE2_1", "0x1", "Enabled"),
                ]),
                Field("TIE1", 1, 1, "Channel 1 Timer Interrupt Enable", [
                    EnumVal("TIE1_0", "0", "Disabled"),
                    EnumVal("TIE1_1", "0x1", "Enabled"),
                ]),
                Field("TIE0", 0, 1, "Channel 0 Timer Interrupt Enable", [
                    EnumVal("TIE0_0", "0", "Disabled"),
                    EnumVal("TIE0_1", "0x1", "Enabled"),
                ]),
            ]),
            Register("SETTEN", 0x40037014, 32, "Set Timer Enable Register", [
                Field("SET_T_EN_3", 3, 1, "Set Timer 3 Enable", [
                    EnumVal("SET_T_EN_3_0", "0", "No effect"),
                    EnumVal("SET_T_EN_3_1", "0x1", "Enables Timer Channel 3"),
                ]),
                Field("SET_T_EN_2", 2, 1, "Set Timer 2 Enable", [
                    EnumVal("SET_T_EN_2_0", "0", "No Effect"),
                    EnumVal("SET_T_EN_2_1", "0x1", "Enables Timer Channel 2"),
                ]),
                Field("SET_T_EN_1", 1, 1, "Set Timer 1 Enable", [
                    EnumVal("SET_T_EN_1_0", "0", "No Effect"),
                    EnumVal("SET_T_EN_1_1", "0x1", "Enables Timer Channel 1"),
                ]),
                Field("SET_T_EN_0", 0, 1, "Set Timer 0 Enable", [
                    EnumVal("SET_T_EN_0_0", "0", "No effect"),
                    EnumVal("SET_T_EN_0_1", "0x1", "Enables Timer Channel 0"),
                ]),
            ]),
            Register("CLRTEN", 0x40037018, 32, "Clear Timer Enable Register", [
                Field("CLR_T_EN_3", 3, 1, "Clear Timer 3 Enable", [
                    EnumVal("CLR_T_EN_3_0", "0", "No Action"),
                    EnumVal("CLR_T_EN_3_1", "0x1", "Clear the Timer Enable bit (TCTRL3[T_EN]) for Timer Channel 3"),
                ]),
                Field("CLR_T_EN_2", 2, 1, "Clear Timer 2 Enable", [
                    EnumVal("CLR_T_EN_2_0", "0", "No Action"),
                    EnumVal("CLR_T_EN_2_1", "0x1", "Clear the Timer Enable bit (TCTRL2[T_EN]) for Timer Channel 2"),
                ]),
                Field("CLR_T_EN_1", 1, 1, "Clear Timer 1 Enable", [
                    EnumVal("CLR_T_EN_1_0", "0", "No Action"),
                    EnumVal("CLR_T_EN_1_1", "0x1", "Clear the Timer Enable bit (TCTRL1[T_EN]) for Timer Channel 1"),
                ]),
                Field("CLR_T_EN_0", 0, 1, "Clear Timer 0 Enable", [
                    EnumVal("CLR_T_EN_0_0", "0", "No action"),
                    EnumVal("CLR_T_EN_0_1", "0x1", "Clear the Timer Enable bit (TCTRL0[T_EN]) for Timer Channel 0"),
                ]),
            ]),
        ])

class Module_LPSPI0(Peripheral):
    def __init__(self):
        super().__init__("LPSPI0", 0x4002C000, 0x78, [
            Register("VERID", 0x4002C000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Module Identification Number", [
                    EnumVal("STANDARD", "0x4", "Standard feature set supporting a 32-bit shift register."),
                ]),
            ]),
            Register("PARAM", 0x4002C004, 32, "Parameter Register", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("CR", 0x4002C010, 32, "Control Register", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "Receive FIFO is reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "Transmit FIFO is reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "LPSPI module is disabled in debug mode"),
                    EnumVal("ENABLED", "0x1", "LPSPI module is enabled in debug mode"),
                ]),
                Field("DOZEN", 2, 1, "Doze Mode Enable", [
                    EnumVal("ENABLED", "0", "LPSPI module is enabled in Doze mode"),
                    EnumVal("DISABLED", "0x1", "LPSPI module is disabled in Doze mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Module is not reset"),
                    EnumVal("RESET", "0x1", "Module is reset"),
                ]),
                Field("MEN", 0, 1, "Module Enable", [
                    EnumVal("DISABLED", "0", "Module is disabled"),
                    EnumVal("ENABLED", "0x1", "Module is enabled"),
                ]),
            ]),
            Register("SR", 0x4002C014, 32, "Status Register", [
                Field("MBF", 24, 1, "Module Busy Flag", [
                    EnumVal("IDLE", "0", "LPSPI is idle"),
                    EnumVal("BUSY", "0x1", "LPSPI is busy"),
                ]),
                Field("DMF", 13, 1, "Data Match Flag", [
                    EnumVal("NO_MATCH", "0", "Have not received matching data"),
                    EnumVal("MATCH", "0x1", "Have received matching data"),
                ]),
                Field("REF", 12, 1, "Receive Error Flag", [
                    EnumVal("NOT_OVERFLOWED", "0", "Receive FIFO has not overflowed"),
                    EnumVal("OVERFLOWED", "0x1", "Receive FIFO has overflowed"),
                ]),
                Field("TEF", 11, 1, "Transmit Error Flag", [
                    EnumVal("NO_UNDERRUN", "0", "Transmit FIFO underrun has not occurred"),
                    EnumVal("UNDERRUN", "0x1", "Transmit FIFO underrun has occurred"),
                ]),
                Field("TCF", 10, 1, "Transfer Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "All transfers have not completed"),
                    EnumVal("COMPLETED", "0x1", "All transfers have completed"),
                ]),
                Field("FCF", 9, 1, "Frame Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Frame transfer has not completed"),
                    EnumVal("COMPLETED", "0x1", "Frame transfer has completed"),
                ]),
                Field("WCF", 8, 1, "Word Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Transfer of a received word has not yet completed"),
                    EnumVal("COMPLETED", "0x1", "Transfer of a received word has completed"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("NOTREADY", "0", "Receive Data is not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TXDATA_NOT_REQST", "0", "Transmit data not requested"),
                    EnumVal("TXDATA_REQST", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("IER", 0x4002C018, 32, "Interrupt Enable Register", [
                Field("DMIE", 13, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("REIE", 12, 1, "Receive Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TEIE", 11, 1, "Transmit Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TCIE", 10, 1, "Transfer Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("FCIE", 9, 1, "Frame Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("WCIE", 8, 1, "Word Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("DER", 0x4002C01C, 32, "DMA Enable Register", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("CFGR0", 0x4002C020, 32, "Configuration Register 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("STORED", "0", "Received data is stored in the receive FIFO as in normal operations"),
                    EnumVal("DISCARDED", "0x1", "Received data is discarded unless the Data Match Flag (DMF) is set"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("DISABLED", "0", "Circular FIFO is disabled"),
                    EnumVal("ENABLED", "0x1", "Circular FIFO is enabled"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HREQPIN", "0", "Host request input is the LPSPI_HREQ pin"),
                    EnumVal("INPUT_TRIGGER", "0x1", "Host request input is the input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("DISABLED", "0", "LPSPI_HREQ pin is active low"),
                    EnumVal("ENABLED", "0x1", "LPSPI_HREQ pin is active high"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("DISABLED", "0", "Host request is disabled"),
                    EnumVal("ENABLED", "0x1", "Host request is enabled"),
                ]),
            ]),
            Register("CFGR1", 0x4002C024, 32, "Configuration Register 1", [
                Field("PCSCFG", 27, 1, "Peripheral Chip Select Configuration", [
                    EnumVal("CHIP_SELECT", "0", "PCS[3:2] are configured for chip select function"),
                    EnumVal("HALFDUPLEX4BIT", "0x1", "PCS[3:2] are configured for half-duplex 4-bit transfers (PCS[3:2] = DATA[3:2])"),
                ]),
                Field("OUTCFG", 26, 1, "Output Configuration", [
                    EnumVal("RETAIN_LASTVALUE", "0", "Output data retains last value when chip select is negated"),
                    EnumVal("TRISTATED", "0x1", "Output data is tristated when chip select is negated"),
                ]),
                Field("PINCFG", 24, 2, "Pin Configuration", [
                    EnumVal("SIN_IN_SOUT_OUT", "0", "SIN is used for input data and SOUT is used for output data"),
                    EnumVal("SIN_BOTH_IN_OUT", "0x1", "SIN is used for both input and output data, only half-duplex serial transfers are supported"),
                    EnumVal("SOUT_BOTH_IN_OUT", "0x2", "SOUT is used for both input and output data, only half-duplex serial transfers are supported"),
                    EnumVal("SOUT_IN_SIN_OUT", "0x3", "SOUT is used for input data and SIN is used for output data"),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("ENABLED_FIRSTDATAMATCH", "0x2", "010b - Match is enabled, if 1st data word equals MATCH0 OR MATCH1, i.e., (1st data word = MATCH0 + MATCH1)"),
                    EnumVal("ENABLED_ANYDATAMATCH", "0x3", "011b - Match is enabled, if any data word equals MATCH0 OR MATCH1, i.e., (any data word = MATCH0 + MATCH1)"),
                    EnumVal("ENABLED_DATAMATCH_100", "0x4", "100b - Match is enabled, if 1st data word equals MATCH0 AND 2nd data word equals MATCH1, i.e., [(1st data word = MATCH0) * (2nd data word = MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_101", "0x5", "101b - Match is enabled, if any data word equals MATCH0 AND the next data word equals MATCH1, i.e., [(any data word = MATCH0) * (next data word = MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_110", "0x6", "110b - Match is enabled, if (1st data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(1st data word * MATCH1) = (MATCH0 * MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_111", "0x7", "111b - Match is enabled, if (any data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(any data word * MATCH1) = (MATCH0 * MATCH1)]"),
                ]),
                Field("PCSPOL", 8, 4, "Peripheral Chip Select Polarity", [
                ]),
                Field("NOSTALL", 3, 1, "No Stall", [
                    EnumVal("DISABLED", "0", "Transfers will stall when the transmit FIFO is empty"),
                    EnumVal("ENABLED", "0x1", "Transfers will not stall, allowing transmit FIFO underruns to occur"),
                ]),
                Field("AUTOPCS", 2, 1, "Automatic PCS", [
                    EnumVal("DISABLED", "0", "Automatic PCS generation is disabled"),
                    EnumVal("ENABLED", "0x1", "Automatic PCS generation is enabled"),
                ]),
                Field("SAMPLE", 1, 1, "Sample Point", [
                    EnumVal("ON_SCK_EDGE", "0", "Input data is sampled on SCK edge"),
                    EnumVal("ON_DELAYED_SCK_EDGE", "0x1", "Input data is sampled on delayed SCK edge"),
                ]),
                Field("MASTER", 0, 1, "Master Mode", [
                    EnumVal("SLAVE_MODE", "0", "Slave mode"),
                    EnumVal("MASTER_MODE", "0x1", "Master mode"),
                ]),
            ]),
            Register("DMR0", 0x4002C030, 32, "Data Match Register 0", [
                Field("MATCH0", 0, 32, "Match 0 Value", [
                ]),
            ]),
            Register("DMR1", 0x4002C034, 32, "Data Match Register 1", [
                Field("MATCH1", 0, 32, "Match 1 Value", [
                ]),
            ]),
            Register("CCR", 0x4002C040, 32, "Clock Configuration Register", [
                Field("SCKPCS", 24, 8, "SCK-to-PCS Delay", [
                ]),
                Field("PCSSCK", 16, 8, "PCS-to-SCK Delay", [
                ]),
                Field("DBT", 8, 8, "Delay Between Transfers", [
                ]),
                Field("SCKDIV", 0, 8, "SCK Divider", [
                ]),
            ]),
            Register("FCR", 0x4002C058, 32, "The FIFO Control register contains the RXWATER and TXWATER control fields.", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("FSR", 0x4002C05C, 32, "FIFO Status Register", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("TCR", 0x4002C060, 32, "Transmit Command Register", [
                Field("CPOL", 31, 1, "Clock Polarity", [
                    EnumVal("INACTIVE_LOW", "0", "The inactive state value of SCK is low"),
                    EnumVal("INACTIVE_HIGH", "0x1", "The inactive state value of SCK is high"),
                ]),
                Field("CPHA", 30, 1, "Clock Phase", [
                    EnumVal("CAPTURED", "0", "Data is captured on the leading edge of SCK and changed on the following edge of SCK"),
                    EnumVal("CHANGED", "0x1", "Data is changed on the leading edge of SCK and captured on the following edge of SCK"),
                ]),
                Field("PRESCALE", 27, 3, "Prescaler Value", [
                    EnumVal("DIVIDEBY1", "0", "Divide by 1"),
                    EnumVal("DIVIDEBY2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDEBY4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDEBY8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDEBY16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDEBY32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDEBY64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDEBY128", "0x7", "Divide by 128"),
                ]),
                Field("PCS", 24, 2, "Peripheral Chip Select", [
                    EnumVal("TX_PCS0", "0", "Transfer using LPSPI_PCS[0]"),
                    EnumVal("TX_PCS1", "0x1", "Transfer using LPSPI_PCS[1]"),
                    EnumVal("TX_PCS2", "0x2", "Transfer using LPSPI_PCS[2]"),
                    EnumVal("TX_PCS3", "0x3", "Transfer using LPSPI_PCS[3]"),
                ]),
                Field("LSBF", 23, 1, "LSB First", [
                    EnumVal("MSB_FIRST", "0", "Data is transferred MSB first"),
                    EnumVal("LSB_FIRST", "0x1", "Data is transferred LSB first"),
                ]),
                Field("BYSW", 22, 1, "Byte Swap", [
                    EnumVal("DISABLED", "0", "Byte swap is disabled"),
                    EnumVal("ENABLED", "0x1", "Byte swap is enabled"),
                ]),
                Field("CONT", 21, 1, "Continuous Transfer", [
                    EnumVal("DISABLED", "0", "Continuous transfer is disabled"),
                    EnumVal("ENABLED", "0x1", "Continuous transfer is enabled"),
                ]),
                Field("CONTC", 20, 1, "Continuing Command", [
                    EnumVal("START", "0", "Command word for start of new transfer"),
                    EnumVal("CONTINUE", "0x1", "Command word for continuing transfer"),
                ]),
                Field("RXMSK", 19, 1, "Receive Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Receive data is masked"),
                ]),
                Field("TXMSK", 18, 1, "Transmit Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Mask transmit data"),
                ]),
                Field("WIDTH", 16, 2, "Transfer Width", [
                    EnumVal("ONEBIT", "0", "1 bit transfer"),
                    EnumVal("TWOBIT", "0x1", "2 bit transfer"),
                    EnumVal("FOURBIT", "0x2", "4 bit transfer"),
                ]),
                Field("FRAMESZ", 0, 12, "Frame Size", [
                ]),
            ]),
            Register("TDR", 0x4002C064, 32, "Transmit Data Register", [
                Field("DATA", 0, 32, "Transmit Data", [
                ]),
            ]),
            Register("RSR", 0x4002C070, 32, "Receive Status Register", [
                Field("RXEMPTY", 1, 1, "RX FIFO Empty", [
                    EnumVal("NOT_EMPTY", "0", "RX FIFO is not empty"),
                    EnumVal("EMPTY", "0x1", "RX FIFO is empty"),
                ]),
                Field("SOF", 0, 1, "Start Of Frame", [
                    EnumVal("NEXT_DATAWORD", "0", "Subsequent data word received after LPSPI_PCS assertion"),
                    EnumVal("FIRST_DATAWORD", "0x1", "First data word received after LPSPI_PCS assertion"),
                ]),
            ]),
            Register("RDR", 0x4002C074, 32, "Receive Data Register", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
        ])

class Module_LPSPI1(Peripheral):
    def __init__(self):
        super().__init__("LPSPI1", 0x4002D000, 0x78, [
            Register("VERID", 0x4002D000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Module Identification Number", [
                    EnumVal("STANDARD", "0x4", "Standard feature set supporting a 32-bit shift register."),
                ]),
            ]),
            Register("PARAM", 0x4002D004, 32, "Parameter Register", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("CR", 0x4002D010, 32, "Control Register", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "Receive FIFO is reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "Transmit FIFO is reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "LPSPI module is disabled in debug mode"),
                    EnumVal("ENABLED", "0x1", "LPSPI module is enabled in debug mode"),
                ]),
                Field("DOZEN", 2, 1, "Doze Mode Enable", [
                    EnumVal("ENABLED", "0", "LPSPI module is enabled in Doze mode"),
                    EnumVal("DISABLED", "0x1", "LPSPI module is disabled in Doze mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Module is not reset"),
                    EnumVal("RESET", "0x1", "Module is reset"),
                ]),
                Field("MEN", 0, 1, "Module Enable", [
                    EnumVal("DISABLED", "0", "Module is disabled"),
                    EnumVal("ENABLED", "0x1", "Module is enabled"),
                ]),
            ]),
            Register("SR", 0x4002D014, 32, "Status Register", [
                Field("MBF", 24, 1, "Module Busy Flag", [
                    EnumVal("IDLE", "0", "LPSPI is idle"),
                    EnumVal("BUSY", "0x1", "LPSPI is busy"),
                ]),
                Field("DMF", 13, 1, "Data Match Flag", [
                    EnumVal("NO_MATCH", "0", "Have not received matching data"),
                    EnumVal("MATCH", "0x1", "Have received matching data"),
                ]),
                Field("REF", 12, 1, "Receive Error Flag", [
                    EnumVal("NOT_OVERFLOWED", "0", "Receive FIFO has not overflowed"),
                    EnumVal("OVERFLOWED", "0x1", "Receive FIFO has overflowed"),
                ]),
                Field("TEF", 11, 1, "Transmit Error Flag", [
                    EnumVal("NO_UNDERRUN", "0", "Transmit FIFO underrun has not occurred"),
                    EnumVal("UNDERRUN", "0x1", "Transmit FIFO underrun has occurred"),
                ]),
                Field("TCF", 10, 1, "Transfer Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "All transfers have not completed"),
                    EnumVal("COMPLETED", "0x1", "All transfers have completed"),
                ]),
                Field("FCF", 9, 1, "Frame Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Frame transfer has not completed"),
                    EnumVal("COMPLETED", "0x1", "Frame transfer has completed"),
                ]),
                Field("WCF", 8, 1, "Word Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Transfer of a received word has not yet completed"),
                    EnumVal("COMPLETED", "0x1", "Transfer of a received word has completed"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("NOTREADY", "0", "Receive Data is not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TXDATA_NOT_REQST", "0", "Transmit data not requested"),
                    EnumVal("TXDATA_REQST", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("IER", 0x4002D018, 32, "Interrupt Enable Register", [
                Field("DMIE", 13, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("REIE", 12, 1, "Receive Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TEIE", 11, 1, "Transmit Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TCIE", 10, 1, "Transfer Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("FCIE", 9, 1, "Frame Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("WCIE", 8, 1, "Word Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("DER", 0x4002D01C, 32, "DMA Enable Register", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("CFGR0", 0x4002D020, 32, "Configuration Register 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("STORED", "0", "Received data is stored in the receive FIFO as in normal operations"),
                    EnumVal("DISCARDED", "0x1", "Received data is discarded unless the Data Match Flag (DMF) is set"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("DISABLED", "0", "Circular FIFO is disabled"),
                    EnumVal("ENABLED", "0x1", "Circular FIFO is enabled"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HREQPIN", "0", "Host request input is the LPSPI_HREQ pin"),
                    EnumVal("INPUT_TRIGGER", "0x1", "Host request input is the input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("DISABLED", "0", "LPSPI_HREQ pin is active low"),
                    EnumVal("ENABLED", "0x1", "LPSPI_HREQ pin is active high"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("DISABLED", "0", "Host request is disabled"),
                    EnumVal("ENABLED", "0x1", "Host request is enabled"),
                ]),
            ]),
            Register("CFGR1", 0x4002D024, 32, "Configuration Register 1", [
                Field("PCSCFG", 27, 1, "Peripheral Chip Select Configuration", [
                    EnumVal("CHIP_SELECT", "0", "PCS[3:2] are configured for chip select function"),
                    EnumVal("HALFDUPLEX4BIT", "0x1", "PCS[3:2] are configured for half-duplex 4-bit transfers (PCS[3:2] = DATA[3:2])"),
                ]),
                Field("OUTCFG", 26, 1, "Output Configuration", [
                    EnumVal("RETAIN_LASTVALUE", "0", "Output data retains last value when chip select is negated"),
                    EnumVal("TRISTATED", "0x1", "Output data is tristated when chip select is negated"),
                ]),
                Field("PINCFG", 24, 2, "Pin Configuration", [
                    EnumVal("SIN_IN_SOUT_OUT", "0", "SIN is used for input data and SOUT is used for output data"),
                    EnumVal("SIN_BOTH_IN_OUT", "0x1", "SIN is used for both input and output data, only half-duplex serial transfers are supported"),
                    EnumVal("SOUT_BOTH_IN_OUT", "0x2", "SOUT is used for both input and output data, only half-duplex serial transfers are supported"),
                    EnumVal("SOUT_IN_SIN_OUT", "0x3", "SOUT is used for input data and SIN is used for output data"),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("ENABLED_FIRSTDATAMATCH", "0x2", "010b - Match is enabled, if 1st data word equals MATCH0 OR MATCH1, i.e., (1st data word = MATCH0 + MATCH1)"),
                    EnumVal("ENABLED_ANYDATAMATCH", "0x3", "011b - Match is enabled, if any data word equals MATCH0 OR MATCH1, i.e., (any data word = MATCH0 + MATCH1)"),
                    EnumVal("ENABLED_DATAMATCH_100", "0x4", "100b - Match is enabled, if 1st data word equals MATCH0 AND 2nd data word equals MATCH1, i.e., [(1st data word = MATCH0) * (2nd data word = MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_101", "0x5", "101b - Match is enabled, if any data word equals MATCH0 AND the next data word equals MATCH1, i.e., [(any data word = MATCH0) * (next data word = MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_110", "0x6", "110b - Match is enabled, if (1st data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(1st data word * MATCH1) = (MATCH0 * MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_111", "0x7", "111b - Match is enabled, if (any data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(any data word * MATCH1) = (MATCH0 * MATCH1)]"),
                ]),
                Field("PCSPOL", 8, 4, "Peripheral Chip Select Polarity", [
                ]),
                Field("NOSTALL", 3, 1, "No Stall", [
                    EnumVal("DISABLED", "0", "Transfers will stall when the transmit FIFO is empty"),
                    EnumVal("ENABLED", "0x1", "Transfers will not stall, allowing transmit FIFO underruns to occur"),
                ]),
                Field("AUTOPCS", 2, 1, "Automatic PCS", [
                    EnumVal("DISABLED", "0", "Automatic PCS generation is disabled"),
                    EnumVal("ENABLED", "0x1", "Automatic PCS generation is enabled"),
                ]),
                Field("SAMPLE", 1, 1, "Sample Point", [
                    EnumVal("ON_SCK_EDGE", "0", "Input data is sampled on SCK edge"),
                    EnumVal("ON_DELAYED_SCK_EDGE", "0x1", "Input data is sampled on delayed SCK edge"),
                ]),
                Field("MASTER", 0, 1, "Master Mode", [
                    EnumVal("SLAVE_MODE", "0", "Slave mode"),
                    EnumVal("MASTER_MODE", "0x1", "Master mode"),
                ]),
            ]),
            Register("DMR0", 0x4002D030, 32, "Data Match Register 0", [
                Field("MATCH0", 0, 32, "Match 0 Value", [
                ]),
            ]),
            Register("DMR1", 0x4002D034, 32, "Data Match Register 1", [
                Field("MATCH1", 0, 32, "Match 1 Value", [
                ]),
            ]),
            Register("CCR", 0x4002D040, 32, "Clock Configuration Register", [
                Field("SCKPCS", 24, 8, "SCK-to-PCS Delay", [
                ]),
                Field("PCSSCK", 16, 8, "PCS-to-SCK Delay", [
                ]),
                Field("DBT", 8, 8, "Delay Between Transfers", [
                ]),
                Field("SCKDIV", 0, 8, "SCK Divider", [
                ]),
            ]),
            Register("FCR", 0x4002D058, 32, "The FIFO Control register contains the RXWATER and TXWATER control fields.", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("FSR", 0x4002D05C, 32, "FIFO Status Register", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("TCR", 0x4002D060, 32, "Transmit Command Register", [
                Field("CPOL", 31, 1, "Clock Polarity", [
                    EnumVal("INACTIVE_LOW", "0", "The inactive state value of SCK is low"),
                    EnumVal("INACTIVE_HIGH", "0x1", "The inactive state value of SCK is high"),
                ]),
                Field("CPHA", 30, 1, "Clock Phase", [
                    EnumVal("CAPTURED", "0", "Data is captured on the leading edge of SCK and changed on the following edge of SCK"),
                    EnumVal("CHANGED", "0x1", "Data is changed on the leading edge of SCK and captured on the following edge of SCK"),
                ]),
                Field("PRESCALE", 27, 3, "Prescaler Value", [
                    EnumVal("DIVIDEBY1", "0", "Divide by 1"),
                    EnumVal("DIVIDEBY2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDEBY4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDEBY8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDEBY16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDEBY32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDEBY64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDEBY128", "0x7", "Divide by 128"),
                ]),
                Field("PCS", 24, 2, "Peripheral Chip Select", [
                    EnumVal("TX_PCS0", "0", "Transfer using LPSPI_PCS[0]"),
                    EnumVal("TX_PCS1", "0x1", "Transfer using LPSPI_PCS[1]"),
                    EnumVal("TX_PCS2", "0x2", "Transfer using LPSPI_PCS[2]"),
                    EnumVal("TX_PCS3", "0x3", "Transfer using LPSPI_PCS[3]"),
                ]),
                Field("LSBF", 23, 1, "LSB First", [
                    EnumVal("MSB_FIRST", "0", "Data is transferred MSB first"),
                    EnumVal("LSB_FIRST", "0x1", "Data is transferred LSB first"),
                ]),
                Field("BYSW", 22, 1, "Byte Swap", [
                    EnumVal("DISABLED", "0", "Byte swap is disabled"),
                    EnumVal("ENABLED", "0x1", "Byte swap is enabled"),
                ]),
                Field("CONT", 21, 1, "Continuous Transfer", [
                    EnumVal("DISABLED", "0", "Continuous transfer is disabled"),
                    EnumVal("ENABLED", "0x1", "Continuous transfer is enabled"),
                ]),
                Field("CONTC", 20, 1, "Continuing Command", [
                    EnumVal("START", "0", "Command word for start of new transfer"),
                    EnumVal("CONTINUE", "0x1", "Command word for continuing transfer"),
                ]),
                Field("RXMSK", 19, 1, "Receive Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Receive data is masked"),
                ]),
                Field("TXMSK", 18, 1, "Transmit Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Mask transmit data"),
                ]),
                Field("WIDTH", 16, 2, "Transfer Width", [
                    EnumVal("ONEBIT", "0", "1 bit transfer"),
                    EnumVal("TWOBIT", "0x1", "2 bit transfer"),
                    EnumVal("FOURBIT", "0x2", "4 bit transfer"),
                ]),
                Field("FRAMESZ", 0, 12, "Frame Size", [
                ]),
            ]),
            Register("TDR", 0x4002D064, 32, "Transmit Data Register", [
                Field("DATA", 0, 32, "Transmit Data", [
                ]),
            ]),
            Register("RSR", 0x4002D070, 32, "Receive Status Register", [
                Field("RXEMPTY", 1, 1, "RX FIFO Empty", [
                    EnumVal("NOT_EMPTY", "0", "RX FIFO is not empty"),
                    EnumVal("EMPTY", "0x1", "RX FIFO is empty"),
                ]),
                Field("SOF", 0, 1, "Start Of Frame", [
                    EnumVal("NEXT_DATAWORD", "0", "Subsequent data word received after LPSPI_PCS assertion"),
                    EnumVal("FIRST_DATAWORD", "0x1", "First data word received after LPSPI_PCS assertion"),
                ]),
            ]),
            Register("RDR", 0x4002D074, 32, "Receive Data Register", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
        ])

class Module_LPSPI2(Peripheral):
    def __init__(self):
        super().__init__("LPSPI2", 0x4002E000, 0x78, [
            Register("VERID", 0x4002E000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Module Identification Number", [
                    EnumVal("STANDARD", "0x4", "Standard feature set supporting a 32-bit shift register."),
                ]),
            ]),
            Register("PARAM", 0x4002E004, 32, "Parameter Register", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("CR", 0x4002E010, 32, "Control Register", [
                Field("RRF", 9, 1, "Reset Receive FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("RXFIFO_RST", "0x1", "Receive FIFO is reset"),
                ]),
                Field("RTF", 8, 1, "Reset Transmit FIFO", [
                    EnumVal("NO_EFFECT", "0", "No effect"),
                    EnumVal("TXFIFO_RST", "0x1", "Transmit FIFO is reset"),
                ]),
                Field("DBGEN", 3, 1, "Debug Enable", [
                    EnumVal("DISABLED", "0", "LPSPI module is disabled in debug mode"),
                    EnumVal("ENABLED", "0x1", "LPSPI module is enabled in debug mode"),
                ]),
                Field("DOZEN", 2, 1, "Doze Mode Enable", [
                    EnumVal("ENABLED", "0", "LPSPI module is enabled in Doze mode"),
                    EnumVal("DISABLED", "0x1", "LPSPI module is disabled in Doze mode"),
                ]),
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("NOT_RESET", "0", "Module is not reset"),
                    EnumVal("RESET", "0x1", "Module is reset"),
                ]),
                Field("MEN", 0, 1, "Module Enable", [
                    EnumVal("DISABLED", "0", "Module is disabled"),
                    EnumVal("ENABLED", "0x1", "Module is enabled"),
                ]),
            ]),
            Register("SR", 0x4002E014, 32, "Status Register", [
                Field("MBF", 24, 1, "Module Busy Flag", [
                    EnumVal("IDLE", "0", "LPSPI is idle"),
                    EnumVal("BUSY", "0x1", "LPSPI is busy"),
                ]),
                Field("DMF", 13, 1, "Data Match Flag", [
                    EnumVal("NO_MATCH", "0", "Have not received matching data"),
                    EnumVal("MATCH", "0x1", "Have received matching data"),
                ]),
                Field("REF", 12, 1, "Receive Error Flag", [
                    EnumVal("NOT_OVERFLOWED", "0", "Receive FIFO has not overflowed"),
                    EnumVal("OVERFLOWED", "0x1", "Receive FIFO has overflowed"),
                ]),
                Field("TEF", 11, 1, "Transmit Error Flag", [
                    EnumVal("NO_UNDERRUN", "0", "Transmit FIFO underrun has not occurred"),
                    EnumVal("UNDERRUN", "0x1", "Transmit FIFO underrun has occurred"),
                ]),
                Field("TCF", 10, 1, "Transfer Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "All transfers have not completed"),
                    EnumVal("COMPLETED", "0x1", "All transfers have completed"),
                ]),
                Field("FCF", 9, 1, "Frame Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Frame transfer has not completed"),
                    EnumVal("COMPLETED", "0x1", "Frame transfer has completed"),
                ]),
                Field("WCF", 8, 1, "Word Complete Flag", [
                    EnumVal("NOT_COMPLETED", "0", "Transfer of a received word has not yet completed"),
                    EnumVal("COMPLETED", "0x1", "Transfer of a received word has completed"),
                ]),
                Field("RDF", 1, 1, "Receive Data Flag", [
                    EnumVal("NOTREADY", "0", "Receive Data is not ready"),
                    EnumVal("READY", "0x1", "Receive data is ready"),
                ]),
                Field("TDF", 0, 1, "Transmit Data Flag", [
                    EnumVal("TXDATA_NOT_REQST", "0", "Transmit data not requested"),
                    EnumVal("TXDATA_REQST", "0x1", "Transmit data is requested"),
                ]),
            ]),
            Register("IER", 0x4002E018, 32, "Interrupt Enable Register", [
                Field("DMIE", 13, 1, "Data Match Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("REIE", 12, 1, "Receive Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TEIE", 11, 1, "Transmit Error Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TCIE", 10, 1, "Transfer Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("FCIE", 9, 1, "Frame Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("WCIE", 8, 1, "Word Complete Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("RDIE", 1, 1, "Receive Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
                Field("TDIE", 0, 1, "Transmit Data Interrupt Enable", [
                    EnumVal("DISABLED", "0", "Disabled"),
                    EnumVal("ENABLED", "0x1", "Enabled"),
                ]),
            ]),
            Register("DER", 0x4002E01C, 32, "DMA Enable Register", [
                Field("RDDE", 1, 1, "Receive Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
                Field("TDDE", 0, 1, "Transmit Data DMA Enable", [
                    EnumVal("DISABLED", "0", "DMA request is disabled"),
                    EnumVal("ENABLED", "0x1", "DMA request is enabled"),
                ]),
            ]),
            Register("CFGR0", 0x4002E020, 32, "Configuration Register 0", [
                Field("RDMO", 9, 1, "Receive Data Match Only", [
                    EnumVal("STORED", "0", "Received data is stored in the receive FIFO as in normal operations"),
                    EnumVal("DISCARDED", "0x1", "Received data is discarded unless the Data Match Flag (DMF) is set"),
                ]),
                Field("CIRFIFO", 8, 1, "Circular FIFO Enable", [
                    EnumVal("DISABLED", "0", "Circular FIFO is disabled"),
                    EnumVal("ENABLED", "0x1", "Circular FIFO is enabled"),
                ]),
                Field("HRSEL", 2, 1, "Host Request Select", [
                    EnumVal("HREQPIN", "0", "Host request input is the LPSPI_HREQ pin"),
                    EnumVal("INPUT_TRIGGER", "0x1", "Host request input is the input trigger"),
                ]),
                Field("HRPOL", 1, 1, "Host Request Polarity", [
                    EnumVal("DISABLED", "0", "LPSPI_HREQ pin is active low"),
                    EnumVal("ENABLED", "0x1", "LPSPI_HREQ pin is active high"),
                ]),
                Field("HREN", 0, 1, "Host Request Enable", [
                    EnumVal("DISABLED", "0", "Host request is disabled"),
                    EnumVal("ENABLED", "0x1", "Host request is enabled"),
                ]),
            ]),
            Register("CFGR1", 0x4002E024, 32, "Configuration Register 1", [
                Field("PCSCFG", 27, 1, "Peripheral Chip Select Configuration", [
                    EnumVal("CHIP_SELECT", "0", "PCS[3:2] are configured for chip select function"),
                    EnumVal("HALFDUPLEX4BIT", "0x1", "PCS[3:2] are configured for half-duplex 4-bit transfers (PCS[3:2] = DATA[3:2])"),
                ]),
                Field("OUTCFG", 26, 1, "Output Configuration", [
                    EnumVal("RETAIN_LASTVALUE", "0", "Output data retains last value when chip select is negated"),
                    EnumVal("TRISTATED", "0x1", "Output data is tristated when chip select is negated"),
                ]),
                Field("PINCFG", 24, 2, "Pin Configuration", [
                    EnumVal("SIN_IN_SOUT_OUT", "0", "SIN is used for input data and SOUT is used for output data"),
                    EnumVal("SIN_BOTH_IN_OUT", "0x1", "SIN is used for both input and output data, only half-duplex serial transfers are supported"),
                    EnumVal("SOUT_BOTH_IN_OUT", "0x2", "SOUT is used for both input and output data, only half-duplex serial transfers are supported"),
                    EnumVal("SOUT_IN_SIN_OUT", "0x3", "SOUT is used for input data and SIN is used for output data"),
                ]),
                Field("MATCFG", 16, 3, "Match Configuration", [
                    EnumVal("DISABLED", "0", "Match is disabled"),
                    EnumVal("ENABLED_FIRSTDATAMATCH", "0x2", "010b - Match is enabled, if 1st data word equals MATCH0 OR MATCH1, i.e., (1st data word = MATCH0 + MATCH1)"),
                    EnumVal("ENABLED_ANYDATAMATCH", "0x3", "011b - Match is enabled, if any data word equals MATCH0 OR MATCH1, i.e., (any data word = MATCH0 + MATCH1)"),
                    EnumVal("ENABLED_DATAMATCH_100", "0x4", "100b - Match is enabled, if 1st data word equals MATCH0 AND 2nd data word equals MATCH1, i.e., [(1st data word = MATCH0) * (2nd data word = MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_101", "0x5", "101b - Match is enabled, if any data word equals MATCH0 AND the next data word equals MATCH1, i.e., [(any data word = MATCH0) * (next data word = MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_110", "0x6", "110b - Match is enabled, if (1st data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(1st data word * MATCH1) = (MATCH0 * MATCH1)]"),
                    EnumVal("ENABLED_DATAMATCH_111", "0x7", "111b - Match is enabled, if (any data word AND MATCH1) equals (MATCH0 AND MATCH1), i.e., [(any data word * MATCH1) = (MATCH0 * MATCH1)]"),
                ]),
                Field("PCSPOL", 8, 4, "Peripheral Chip Select Polarity", [
                ]),
                Field("NOSTALL", 3, 1, "No Stall", [
                    EnumVal("DISABLED", "0", "Transfers will stall when the transmit FIFO is empty"),
                    EnumVal("ENABLED", "0x1", "Transfers will not stall, allowing transmit FIFO underruns to occur"),
                ]),
                Field("AUTOPCS", 2, 1, "Automatic PCS", [
                    EnumVal("DISABLED", "0", "Automatic PCS generation is disabled"),
                    EnumVal("ENABLED", "0x1", "Automatic PCS generation is enabled"),
                ]),
                Field("SAMPLE", 1, 1, "Sample Point", [
                    EnumVal("ON_SCK_EDGE", "0", "Input data is sampled on SCK edge"),
                    EnumVal("ON_DELAYED_SCK_EDGE", "0x1", "Input data is sampled on delayed SCK edge"),
                ]),
                Field("MASTER", 0, 1, "Master Mode", [
                    EnumVal("SLAVE_MODE", "0", "Slave mode"),
                    EnumVal("MASTER_MODE", "0x1", "Master mode"),
                ]),
            ]),
            Register("DMR0", 0x4002E030, 32, "Data Match Register 0", [
                Field("MATCH0", 0, 32, "Match 0 Value", [
                ]),
            ]),
            Register("DMR1", 0x4002E034, 32, "Data Match Register 1", [
                Field("MATCH1", 0, 32, "Match 1 Value", [
                ]),
            ]),
            Register("CCR", 0x4002E040, 32, "Clock Configuration Register", [
                Field("SCKPCS", 24, 8, "SCK-to-PCS Delay", [
                ]),
                Field("PCSSCK", 16, 8, "PCS-to-SCK Delay", [
                ]),
                Field("DBT", 8, 8, "Delay Between Transfers", [
                ]),
                Field("SCKDIV", 0, 8, "SCK Divider", [
                ]),
            ]),
            Register("FCR", 0x4002E058, 32, "The FIFO Control register contains the RXWATER and TXWATER control fields.", [
                Field("RXWATER", 16, 2, "Receive FIFO Watermark", [
                ]),
                Field("TXWATER", 0, 2, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("FSR", 0x4002E05C, 32, "FIFO Status Register", [
                Field("RXCOUNT", 16, 3, "Receive FIFO Count", [
                ]),
                Field("TXCOUNT", 0, 3, "Transmit FIFO Count", [
                ]),
            ]),
            Register("TCR", 0x4002E060, 32, "Transmit Command Register", [
                Field("CPOL", 31, 1, "Clock Polarity", [
                    EnumVal("INACTIVE_LOW", "0", "The inactive state value of SCK is low"),
                    EnumVal("INACTIVE_HIGH", "0x1", "The inactive state value of SCK is high"),
                ]),
                Field("CPHA", 30, 1, "Clock Phase", [
                    EnumVal("CAPTURED", "0", "Data is captured on the leading edge of SCK and changed on the following edge of SCK"),
                    EnumVal("CHANGED", "0x1", "Data is changed on the leading edge of SCK and captured on the following edge of SCK"),
                ]),
                Field("PRESCALE", 27, 3, "Prescaler Value", [
                    EnumVal("DIVIDEBY1", "0", "Divide by 1"),
                    EnumVal("DIVIDEBY2", "0x1", "Divide by 2"),
                    EnumVal("DIVIDEBY4", "0x2", "Divide by 4"),
                    EnumVal("DIVIDEBY8", "0x3", "Divide by 8"),
                    EnumVal("DIVIDEBY16", "0x4", "Divide by 16"),
                    EnumVal("DIVIDEBY32", "0x5", "Divide by 32"),
                    EnumVal("DIVIDEBY64", "0x6", "Divide by 64"),
                    EnumVal("DIVIDEBY128", "0x7", "Divide by 128"),
                ]),
                Field("PCS", 24, 2, "Peripheral Chip Select", [
                    EnumVal("TX_PCS0", "0", "Transfer using LPSPI_PCS[0]"),
                    EnumVal("TX_PCS1", "0x1", "Transfer using LPSPI_PCS[1]"),
                    EnumVal("TX_PCS2", "0x2", "Transfer using LPSPI_PCS[2]"),
                    EnumVal("TX_PCS3", "0x3", "Transfer using LPSPI_PCS[3]"),
                ]),
                Field("LSBF", 23, 1, "LSB First", [
                    EnumVal("MSB_FIRST", "0", "Data is transferred MSB first"),
                    EnumVal("LSB_FIRST", "0x1", "Data is transferred LSB first"),
                ]),
                Field("BYSW", 22, 1, "Byte Swap", [
                    EnumVal("DISABLED", "0", "Byte swap is disabled"),
                    EnumVal("ENABLED", "0x1", "Byte swap is enabled"),
                ]),
                Field("CONT", 21, 1, "Continuous Transfer", [
                    EnumVal("DISABLED", "0", "Continuous transfer is disabled"),
                    EnumVal("ENABLED", "0x1", "Continuous transfer is enabled"),
                ]),
                Field("CONTC", 20, 1, "Continuing Command", [
                    EnumVal("START", "0", "Command word for start of new transfer"),
                    EnumVal("CONTINUE", "0x1", "Command word for continuing transfer"),
                ]),
                Field("RXMSK", 19, 1, "Receive Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Receive data is masked"),
                ]),
                Field("TXMSK", 18, 1, "Transmit Data Mask", [
                    EnumVal("NORMAL", "0", "Normal transfer"),
                    EnumVal("MASK", "0x1", "Mask transmit data"),
                ]),
                Field("WIDTH", 16, 2, "Transfer Width", [
                    EnumVal("ONEBIT", "0", "1 bit transfer"),
                    EnumVal("TWOBIT", "0x1", "2 bit transfer"),
                    EnumVal("FOURBIT", "0x2", "4 bit transfer"),
                ]),
                Field("FRAMESZ", 0, 12, "Frame Size", [
                ]),
            ]),
            Register("TDR", 0x4002E064, 32, "Transmit Data Register", [
                Field("DATA", 0, 32, "Transmit Data", [
                ]),
            ]),
            Register("RSR", 0x4002E070, 32, "Receive Status Register", [
                Field("RXEMPTY", 1, 1, "RX FIFO Empty", [
                    EnumVal("NOT_EMPTY", "0", "RX FIFO is not empty"),
                    EnumVal("EMPTY", "0x1", "RX FIFO is empty"),
                ]),
                Field("SOF", 0, 1, "Start Of Frame", [
                    EnumVal("NEXT_DATAWORD", "0", "Subsequent data word received after LPSPI_PCS assertion"),
                    EnumVal("FIRST_DATAWORD", "0x1", "First data word received after LPSPI_PCS assertion"),
                ]),
            ]),
            Register("RDR", 0x4002E074, 32, "Receive Data Register", [
                Field("DATA", 0, 32, "Receive Data", [
                ]),
            ]),
        ])

class Module_LPTMR0(Peripheral):
    def __init__(self):
        super().__init__("LPTMR0", 0x40040000, 0x10, [
            Register("CSR", 0x40040000, 32, "Low Power Timer Control Status Register", [
                Field("TDRE", 8, 1, "Timer DMA Request Enable", [
                    EnumVal("TDRE_0", "0", "Timer DMA Request disabled."),
                    EnumVal("TDRE_1", "0x1", "Timer DMA Request enabled."),
                ]),
                Field("TCF", 7, 1, "Timer Compare Flag", [
                    EnumVal("TCF_0", "0", "The value of CNR is not equal to CMR and increments."),
                    EnumVal("TCF_1", "0x1", "The value of CNR is equal to CMR and increments."),
                ]),
                Field("TIE", 6, 1, "Timer Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Timer interrupt disabled."),
                    EnumVal("TIE_1", "0x1", "Timer interrupt enabled."),
                ]),
                Field("TPS", 4, 2, "Timer Pin Select", [
                    EnumVal("TPS_0", "0", "Pulse counter input 0 is selected."),
                    EnumVal("TPS_1", "0x1", "Pulse counter input 1 is selected."),
                    EnumVal("TPS_2", "0x2", "Pulse counter input 2 is selected."),
                    EnumVal("TPS_3", "0x3", "Pulse counter input 3 is selected."),
                ]),
                Field("TPP", 3, 1, "Timer Pin Polarity", [
                    EnumVal("TPP_0", "0", "Pulse Counter input source is active-high, and the CNR increments on the rising-edge."),
                    EnumVal("TPP_1", "0x1", "Pulse Counter input source is active-low, and the CNR increments on the falling-edge."),
                ]),
                Field("TFC", 2, 1, "Timer Free-Running Counter", [
                    EnumVal("TFC_0", "0", "CNR is reset whenever TCF is set."),
                    EnumVal("TFC_1", "0x1", "CNR is reset on overflow."),
                ]),
                Field("TMS", 1, 1, "Timer Mode Select", [
                    EnumVal("TMS_0", "0", "Time Counter mode."),
                    EnumVal("TMS_1", "0x1", "Pulse Counter mode."),
                ]),
                Field("TEN", 0, 1, "Timer Enable", [
                    EnumVal("TEN_0", "0", "LPTMR is disabled and internal logic is reset."),
                    EnumVal("TEN_1", "0x1", "LPTMR is enabled."),
                ]),
            ]),
            Register("PSR", 0x40040004, 32, "Low Power Timer Prescale Register", [
                Field("PRESCALE", 3, 4, "Prescale Value", [
                    EnumVal("PRESCALE_0", "0", "Prescaler divides the prescaler clock by 2; glitch filter does not support this configuration."),
                    EnumVal("PRESCALE_1", "0x1", "Prescaler divides the prescaler clock by 4; glitch filter recognizes change on input pin after 2 rising clock edges."),
                    EnumVal("PRESCALE_2", "0x2", "Prescaler divides the prescaler clock by 8; glitch filter recognizes change on input pin after 4 rising clock edges."),
                    EnumVal("PRESCALE_3", "0x3", "Prescaler divides the prescaler clock by 16; glitch filter recognizes change on input pin after 8 rising clock edges."),
                    EnumVal("PRESCALE_4", "0x4", "Prescaler divides the prescaler clock by 32; glitch filter recognizes change on input pin after 16 rising clock edges."),
                    EnumVal("PRESCALE_5", "0x5", "Prescaler divides the prescaler clock by 64; glitch filter recognizes change on input pin after 32 rising clock edges."),
                    EnumVal("PRESCALE_6", "0x6", "Prescaler divides the prescaler clock by 128; glitch filter recognizes change on input pin after 64 rising clock edges."),
                    EnumVal("PRESCALE_7", "0x7", "Prescaler divides the prescaler clock by 256; glitch filter recognizes change on input pin after 128 rising clock edges."),
                    EnumVal("PRESCALE_8", "0x8", "Prescaler divides the prescaler clock by 512; glitch filter recognizes change on input pin after 256 rising clock edges."),
                    EnumVal("PRESCALE_9", "0x9", "Prescaler divides the prescaler clock by 1024; glitch filter recognizes change on input pin after 512 rising clock edges."),
                    EnumVal("PRESCALE_10", "0xA", "Prescaler divides the prescaler clock by 2048; glitch filter recognizes change on input pin after 1024 rising clock edges."),
                    EnumVal("PRESCALE_11", "0xB", "Prescaler divides the prescaler clock by 4096; glitch filter recognizes change on input pin after 2048 rising clock edges."),
                    EnumVal("PRESCALE_12", "0xC", "Prescaler divides the prescaler clock by 8192; glitch filter recognizes change on input pin after 4096 rising clock edges."),
                    EnumVal("PRESCALE_13", "0xD", "Prescaler divides the prescaler clock by 16,384; glitch filter recognizes change on input pin after 8192 rising clock edges."),
                    EnumVal("PRESCALE_14", "0xE", "Prescaler divides the prescaler clock by 32,768; glitch filter recognizes change on input pin after 16,384 rising clock edges."),
                    EnumVal("PRESCALE_15", "0xF", "Prescaler divides the prescaler clock by 65,536; glitch filter recognizes change on input pin after 32,768 rising clock edges."),
                ]),
                Field("PBYP", 2, 1, "Prescaler Bypass", [
                    EnumVal("PBYP_0", "0", "Prescaler/glitch filter is enabled."),
                    EnumVal("PBYP_1", "0x1", "Prescaler/glitch filter is bypassed."),
                ]),
                Field("PCS", 0, 2, "Prescaler Clock Select", [
                    EnumVal("PCS_0", "0", "Prescaler/glitch filter clock 0 selected."),
                    EnumVal("PCS_1", "0x1", "Prescaler/glitch filter clock 1 selected."),
                    EnumVal("PCS_2", "0x2", "Prescaler/glitch filter clock 2 selected."),
                    EnumVal("PCS_3", "0x3", "Prescaler/glitch filter clock 3 selected."),
                ]),
            ]),
            Register("CMR", 0x40040008, 32, "Low Power Timer Compare Register", [
                Field("COMPARE", 0, 16, "Compare Value", [
                ]),
            ]),
            Register("CNR", 0x4004000C, 32, "Low Power Timer Counter Register", [
                Field("COUNTER", 0, 16, "Counter Value", [
                ]),
            ]),
        ])

class Module_LPUART0(Peripheral):
    def __init__(self):
        super().__init__("LPUART0", 0x4006A000, 0x30, [
            Register("VERID", 0x4006A000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Identification Number", [
                    EnumVal("FEATURE_1", "0x1", "Standard feature set."),
                    EnumVal("FEATURE_3", "0x3", "Standard feature set with MODEM/IrDA support."),
                ]),
            ]),
            Register("PARAM", 0x4006A004, 32, "Parameter Register", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("GLOBAL", 0x4006A008, 32, "LPUART Global Register", [
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("RST_0", "0", "Module is not reset."),
                    EnumVal("RST_1", "0x1", "Module is reset."),
                ]),
            ]),
            Register("PINCFG", 0x4006A00C, 32, "LPUART Pin Configuration Register", [
                Field("TRGSEL", 0, 2, "Trigger Select", [
                    EnumVal("TRGSEL_0", "0", "Input trigger is disabled."),
                    EnumVal("TRGSEL_1", "0x1", "Input trigger is used instead of RXD pin input."),
                    EnumVal("TRGSEL_2", "0x2", "Input trigger is used instead of CTS_B pin input."),
                    EnumVal("TRGSEL_3", "0x3", "Input trigger is used to modulate the TXD pin output. The TXD pin output (after TXINV configuration) is ANDed with the input trigger."),
                ]),
            ]),
            Register("BAUD", 0x4006A010, 32, "LPUART Baud Rate Register", [
                Field("MAEN1", 31, 1, "Match Address Mode Enable 1", [
                    EnumVal("MAEN1_0", "0", "Normal operation."),
                    EnumVal("MAEN1_1", "0x1", "Enables automatic address matching or data matching mode for MATCH[MA1]."),
                ]),
                Field("MAEN2", 30, 1, "Match Address Mode Enable 2", [
                    EnumVal("MAEN2_0", "0", "Normal operation."),
                    EnumVal("MAEN2_1", "0x1", "Enables automatic address matching or data matching mode for MATCH[MA2]."),
                ]),
                Field("M10", 29, 1, "10-bit Mode select", [
                    EnumVal("M10_0", "0", "Receiver and transmitter use 7-bit to 9-bit data characters."),
                    EnumVal("M10_1", "0x1", "Receiver and transmitter use 10-bit data characters."),
                ]),
                Field("OSR", 24, 5, "Oversampling Ratio", [
                    EnumVal("OSR_0", "0", "Writing 0 to this field results in an oversampling ratio of 16"),
                    EnumVal("OSR_3", "0x3", "Oversampling ratio of 4, requires BOTHEDGE to be set."),
                    EnumVal("OSR_4", "0x4", "Oversampling ratio of 5, requires BOTHEDGE to be set."),
                    EnumVal("OSR_5", "0x5", "Oversampling ratio of 6, requires BOTHEDGE to be set."),
                    EnumVal("OSR_6", "0x6", "Oversampling ratio of 7, requires BOTHEDGE to be set."),
                    EnumVal("OSR_7", "0x7", "Oversampling ratio of 8."),
                    EnumVal("OSR_8", "0x8", "Oversampling ratio of 9."),
                    EnumVal("OSR_9", "0x9", "Oversampling ratio of 10."),
                    EnumVal("OSR_10", "0xA", "Oversampling ratio of 11."),
                    EnumVal("OSR_11", "0xB", "Oversampling ratio of 12."),
                    EnumVal("OSR_12", "0xC", "Oversampling ratio of 13."),
                    EnumVal("OSR_13", "0xD", "Oversampling ratio of 14."),
                    EnumVal("OSR_14", "0xE", "Oversampling ratio of 15."),
                    EnumVal("OSR_15", "0xF", "Oversampling ratio of 16."),
                    EnumVal("OSR_16", "0x10", "Oversampling ratio of 17."),
                    EnumVal("OSR_17", "0x11", "Oversampling ratio of 18."),
                    EnumVal("OSR_18", "0x12", "Oversampling ratio of 19."),
                    EnumVal("OSR_19", "0x13", "Oversampling ratio of 20."),
                    EnumVal("OSR_20", "0x14", "Oversampling ratio of 21."),
                    EnumVal("OSR_21", "0x15", "Oversampling ratio of 22."),
                    EnumVal("OSR_22", "0x16", "Oversampling ratio of 23."),
                    EnumVal("OSR_23", "0x17", "Oversampling ratio of 24."),
                    EnumVal("OSR_24", "0x18", "Oversampling ratio of 25."),
                    EnumVal("OSR_25", "0x19", "Oversampling ratio of 26."),
                    EnumVal("OSR_26", "0x1A", "Oversampling ratio of 27."),
                    EnumVal("OSR_27", "0x1B", "Oversampling ratio of 28."),
                    EnumVal("OSR_28", "0x1C", "Oversampling ratio of 29."),
                    EnumVal("OSR_29", "0x1D", "Oversampling ratio of 30."),
                    EnumVal("OSR_30", "0x1E", "Oversampling ratio of 31."),
                    EnumVal("OSR_31", "0x1F", "Oversampling ratio of 32."),
                ]),
                Field("TDMAE", 23, 1, "Transmitter DMA Enable", [
                    EnumVal("TDMAE_0", "0", "DMA request disabled."),
                    EnumVal("TDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("RDMAE", 21, 1, "Receiver Full DMA Enable", [
                    EnumVal("RDMAE_0", "0", "DMA request disabled."),
                    EnumVal("RDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("RIDMAE", 20, 1, "Receiver Idle DMA Enable", [
                    EnumVal("RIDMAE_0", "0", "DMA request disabled."),
                    EnumVal("RIDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("MATCFG", 18, 2, "Match Configuration", [
                    EnumVal("MATCFG_0", "0", "Address Match Wakeup"),
                    EnumVal("MATCFG_1", "0x1", "Idle Match Wakeup"),
                    EnumVal("MATCFG_2", "0x2", "Match On and Match Off"),
                    EnumVal("MATCFG_3", "0x3", "Enables RWU on Data Match and Match On/Off for transmitter CTS input"),
                ]),
                Field("BOTHEDGE", 17, 1, "Both Edge Sampling", [
                    EnumVal("BOTHEDGE_0", "0", "Receiver samples input data using the rising edge of the baud rate clock."),
                    EnumVal("BOTHEDGE_1", "0x1", "Receiver samples input data using the rising and falling edge of the baud rate clock."),
                ]),
                Field("RESYNCDIS", 16, 1, "Resynchronization Disable", [
                    EnumVal("RESYNCDIS_0", "0", "Resynchronization during received data word is supported"),
                    EnumVal("RESYNCDIS_1", "0x1", "Resynchronization during received data word is disabled"),
                ]),
                Field("LBKDIE", 15, 1, "LIN Break Detect Interrupt Enable", [
                    EnumVal("LBKDIE_0", "0", "Hardware interrupts from STAT[LBKDIF] flag are disabled (use polling)."),
                    EnumVal("LBKDIE_1", "0x1", "Hardware interrupt requested when STAT[LBKDIF] flag is 1."),
                ]),
                Field("RXEDGIE", 14, 1, "RX Input Active Edge Interrupt Enable", [
                    EnumVal("RXEDGIE_0", "0", "Hardware interrupts from STAT[RXEDGIF] are disabled."),
                    EnumVal("RXEDGIE_1", "0x1", "Hardware interrupt is requested when STAT[RXEDGIF] flag is 1."),
                ]),
                Field("SBNS", 13, 1, "Stop Bit Number Select", [
                    EnumVal("SBNS_0", "0", "One stop bit."),
                    EnumVal("SBNS_1", "0x1", "Two stop bits."),
                ]),
                Field("SBR", 0, 13, "Baud Rate Modulo Divisor.", [
                ]),
            ]),
            Register("STAT", 0x4006A014, 32, "LPUART Status Register", [
                Field("LBKDIF", 31, 1, "LIN Break Detect Interrupt Flag", [
                    EnumVal("LBKDIF_0", "0", "No LIN break character has been detected."),
                    EnumVal("LBKDIF_1", "0x1", "LIN break character has been detected."),
                ]),
                Field("RXEDGIF", 30, 1, "RXD Pin Active Edge Interrupt Flag", [
                    EnumVal("RXEDGIF_0", "0", "No active edge on the receive pin has occurred."),
                    EnumVal("RXEDGIF_1", "0x1", "An active edge on the receive pin has occurred."),
                ]),
                Field("MSBF", 29, 1, "MSB First", [
                    EnumVal("MSBF_0", "0", "LSB (bit0) is the first bit that is transmitted following the start bit. Further, the first bit received after the start bit is identified as bit0."),
                    EnumVal("MSBF_1", "0x1", "MSB (bit9, bit8, bit7 or bit6) is the first bit that is transmitted following the start bit depending on the setting of CTRL[M], CTRL[PE] and BAUD[M10]. Further, the first bit received after the start bit is identified as bit9, bit8, bit7 or bit6 depending on the setting of CTRL[M] and CTRL[PE]."),
                ]),
                Field("RXINV", 28, 1, "Receive Data Inversion", [
                    EnumVal("RXINV_0", "0", "Receive data not inverted."),
                    EnumVal("RXINV_1", "0x1", "Receive data inverted."),
                ]),
                Field("RWUID", 27, 1, "Receive Wake Up Idle Detect", [
                    EnumVal("RWUID_0", "0", "During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle character. During address match wakeup, the IDLE bit does not set when an address does not match."),
                    EnumVal("RWUID_1", "0x1", "During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character. During address match wakeup, the IDLE bit does set when an address does not match."),
                ]),
                Field("BRK13", 26, 1, "Break Character Generation Length", [
                    EnumVal("BRK13_0", "0", "Break character is transmitted with length of 9 to 13 bit times."),
                    EnumVal("BRK13_1", "0x1", "Break character is transmitted with length of 12 to 15 bit times."),
                ]),
                Field("LBKDE", 25, 1, "LIN Break Detection Enable", [
                    EnumVal("LBKDE_0", "0", "LIN break detect is disabled, normal break character can be detected."),
                    EnumVal("LBKDE_1", "0x1", "LIN break detect is enabled. LIN break character is detected at length of 11 bit times (if M = 0) or 12 (if M = 1) or 13 (M10 = 1)."),
                ]),
                Field("RAF", 24, 1, "Receiver Active Flag", [
                    EnumVal("RAF_0", "0", "LPUART receiver idle waiting for a start bit."),
                    EnumVal("RAF_1", "0x1", "LPUART receiver active (RXD input not idle)."),
                ]),
                Field("TDRE", 23, 1, "Transmit Data Register Empty Flag", [
                    EnumVal("TDRE_0", "0", "Transmit data buffer full."),
                    EnumVal("TDRE_1", "0x1", "Transmit data buffer empty."),
                ]),
                Field("TC", 22, 1, "Transmission Complete Flag", [
                    EnumVal("TC_0", "0", "Transmitter active (sending data, a preamble, or a break)."),
                    EnumVal("TC_1", "0x1", "Transmitter idle (transmission activity complete)."),
                ]),
                Field("RDRF", 21, 1, "Receive Data Register Full Flag", [
                    EnumVal("RDRF_0", "0", "Receive data buffer empty."),
                    EnumVal("RDRF_1", "0x1", "Receive data buffer full."),
                ]),
                Field("IDLE", 20, 1, "Idle Line Flag", [
                    EnumVal("IDLE_0", "0", "No idle line detected."),
                    EnumVal("IDLE_1", "0x1", "Idle line was detected."),
                ]),
                Field("OR", 19, 1, "Receiver Overrun Flag", [
                    EnumVal("OR_0", "0", "No overrun."),
                    EnumVal("OR_1", "0x1", "Receive overrun (new LPUART data lost)."),
                ]),
                Field("NF", 18, 1, "Noise Flag", [
                    EnumVal("NF_0", "0", "No noise detected."),
                    EnumVal("NF_1", "0x1", "Noise detected in the received character in the DATA register."),
                ]),
                Field("FE", 17, 1, "Framing Error Flag", [
                    EnumVal("FE_0", "0", "No framing error detected. This does not guarantee the framing is correct."),
                    EnumVal("FE_1", "0x1", "Framing error."),
                ]),
                Field("PF", 16, 1, "Parity Error Flag", [
                    EnumVal("PF_0", "0", "No parity error."),
                    EnumVal("PF_1", "0x1", "Parity error."),
                ]),
                Field("MA1F", 15, 1, "Match 1 Flag", [
                    EnumVal("MA1F_0", "0", "Received data is not equal to MA1"),
                    EnumVal("MA1F_1", "0x1", "Received data is equal to MA1"),
                ]),
                Field("MA2F", 14, 1, "Match 2 Flag", [
                    EnumVal("MA2F_0", "0", "Received data is not equal to MA2"),
                    EnumVal("MA2F_1", "0x1", "Received data is equal to MA2"),
                ]),
            ]),
            Register("CTRL", 0x4006A018, 32, "LPUART Control Register", [
                Field("R8T9", 31, 1, "Receive Bit 8 / Transmit Bit 9", [
                ]),
                Field("R9T8", 30, 1, "Receive Bit 9 / Transmit Bit 8", [
                ]),
                Field("TXDIR", 29, 1, "TXD Pin Direction in Single-Wire Mode", [
                    EnumVal("TXDIR_0", "0", "TXD pin is an input in single-wire mode."),
                    EnumVal("TXDIR_1", "0x1", "TXD pin is an output in single-wire mode."),
                ]),
                Field("TXINV", 28, 1, "Transmit Data Inversion", [
                    EnumVal("TXINV_0", "0", "Transmit data not inverted."),
                    EnumVal("TXINV_1", "0x1", "Transmit data inverted."),
                ]),
                Field("ORIE", 27, 1, "Overrun Interrupt Enable", [
                    EnumVal("ORIE_0", "0", "OR interrupts disabled; use polling."),
                    EnumVal("ORIE_1", "0x1", "Hardware interrupt requested when OR is set."),
                ]),
                Field("NEIE", 26, 1, "Noise Error Interrupt Enable", [
                    EnumVal("NEIE_0", "0", "NF interrupts disabled; use polling."),
                    EnumVal("NEIE_1", "0x1", "Hardware interrupt requested when NF is set."),
                ]),
                Field("FEIE", 25, 1, "Framing Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "FE interrupts disabled; use polling."),
                    EnumVal("FEIE_1", "0x1", "Hardware interrupt requested when FE is set."),
                ]),
                Field("PEIE", 24, 1, "Parity Error Interrupt Enable", [
                    EnumVal("PEIE_0", "0", "PF interrupts disabled; use polling)."),
                    EnumVal("PEIE_1", "0x1", "Hardware interrupt requested when PF is set."),
                ]),
                Field("TIE", 23, 1, "Transmit Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Hardware interrupts from TDRE disabled; use polling."),
                    EnumVal("TIE_1", "0x1", "Hardware interrupt requested when TDRE flag is 1."),
                ]),
                Field("TCIE", 22, 1, "Transmission Complete Interrupt Enable for", [
                    EnumVal("TCIE_0", "0", "Hardware interrupts from TC disabled; use polling."),
                    EnumVal("TCIE_1", "0x1", "Hardware interrupt requested when TC flag is 1."),
                ]),
                Field("RIE", 21, 1, "Receiver Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Hardware interrupts from RDRF disabled; use polling."),
                    EnumVal("RIE_1", "0x1", "Hardware interrupt requested when RDRF flag is 1."),
                ]),
                Field("ILIE", 20, 1, "Idle Line Interrupt Enable", [
                    EnumVal("ILIE_0", "0", "Hardware interrupts from IDLE disabled; use polling."),
                    EnumVal("ILIE_1", "0x1", "Hardware interrupt requested when IDLE flag is 1."),
                ]),
                Field("TE", 19, 1, "Transmitter Enable", [
                    EnumVal("TE_0", "0", "Transmitter disabled."),
                    EnumVal("TE_1", "0x1", "Transmitter enabled."),
                ]),
                Field("RE", 18, 1, "Receiver Enable", [
                    EnumVal("RE_0", "0", "Receiver disabled."),
                    EnumVal("RE_1", "0x1", "Receiver enabled."),
                ]),
                Field("RWU", 17, 1, "Receiver Wakeup Control", [
                    EnumVal("RWU_0", "0", "Normal receiver operation."),
                    EnumVal("RWU_1", "0x1", "LPUART receiver in standby waiting for wakeup condition."),
                ]),
                Field("SBK", 16, 1, "Send Break", [
                    EnumVal("SBK_0", "0", "Normal transmitter operation."),
                    EnumVal("SBK_1", "0x1", "Queue break character(s) to be sent."),
                ]),
                Field("MA1IE", 15, 1, "Match 1 Interrupt Enable", [
                    EnumVal("MA1IE_0", "0", "MA1F interrupt disabled"),
                    EnumVal("MA1IE_1", "0x1", "MA1F interrupt enabled"),
                ]),
                Field("MA2IE", 14, 1, "Match 2 Interrupt Enable", [
                    EnumVal("MA2IE_0", "0", "MA2F interrupt disabled"),
                    EnumVal("MA2IE_1", "0x1", "MA2F interrupt enabled"),
                ]),
                Field("M7", 11, 1, "7-Bit Mode Select", [
                    EnumVal("M7_0", "0", "Receiver and transmitter use 8-bit to 10-bit data characters."),
                    EnumVal("M7_1", "0x1", "Receiver and transmitter use 7-bit data characters."),
                ]),
                Field("IDLECFG", 8, 3, "Idle Configuration", [
                    EnumVal("IDLECFG_0", "0", "1 idle character"),
                    EnumVal("IDLECFG_1", "0x1", "2 idle characters"),
                    EnumVal("IDLECFG_2", "0x2", "4 idle characters"),
                    EnumVal("IDLECFG_3", "0x3", "8 idle characters"),
                    EnumVal("IDLECFG_4", "0x4", "16 idle characters"),
                    EnumVal("IDLECFG_5", "0x5", "32 idle characters"),
                    EnumVal("IDLECFG_6", "0x6", "64 idle characters"),
                    EnumVal("IDLECFG_7", "0x7", "128 idle characters"),
                ]),
                Field("LOOPS", 7, 1, "Loop Mode Select", [
                    EnumVal("LOOPS_0", "0", "Normal operation - RXD and TXD use separate pins."),
                    EnumVal("LOOPS_1", "0x1", "Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input (see RSRC bit)."),
                ]),
                Field("DOZEEN", 6, 1, "Doze Enable", [
                    EnumVal("DOZEEN_0", "0", "LPUART is enabled in Doze mode."),
                    EnumVal("DOZEEN_1", "0x1", "LPUART is disabled in Doze mode."),
                ]),
                Field("RSRC", 5, 1, "Receiver Source Select", [
                    EnumVal("RSRC_0", "0", "Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the LPUART does not use the RXD pin."),
                    EnumVal("RSRC_1", "0x1", "Single-wire LPUART mode where the TXD pin is connected to the transmitter output and receiver input."),
                ]),
                Field("M", 4, 1, "9-Bit or 8-Bit Mode Select", [
                    EnumVal("M_0", "0", "Receiver and transmitter use 8-bit data characters."),
                    EnumVal("M_1", "0x1", "Receiver and transmitter use 9-bit data characters."),
                ]),
                Field("WAKE", 3, 1, "Receiver Wakeup Method Select", [
                    EnumVal("WAKE_0", "0", "Configures RWU for idle-line wakeup."),
                    EnumVal("WAKE_1", "0x1", "Configures RWU with address-mark wakeup."),
                ]),
                Field("ILT", 2, 1, "Idle Line Type Select", [
                    EnumVal("ILT_0", "0", "Idle character bit count starts after start bit."),
                    EnumVal("ILT_1", "0x1", "Idle character bit count starts after stop bit."),
                ]),
                Field("PE", 1, 1, "Parity Enable", [
                    EnumVal("PE_0", "0", "No hardware parity generation or checking."),
                    EnumVal("PE_1", "0x1", "Parity enabled."),
                ]),
                Field("PT", 0, 1, "Parity Type", [
                    EnumVal("PT_0", "0", "Even parity."),
                    EnumVal("PT_1", "0x1", "Odd parity."),
                ]),
            ]),
            Register("DATA", 0x4006A01C, 32, "LPUART Data Register", [
                Field("NOISY", 15, 1, "NOISY", [
                    EnumVal("NOISY_0", "0", "The dataword was received without noise."),
                    EnumVal("NOISY_1", "0x1", "The data was received with noise."),
                ]),
                Field("PARITYE", 14, 1, "PARITYE", [
                    EnumVal("PARITYE_0", "0", "The dataword was received without a parity error."),
                    EnumVal("PARITYE_1", "0x1", "The dataword was received with a parity error."),
                ]),
                Field("FRETSC", 13, 1, "Frame Error / Transmit Special Character", [
                    EnumVal("FRETSC_0", "0", "The dataword was received without a frame error on read, or transmit a normal character on write."),
                    EnumVal("FRETSC_1", "0x1", "The dataword was received with a frame error, or transmit an idle or break character on transmit."),
                ]),
                Field("RXEMPT", 12, 1, "Receive Buffer Empty", [
                    EnumVal("RXEMPT_0", "0", "Receive buffer contains valid data."),
                    EnumVal("RXEMPT_1", "0x1", "Receive buffer is empty, data returned on read is not valid."),
                ]),
                Field("IDLINE", 11, 1, "Idle Line", [
                    EnumVal("IDLINE_0", "0", "Receiver was not idle before receiving this character."),
                    EnumVal("IDLINE_1", "0x1", "Receiver was idle before receiving this character."),
                ]),
                Field("R9T9", 9, 1, "R9T9", [
                ]),
                Field("R8T8", 8, 1, "R8T8", [
                ]),
                Field("R7T7", 7, 1, "R7T7", [
                ]),
                Field("R6T6", 6, 1, "R6T6", [
                ]),
                Field("R5T5", 5, 1, "R5T5", [
                ]),
                Field("R4T4", 4, 1, "R4T4", [
                ]),
                Field("R3T3", 3, 1, "R3T3", [
                ]),
                Field("R2T2", 2, 1, "R2T2", [
                ]),
                Field("R1T1", 1, 1, "R1T1", [
                ]),
                Field("R0T0", 0, 1, "R0T0", [
                ]),
            ]),
            Register("MATCH", 0x4006A020, 32, "LPUART Match Address Register", [
                Field("MA2", 16, 10, "Match Address 2", [
                ]),
                Field("MA1", 0, 10, "Match Address 1", [
                ]),
            ]),
            Register("MODIR", 0x4006A024, 32, "LPUART Modem IrDA Register", [
                Field("IREN", 18, 1, "Infrared enable", [
                    EnumVal("IREN_0", "0", "IR disabled."),
                    EnumVal("IREN_1", "0x1", "IR enabled."),
                ]),
                Field("TNP", 16, 2, "Transmitter narrow pulse", [
                    EnumVal("TNP_0", "0", "1/OSR."),
                    EnumVal("TNP_1", "0x1", "2/OSR."),
                    EnumVal("TNP_2", "0x2", "3/OSR."),
                    EnumVal("TNP_3", "0x3", "4/OSR."),
                ]),
                Field("RTSWATER", 8, 2, "Receive RTS Configuration", [
                ]),
                Field("TXCTSSRC", 5, 1, "Transmit CTS Source", [
                    EnumVal("TXCTSSRC_0", "0", "CTS input is the CTS_B pin."),
                    EnumVal("TXCTSSRC_1", "0x1", "CTS input is the inverted Receiver Match result."),
                ]),
                Field("TXCTSC", 4, 1, "Transmit CTS Configuration", [
                    EnumVal("TXCTSC_0", "0", "CTS input is sampled at the start of each character."),
                    EnumVal("TXCTSC_1", "0x1", "CTS input is sampled when the transmitter is idle."),
                ]),
                Field("RXRTSE", 3, 1, "Receiver request-to-send enable", [
                    EnumVal("RXRTSE_0", "0", "The receiver has no effect on RTS."),
                    EnumVal("RXRTSE_1", "0x1", "RTS is deasserted if the receiver data register is full or a start bit has been detected that would cause the receiver data register to become full. RTS is asserted if the receiver data register is not full and has not detected a start bit that would cause the receiver data register to become full."),
                ]),
                Field("TXRTSPOL", 2, 1, "Transmitter request-to-send polarity", [
                    EnumVal("TXRTSPOL_0", "0", "Transmitter RTS is active low."),
                    EnumVal("TXRTSPOL_1", "0x1", "Transmitter RTS is active high."),
                ]),
                Field("TXRTSE", 1, 1, "Transmitter request-to-send enable", [
                    EnumVal("TXRTSE_0", "0", "The transmitter has no effect on RTS."),
                    EnumVal("TXRTSE_1", "0x1", "When a character is placed into an empty transmitter data buffer , RTS asserts one bit time before the start bit is transmitted. RTS deasserts one bit time after all characters in the transmitter data buffer and shift register are completely sent, including the last stop bit."),
                ]),
                Field("TXCTSE", 0, 1, "Transmitter clear-to-send enable", [
                    EnumVal("TXCTSE_0", "0", "CTS has no effect on the transmitter."),
                    EnumVal("TXCTSE_1", "0x1", "Enables clear-to-send operation. The transmitter checks the state of CTS each time it is ready to send a character. If CTS is asserted, the character is sent. If CTS is deasserted, the signal TXD remains in the mark state and transmission is delayed until CTS is asserted. Changes in CTS as a character is being sent do not affect its transmission."),
                ]),
            ]),
            Register("FIFO", 0x4006A028, 32, "LPUART FIFO Register", [
                Field("TXEMPT", 23, 1, "Transmit Buffer/FIFO Empty", [
                    EnumVal("TXEMPT_0", "0", "Transmit buffer is not empty."),
                    EnumVal("TXEMPT_1", "0x1", "Transmit buffer is empty."),
                ]),
                Field("RXEMPT", 22, 1, "Receive Buffer/FIFO Empty", [
                    EnumVal("RXEMPT_0", "0", "Receive buffer is not empty."),
                    EnumVal("RXEMPT_1", "0x1", "Receive buffer is empty."),
                ]),
                Field("TXOF", 17, 1, "Transmitter Buffer Overflow Flag", [
                    EnumVal("TXOF_0", "0", "No transmit buffer overflow has occurred since the last time the flag was cleared."),
                    EnumVal("TXOF_1", "0x1", "At least one transmit buffer overflow has occurred since the last time the flag was cleared."),
                ]),
                Field("RXUF", 16, 1, "Receiver Buffer Underflow Flag", [
                    EnumVal("RXUF_0", "0", "No receive buffer underflow has occurred since the last time the flag was cleared."),
                    EnumVal("RXUF_1", "0x1", "At least one receive buffer underflow has occurred since the last time the flag was cleared."),
                ]),
                Field("TXFLUSH", 15, 1, "Transmit FIFO/Buffer Flush", [
                    EnumVal("TXFLUSH_0", "0", "No flush operation occurs."),
                    EnumVal("TXFLUSH_1", "0x1", "All data in the transmit FIFO/Buffer is cleared out."),
                ]),
                Field("RXFLUSH", 14, 1, "Receive FIFO/Buffer Flush", [
                    EnumVal("RXFLUSH_0", "0", "No flush operation occurs."),
                    EnumVal("RXFLUSH_1", "0x1", "All data in the receive FIFO/buffer is cleared out."),
                ]),
                Field("RXIDEN", 10, 3, "Receiver Idle Empty Enable", [
                    EnumVal("RXIDEN_0", "0", "Disable RDRF assertion due to partially filled FIFO when receiver is idle."),
                    EnumVal("RXIDEN_1", "0x1", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 1 character."),
                    EnumVal("RXIDEN_2", "0x2", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 2 characters."),
                    EnumVal("RXIDEN_3", "0x3", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 4 characters."),
                    EnumVal("RXIDEN_4", "0x4", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 8 characters."),
                    EnumVal("RXIDEN_5", "0x5", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 16 characters."),
                    EnumVal("RXIDEN_6", "0x6", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 32 characters."),
                    EnumVal("RXIDEN_7", "0x7", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 64 characters."),
                ]),
                Field("TXOFE", 9, 1, "Transmit FIFO Overflow Interrupt Enable", [
                    EnumVal("TXOFE_0", "0", "TXOF flag does not generate an interrupt to the host."),
                    EnumVal("TXOFE_1", "0x1", "TXOF flag generates an interrupt to the host."),
                ]),
                Field("RXUFE", 8, 1, "Receive FIFO Underflow Interrupt Enable", [
                    EnumVal("RXUFE_0", "0", "RXUF flag does not generate an interrupt to the host."),
                    EnumVal("RXUFE_1", "0x1", "RXUF flag generates an interrupt to the host."),
                ]),
                Field("TXFE", 7, 1, "Transmit FIFO Enable", [
                    EnumVal("TXFE_0", "0", "Transmit FIFO is not enabled. Buffer is depth 1."),
                    EnumVal("TXFE_1", "0x1", "Transmit FIFO is enabled. Buffer is depth indicated by TXFIFOSIZE."),
                ]),
                Field("TXFIFOSIZE", 4, 3, "Transmit FIFO Buffer Depth", [
                    EnumVal("TXFIFOSIZE_0", "0", "Transmit FIFO/Buffer depth = 1 dataword."),
                    EnumVal("TXFIFOSIZE_1", "0x1", "Transmit FIFO/Buffer depth = 4 datawords."),
                    EnumVal("TXFIFOSIZE_2", "0x2", "Transmit FIFO/Buffer depth = 8 datawords."),
                    EnumVal("TXFIFOSIZE_3", "0x3", "Transmit FIFO/Buffer depth = 16 datawords."),
                    EnumVal("TXFIFOSIZE_4", "0x4", "Transmit FIFO/Buffer depth = 32 datawords."),
                    EnumVal("TXFIFOSIZE_5", "0x5", "Transmit FIFO/Buffer depth = 64 datawords."),
                    EnumVal("TXFIFOSIZE_6", "0x6", "Transmit FIFO/Buffer depth = 128 datawords."),
                    EnumVal("TXFIFOSIZE_7", "0x7", "Transmit FIFO/Buffer depth = 256 datawords"),
                ]),
                Field("RXFE", 3, 1, "Receive FIFO Enable", [
                    EnumVal("RXFE_0", "0", "Receive FIFO is not enabled. Buffer is depth 1."),
                    EnumVal("RXFE_1", "0x1", "Receive FIFO is enabled. Buffer is depth indicted by RXFIFOSIZE."),
                ]),
                Field("RXFIFOSIZE", 0, 3, "Receive FIFO Buffer Depth", [
                    EnumVal("RXFIFOSIZE_0", "0", "Receive FIFO/Buffer depth = 1 dataword."),
                    EnumVal("RXFIFOSIZE_1", "0x1", "Receive FIFO/Buffer depth = 4 datawords."),
                    EnumVal("RXFIFOSIZE_2", "0x2", "Receive FIFO/Buffer depth = 8 datawords."),
                    EnumVal("RXFIFOSIZE_3", "0x3", "Receive FIFO/Buffer depth = 16 datawords."),
                    EnumVal("RXFIFOSIZE_4", "0x4", "Receive FIFO/Buffer depth = 32 datawords."),
                    EnumVal("RXFIFOSIZE_5", "0x5", "Receive FIFO/Buffer depth = 64 datawords."),
                    EnumVal("RXFIFOSIZE_6", "0x6", "Receive FIFO/Buffer depth = 128 datawords."),
                    EnumVal("RXFIFOSIZE_7", "0x7", "Receive FIFO/Buffer depth = 256 datawords."),
                ]),
            ]),
            Register("WATER", 0x4006A02C, 32, "LPUART Watermark Register", [
                Field("RXCOUNT", 24, 3, "Receive Counter", [
                ]),
                Field("RXWATER", 16, 2, "Receive Watermark", [
                ]),
                Field("TXCOUNT", 8, 3, "Transmit Counter", [
                ]),
                Field("TXWATER", 0, 2, "Transmit Watermark", [
                ]),
            ]),
        ])

class Module_LPUART1(Peripheral):
    def __init__(self):
        super().__init__("LPUART1", 0x4006B000, 0x30, [
            Register("VERID", 0x4006B000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Identification Number", [
                    EnumVal("FEATURE_1", "0x1", "Standard feature set."),
                    EnumVal("FEATURE_3", "0x3", "Standard feature set with MODEM/IrDA support."),
                ]),
            ]),
            Register("PARAM", 0x4006B004, 32, "Parameter Register", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("GLOBAL", 0x4006B008, 32, "LPUART Global Register", [
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("RST_0", "0", "Module is not reset."),
                    EnumVal("RST_1", "0x1", "Module is reset."),
                ]),
            ]),
            Register("PINCFG", 0x4006B00C, 32, "LPUART Pin Configuration Register", [
                Field("TRGSEL", 0, 2, "Trigger Select", [
                    EnumVal("TRGSEL_0", "0", "Input trigger is disabled."),
                    EnumVal("TRGSEL_1", "0x1", "Input trigger is used instead of RXD pin input."),
                    EnumVal("TRGSEL_2", "0x2", "Input trigger is used instead of CTS_B pin input."),
                    EnumVal("TRGSEL_3", "0x3", "Input trigger is used to modulate the TXD pin output. The TXD pin output (after TXINV configuration) is ANDed with the input trigger."),
                ]),
            ]),
            Register("BAUD", 0x4006B010, 32, "LPUART Baud Rate Register", [
                Field("MAEN1", 31, 1, "Match Address Mode Enable 1", [
                    EnumVal("MAEN1_0", "0", "Normal operation."),
                    EnumVal("MAEN1_1", "0x1", "Enables automatic address matching or data matching mode for MATCH[MA1]."),
                ]),
                Field("MAEN2", 30, 1, "Match Address Mode Enable 2", [
                    EnumVal("MAEN2_0", "0", "Normal operation."),
                    EnumVal("MAEN2_1", "0x1", "Enables automatic address matching or data matching mode for MATCH[MA2]."),
                ]),
                Field("M10", 29, 1, "10-bit Mode select", [
                    EnumVal("M10_0", "0", "Receiver and transmitter use 7-bit to 9-bit data characters."),
                    EnumVal("M10_1", "0x1", "Receiver and transmitter use 10-bit data characters."),
                ]),
                Field("OSR", 24, 5, "Oversampling Ratio", [
                    EnumVal("OSR_0", "0", "Writing 0 to this field results in an oversampling ratio of 16"),
                    EnumVal("OSR_3", "0x3", "Oversampling ratio of 4, requires BOTHEDGE to be set."),
                    EnumVal("OSR_4", "0x4", "Oversampling ratio of 5, requires BOTHEDGE to be set."),
                    EnumVal("OSR_5", "0x5", "Oversampling ratio of 6, requires BOTHEDGE to be set."),
                    EnumVal("OSR_6", "0x6", "Oversampling ratio of 7, requires BOTHEDGE to be set."),
                    EnumVal("OSR_7", "0x7", "Oversampling ratio of 8."),
                    EnumVal("OSR_8", "0x8", "Oversampling ratio of 9."),
                    EnumVal("OSR_9", "0x9", "Oversampling ratio of 10."),
                    EnumVal("OSR_10", "0xA", "Oversampling ratio of 11."),
                    EnumVal("OSR_11", "0xB", "Oversampling ratio of 12."),
                    EnumVal("OSR_12", "0xC", "Oversampling ratio of 13."),
                    EnumVal("OSR_13", "0xD", "Oversampling ratio of 14."),
                    EnumVal("OSR_14", "0xE", "Oversampling ratio of 15."),
                    EnumVal("OSR_15", "0xF", "Oversampling ratio of 16."),
                    EnumVal("OSR_16", "0x10", "Oversampling ratio of 17."),
                    EnumVal("OSR_17", "0x11", "Oversampling ratio of 18."),
                    EnumVal("OSR_18", "0x12", "Oversampling ratio of 19."),
                    EnumVal("OSR_19", "0x13", "Oversampling ratio of 20."),
                    EnumVal("OSR_20", "0x14", "Oversampling ratio of 21."),
                    EnumVal("OSR_21", "0x15", "Oversampling ratio of 22."),
                    EnumVal("OSR_22", "0x16", "Oversampling ratio of 23."),
                    EnumVal("OSR_23", "0x17", "Oversampling ratio of 24."),
                    EnumVal("OSR_24", "0x18", "Oversampling ratio of 25."),
                    EnumVal("OSR_25", "0x19", "Oversampling ratio of 26."),
                    EnumVal("OSR_26", "0x1A", "Oversampling ratio of 27."),
                    EnumVal("OSR_27", "0x1B", "Oversampling ratio of 28."),
                    EnumVal("OSR_28", "0x1C", "Oversampling ratio of 29."),
                    EnumVal("OSR_29", "0x1D", "Oversampling ratio of 30."),
                    EnumVal("OSR_30", "0x1E", "Oversampling ratio of 31."),
                    EnumVal("OSR_31", "0x1F", "Oversampling ratio of 32."),
                ]),
                Field("TDMAE", 23, 1, "Transmitter DMA Enable", [
                    EnumVal("TDMAE_0", "0", "DMA request disabled."),
                    EnumVal("TDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("RDMAE", 21, 1, "Receiver Full DMA Enable", [
                    EnumVal("RDMAE_0", "0", "DMA request disabled."),
                    EnumVal("RDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("RIDMAE", 20, 1, "Receiver Idle DMA Enable", [
                    EnumVal("RIDMAE_0", "0", "DMA request disabled."),
                    EnumVal("RIDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("MATCFG", 18, 2, "Match Configuration", [
                    EnumVal("MATCFG_0", "0", "Address Match Wakeup"),
                    EnumVal("MATCFG_1", "0x1", "Idle Match Wakeup"),
                    EnumVal("MATCFG_2", "0x2", "Match On and Match Off"),
                    EnumVal("MATCFG_3", "0x3", "Enables RWU on Data Match and Match On/Off for transmitter CTS input"),
                ]),
                Field("BOTHEDGE", 17, 1, "Both Edge Sampling", [
                    EnumVal("BOTHEDGE_0", "0", "Receiver samples input data using the rising edge of the baud rate clock."),
                    EnumVal("BOTHEDGE_1", "0x1", "Receiver samples input data using the rising and falling edge of the baud rate clock."),
                ]),
                Field("RESYNCDIS", 16, 1, "Resynchronization Disable", [
                    EnumVal("RESYNCDIS_0", "0", "Resynchronization during received data word is supported"),
                    EnumVal("RESYNCDIS_1", "0x1", "Resynchronization during received data word is disabled"),
                ]),
                Field("LBKDIE", 15, 1, "LIN Break Detect Interrupt Enable", [
                    EnumVal("LBKDIE_0", "0", "Hardware interrupts from STAT[LBKDIF] flag are disabled (use polling)."),
                    EnumVal("LBKDIE_1", "0x1", "Hardware interrupt requested when STAT[LBKDIF] flag is 1."),
                ]),
                Field("RXEDGIE", 14, 1, "RX Input Active Edge Interrupt Enable", [
                    EnumVal("RXEDGIE_0", "0", "Hardware interrupts from STAT[RXEDGIF] are disabled."),
                    EnumVal("RXEDGIE_1", "0x1", "Hardware interrupt is requested when STAT[RXEDGIF] flag is 1."),
                ]),
                Field("SBNS", 13, 1, "Stop Bit Number Select", [
                    EnumVal("SBNS_0", "0", "One stop bit."),
                    EnumVal("SBNS_1", "0x1", "Two stop bits."),
                ]),
                Field("SBR", 0, 13, "Baud Rate Modulo Divisor.", [
                ]),
            ]),
            Register("STAT", 0x4006B014, 32, "LPUART Status Register", [
                Field("LBKDIF", 31, 1, "LIN Break Detect Interrupt Flag", [
                    EnumVal("LBKDIF_0", "0", "No LIN break character has been detected."),
                    EnumVal("LBKDIF_1", "0x1", "LIN break character has been detected."),
                ]),
                Field("RXEDGIF", 30, 1, "RXD Pin Active Edge Interrupt Flag", [
                    EnumVal("RXEDGIF_0", "0", "No active edge on the receive pin has occurred."),
                    EnumVal("RXEDGIF_1", "0x1", "An active edge on the receive pin has occurred."),
                ]),
                Field("MSBF", 29, 1, "MSB First", [
                    EnumVal("MSBF_0", "0", "LSB (bit0) is the first bit that is transmitted following the start bit. Further, the first bit received after the start bit is identified as bit0."),
                    EnumVal("MSBF_1", "0x1", "MSB (bit9, bit8, bit7 or bit6) is the first bit that is transmitted following the start bit depending on the setting of CTRL[M], CTRL[PE] and BAUD[M10]. Further, the first bit received after the start bit is identified as bit9, bit8, bit7 or bit6 depending on the setting of CTRL[M] and CTRL[PE]."),
                ]),
                Field("RXINV", 28, 1, "Receive Data Inversion", [
                    EnumVal("RXINV_0", "0", "Receive data not inverted."),
                    EnumVal("RXINV_1", "0x1", "Receive data inverted."),
                ]),
                Field("RWUID", 27, 1, "Receive Wake Up Idle Detect", [
                    EnumVal("RWUID_0", "0", "During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle character. During address match wakeup, the IDLE bit does not set when an address does not match."),
                    EnumVal("RWUID_1", "0x1", "During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character. During address match wakeup, the IDLE bit does set when an address does not match."),
                ]),
                Field("BRK13", 26, 1, "Break Character Generation Length", [
                    EnumVal("BRK13_0", "0", "Break character is transmitted with length of 9 to 13 bit times."),
                    EnumVal("BRK13_1", "0x1", "Break character is transmitted with length of 12 to 15 bit times."),
                ]),
                Field("LBKDE", 25, 1, "LIN Break Detection Enable", [
                    EnumVal("LBKDE_0", "0", "LIN break detect is disabled, normal break character can be detected."),
                    EnumVal("LBKDE_1", "0x1", "LIN break detect is enabled. LIN break character is detected at length of 11 bit times (if M = 0) or 12 (if M = 1) or 13 (M10 = 1)."),
                ]),
                Field("RAF", 24, 1, "Receiver Active Flag", [
                    EnumVal("RAF_0", "0", "LPUART receiver idle waiting for a start bit."),
                    EnumVal("RAF_1", "0x1", "LPUART receiver active (RXD input not idle)."),
                ]),
                Field("TDRE", 23, 1, "Transmit Data Register Empty Flag", [
                    EnumVal("TDRE_0", "0", "Transmit data buffer full."),
                    EnumVal("TDRE_1", "0x1", "Transmit data buffer empty."),
                ]),
                Field("TC", 22, 1, "Transmission Complete Flag", [
                    EnumVal("TC_0", "0", "Transmitter active (sending data, a preamble, or a break)."),
                    EnumVal("TC_1", "0x1", "Transmitter idle (transmission activity complete)."),
                ]),
                Field("RDRF", 21, 1, "Receive Data Register Full Flag", [
                    EnumVal("RDRF_0", "0", "Receive data buffer empty."),
                    EnumVal("RDRF_1", "0x1", "Receive data buffer full."),
                ]),
                Field("IDLE", 20, 1, "Idle Line Flag", [
                    EnumVal("IDLE_0", "0", "No idle line detected."),
                    EnumVal("IDLE_1", "0x1", "Idle line was detected."),
                ]),
                Field("OR", 19, 1, "Receiver Overrun Flag", [
                    EnumVal("OR_0", "0", "No overrun."),
                    EnumVal("OR_1", "0x1", "Receive overrun (new LPUART data lost)."),
                ]),
                Field("NF", 18, 1, "Noise Flag", [
                    EnumVal("NF_0", "0", "No noise detected."),
                    EnumVal("NF_1", "0x1", "Noise detected in the received character in the DATA register."),
                ]),
                Field("FE", 17, 1, "Framing Error Flag", [
                    EnumVal("FE_0", "0", "No framing error detected. This does not guarantee the framing is correct."),
                    EnumVal("FE_1", "0x1", "Framing error."),
                ]),
                Field("PF", 16, 1, "Parity Error Flag", [
                    EnumVal("PF_0", "0", "No parity error."),
                    EnumVal("PF_1", "0x1", "Parity error."),
                ]),
                Field("MA1F", 15, 1, "Match 1 Flag", [
                    EnumVal("MA1F_0", "0", "Received data is not equal to MA1"),
                    EnumVal("MA1F_1", "0x1", "Received data is equal to MA1"),
                ]),
                Field("MA2F", 14, 1, "Match 2 Flag", [
                    EnumVal("MA2F_0", "0", "Received data is not equal to MA2"),
                    EnumVal("MA2F_1", "0x1", "Received data is equal to MA2"),
                ]),
            ]),
            Register("CTRL", 0x4006B018, 32, "LPUART Control Register", [
                Field("R8T9", 31, 1, "Receive Bit 8 / Transmit Bit 9", [
                ]),
                Field("R9T8", 30, 1, "Receive Bit 9 / Transmit Bit 8", [
                ]),
                Field("TXDIR", 29, 1, "TXD Pin Direction in Single-Wire Mode", [
                    EnumVal("TXDIR_0", "0", "TXD pin is an input in single-wire mode."),
                    EnumVal("TXDIR_1", "0x1", "TXD pin is an output in single-wire mode."),
                ]),
                Field("TXINV", 28, 1, "Transmit Data Inversion", [
                    EnumVal("TXINV_0", "0", "Transmit data not inverted."),
                    EnumVal("TXINV_1", "0x1", "Transmit data inverted."),
                ]),
                Field("ORIE", 27, 1, "Overrun Interrupt Enable", [
                    EnumVal("ORIE_0", "0", "OR interrupts disabled; use polling."),
                    EnumVal("ORIE_1", "0x1", "Hardware interrupt requested when OR is set."),
                ]),
                Field("NEIE", 26, 1, "Noise Error Interrupt Enable", [
                    EnumVal("NEIE_0", "0", "NF interrupts disabled; use polling."),
                    EnumVal("NEIE_1", "0x1", "Hardware interrupt requested when NF is set."),
                ]),
                Field("FEIE", 25, 1, "Framing Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "FE interrupts disabled; use polling."),
                    EnumVal("FEIE_1", "0x1", "Hardware interrupt requested when FE is set."),
                ]),
                Field("PEIE", 24, 1, "Parity Error Interrupt Enable", [
                    EnumVal("PEIE_0", "0", "PF interrupts disabled; use polling)."),
                    EnumVal("PEIE_1", "0x1", "Hardware interrupt requested when PF is set."),
                ]),
                Field("TIE", 23, 1, "Transmit Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Hardware interrupts from TDRE disabled; use polling."),
                    EnumVal("TIE_1", "0x1", "Hardware interrupt requested when TDRE flag is 1."),
                ]),
                Field("TCIE", 22, 1, "Transmission Complete Interrupt Enable for", [
                    EnumVal("TCIE_0", "0", "Hardware interrupts from TC disabled; use polling."),
                    EnumVal("TCIE_1", "0x1", "Hardware interrupt requested when TC flag is 1."),
                ]),
                Field("RIE", 21, 1, "Receiver Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Hardware interrupts from RDRF disabled; use polling."),
                    EnumVal("RIE_1", "0x1", "Hardware interrupt requested when RDRF flag is 1."),
                ]),
                Field("ILIE", 20, 1, "Idle Line Interrupt Enable", [
                    EnumVal("ILIE_0", "0", "Hardware interrupts from IDLE disabled; use polling."),
                    EnumVal("ILIE_1", "0x1", "Hardware interrupt requested when IDLE flag is 1."),
                ]),
                Field("TE", 19, 1, "Transmitter Enable", [
                    EnumVal("TE_0", "0", "Transmitter disabled."),
                    EnumVal("TE_1", "0x1", "Transmitter enabled."),
                ]),
                Field("RE", 18, 1, "Receiver Enable", [
                    EnumVal("RE_0", "0", "Receiver disabled."),
                    EnumVal("RE_1", "0x1", "Receiver enabled."),
                ]),
                Field("RWU", 17, 1, "Receiver Wakeup Control", [
                    EnumVal("RWU_0", "0", "Normal receiver operation."),
                    EnumVal("RWU_1", "0x1", "LPUART receiver in standby waiting for wakeup condition."),
                ]),
                Field("SBK", 16, 1, "Send Break", [
                    EnumVal("SBK_0", "0", "Normal transmitter operation."),
                    EnumVal("SBK_1", "0x1", "Queue break character(s) to be sent."),
                ]),
                Field("MA1IE", 15, 1, "Match 1 Interrupt Enable", [
                    EnumVal("MA1IE_0", "0", "MA1F interrupt disabled"),
                    EnumVal("MA1IE_1", "0x1", "MA1F interrupt enabled"),
                ]),
                Field("MA2IE", 14, 1, "Match 2 Interrupt Enable", [
                    EnumVal("MA2IE_0", "0", "MA2F interrupt disabled"),
                    EnumVal("MA2IE_1", "0x1", "MA2F interrupt enabled"),
                ]),
                Field("M7", 11, 1, "7-Bit Mode Select", [
                    EnumVal("M7_0", "0", "Receiver and transmitter use 8-bit to 10-bit data characters."),
                    EnumVal("M7_1", "0x1", "Receiver and transmitter use 7-bit data characters."),
                ]),
                Field("IDLECFG", 8, 3, "Idle Configuration", [
                    EnumVal("IDLECFG_0", "0", "1 idle character"),
                    EnumVal("IDLECFG_1", "0x1", "2 idle characters"),
                    EnumVal("IDLECFG_2", "0x2", "4 idle characters"),
                    EnumVal("IDLECFG_3", "0x3", "8 idle characters"),
                    EnumVal("IDLECFG_4", "0x4", "16 idle characters"),
                    EnumVal("IDLECFG_5", "0x5", "32 idle characters"),
                    EnumVal("IDLECFG_6", "0x6", "64 idle characters"),
                    EnumVal("IDLECFG_7", "0x7", "128 idle characters"),
                ]),
                Field("LOOPS", 7, 1, "Loop Mode Select", [
                    EnumVal("LOOPS_0", "0", "Normal operation - RXD and TXD use separate pins."),
                    EnumVal("LOOPS_1", "0x1", "Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input (see RSRC bit)."),
                ]),
                Field("DOZEEN", 6, 1, "Doze Enable", [
                    EnumVal("DOZEEN_0", "0", "LPUART is enabled in Doze mode."),
                    EnumVal("DOZEEN_1", "0x1", "LPUART is disabled in Doze mode."),
                ]),
                Field("RSRC", 5, 1, "Receiver Source Select", [
                    EnumVal("RSRC_0", "0", "Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the LPUART does not use the RXD pin."),
                    EnumVal("RSRC_1", "0x1", "Single-wire LPUART mode where the TXD pin is connected to the transmitter output and receiver input."),
                ]),
                Field("M", 4, 1, "9-Bit or 8-Bit Mode Select", [
                    EnumVal("M_0", "0", "Receiver and transmitter use 8-bit data characters."),
                    EnumVal("M_1", "0x1", "Receiver and transmitter use 9-bit data characters."),
                ]),
                Field("WAKE", 3, 1, "Receiver Wakeup Method Select", [
                    EnumVal("WAKE_0", "0", "Configures RWU for idle-line wakeup."),
                    EnumVal("WAKE_1", "0x1", "Configures RWU with address-mark wakeup."),
                ]),
                Field("ILT", 2, 1, "Idle Line Type Select", [
                    EnumVal("ILT_0", "0", "Idle character bit count starts after start bit."),
                    EnumVal("ILT_1", "0x1", "Idle character bit count starts after stop bit."),
                ]),
                Field("PE", 1, 1, "Parity Enable", [
                    EnumVal("PE_0", "0", "No hardware parity generation or checking."),
                    EnumVal("PE_1", "0x1", "Parity enabled."),
                ]),
                Field("PT", 0, 1, "Parity Type", [
                    EnumVal("PT_0", "0", "Even parity."),
                    EnumVal("PT_1", "0x1", "Odd parity."),
                ]),
            ]),
            Register("DATA", 0x4006B01C, 32, "LPUART Data Register", [
                Field("NOISY", 15, 1, "NOISY", [
                    EnumVal("NOISY_0", "0", "The dataword was received without noise."),
                    EnumVal("NOISY_1", "0x1", "The data was received with noise."),
                ]),
                Field("PARITYE", 14, 1, "PARITYE", [
                    EnumVal("PARITYE_0", "0", "The dataword was received without a parity error."),
                    EnumVal("PARITYE_1", "0x1", "The dataword was received with a parity error."),
                ]),
                Field("FRETSC", 13, 1, "Frame Error / Transmit Special Character", [
                    EnumVal("FRETSC_0", "0", "The dataword was received without a frame error on read, or transmit a normal character on write."),
                    EnumVal("FRETSC_1", "0x1", "The dataword was received with a frame error, or transmit an idle or break character on transmit."),
                ]),
                Field("RXEMPT", 12, 1, "Receive Buffer Empty", [
                    EnumVal("RXEMPT_0", "0", "Receive buffer contains valid data."),
                    EnumVal("RXEMPT_1", "0x1", "Receive buffer is empty, data returned on read is not valid."),
                ]),
                Field("IDLINE", 11, 1, "Idle Line", [
                    EnumVal("IDLINE_0", "0", "Receiver was not idle before receiving this character."),
                    EnumVal("IDLINE_1", "0x1", "Receiver was idle before receiving this character."),
                ]),
                Field("R9T9", 9, 1, "R9T9", [
                ]),
                Field("R8T8", 8, 1, "R8T8", [
                ]),
                Field("R7T7", 7, 1, "R7T7", [
                ]),
                Field("R6T6", 6, 1, "R6T6", [
                ]),
                Field("R5T5", 5, 1, "R5T5", [
                ]),
                Field("R4T4", 4, 1, "R4T4", [
                ]),
                Field("R3T3", 3, 1, "R3T3", [
                ]),
                Field("R2T2", 2, 1, "R2T2", [
                ]),
                Field("R1T1", 1, 1, "R1T1", [
                ]),
                Field("R0T0", 0, 1, "R0T0", [
                ]),
            ]),
            Register("MATCH", 0x4006B020, 32, "LPUART Match Address Register", [
                Field("MA2", 16, 10, "Match Address 2", [
                ]),
                Field("MA1", 0, 10, "Match Address 1", [
                ]),
            ]),
            Register("MODIR", 0x4006B024, 32, "LPUART Modem IrDA Register", [
                Field("IREN", 18, 1, "Infrared enable", [
                    EnumVal("IREN_0", "0", "IR disabled."),
                    EnumVal("IREN_1", "0x1", "IR enabled."),
                ]),
                Field("TNP", 16, 2, "Transmitter narrow pulse", [
                    EnumVal("TNP_0", "0", "1/OSR."),
                    EnumVal("TNP_1", "0x1", "2/OSR."),
                    EnumVal("TNP_2", "0x2", "3/OSR."),
                    EnumVal("TNP_3", "0x3", "4/OSR."),
                ]),
                Field("RTSWATER", 8, 2, "Receive RTS Configuration", [
                ]),
                Field("TXCTSSRC", 5, 1, "Transmit CTS Source", [
                    EnumVal("TXCTSSRC_0", "0", "CTS input is the CTS_B pin."),
                    EnumVal("TXCTSSRC_1", "0x1", "CTS input is the inverted Receiver Match result."),
                ]),
                Field("TXCTSC", 4, 1, "Transmit CTS Configuration", [
                    EnumVal("TXCTSC_0", "0", "CTS input is sampled at the start of each character."),
                    EnumVal("TXCTSC_1", "0x1", "CTS input is sampled when the transmitter is idle."),
                ]),
                Field("RXRTSE", 3, 1, "Receiver request-to-send enable", [
                    EnumVal("RXRTSE_0", "0", "The receiver has no effect on RTS."),
                    EnumVal("RXRTSE_1", "0x1", "RTS is deasserted if the receiver data register is full or a start bit has been detected that would cause the receiver data register to become full. RTS is asserted if the receiver data register is not full and has not detected a start bit that would cause the receiver data register to become full."),
                ]),
                Field("TXRTSPOL", 2, 1, "Transmitter request-to-send polarity", [
                    EnumVal("TXRTSPOL_0", "0", "Transmitter RTS is active low."),
                    EnumVal("TXRTSPOL_1", "0x1", "Transmitter RTS is active high."),
                ]),
                Field("TXRTSE", 1, 1, "Transmitter request-to-send enable", [
                    EnumVal("TXRTSE_0", "0", "The transmitter has no effect on RTS."),
                    EnumVal("TXRTSE_1", "0x1", "When a character is placed into an empty transmitter data buffer , RTS asserts one bit time before the start bit is transmitted. RTS deasserts one bit time after all characters in the transmitter data buffer and shift register are completely sent, including the last stop bit."),
                ]),
                Field("TXCTSE", 0, 1, "Transmitter clear-to-send enable", [
                    EnumVal("TXCTSE_0", "0", "CTS has no effect on the transmitter."),
                    EnumVal("TXCTSE_1", "0x1", "Enables clear-to-send operation. The transmitter checks the state of CTS each time it is ready to send a character. If CTS is asserted, the character is sent. If CTS is deasserted, the signal TXD remains in the mark state and transmission is delayed until CTS is asserted. Changes in CTS as a character is being sent do not affect its transmission."),
                ]),
            ]),
            Register("FIFO", 0x4006B028, 32, "LPUART FIFO Register", [
                Field("TXEMPT", 23, 1, "Transmit Buffer/FIFO Empty", [
                    EnumVal("TXEMPT_0", "0", "Transmit buffer is not empty."),
                    EnumVal("TXEMPT_1", "0x1", "Transmit buffer is empty."),
                ]),
                Field("RXEMPT", 22, 1, "Receive Buffer/FIFO Empty", [
                    EnumVal("RXEMPT_0", "0", "Receive buffer is not empty."),
                    EnumVal("RXEMPT_1", "0x1", "Receive buffer is empty."),
                ]),
                Field("TXOF", 17, 1, "Transmitter Buffer Overflow Flag", [
                    EnumVal("TXOF_0", "0", "No transmit buffer overflow has occurred since the last time the flag was cleared."),
                    EnumVal("TXOF_1", "0x1", "At least one transmit buffer overflow has occurred since the last time the flag was cleared."),
                ]),
                Field("RXUF", 16, 1, "Receiver Buffer Underflow Flag", [
                    EnumVal("RXUF_0", "0", "No receive buffer underflow has occurred since the last time the flag was cleared."),
                    EnumVal("RXUF_1", "0x1", "At least one receive buffer underflow has occurred since the last time the flag was cleared."),
                ]),
                Field("TXFLUSH", 15, 1, "Transmit FIFO/Buffer Flush", [
                    EnumVal("TXFLUSH_0", "0", "No flush operation occurs."),
                    EnumVal("TXFLUSH_1", "0x1", "All data in the transmit FIFO/Buffer is cleared out."),
                ]),
                Field("RXFLUSH", 14, 1, "Receive FIFO/Buffer Flush", [
                    EnumVal("RXFLUSH_0", "0", "No flush operation occurs."),
                    EnumVal("RXFLUSH_1", "0x1", "All data in the receive FIFO/buffer is cleared out."),
                ]),
                Field("RXIDEN", 10, 3, "Receiver Idle Empty Enable", [
                    EnumVal("RXIDEN_0", "0", "Disable RDRF assertion due to partially filled FIFO when receiver is idle."),
                    EnumVal("RXIDEN_1", "0x1", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 1 character."),
                    EnumVal("RXIDEN_2", "0x2", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 2 characters."),
                    EnumVal("RXIDEN_3", "0x3", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 4 characters."),
                    EnumVal("RXIDEN_4", "0x4", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 8 characters."),
                    EnumVal("RXIDEN_5", "0x5", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 16 characters."),
                    EnumVal("RXIDEN_6", "0x6", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 32 characters."),
                    EnumVal("RXIDEN_7", "0x7", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 64 characters."),
                ]),
                Field("TXOFE", 9, 1, "Transmit FIFO Overflow Interrupt Enable", [
                    EnumVal("TXOFE_0", "0", "TXOF flag does not generate an interrupt to the host."),
                    EnumVal("TXOFE_1", "0x1", "TXOF flag generates an interrupt to the host."),
                ]),
                Field("RXUFE", 8, 1, "Receive FIFO Underflow Interrupt Enable", [
                    EnumVal("RXUFE_0", "0", "RXUF flag does not generate an interrupt to the host."),
                    EnumVal("RXUFE_1", "0x1", "RXUF flag generates an interrupt to the host."),
                ]),
                Field("TXFE", 7, 1, "Transmit FIFO Enable", [
                    EnumVal("TXFE_0", "0", "Transmit FIFO is not enabled. Buffer is depth 1."),
                    EnumVal("TXFE_1", "0x1", "Transmit FIFO is enabled. Buffer is depth indicated by TXFIFOSIZE."),
                ]),
                Field("TXFIFOSIZE", 4, 3, "Transmit FIFO Buffer Depth", [
                    EnumVal("TXFIFOSIZE_0", "0", "Transmit FIFO/Buffer depth = 1 dataword."),
                    EnumVal("TXFIFOSIZE_1", "0x1", "Transmit FIFO/Buffer depth = 4 datawords."),
                    EnumVal("TXFIFOSIZE_2", "0x2", "Transmit FIFO/Buffer depth = 8 datawords."),
                    EnumVal("TXFIFOSIZE_3", "0x3", "Transmit FIFO/Buffer depth = 16 datawords."),
                    EnumVal("TXFIFOSIZE_4", "0x4", "Transmit FIFO/Buffer depth = 32 datawords."),
                    EnumVal("TXFIFOSIZE_5", "0x5", "Transmit FIFO/Buffer depth = 64 datawords."),
                    EnumVal("TXFIFOSIZE_6", "0x6", "Transmit FIFO/Buffer depth = 128 datawords."),
                    EnumVal("TXFIFOSIZE_7", "0x7", "Transmit FIFO/Buffer depth = 256 datawords"),
                ]),
                Field("RXFE", 3, 1, "Receive FIFO Enable", [
                    EnumVal("RXFE_0", "0", "Receive FIFO is not enabled. Buffer is depth 1."),
                    EnumVal("RXFE_1", "0x1", "Receive FIFO is enabled. Buffer is depth indicted by RXFIFOSIZE."),
                ]),
                Field("RXFIFOSIZE", 0, 3, "Receive FIFO Buffer Depth", [
                    EnumVal("RXFIFOSIZE_0", "0", "Receive FIFO/Buffer depth = 1 dataword."),
                    EnumVal("RXFIFOSIZE_1", "0x1", "Receive FIFO/Buffer depth = 4 datawords."),
                    EnumVal("RXFIFOSIZE_2", "0x2", "Receive FIFO/Buffer depth = 8 datawords."),
                    EnumVal("RXFIFOSIZE_3", "0x3", "Receive FIFO/Buffer depth = 16 datawords."),
                    EnumVal("RXFIFOSIZE_4", "0x4", "Receive FIFO/Buffer depth = 32 datawords."),
                    EnumVal("RXFIFOSIZE_5", "0x5", "Receive FIFO/Buffer depth = 64 datawords."),
                    EnumVal("RXFIFOSIZE_6", "0x6", "Receive FIFO/Buffer depth = 128 datawords."),
                    EnumVal("RXFIFOSIZE_7", "0x7", "Receive FIFO/Buffer depth = 256 datawords."),
                ]),
            ]),
            Register("WATER", 0x4006B02C, 32, "LPUART Watermark Register", [
                Field("RXCOUNT", 24, 3, "Receive Counter", [
                ]),
                Field("RXWATER", 16, 2, "Receive Watermark", [
                ]),
                Field("TXCOUNT", 8, 3, "Transmit Counter", [
                ]),
                Field("TXWATER", 0, 2, "Transmit Watermark", [
                ]),
            ]),
        ])

class Module_LPUART2(Peripheral):
    def __init__(self):
        super().__init__("LPUART2", 0x4006C000, 0x30, [
            Register("VERID", 0x4006C000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Identification Number", [
                    EnumVal("FEATURE_1", "0x1", "Standard feature set."),
                    EnumVal("FEATURE_3", "0x3", "Standard feature set with MODEM/IrDA support."),
                ]),
            ]),
            Register("PARAM", 0x4006C004, 32, "Parameter Register", [
                Field("RXFIFO", 8, 8, "Receive FIFO Size", [
                ]),
                Field("TXFIFO", 0, 8, "Transmit FIFO Size", [
                ]),
            ]),
            Register("GLOBAL", 0x4006C008, 32, "LPUART Global Register", [
                Field("RST", 1, 1, "Software Reset", [
                    EnumVal("RST_0", "0", "Module is not reset."),
                    EnumVal("RST_1", "0x1", "Module is reset."),
                ]),
            ]),
            Register("PINCFG", 0x4006C00C, 32, "LPUART Pin Configuration Register", [
                Field("TRGSEL", 0, 2, "Trigger Select", [
                    EnumVal("TRGSEL_0", "0", "Input trigger is disabled."),
                    EnumVal("TRGSEL_1", "0x1", "Input trigger is used instead of RXD pin input."),
                    EnumVal("TRGSEL_2", "0x2", "Input trigger is used instead of CTS_B pin input."),
                    EnumVal("TRGSEL_3", "0x3", "Input trigger is used to modulate the TXD pin output. The TXD pin output (after TXINV configuration) is ANDed with the input trigger."),
                ]),
            ]),
            Register("BAUD", 0x4006C010, 32, "LPUART Baud Rate Register", [
                Field("MAEN1", 31, 1, "Match Address Mode Enable 1", [
                    EnumVal("MAEN1_0", "0", "Normal operation."),
                    EnumVal("MAEN1_1", "0x1", "Enables automatic address matching or data matching mode for MATCH[MA1]."),
                ]),
                Field("MAEN2", 30, 1, "Match Address Mode Enable 2", [
                    EnumVal("MAEN2_0", "0", "Normal operation."),
                    EnumVal("MAEN2_1", "0x1", "Enables automatic address matching or data matching mode for MATCH[MA2]."),
                ]),
                Field("M10", 29, 1, "10-bit Mode select", [
                    EnumVal("M10_0", "0", "Receiver and transmitter use 7-bit to 9-bit data characters."),
                    EnumVal("M10_1", "0x1", "Receiver and transmitter use 10-bit data characters."),
                ]),
                Field("OSR", 24, 5, "Oversampling Ratio", [
                    EnumVal("OSR_0", "0", "Writing 0 to this field results in an oversampling ratio of 16"),
                    EnumVal("OSR_3", "0x3", "Oversampling ratio of 4, requires BOTHEDGE to be set."),
                    EnumVal("OSR_4", "0x4", "Oversampling ratio of 5, requires BOTHEDGE to be set."),
                    EnumVal("OSR_5", "0x5", "Oversampling ratio of 6, requires BOTHEDGE to be set."),
                    EnumVal("OSR_6", "0x6", "Oversampling ratio of 7, requires BOTHEDGE to be set."),
                    EnumVal("OSR_7", "0x7", "Oversampling ratio of 8."),
                    EnumVal("OSR_8", "0x8", "Oversampling ratio of 9."),
                    EnumVal("OSR_9", "0x9", "Oversampling ratio of 10."),
                    EnumVal("OSR_10", "0xA", "Oversampling ratio of 11."),
                    EnumVal("OSR_11", "0xB", "Oversampling ratio of 12."),
                    EnumVal("OSR_12", "0xC", "Oversampling ratio of 13."),
                    EnumVal("OSR_13", "0xD", "Oversampling ratio of 14."),
                    EnumVal("OSR_14", "0xE", "Oversampling ratio of 15."),
                    EnumVal("OSR_15", "0xF", "Oversampling ratio of 16."),
                    EnumVal("OSR_16", "0x10", "Oversampling ratio of 17."),
                    EnumVal("OSR_17", "0x11", "Oversampling ratio of 18."),
                    EnumVal("OSR_18", "0x12", "Oversampling ratio of 19."),
                    EnumVal("OSR_19", "0x13", "Oversampling ratio of 20."),
                    EnumVal("OSR_20", "0x14", "Oversampling ratio of 21."),
                    EnumVal("OSR_21", "0x15", "Oversampling ratio of 22."),
                    EnumVal("OSR_22", "0x16", "Oversampling ratio of 23."),
                    EnumVal("OSR_23", "0x17", "Oversampling ratio of 24."),
                    EnumVal("OSR_24", "0x18", "Oversampling ratio of 25."),
                    EnumVal("OSR_25", "0x19", "Oversampling ratio of 26."),
                    EnumVal("OSR_26", "0x1A", "Oversampling ratio of 27."),
                    EnumVal("OSR_27", "0x1B", "Oversampling ratio of 28."),
                    EnumVal("OSR_28", "0x1C", "Oversampling ratio of 29."),
                    EnumVal("OSR_29", "0x1D", "Oversampling ratio of 30."),
                    EnumVal("OSR_30", "0x1E", "Oversampling ratio of 31."),
                    EnumVal("OSR_31", "0x1F", "Oversampling ratio of 32."),
                ]),
                Field("TDMAE", 23, 1, "Transmitter DMA Enable", [
                    EnumVal("TDMAE_0", "0", "DMA request disabled."),
                    EnumVal("TDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("RDMAE", 21, 1, "Receiver Full DMA Enable", [
                    EnumVal("RDMAE_0", "0", "DMA request disabled."),
                    EnumVal("RDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("RIDMAE", 20, 1, "Receiver Idle DMA Enable", [
                    EnumVal("RIDMAE_0", "0", "DMA request disabled."),
                    EnumVal("RIDMAE_1", "0x1", "DMA request enabled."),
                ]),
                Field("MATCFG", 18, 2, "Match Configuration", [
                    EnumVal("MATCFG_0", "0", "Address Match Wakeup"),
                    EnumVal("MATCFG_1", "0x1", "Idle Match Wakeup"),
                    EnumVal("MATCFG_2", "0x2", "Match On and Match Off"),
                    EnumVal("MATCFG_3", "0x3", "Enables RWU on Data Match and Match On/Off for transmitter CTS input"),
                ]),
                Field("BOTHEDGE", 17, 1, "Both Edge Sampling", [
                    EnumVal("BOTHEDGE_0", "0", "Receiver samples input data using the rising edge of the baud rate clock."),
                    EnumVal("BOTHEDGE_1", "0x1", "Receiver samples input data using the rising and falling edge of the baud rate clock."),
                ]),
                Field("RESYNCDIS", 16, 1, "Resynchronization Disable", [
                    EnumVal("RESYNCDIS_0", "0", "Resynchronization during received data word is supported"),
                    EnumVal("RESYNCDIS_1", "0x1", "Resynchronization during received data word is disabled"),
                ]),
                Field("LBKDIE", 15, 1, "LIN Break Detect Interrupt Enable", [
                    EnumVal("LBKDIE_0", "0", "Hardware interrupts from STAT[LBKDIF] flag are disabled (use polling)."),
                    EnumVal("LBKDIE_1", "0x1", "Hardware interrupt requested when STAT[LBKDIF] flag is 1."),
                ]),
                Field("RXEDGIE", 14, 1, "RX Input Active Edge Interrupt Enable", [
                    EnumVal("RXEDGIE_0", "0", "Hardware interrupts from STAT[RXEDGIF] are disabled."),
                    EnumVal("RXEDGIE_1", "0x1", "Hardware interrupt is requested when STAT[RXEDGIF] flag is 1."),
                ]),
                Field("SBNS", 13, 1, "Stop Bit Number Select", [
                    EnumVal("SBNS_0", "0", "One stop bit."),
                    EnumVal("SBNS_1", "0x1", "Two stop bits."),
                ]),
                Field("SBR", 0, 13, "Baud Rate Modulo Divisor.", [
                ]),
            ]),
            Register("STAT", 0x4006C014, 32, "LPUART Status Register", [
                Field("LBKDIF", 31, 1, "LIN Break Detect Interrupt Flag", [
                    EnumVal("LBKDIF_0", "0", "No LIN break character has been detected."),
                    EnumVal("LBKDIF_1", "0x1", "LIN break character has been detected."),
                ]),
                Field("RXEDGIF", 30, 1, "RXD Pin Active Edge Interrupt Flag", [
                    EnumVal("RXEDGIF_0", "0", "No active edge on the receive pin has occurred."),
                    EnumVal("RXEDGIF_1", "0x1", "An active edge on the receive pin has occurred."),
                ]),
                Field("MSBF", 29, 1, "MSB First", [
                    EnumVal("MSBF_0", "0", "LSB (bit0) is the first bit that is transmitted following the start bit. Further, the first bit received after the start bit is identified as bit0."),
                    EnumVal("MSBF_1", "0x1", "MSB (bit9, bit8, bit7 or bit6) is the first bit that is transmitted following the start bit depending on the setting of CTRL[M], CTRL[PE] and BAUD[M10]. Further, the first bit received after the start bit is identified as bit9, bit8, bit7 or bit6 depending on the setting of CTRL[M] and CTRL[PE]."),
                ]),
                Field("RXINV", 28, 1, "Receive Data Inversion", [
                    EnumVal("RXINV_0", "0", "Receive data not inverted."),
                    EnumVal("RXINV_1", "0x1", "Receive data inverted."),
                ]),
                Field("RWUID", 27, 1, "Receive Wake Up Idle Detect", [
                    EnumVal("RWUID_0", "0", "During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle character. During address match wakeup, the IDLE bit does not set when an address does not match."),
                    EnumVal("RWUID_1", "0x1", "During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character. During address match wakeup, the IDLE bit does set when an address does not match."),
                ]),
                Field("BRK13", 26, 1, "Break Character Generation Length", [
                    EnumVal("BRK13_0", "0", "Break character is transmitted with length of 9 to 13 bit times."),
                    EnumVal("BRK13_1", "0x1", "Break character is transmitted with length of 12 to 15 bit times."),
                ]),
                Field("LBKDE", 25, 1, "LIN Break Detection Enable", [
                    EnumVal("LBKDE_0", "0", "LIN break detect is disabled, normal break character can be detected."),
                    EnumVal("LBKDE_1", "0x1", "LIN break detect is enabled. LIN break character is detected at length of 11 bit times (if M = 0) or 12 (if M = 1) or 13 (M10 = 1)."),
                ]),
                Field("RAF", 24, 1, "Receiver Active Flag", [
                    EnumVal("RAF_0", "0", "LPUART receiver idle waiting for a start bit."),
                    EnumVal("RAF_1", "0x1", "LPUART receiver active (RXD input not idle)."),
                ]),
                Field("TDRE", 23, 1, "Transmit Data Register Empty Flag", [
                    EnumVal("TDRE_0", "0", "Transmit data buffer full."),
                    EnumVal("TDRE_1", "0x1", "Transmit data buffer empty."),
                ]),
                Field("TC", 22, 1, "Transmission Complete Flag", [
                    EnumVal("TC_0", "0", "Transmitter active (sending data, a preamble, or a break)."),
                    EnumVal("TC_1", "0x1", "Transmitter idle (transmission activity complete)."),
                ]),
                Field("RDRF", 21, 1, "Receive Data Register Full Flag", [
                    EnumVal("RDRF_0", "0", "Receive data buffer empty."),
                    EnumVal("RDRF_1", "0x1", "Receive data buffer full."),
                ]),
                Field("IDLE", 20, 1, "Idle Line Flag", [
                    EnumVal("IDLE_0", "0", "No idle line detected."),
                    EnumVal("IDLE_1", "0x1", "Idle line was detected."),
                ]),
                Field("OR", 19, 1, "Receiver Overrun Flag", [
                    EnumVal("OR_0", "0", "No overrun."),
                    EnumVal("OR_1", "0x1", "Receive overrun (new LPUART data lost)."),
                ]),
                Field("NF", 18, 1, "Noise Flag", [
                    EnumVal("NF_0", "0", "No noise detected."),
                    EnumVal("NF_1", "0x1", "Noise detected in the received character in the DATA register."),
                ]),
                Field("FE", 17, 1, "Framing Error Flag", [
                    EnumVal("FE_0", "0", "No framing error detected. This does not guarantee the framing is correct."),
                    EnumVal("FE_1", "0x1", "Framing error."),
                ]),
                Field("PF", 16, 1, "Parity Error Flag", [
                    EnumVal("PF_0", "0", "No parity error."),
                    EnumVal("PF_1", "0x1", "Parity error."),
                ]),
                Field("MA1F", 15, 1, "Match 1 Flag", [
                    EnumVal("MA1F_0", "0", "Received data is not equal to MA1"),
                    EnumVal("MA1F_1", "0x1", "Received data is equal to MA1"),
                ]),
                Field("MA2F", 14, 1, "Match 2 Flag", [
                    EnumVal("MA2F_0", "0", "Received data is not equal to MA2"),
                    EnumVal("MA2F_1", "0x1", "Received data is equal to MA2"),
                ]),
            ]),
            Register("CTRL", 0x4006C018, 32, "LPUART Control Register", [
                Field("R8T9", 31, 1, "Receive Bit 8 / Transmit Bit 9", [
                ]),
                Field("R9T8", 30, 1, "Receive Bit 9 / Transmit Bit 8", [
                ]),
                Field("TXDIR", 29, 1, "TXD Pin Direction in Single-Wire Mode", [
                    EnumVal("TXDIR_0", "0", "TXD pin is an input in single-wire mode."),
                    EnumVal("TXDIR_1", "0x1", "TXD pin is an output in single-wire mode."),
                ]),
                Field("TXINV", 28, 1, "Transmit Data Inversion", [
                    EnumVal("TXINV_0", "0", "Transmit data not inverted."),
                    EnumVal("TXINV_1", "0x1", "Transmit data inverted."),
                ]),
                Field("ORIE", 27, 1, "Overrun Interrupt Enable", [
                    EnumVal("ORIE_0", "0", "OR interrupts disabled; use polling."),
                    EnumVal("ORIE_1", "0x1", "Hardware interrupt requested when OR is set."),
                ]),
                Field("NEIE", 26, 1, "Noise Error Interrupt Enable", [
                    EnumVal("NEIE_0", "0", "NF interrupts disabled; use polling."),
                    EnumVal("NEIE_1", "0x1", "Hardware interrupt requested when NF is set."),
                ]),
                Field("FEIE", 25, 1, "Framing Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "FE interrupts disabled; use polling."),
                    EnumVal("FEIE_1", "0x1", "Hardware interrupt requested when FE is set."),
                ]),
                Field("PEIE", 24, 1, "Parity Error Interrupt Enable", [
                    EnumVal("PEIE_0", "0", "PF interrupts disabled; use polling)."),
                    EnumVal("PEIE_1", "0x1", "Hardware interrupt requested when PF is set."),
                ]),
                Field("TIE", 23, 1, "Transmit Interrupt Enable", [
                    EnumVal("TIE_0", "0", "Hardware interrupts from TDRE disabled; use polling."),
                    EnumVal("TIE_1", "0x1", "Hardware interrupt requested when TDRE flag is 1."),
                ]),
                Field("TCIE", 22, 1, "Transmission Complete Interrupt Enable for", [
                    EnumVal("TCIE_0", "0", "Hardware interrupts from TC disabled; use polling."),
                    EnumVal("TCIE_1", "0x1", "Hardware interrupt requested when TC flag is 1."),
                ]),
                Field("RIE", 21, 1, "Receiver Interrupt Enable", [
                    EnumVal("RIE_0", "0", "Hardware interrupts from RDRF disabled; use polling."),
                    EnumVal("RIE_1", "0x1", "Hardware interrupt requested when RDRF flag is 1."),
                ]),
                Field("ILIE", 20, 1, "Idle Line Interrupt Enable", [
                    EnumVal("ILIE_0", "0", "Hardware interrupts from IDLE disabled; use polling."),
                    EnumVal("ILIE_1", "0x1", "Hardware interrupt requested when IDLE flag is 1."),
                ]),
                Field("TE", 19, 1, "Transmitter Enable", [
                    EnumVal("TE_0", "0", "Transmitter disabled."),
                    EnumVal("TE_1", "0x1", "Transmitter enabled."),
                ]),
                Field("RE", 18, 1, "Receiver Enable", [
                    EnumVal("RE_0", "0", "Receiver disabled."),
                    EnumVal("RE_1", "0x1", "Receiver enabled."),
                ]),
                Field("RWU", 17, 1, "Receiver Wakeup Control", [
                    EnumVal("RWU_0", "0", "Normal receiver operation."),
                    EnumVal("RWU_1", "0x1", "LPUART receiver in standby waiting for wakeup condition."),
                ]),
                Field("SBK", 16, 1, "Send Break", [
                    EnumVal("SBK_0", "0", "Normal transmitter operation."),
                    EnumVal("SBK_1", "0x1", "Queue break character(s) to be sent."),
                ]),
                Field("MA1IE", 15, 1, "Match 1 Interrupt Enable", [
                    EnumVal("MA1IE_0", "0", "MA1F interrupt disabled"),
                    EnumVal("MA1IE_1", "0x1", "MA1F interrupt enabled"),
                ]),
                Field("MA2IE", 14, 1, "Match 2 Interrupt Enable", [
                    EnumVal("MA2IE_0", "0", "MA2F interrupt disabled"),
                    EnumVal("MA2IE_1", "0x1", "MA2F interrupt enabled"),
                ]),
                Field("M7", 11, 1, "7-Bit Mode Select", [
                    EnumVal("M7_0", "0", "Receiver and transmitter use 8-bit to 10-bit data characters."),
                    EnumVal("M7_1", "0x1", "Receiver and transmitter use 7-bit data characters."),
                ]),
                Field("IDLECFG", 8, 3, "Idle Configuration", [
                    EnumVal("IDLECFG_0", "0", "1 idle character"),
                    EnumVal("IDLECFG_1", "0x1", "2 idle characters"),
                    EnumVal("IDLECFG_2", "0x2", "4 idle characters"),
                    EnumVal("IDLECFG_3", "0x3", "8 idle characters"),
                    EnumVal("IDLECFG_4", "0x4", "16 idle characters"),
                    EnumVal("IDLECFG_5", "0x5", "32 idle characters"),
                    EnumVal("IDLECFG_6", "0x6", "64 idle characters"),
                    EnumVal("IDLECFG_7", "0x7", "128 idle characters"),
                ]),
                Field("LOOPS", 7, 1, "Loop Mode Select", [
                    EnumVal("LOOPS_0", "0", "Normal operation - RXD and TXD use separate pins."),
                    EnumVal("LOOPS_1", "0x1", "Loop mode or single-wire mode where transmitter outputs are internally connected to receiver input (see RSRC bit)."),
                ]),
                Field("DOZEEN", 6, 1, "Doze Enable", [
                    EnumVal("DOZEEN_0", "0", "LPUART is enabled in Doze mode."),
                    EnumVal("DOZEEN_1", "0x1", "LPUART is disabled in Doze mode."),
                ]),
                Field("RSRC", 5, 1, "Receiver Source Select", [
                    EnumVal("RSRC_0", "0", "Provided LOOPS is set, RSRC is cleared, selects internal loop back mode and the LPUART does not use the RXD pin."),
                    EnumVal("RSRC_1", "0x1", "Single-wire LPUART mode where the TXD pin is connected to the transmitter output and receiver input."),
                ]),
                Field("M", 4, 1, "9-Bit or 8-Bit Mode Select", [
                    EnumVal("M_0", "0", "Receiver and transmitter use 8-bit data characters."),
                    EnumVal("M_1", "0x1", "Receiver and transmitter use 9-bit data characters."),
                ]),
                Field("WAKE", 3, 1, "Receiver Wakeup Method Select", [
                    EnumVal("WAKE_0", "0", "Configures RWU for idle-line wakeup."),
                    EnumVal("WAKE_1", "0x1", "Configures RWU with address-mark wakeup."),
                ]),
                Field("ILT", 2, 1, "Idle Line Type Select", [
                    EnumVal("ILT_0", "0", "Idle character bit count starts after start bit."),
                    EnumVal("ILT_1", "0x1", "Idle character bit count starts after stop bit."),
                ]),
                Field("PE", 1, 1, "Parity Enable", [
                    EnumVal("PE_0", "0", "No hardware parity generation or checking."),
                    EnumVal("PE_1", "0x1", "Parity enabled."),
                ]),
                Field("PT", 0, 1, "Parity Type", [
                    EnumVal("PT_0", "0", "Even parity."),
                    EnumVal("PT_1", "0x1", "Odd parity."),
                ]),
            ]),
            Register("DATA", 0x4006C01C, 32, "LPUART Data Register", [
                Field("NOISY", 15, 1, "NOISY", [
                    EnumVal("NOISY_0", "0", "The dataword was received without noise."),
                    EnumVal("NOISY_1", "0x1", "The data was received with noise."),
                ]),
                Field("PARITYE", 14, 1, "PARITYE", [
                    EnumVal("PARITYE_0", "0", "The dataword was received without a parity error."),
                    EnumVal("PARITYE_1", "0x1", "The dataword was received with a parity error."),
                ]),
                Field("FRETSC", 13, 1, "Frame Error / Transmit Special Character", [
                    EnumVal("FRETSC_0", "0", "The dataword was received without a frame error on read, or transmit a normal character on write."),
                    EnumVal("FRETSC_1", "0x1", "The dataword was received with a frame error, or transmit an idle or break character on transmit."),
                ]),
                Field("RXEMPT", 12, 1, "Receive Buffer Empty", [
                    EnumVal("RXEMPT_0", "0", "Receive buffer contains valid data."),
                    EnumVal("RXEMPT_1", "0x1", "Receive buffer is empty, data returned on read is not valid."),
                ]),
                Field("IDLINE", 11, 1, "Idle Line", [
                    EnumVal("IDLINE_0", "0", "Receiver was not idle before receiving this character."),
                    EnumVal("IDLINE_1", "0x1", "Receiver was idle before receiving this character."),
                ]),
                Field("R9T9", 9, 1, "R9T9", [
                ]),
                Field("R8T8", 8, 1, "R8T8", [
                ]),
                Field("R7T7", 7, 1, "R7T7", [
                ]),
                Field("R6T6", 6, 1, "R6T6", [
                ]),
                Field("R5T5", 5, 1, "R5T5", [
                ]),
                Field("R4T4", 4, 1, "R4T4", [
                ]),
                Field("R3T3", 3, 1, "R3T3", [
                ]),
                Field("R2T2", 2, 1, "R2T2", [
                ]),
                Field("R1T1", 1, 1, "R1T1", [
                ]),
                Field("R0T0", 0, 1, "R0T0", [
                ]),
            ]),
            Register("MATCH", 0x4006C020, 32, "LPUART Match Address Register", [
                Field("MA2", 16, 10, "Match Address 2", [
                ]),
                Field("MA1", 0, 10, "Match Address 1", [
                ]),
            ]),
            Register("MODIR", 0x4006C024, 32, "LPUART Modem IrDA Register", [
                Field("IREN", 18, 1, "Infrared enable", [
                    EnumVal("IREN_0", "0", "IR disabled."),
                    EnumVal("IREN_1", "0x1", "IR enabled."),
                ]),
                Field("TNP", 16, 2, "Transmitter narrow pulse", [
                    EnumVal("TNP_0", "0", "1/OSR."),
                    EnumVal("TNP_1", "0x1", "2/OSR."),
                    EnumVal("TNP_2", "0x2", "3/OSR."),
                    EnumVal("TNP_3", "0x3", "4/OSR."),
                ]),
                Field("RTSWATER", 8, 2, "Receive RTS Configuration", [
                ]),
                Field("TXCTSSRC", 5, 1, "Transmit CTS Source", [
                    EnumVal("TXCTSSRC_0", "0", "CTS input is the CTS_B pin."),
                    EnumVal("TXCTSSRC_1", "0x1", "CTS input is the inverted Receiver Match result."),
                ]),
                Field("TXCTSC", 4, 1, "Transmit CTS Configuration", [
                    EnumVal("TXCTSC_0", "0", "CTS input is sampled at the start of each character."),
                    EnumVal("TXCTSC_1", "0x1", "CTS input is sampled when the transmitter is idle."),
                ]),
                Field("RXRTSE", 3, 1, "Receiver request-to-send enable", [
                    EnumVal("RXRTSE_0", "0", "The receiver has no effect on RTS."),
                    EnumVal("RXRTSE_1", "0x1", "RTS is deasserted if the receiver data register is full or a start bit has been detected that would cause the receiver data register to become full. RTS is asserted if the receiver data register is not full and has not detected a start bit that would cause the receiver data register to become full."),
                ]),
                Field("TXRTSPOL", 2, 1, "Transmitter request-to-send polarity", [
                    EnumVal("TXRTSPOL_0", "0", "Transmitter RTS is active low."),
                    EnumVal("TXRTSPOL_1", "0x1", "Transmitter RTS is active high."),
                ]),
                Field("TXRTSE", 1, 1, "Transmitter request-to-send enable", [
                    EnumVal("TXRTSE_0", "0", "The transmitter has no effect on RTS."),
                    EnumVal("TXRTSE_1", "0x1", "When a character is placed into an empty transmitter data buffer , RTS asserts one bit time before the start bit is transmitted. RTS deasserts one bit time after all characters in the transmitter data buffer and shift register are completely sent, including the last stop bit."),
                ]),
                Field("TXCTSE", 0, 1, "Transmitter clear-to-send enable", [
                    EnumVal("TXCTSE_0", "0", "CTS has no effect on the transmitter."),
                    EnumVal("TXCTSE_1", "0x1", "Enables clear-to-send operation. The transmitter checks the state of CTS each time it is ready to send a character. If CTS is asserted, the character is sent. If CTS is deasserted, the signal TXD remains in the mark state and transmission is delayed until CTS is asserted. Changes in CTS as a character is being sent do not affect its transmission."),
                ]),
            ]),
            Register("FIFO", 0x4006C028, 32, "LPUART FIFO Register", [
                Field("TXEMPT", 23, 1, "Transmit Buffer/FIFO Empty", [
                    EnumVal("TXEMPT_0", "0", "Transmit buffer is not empty."),
                    EnumVal("TXEMPT_1", "0x1", "Transmit buffer is empty."),
                ]),
                Field("RXEMPT", 22, 1, "Receive Buffer/FIFO Empty", [
                    EnumVal("RXEMPT_0", "0", "Receive buffer is not empty."),
                    EnumVal("RXEMPT_1", "0x1", "Receive buffer is empty."),
                ]),
                Field("TXOF", 17, 1, "Transmitter Buffer Overflow Flag", [
                    EnumVal("TXOF_0", "0", "No transmit buffer overflow has occurred since the last time the flag was cleared."),
                    EnumVal("TXOF_1", "0x1", "At least one transmit buffer overflow has occurred since the last time the flag was cleared."),
                ]),
                Field("RXUF", 16, 1, "Receiver Buffer Underflow Flag", [
                    EnumVal("RXUF_0", "0", "No receive buffer underflow has occurred since the last time the flag was cleared."),
                    EnumVal("RXUF_1", "0x1", "At least one receive buffer underflow has occurred since the last time the flag was cleared."),
                ]),
                Field("TXFLUSH", 15, 1, "Transmit FIFO/Buffer Flush", [
                    EnumVal("TXFLUSH_0", "0", "No flush operation occurs."),
                    EnumVal("TXFLUSH_1", "0x1", "All data in the transmit FIFO/Buffer is cleared out."),
                ]),
                Field("RXFLUSH", 14, 1, "Receive FIFO/Buffer Flush", [
                    EnumVal("RXFLUSH_0", "0", "No flush operation occurs."),
                    EnumVal("RXFLUSH_1", "0x1", "All data in the receive FIFO/buffer is cleared out."),
                ]),
                Field("RXIDEN", 10, 3, "Receiver Idle Empty Enable", [
                    EnumVal("RXIDEN_0", "0", "Disable RDRF assertion due to partially filled FIFO when receiver is idle."),
                    EnumVal("RXIDEN_1", "0x1", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 1 character."),
                    EnumVal("RXIDEN_2", "0x2", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 2 characters."),
                    EnumVal("RXIDEN_3", "0x3", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 4 characters."),
                    EnumVal("RXIDEN_4", "0x4", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 8 characters."),
                    EnumVal("RXIDEN_5", "0x5", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 16 characters."),
                    EnumVal("RXIDEN_6", "0x6", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 32 characters."),
                    EnumVal("RXIDEN_7", "0x7", "Enable RDRF assertion due to partially filled FIFO when receiver is idle for 64 characters."),
                ]),
                Field("TXOFE", 9, 1, "Transmit FIFO Overflow Interrupt Enable", [
                    EnumVal("TXOFE_0", "0", "TXOF flag does not generate an interrupt to the host."),
                    EnumVal("TXOFE_1", "0x1", "TXOF flag generates an interrupt to the host."),
                ]),
                Field("RXUFE", 8, 1, "Receive FIFO Underflow Interrupt Enable", [
                    EnumVal("RXUFE_0", "0", "RXUF flag does not generate an interrupt to the host."),
                    EnumVal("RXUFE_1", "0x1", "RXUF flag generates an interrupt to the host."),
                ]),
                Field("TXFE", 7, 1, "Transmit FIFO Enable", [
                    EnumVal("TXFE_0", "0", "Transmit FIFO is not enabled. Buffer is depth 1."),
                    EnumVal("TXFE_1", "0x1", "Transmit FIFO is enabled. Buffer is depth indicated by TXFIFOSIZE."),
                ]),
                Field("TXFIFOSIZE", 4, 3, "Transmit FIFO Buffer Depth", [
                    EnumVal("TXFIFOSIZE_0", "0", "Transmit FIFO/Buffer depth = 1 dataword."),
                    EnumVal("TXFIFOSIZE_1", "0x1", "Transmit FIFO/Buffer depth = 4 datawords."),
                    EnumVal("TXFIFOSIZE_2", "0x2", "Transmit FIFO/Buffer depth = 8 datawords."),
                    EnumVal("TXFIFOSIZE_3", "0x3", "Transmit FIFO/Buffer depth = 16 datawords."),
                    EnumVal("TXFIFOSIZE_4", "0x4", "Transmit FIFO/Buffer depth = 32 datawords."),
                    EnumVal("TXFIFOSIZE_5", "0x5", "Transmit FIFO/Buffer depth = 64 datawords."),
                    EnumVal("TXFIFOSIZE_6", "0x6", "Transmit FIFO/Buffer depth = 128 datawords."),
                    EnumVal("TXFIFOSIZE_7", "0x7", "Transmit FIFO/Buffer depth = 256 datawords"),
                ]),
                Field("RXFE", 3, 1, "Receive FIFO Enable", [
                    EnumVal("RXFE_0", "0", "Receive FIFO is not enabled. Buffer is depth 1."),
                    EnumVal("RXFE_1", "0x1", "Receive FIFO is enabled. Buffer is depth indicted by RXFIFOSIZE."),
                ]),
                Field("RXFIFOSIZE", 0, 3, "Receive FIFO Buffer Depth", [
                    EnumVal("RXFIFOSIZE_0", "0", "Receive FIFO/Buffer depth = 1 dataword."),
                    EnumVal("RXFIFOSIZE_1", "0x1", "Receive FIFO/Buffer depth = 4 datawords."),
                    EnumVal("RXFIFOSIZE_2", "0x2", "Receive FIFO/Buffer depth = 8 datawords."),
                    EnumVal("RXFIFOSIZE_3", "0x3", "Receive FIFO/Buffer depth = 16 datawords."),
                    EnumVal("RXFIFOSIZE_4", "0x4", "Receive FIFO/Buffer depth = 32 datawords."),
                    EnumVal("RXFIFOSIZE_5", "0x5", "Receive FIFO/Buffer depth = 64 datawords."),
                    EnumVal("RXFIFOSIZE_6", "0x6", "Receive FIFO/Buffer depth = 128 datawords."),
                    EnumVal("RXFIFOSIZE_7", "0x7", "Receive FIFO/Buffer depth = 256 datawords."),
                ]),
            ]),
            Register("WATER", 0x4006C02C, 32, "LPUART Watermark Register", [
                Field("RXCOUNT", 24, 3, "Receive Counter", [
                ]),
                Field("RXWATER", 16, 2, "Receive Watermark", [
                ]),
                Field("TXCOUNT", 8, 3, "Transmit Counter", [
                ]),
                Field("TXWATER", 0, 2, "Transmit Watermark", [
                ]),
            ]),
        ])

class Module_MCM(Peripheral):
    def __init__(self):
        super().__init__("MCM", 0xE0080000, 0x4A8, [
            Register("PLASC", 0xE0080008, 16, "Crossbar Switch (AXBS) Slave Configuration", [
                Field("ASC", 0, 8, "Each bit in the ASC field indicates whether there is a corresponding connection to the crossbar switch's slave input port.", [
                    EnumVal("ASC_0", "0", "A bus slave connection to AXBS input port n is absent"),
                    EnumVal("ASC_1", "0x1", "A bus slave connection to AXBS input port n is present"),
                ]),
            ]),
            Register("PLAMC", 0xE008000A, 16, "Crossbar Switch (AXBS) Master Configuration", [
                Field("AMC", 0, 8, "Each bit in the AMC field indicates whether there is a corresponding connection to the AXBS master input port.", [
                    EnumVal("AMC_0", "0", "A bus master connection to AXBS input port n is absent"),
                    EnumVal("AMC_1", "0x1", "A bus master connection to AXBS input port n is present"),
                ]),
            ]),
            Register("CPCR", 0xE008000C, 32, "Core Platform Control Register", [
                Field("SRAMLWP", 30, 1, "SRAM_L Write Protect", [
                ]),
                Field("SRAMLAP", 28, 2, "SRAM_L Arbitration Priority", [
                    EnumVal("SRAMLAP_0", "0", "Round robin"),
                    EnumVal("SRAMLAP_1", "0x1", "Special round robin (favors SRAM backdoor accesses over the processor)"),
                    EnumVal("SRAMLAP_2", "0x2", "Fixed priority. Processor has highest, backdoor has lowest"),
                    EnumVal("SRAMLAP_3", "0x3", "Fixed priority. Backdoor has highest, processor has lowest"),
                ]),
                Field("SRAMUWP", 26, 1, "SRAM_U Write Protect", [
                ]),
                Field("SRAMUAP", 24, 2, "SRAM_U Arbitration Priority", [
                    EnumVal("SRAMUAP_0", "0", "Round robin"),
                    EnumVal("SRAMUAP_1", "0x1", "Special round robin (favors SRAM backdoor accesses over the processor)"),
                    EnumVal("SRAMUAP_2", "0x2", "Fixed priority. Processor has highest, backdoor has lowest"),
                    EnumVal("SRAMUAP_3", "0x3", "Fixed priority. Backdoor has highest, processor has lowest"),
                ]),
                Field("CBRR", 9, 1, "Crossbar Round-robin Arbitration Enable", [
                    EnumVal("CBRR_0", "0", "Fixed-priority arbitration"),
                    EnumVal("CBRR_1", "0x1", "Round-robin arbitration"),
                ]),
                Field("PBRIDGE_IDLE", 6, 1, "Peripheral Bridge Idle", [
                    EnumVal("PBRIDGE_IDLE_0", "0", "PBRIDGE is not idle"),
                    EnumVal("PBRIDGE_IDLE_1", "0x1", "PBRIDGE is currently idle"),
                ]),
                Field("FMC_PF_IDLE", 4, 1, "Flash Memory Controller Program Flash Idle", [
                    EnumVal("FMC_PF_IDLE_0", "0", "FMC program flash is not idle"),
                    EnumVal("FMC_PF_IDLE_1", "0x1", "FMC program flash is currently idle"),
                ]),
                Field("AXBS_HLTD", 3, 1, "AXBS Halted", [
                    EnumVal("AXBS_HLTD_0", "0", "AXBS is not currently halted"),
                    EnumVal("AXBS_HLTD_1", "0x1", "AXBS is currently halted"),
                ]),
                Field("AXBS_HLT_REQ", 2, 1, "AXBS Halt Request", [
                    EnumVal("AXBS_HLT_REQ_0", "0", "AXBS is not receiving halt request"),
                    EnumVal("AXBS_HLT_REQ_1", "0x1", "AXBS is receiving halt request"),
                ]),
                Field("HLT_FSM_ST", 0, 2, "AXBS Halt State Machine Status", [
                    EnumVal("HLT_FSM_ST_0", "0", "Waiting for request"),
                    EnumVal("HLT_FSM_ST_1", "0x1", "Waiting for platform idle"),
                    EnumVal("HLT_FSM_ST_2", "0x2", "Unused state"),
                    EnumVal("HLT_FSM_ST_3", "0x3", "Platform stalled"),
                ]),
            ]),
            Register("ISCR", 0xE0080010, 32, "Interrupt Status and Control Register", [
                Field("FIDCE", 31, 1, "FPU Input Denormal Interrupt Enable", [
                    EnumVal("FIDCE_0", "0", "Disable interrupt"),
                    EnumVal("FIDCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FIXCE", 28, 1, "FPU Inexact Interrupt Enable", [
                    EnumVal("FIXCE_0", "0", "Disable interrupt"),
                    EnumVal("FIXCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FUFCE", 27, 1, "FPU Underflow Interrupt Enable", [
                    EnumVal("FUFCE_0", "0", "Disable interrupt"),
                    EnumVal("FUFCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FOFCE", 26, 1, "FPU Overflow Interrupt Enable", [
                    EnumVal("FOFCE_0", "0", "Disable interrupt"),
                    EnumVal("FOFCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FDZCE", 25, 1, "FPU Divide-by-Zero Interrupt Enable", [
                    EnumVal("FDZCE_0", "0", "Disable interrupt"),
                    EnumVal("FDZCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FIOCE", 24, 1, "FPU Invalid Operation Interrupt Enable", [
                    EnumVal("FIOCE_0", "0", "Disable interrupt"),
                    EnumVal("FIOCE_1", "0x1", "Enable interrupt"),
                ]),
                Field("FIDC", 15, 1, "FPU Input Denormal Interrupt Status", [
                    EnumVal("FIDC_0", "0", "No interrupt"),
                    EnumVal("FIDC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FIXC", 12, 1, "FPU Inexact Interrupt Status", [
                    EnumVal("FIXC_0", "0", "No interrupt"),
                    EnumVal("FIXC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FUFC", 11, 1, "FPU Underflow Interrupt Status", [
                    EnumVal("FUFC_0", "0", "No interrupt"),
                    EnumVal("FUFC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FOFC", 10, 1, "FPU Overflow Interrupt Status", [
                    EnumVal("FOFC_0", "0", "No interrupt"),
                    EnumVal("FOFC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FDZC", 9, 1, "FPU Divide-by-Zero Interrupt Status", [
                    EnumVal("FDZC_0", "0", "No interrupt"),
                    EnumVal("FDZC_1", "0x1", "Interrupt occurred"),
                ]),
                Field("FIOC", 8, 1, "FPU Invalid Operation Interrupt Status", [
                    EnumVal("FIOC_0", "0", "No interrupt"),
                    EnumVal("FIOC_1", "0x1", "Interrupt occurred"),
                ]),
            ]),
            Register("PID", 0xE0080030, 32, "Process ID Register", [
                Field("PID", 0, 8, "M0_PID and M1_PID for MPU", [
                ]),
            ]),
            Register("CPO", 0xE0080040, 32, "Compute Operation Control Register", [
                Field("CPOWOI", 2, 1, "Compute Operation Wakeup On Interrupt", [
                    EnumVal("CPOWOI_0", "0", "No effect."),
                    EnumVal("CPOWOI_1", "0x1", "When set, the CPOREQ is cleared on any interrupt or exception vector fetch."),
                ]),
                Field("CPOACK", 1, 1, "Compute Operation Acknowledge", [
                    EnumVal("CPOACK_0", "0", "Compute operation entry has not completed or compute operation exit has completed."),
                    EnumVal("CPOACK_1", "0x1", "Compute operation entry has completed or compute operation exit has not completed."),
                ]),
                Field("CPOREQ", 0, 1, "Compute Operation Request", [
                    EnumVal("CPOREQ_0", "0", "Request is cleared."),
                    EnumVal("CPOREQ_1", "0x1", "Request Compute Operation."),
                ]),
            ]),
            Register("LMDR0", 0xE0080400, 32, "Local Memory Descriptor Register", [
                Field("V", 31, 1, "Local Memory Valid", [
                    EnumVal("V_0", "0", "LMEMn is not present."),
                    EnumVal("V_1", "0x1", "LMEMn is present."),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("LMSZH_0", "0", "LMEMn is a power-of-2 capacity."),
                    EnumVal("LMSZH_1", "0x1", "LMEMn is not a power-of-2, with a capacity is 0.75 * LMSZ."),
                ]),
                Field("LMSZ", 24, 4, "LMEM Size", [
                    EnumVal("LMSZ_0", "0", "no LMEMn (0 KB)"),
                    EnumVal("LMSZ_1", "0x1", "1 KB LMEMn"),
                    EnumVal("LMSZ_2", "0x2", "2 KB LMEMn"),
                    EnumVal("LMSZ_3", "0x3", "4 KB LMEMn"),
                    EnumVal("LMSZ_4", "0x4", "8 KB LMEMn"),
                    EnumVal("LMSZ_5", "0x5", "16 KB LMEMn"),
                    EnumVal("LMSZ_6", "0x6", "32 KB LMEMn"),
                    EnumVal("LMSZ_7", "0x7", "64 KB LMEMn"),
                    EnumVal("LMSZ_8", "0x8", "128 KB LMEMn"),
                    EnumVal("LMSZ_9", "0x9", "256 KB LMEMn"),
                    EnumVal("LMSZ_10", "0xA", "512 KB LMEMn"),
                    EnumVal("LMSZ_11", "0xB", "1024 KB LMEMn"),
                    EnumVal("LMSZ_12", "0xC", "2048 KB LMEMn"),
                    EnumVal("LMSZ_13", "0xD", "4096 KB LMEMn"),
                    EnumVal("LMSZ_14", "0xE", "8192 KB LMEMn"),
                    EnumVal("LMSZ_15", "0xF", "16384 KB LMEMn"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No Cache"),
                    EnumVal("WY_2", "0x2", "2-Way Set Associative"),
                    EnumVal("WY_4", "0x4", "4-Way Set Associative"),
                ]),
                Field("DPW", 17, 3, "LMEM Data Path Width. This field defines the width of the local memory.", [
                    EnumVal("DPW_2", "0x2", "LMEMn 32-bits wide"),
                    EnumVal("DPW_3", "0x3", "LMEMn 64-bits wide"),
                ]),
                Field("LOCK", 16, 1, "LOCK", [
                    EnumVal("LOCK_0", "0", "Writes to the LMDRn[7:0] are allowed."),
                    EnumVal("LOCK_1", "0x1", "Writes to the LMDRn[7:0] are ignored."),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("MT_0", "0", "SRAM_L"),
                    EnumVal("MT_1", "0x1", "SRAM_U"),
                ]),
                Field("CF0", 0, 4, "Control Field 0 LMDR0[CF0] bit field is Reserved and Read-Only 0 for S32K11x variants.", [
                ]),
            ]),
            Register("LMDR1", 0xE0080404, 32, "Local Memory Descriptor Register", [
                Field("V", 31, 1, "Local Memory Valid", [
                    EnumVal("V_0", "0", "LMEMn is not present."),
                    EnumVal("V_1", "0x1", "LMEMn is present."),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("LMSZH_0", "0", "LMEMn is a power-of-2 capacity."),
                    EnumVal("LMSZH_1", "0x1", "LMEMn is not a power-of-2, with a capacity is 0.75 * LMSZ."),
                ]),
                Field("LMSZ", 24, 4, "LMEM Size", [
                    EnumVal("LMSZ_0", "0", "no LMEMn (0 KB)"),
                    EnumVal("LMSZ_1", "0x1", "1 KB LMEMn"),
                    EnumVal("LMSZ_2", "0x2", "2 KB LMEMn"),
                    EnumVal("LMSZ_3", "0x3", "4 KB LMEMn"),
                    EnumVal("LMSZ_4", "0x4", "8 KB LMEMn"),
                    EnumVal("LMSZ_5", "0x5", "16 KB LMEMn"),
                    EnumVal("LMSZ_6", "0x6", "32 KB LMEMn"),
                    EnumVal("LMSZ_7", "0x7", "64 KB LMEMn"),
                    EnumVal("LMSZ_8", "0x8", "128 KB LMEMn"),
                    EnumVal("LMSZ_9", "0x9", "256 KB LMEMn"),
                    EnumVal("LMSZ_10", "0xA", "512 KB LMEMn"),
                    EnumVal("LMSZ_11", "0xB", "1024 KB LMEMn"),
                    EnumVal("LMSZ_12", "0xC", "2048 KB LMEMn"),
                    EnumVal("LMSZ_13", "0xD", "4096 KB LMEMn"),
                    EnumVal("LMSZ_14", "0xE", "8192 KB LMEMn"),
                    EnumVal("LMSZ_15", "0xF", "16384 KB LMEMn"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No Cache"),
                    EnumVal("WY_2", "0x2", "2-Way Set Associative"),
                    EnumVal("WY_4", "0x4", "4-Way Set Associative"),
                ]),
                Field("DPW", 17, 3, "LMEM Data Path Width. This field defines the width of the local memory.", [
                    EnumVal("DPW_2", "0x2", "LMEMn 32-bits wide"),
                    EnumVal("DPW_3", "0x3", "LMEMn 64-bits wide"),
                ]),
                Field("LOCK", 16, 1, "LOCK", [
                    EnumVal("LOCK_0", "0", "Writes to the LMDRn[7:0] are allowed."),
                    EnumVal("LOCK_1", "0x1", "Writes to the LMDRn[7:0] are ignored."),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("MT_0", "0", "SRAM_L"),
                    EnumVal("MT_1", "0x1", "SRAM_U"),
                ]),
                Field("CF0", 0, 4, "Control Field 0 LMDR0[CF0] bit field is Reserved and Read-Only 0 for S32K11x variants.", [
                ]),
            ]),
            Register("LMDR2", 0xE0080408, 32, "Local Memory Descriptor Register2", [
                Field("V", 31, 1, "Local Memory Valid", [
                    EnumVal("V_0", "0", "LMEMn is not present."),
                    EnumVal("V_1", "0x1", "LMEMn is present."),
                ]),
                Field("LMSZH", 28, 1, "LMEM Size Hole", [
                    EnumVal("LMSZH_0", "0", "LMEMn is a power-of-2 capacity."),
                    EnumVal("LMSZH_1", "0x1", "LMEMn is not a power-of-2, with a capacity is 0.75 * LMSZ."),
                ]),
                Field("LMSZ", 24, 4, "LMEM Size", [
                    EnumVal("LMSZ_4", "0x4", "4 KB LMEMn"),
                ]),
                Field("WY", 20, 4, "Level 1 Cache Ways", [
                    EnumVal("WY_0", "0", "No Cache"),
                    EnumVal("WY_2", "0x2", "2-Way Set Associative"),
                    EnumVal("WY_4", "0x4", "4-Way Set Associative"),
                ]),
                Field("DPW", 17, 3, "LMEM Data Path Width. This field defines the width of the local memory.", [
                    EnumVal("DPW_2", "0x2", "LMEMn 32-bits wide"),
                    EnumVal("DPW_3", "0x3", "LMEMn 64-bits wide"),
                ]),
                Field("LOCK", 16, 1, "LOCK", [
                    EnumVal("LOCK_0", "0", "Writes to the LMDRn[7:0] are allowed."),
                    EnumVal("LOCK_1", "0x1", "Writes to the LMDRn[7:0] are ignored."),
                ]),
                Field("MT", 13, 3, "Memory Type", [
                    EnumVal("MT_2", "0x2", "PC Cache"),
                ]),
                Field("CF1", 4, 4, "Control Field 1", [
                ]),
            ]),
            Register("LMPECR", 0xE0080480, 32, "LMEM Parity and ECC Control Register", [
                Field("ECPR", 20, 1, "Enable Cache Parity Reporting", [
                    EnumVal("ECPR_0", "0", "Reporting disabled"),
                    EnumVal("ECPR_1", "0x1", "Reporting enabled"),
                ]),
                Field("ER1BR", 8, 1, "Enable RAM ECC 1 Bit Reporting This bit field is Reserved and Read-Only 0 for S32K11x variants. This bit field cannot mask ECC reporting, as a result the ECC would always be reported.", [
                    EnumVal("ER1BR_0", "0", "Reporting disabled"),
                    EnumVal("ER1BR_1", "0x1", "Reporting enabled"),
                ]),
                Field("ERNCR", 0, 1, "Enable RAM ECC Noncorrectable Reporting This bit field is Reserved and Read-Only 0 for S32K11x variants. This bit field cannot mask ECC reporting, as a result the ECC would always be reported.", [
                    EnumVal("ERNCR_0", "0", "Reporting disabled"),
                    EnumVal("ERNCR_1", "0x1", "Reporting enabled"),
                ]),
            ]),
            Register("LMPEIR", 0xE0080488, 32, "LMEM Parity and ECC Interrupt Register", [
                Field("V", 31, 1, "Valid Bit", [
                ]),
                Field("PEELOC", 24, 5, "Parity or ECC Error Location", [
                    EnumVal("PEELOC_0", "0", "Non-correctable ECC event from SRAM_L"),
                    EnumVal("PEELOC_1", "0x1", "Non-correctable ECC event from SRAM_U"),
                    EnumVal("PEELOC_8", "0x8", "1-bit correctable ECC event from SRAM_L"),
                    EnumVal("PEELOC_9", "0x9", "1-bit correctable ECC event from SRAM_U"),
                    EnumVal("PEELOC_14", "0xE", "PC tag parity error"),
                    EnumVal("PEELOC_15", "0xF", "PC data parity error"),
                ]),
                Field("PE", 16, 8, "Cache Parity Error", [
                ]),
                Field("E1B", 8, 8, "E1Bn = ECC 1-bit Error n", [
                ]),
                Field("ENC", 0, 8, "ENCn = ECC Noncorrectable Error n", [
                ]),
            ]),
            Register("LMFAR", 0xE0080490, 32, "LMEM Fault Address Register", [
                Field("EFADD", 0, 32, "ECC Fault Address", [
                ]),
            ]),
            Register("LMFATR", 0xE0080494, 32, "LMEM Fault Attribute Register", [
                Field("OVR", 31, 1, "Overrun", [
                ]),
                Field("PEFMST", 8, 8, "Parity/ECC Fault Master Number", [
                ]),
                Field("PEFW", 7, 1, "Parity/ECC Fault Write", [
                ]),
                Field("PEFSIZE", 4, 3, "Parity/ECC Fault Master Size", [
                    EnumVal("PEFSIZE_0", "0", "8-bit access"),
                    EnumVal("PEFSIZE_1", "0x1", "16-bit access"),
                    EnumVal("PEFSIZE_2", "0x2", "32-bit access"),
                    EnumVal("PEFSIZE_3", "0x3", "64-bit access"),
                ]),
                Field("PEFPRT", 0, 4, "Parity/ECC Fault Protection", [
                ]),
            ]),
            Register("LMFDHR", 0xE00804A0, 32, "LMEM Fault Data High Register", [
                Field("PEFDH", 0, 32, "Parity or ECC Fault Data High", [
                ]),
            ]),
            Register("LMFDLR", 0xE00804A4, 32, "LMEM Fault Data Low Register", [
                Field("PEFDL", 0, 32, "Parity or ECC Fault Data Low", [
                ]),
            ]),
        ])

class Module_MPU(Peripheral):
    def __init__(self):
        super().__init__("MPU", 0x4000D000, 0x840, [
            Register("CESR", 0x4000D000, 32, "Control/Error Status Register", [
                Field("SPERR0", 31, 1, "Slave Port 0 Error", [
                    EnumVal("SPERR0_0", "0", "No error has occurred for slave port 0."),
                    EnumVal("SPERR0_1", "0x1", "An error has occurred for slave port 0."),
                ]),
                Field("SPERR1", 30, 1, "Slave Port 1 Error", [
                    EnumVal("SPERR1_0", "0", "No error has occurred for slave port 1."),
                    EnumVal("SPERR1_1", "0x1", "An error has occurred for slave port 1."),
                ]),
                Field("SPERR2", 29, 1, "Slave Port 2 Error", [
                    EnumVal("SPERR2_0", "0", "No error has occurred for slave port 2."),
                    EnumVal("SPERR2_1", "0x1", "An error has occurred for slave port 2."),
                ]),
                Field("SPERR3", 28, 1, "Slave Port 3 Error", [
                    EnumVal("SPERR3_0", "0", "No error has occurred for slave port 3."),
                    EnumVal("SPERR3_1", "0x1", "An error has occurred for slave port 3."),
                ]),
                Field("SPERR4", 27, 1, "Slave Port 4 Error", [
                    EnumVal("SPERR4_0", "0", "No error has occurred for slave port 4."),
                    EnumVal("SPERR4_1", "0x1", "An error has occurred for slave port 4."),
                ]),
                Field("HRL", 16, 4, "Hardware Revision Level", [
                ]),
                Field("NSP", 12, 4, "Number Of Slave Ports", [
                ]),
                Field("NRGD", 8, 4, "Number Of Region Descriptors", [
                    EnumVal("NRGD_0", "0", "8 region descriptors"),
                    EnumVal("NRGD_1", "0x1", "12 region descriptors"),
                    EnumVal("NRGD_2", "0x2", "16 region descriptors"),
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "MPU is disabled. All accesses from all bus masters are allowed."),
                    EnumVal("VLD_1", "0x1", "MPU is enabled"),
                ]),
            ]),
            Register("EAR0", 0x4000D010, 32, "Error Address Register, slave port 0", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("EDR0", 0x4000D014, 32, "Error Detail Register, slave port 0", [
                Field("EACD", 16, 16, "Error Access Control Detail", [
                ]),
                Field("EPID", 8, 8, "Error Process Identification", [
                ]),
                Field("EMN", 4, 4, "Error Master Number", [
                ]),
                Field("EATTR", 1, 3, "Error Attributes", [
                    EnumVal("EATTR_0", "0", "User mode, instruction access"),
                    EnumVal("EATTR_1", "0x1", "User mode, data access"),
                    EnumVal("EATTR_2", "0x2", "Supervisor mode, instruction access"),
                    EnumVal("EATTR_3", "0x3", "Supervisor mode, data access"),
                ]),
                Field("ERW", 0, 1, "Error Read/Write", [
                    EnumVal("ERW_0", "0", "Read"),
                    EnumVal("ERW_1", "0x1", "Write"),
                ]),
            ]),
            Register("EAR1", 0x4000D018, 32, "Error Address Register, slave port 1", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("EDR1", 0x4000D01C, 32, "Error Detail Register, slave port 1", [
                Field("EACD", 16, 16, "Error Access Control Detail", [
                ]),
                Field("EPID", 8, 8, "Error Process Identification", [
                ]),
                Field("EMN", 4, 4, "Error Master Number", [
                ]),
                Field("EATTR", 1, 3, "Error Attributes", [
                    EnumVal("EATTR_0", "0", "User mode, instruction access"),
                    EnumVal("EATTR_1", "0x1", "User mode, data access"),
                    EnumVal("EATTR_2", "0x2", "Supervisor mode, instruction access"),
                    EnumVal("EATTR_3", "0x3", "Supervisor mode, data access"),
                ]),
                Field("ERW", 0, 1, "Error Read/Write", [
                    EnumVal("ERW_0", "0", "Read"),
                    EnumVal("ERW_1", "0x1", "Write"),
                ]),
            ]),
            Register("EAR2", 0x4000D020, 32, "Error Address Register, slave port 2", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("EDR2", 0x4000D024, 32, "Error Detail Register, slave port 2", [
                Field("EACD", 16, 16, "Error Access Control Detail", [
                ]),
                Field("EPID", 8, 8, "Error Process Identification", [
                ]),
                Field("EMN", 4, 4, "Error Master Number", [
                ]),
                Field("EATTR", 1, 3, "Error Attributes", [
                    EnumVal("EATTR_0", "0", "User mode, instruction access"),
                    EnumVal("EATTR_1", "0x1", "User mode, data access"),
                    EnumVal("EATTR_2", "0x2", "Supervisor mode, instruction access"),
                    EnumVal("EATTR_3", "0x3", "Supervisor mode, data access"),
                ]),
                Field("ERW", 0, 1, "Error Read/Write", [
                    EnumVal("ERW_0", "0", "Read"),
                    EnumVal("ERW_1", "0x1", "Write"),
                ]),
            ]),
            Register("EAR3", 0x4000D028, 32, "Error Address Register, slave port 3", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("EDR3", 0x4000D02C, 32, "Error Detail Register, slave port 3", [
                Field("EACD", 16, 16, "Error Access Control Detail", [
                ]),
                Field("EPID", 8, 8, "Error Process Identification", [
                ]),
                Field("EMN", 4, 4, "Error Master Number", [
                ]),
                Field("EATTR", 1, 3, "Error Attributes", [
                    EnumVal("EATTR_0", "0", "User mode, instruction access"),
                    EnumVal("EATTR_1", "0x1", "User mode, data access"),
                    EnumVal("EATTR_2", "0x2", "Supervisor mode, instruction access"),
                    EnumVal("EATTR_3", "0x3", "Supervisor mode, data access"),
                ]),
                Field("ERW", 0, 1, "Error Read/Write", [
                    EnumVal("ERW_0", "0", "Read"),
                    EnumVal("ERW_1", "0x1", "Write"),
                ]),
            ]),
            Register("EAR4", 0x4000D030, 32, "Error Address Register, slave port 4", [
                Field("EADDR", 0, 32, "Error Address", [
                ]),
            ]),
            Register("EDR4", 0x4000D034, 32, "Error Detail Register, slave port 4", [
                Field("EACD", 16, 16, "Error Access Control Detail", [
                ]),
                Field("EPID", 8, 8, "Error Process Identification", [
                ]),
                Field("EMN", 4, 4, "Error Master Number", [
                ]),
                Field("EATTR", 1, 3, "Error Attributes", [
                    EnumVal("EATTR_0", "0", "User mode, instruction access"),
                    EnumVal("EATTR_1", "0x1", "User mode, data access"),
                    EnumVal("EATTR_2", "0x2", "Supervisor mode, instruction access"),
                    EnumVal("EATTR_3", "0x3", "Supervisor mode, data access"),
                ]),
                Field("ERW", 0, 1, "Error Read/Write", [
                    EnumVal("ERW_0", "0", "Read"),
                    EnumVal("ERW_1", "0x1", "Write"),
                ]),
            ]),
            Register("RGD0_WORD0", 0x4000D400, 32, "Region Descriptor 0, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD0_WORD1", 0x4000D404, 32, "Region Descriptor 0, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD0_WORD2", 0x4000D408, 32, "Region Descriptor 0, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD0_WORD3", 0x4000D40C, 32, "Region Descriptor 0, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD1_WORD0", 0x4000D410, 32, "Region Descriptor 1, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD1_WORD1", 0x4000D414, 32, "Region Descriptor 1, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD1_WORD2", 0x4000D418, 32, "Region Descriptor 1, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD1_WORD3", 0x4000D41C, 32, "Region Descriptor 1, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD2_WORD0", 0x4000D420, 32, "Region Descriptor 2, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD2_WORD1", 0x4000D424, 32, "Region Descriptor 2, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD2_WORD2", 0x4000D428, 32, "Region Descriptor 2, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD2_WORD3", 0x4000D42C, 32, "Region Descriptor 2, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD3_WORD0", 0x4000D430, 32, "Region Descriptor 3, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD3_WORD1", 0x4000D434, 32, "Region Descriptor 3, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD3_WORD2", 0x4000D438, 32, "Region Descriptor 3, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD3_WORD3", 0x4000D43C, 32, "Region Descriptor 3, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD4_WORD0", 0x4000D440, 32, "Region Descriptor 4, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD4_WORD1", 0x4000D444, 32, "Region Descriptor 4, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD4_WORD2", 0x4000D448, 32, "Region Descriptor 4, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD4_WORD3", 0x4000D44C, 32, "Region Descriptor 4, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD5_WORD0", 0x4000D450, 32, "Region Descriptor 5, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD5_WORD1", 0x4000D454, 32, "Region Descriptor 5, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD5_WORD2", 0x4000D458, 32, "Region Descriptor 5, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD5_WORD3", 0x4000D45C, 32, "Region Descriptor 5, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD6_WORD0", 0x4000D460, 32, "Region Descriptor 6, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD6_WORD1", 0x4000D464, 32, "Region Descriptor 6, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD6_WORD2", 0x4000D468, 32, "Region Descriptor 6, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD6_WORD3", 0x4000D46C, 32, "Region Descriptor 6, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD7_WORD0", 0x4000D470, 32, "Region Descriptor 7, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD7_WORD1", 0x4000D474, 32, "Region Descriptor 7, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD7_WORD2", 0x4000D478, 32, "Region Descriptor 7, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD7_WORD3", 0x4000D47C, 32, "Region Descriptor 7, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD8_WORD0", 0x4000D480, 32, "Region Descriptor 8, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD8_WORD1", 0x4000D484, 32, "Region Descriptor 8, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD8_WORD2", 0x4000D488, 32, "Region Descriptor 8, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD8_WORD3", 0x4000D48C, 32, "Region Descriptor 8, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD9_WORD0", 0x4000D490, 32, "Region Descriptor 9, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD9_WORD1", 0x4000D494, 32, "Region Descriptor 9, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD9_WORD2", 0x4000D498, 32, "Region Descriptor 9, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD9_WORD3", 0x4000D49C, 32, "Region Descriptor 9, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD10_WORD0", 0x4000D4A0, 32, "Region Descriptor 10, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD10_WORD1", 0x4000D4A4, 32, "Region Descriptor 10, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD10_WORD2", 0x4000D4A8, 32, "Region Descriptor 10, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD10_WORD3", 0x4000D4AC, 32, "Region Descriptor 10, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD11_WORD0", 0x4000D4B0, 32, "Region Descriptor 11, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD11_WORD1", 0x4000D4B4, 32, "Region Descriptor 11, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD11_WORD2", 0x4000D4B8, 32, "Region Descriptor 11, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD11_WORD3", 0x4000D4BC, 32, "Region Descriptor 11, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD12_WORD0", 0x4000D4C0, 32, "Region Descriptor 12, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD12_WORD1", 0x4000D4C4, 32, "Region Descriptor 12, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD12_WORD2", 0x4000D4C8, 32, "Region Descriptor 12, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD12_WORD3", 0x4000D4CC, 32, "Region Descriptor 12, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD13_WORD0", 0x4000D4D0, 32, "Region Descriptor 13, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD13_WORD1", 0x4000D4D4, 32, "Region Descriptor 13, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD13_WORD2", 0x4000D4D8, 32, "Region Descriptor 13, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD13_WORD3", 0x4000D4DC, 32, "Region Descriptor 13, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD14_WORD0", 0x4000D4E0, 32, "Region Descriptor 14, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD14_WORD1", 0x4000D4E4, 32, "Region Descriptor 14, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD14_WORD2", 0x4000D4E8, 32, "Region Descriptor 14, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD14_WORD3", 0x4000D4EC, 32, "Region Descriptor 14, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGD15_WORD0", 0x4000D4F0, 32, "Region Descriptor 15, Word 0", [
                Field("SRTADDR", 5, 27, "Start Address", [
                ]),
            ]),
            Register("RGD15_WORD1", 0x4000D4F4, 32, "Region Descriptor 15, Word 1", [
                Field("ENDADDR", 5, 27, "End Address", [
                ]),
            ]),
            Register("RGD15_WORD2", 0x4000D4F8, 32, "Region Descriptor 15, Word 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGD15_WORD3", 0x4000D4FC, 32, "Region Descriptor 15, Word 3", [
                Field("PID", 24, 8, "Process Identifier", [
                ]),
                Field("PIDMASK", 16, 8, "Process Identifier Mask", [
                ]),
                Field("VLD", 0, 1, "Valid", [
                    EnumVal("VLD_0", "0", "Region descriptor is invalid"),
                    EnumVal("VLD_1", "0x1", "Region descriptor is valid"),
                ]),
            ]),
            Register("RGDAAC0", 0x4000D800, 32, "Region Descriptor Alternate Access Control 0", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC1", 0x4000D804, 32, "Region Descriptor Alternate Access Control 1", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC2", 0x4000D808, 32, "Region Descriptor Alternate Access Control 2", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC3", 0x4000D80C, 32, "Region Descriptor Alternate Access Control 3", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC4", 0x4000D810, 32, "Region Descriptor Alternate Access Control 4", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC5", 0x4000D814, 32, "Region Descriptor Alternate Access Control 5", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC6", 0x4000D818, 32, "Region Descriptor Alternate Access Control 6", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC7", 0x4000D81C, 32, "Region Descriptor Alternate Access Control 7", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC8", 0x4000D820, 32, "Region Descriptor Alternate Access Control 8", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC9", 0x4000D824, 32, "Region Descriptor Alternate Access Control 9", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC10", 0x4000D828, 32, "Region Descriptor Alternate Access Control 10", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC11", 0x4000D82C, 32, "Region Descriptor Alternate Access Control 11", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC12", 0x4000D830, 32, "Region Descriptor Alternate Access Control 12", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC13", 0x4000D834, 32, "Region Descriptor Alternate Access Control 13", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC14", 0x4000D838, 32, "Region Descriptor Alternate Access Control 14", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
            Register("RGDAAC15", 0x4000D83C, 32, "Region Descriptor Alternate Access Control 15", [
                Field("M7RE", 31, 1, "Bus Master 7 Read Enable", [
                    EnumVal("M7RE_0", "0", "Bus master 7 reads terminate with an access error and the read is not performed"),
                    EnumVal("M7RE_1", "0x1", "Bus master 7 reads allowed"),
                ]),
                Field("M7WE", 30, 1, "Bus Master 7 Write Enable", [
                    EnumVal("M7WE_0", "0", "Bus master 7 writes terminate with an access error and the write is not performed"),
                    EnumVal("M7WE_1", "0x1", "Bus master 7 writes allowed"),
                ]),
                Field("M6RE", 29, 1, "Bus Master 6 Read Enable", [
                    EnumVal("M6RE_0", "0", "Bus master 6 reads terminate with an access error and the read is not performed"),
                    EnumVal("M6RE_1", "0x1", "Bus master 6 reads allowed"),
                ]),
                Field("M6WE", 28, 1, "Bus Master 6 Write Enable", [
                    EnumVal("M6WE_0", "0", "Bus master 6 writes terminate with an access error and the write is not performed"),
                    EnumVal("M6WE_1", "0x1", "Bus master 6 writes allowed"),
                ]),
                Field("M5RE", 27, 1, "Bus Master 5 Read Enable", [
                    EnumVal("M5RE_0", "0", "Bus master 5 reads terminate with an access error and the read is not performed"),
                    EnumVal("M5RE_1", "0x1", "Bus master 5 reads allowed"),
                ]),
                Field("M5WE", 26, 1, "Bus Master 5 Write Enable", [
                    EnumVal("M5WE_0", "0", "Bus master 5 writes terminate with an access error and the write is not performed"),
                    EnumVal("M5WE_1", "0x1", "Bus master 5 writes allowed"),
                ]),
                Field("M4RE", 25, 1, "Bus Master 4 Read Enable", [
                    EnumVal("M4RE_0", "0", "Bus master 4 reads terminate with an access error and the read is not performed"),
                    EnumVal("M4RE_1", "0x1", "Bus master 4 reads allowed"),
                ]),
                Field("M4WE", 24, 1, "Bus Master 4 Write Enable", [
                    EnumVal("M4WE_0", "0", "Bus master 4 writes terminate with an access error and the write is not performed"),
                    EnumVal("M4WE_1", "0x1", "Bus master 4 writes allowed"),
                ]),
                Field("M3SM", 21, 2, "Bus Master 3 Supervisor Mode Access Control", [
                    EnumVal("M3SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M3SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M3SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M3SM_3", "0x3", "Same as User mode defined in M3UM"),
                ]),
                Field("M3UM", 18, 3, "Bus Master 3 User Mode Access Control", [
                ]),
                Field("M2SM", 15, 2, "Bus Master 2 Supervisor Mode Access Control", [
                    EnumVal("M2SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M2SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M2SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M2SM_3", "0x3", "Same as User mode defined in M2UM"),
                ]),
                Field("M2UM", 12, 3, "Bus Master 2 User Mode Access Control", [
                ]),
                Field("M1PE", 11, 1, "Bus Master 1 Process Identifier Enable", [
                    EnumVal("M1PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M1PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M1SM", 9, 2, "Bus Master 1 Supervisor Mode Access Control", [
                    EnumVal("M1SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M1SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M1SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M1SM_3", "0x3", "Same as User mode defined in M1UM"),
                ]),
                Field("M1UM", 6, 3, "Bus Master 1 User Mode Access Control", [
                ]),
                Field("M0PE", 5, 1, "Bus Master 0 Process Identifier Enable", [
                    EnumVal("M0PE_0", "0", "Do not include the process identifier in the evaluation"),
                    EnumVal("M0PE_1", "0x1", "Include the process identifier and mask (RGDn.RGDAAC) in the region hit evaluation"),
                ]),
                Field("M0SM", 3, 2, "Bus Master 0 Supervisor Mode Access Control", [
                    EnumVal("M0SM_0", "0", "r/w/x; read, write and execute allowed"),
                    EnumVal("M0SM_1", "0x1", "r/x; read and execute allowed, but no write"),
                    EnumVal("M0SM_2", "0x2", "r/w; read and write allowed, but no execute"),
                    EnumVal("M0SM_3", "0x3", "Same as User mode defined in M0UM"),
                ]),
                Field("M0UM", 0, 3, "Bus Master 0 User Mode Access Control", [
                ]),
            ]),
        ])

class Module_MSCM(Peripheral):
    def __init__(self):
        super().__init__("MSCM", 0x40001000, 0x40C, [
            Register("CPxTYPE", 0x40001000, 32, "Processor X Type Register", [
                Field("PERSONALITY", 8, 24, "Processor x Personality", [
                ]),
                Field("RYPZ", 0, 8, "Processor x Revision", [
                ]),
            ]),
            Register("CPxNUM", 0x40001004, 32, "Processor X Number Register", [
                Field("CPN", 0, 1, "Processor x Number", [
                ]),
            ]),
            Register("CPxMASTER", 0x40001008, 32, "Processor X Master Register", [
                Field("PPMN", 0, 6, "Processor x Physical Master Number", [
                ]),
            ]),
            Register("CPxCOUNT", 0x4000100C, 32, "Processor X Count Register", [
                Field("PCNT", 0, 2, "Processor Count", [
                ]),
            ]),
            Register("CPxCFG0", 0x40001010, 32, "Processor X Configuration Register 0", [
                Field("ICSZ", 24, 8, "Level 1 Instruction Cache Size", [
                ]),
                Field("ICWY", 16, 8, "Level 1 Instruction Cache Ways", [
                ]),
                Field("DCSZ", 8, 8, "Level 1 Data Cache Size", [
                ]),
                Field("DCWY", 0, 8, "Level 1 Data Cache Ways", [
                ]),
            ]),
            Register("CPxCFG1", 0x40001014, 32, "Processor X Configuration Register 1", [
                Field("L2SZ", 24, 8, "Level 2 Instruction Cache Size", [
                ]),
                Field("L2WY", 16, 8, "Level 2 Instruction Cache Ways", [
                ]),
            ]),
            Register("CPxCFG2", 0x40001018, 32, "Processor X Configuration Register 2", [
                Field("TMLSZ", 24, 8, "Tightly-coupled Memory Lower Size", [
                ]),
                Field("TMUSZ", 8, 8, "Tightly-coupled Memory Upper Size", [
                ]),
            ]),
            Register("CPxCFG3", 0x4000101C, 32, "Processor X Configuration Register 3", [
                Field("SBP", 8, 2, "System Bus Ports", [
                ]),
                Field("BB", 6, 1, "Bit Banding", [
                    EnumVal("BB_0", "0", "Bit Banding is not supported."),
                    EnumVal("BB_1", "0x1", "Bit Banding is supported."),
                ]),
                Field("CMP", 5, 1, "Core Memory Protection unit", [
                    EnumVal("CMP_0", "0", "Core Memory Protection is not included."),
                    EnumVal("CMP_1", "0x1", "Core Memory Protection is included."),
                ]),
                Field("TZ", 4, 1, "Trust Zone", [
                    EnumVal("TZ_0", "0", "Trust Zone support is not included."),
                    EnumVal("TZ_1", "0x1", "Trust Zone support is included."),
                ]),
                Field("MMU", 3, 1, "Memory Management Unit", [
                    EnumVal("MMU_0", "0", "MMU support is not included."),
                    EnumVal("MMU_1", "0x1", "MMU support is included."),
                ]),
                Field("JAZ", 2, 1, "Jazelle support", [
                    EnumVal("JAZ_0", "0", "Jazelle support is not included."),
                    EnumVal("JAZ_1", "0x1", "Jazelle support is included."),
                ]),
                Field("SIMD", 1, 1, "SIMD/NEON instruction support", [
                    EnumVal("SIMD_0", "0", "SIMD/NEON support is not included."),
                    EnumVal("SIMD_1", "0x1", "SIMD/NEON support is included."),
                ]),
                Field("FPU", 0, 1, "Floating Point Unit", [
                    EnumVal("FPU_0", "0", "FPU support is not included."),
                    EnumVal("FPU_1", "0x1", "FPU support is included."),
                ]),
            ]),
            Register("CP0TYPE", 0x40001020, 32, "Processor 0 Type Register", [
                Field("PERSONALITY", 8, 24, "Processor 0 Personality", [
                ]),
                Field("RYPZ", 0, 8, "Processor 0 Revision", [
                ]),
            ]),
            Register("CP0NUM", 0x40001024, 32, "Processor 0 Number Register", [
                Field("CPN", 0, 1, "Processor 0 Number", [
                ]),
            ]),
            Register("CP0MASTER", 0x40001028, 32, "Processor 0 Master Register", [
                Field("PPMN", 0, 6, "Processor 0 Physical Master Number", [
                ]),
            ]),
            Register("CP0COUNT", 0x4000102C, 32, "Processor 0 Count Register", [
                Field("PCNT", 0, 2, "Processor Count", [
                ]),
            ]),
            Register("CP0CFG0", 0x40001030, 32, "Processor 0 Configuration Register 0", [
                Field("ICSZ", 24, 8, "Level 1 Instruction Cache Size", [
                ]),
                Field("ICWY", 16, 8, "Level 1 Instruction Cache Ways", [
                ]),
                Field("DCSZ", 8, 8, "Level 1 Data Cache Size", [
                ]),
                Field("DCWY", 0, 8, "Level 1 Data Cache Ways", [
                ]),
            ]),
            Register("CP0CFG1", 0x40001034, 32, "Processor 0 Configuration Register 1", [
                Field("L2SZ", 24, 8, "Level 2 Instruction Cache Size", [
                ]),
                Field("L2WY", 16, 8, "Level 2 Instruction Cache Ways", [
                ]),
            ]),
            Register("CP0CFG2", 0x40001038, 32, "Processor 0 Configuration Register 2", [
                Field("TMLSZ", 24, 8, "Tightly-coupled Memory Lower Size", [
                ]),
                Field("TMUSZ", 8, 8, "Tightly-coupled Memory Upper Size", [
                ]),
            ]),
            Register("CP0CFG3", 0x4000103C, 32, "Processor 0 Configuration Register 3", [
                Field("SBP", 8, 2, "System Bus Ports", [
                ]),
                Field("BB", 6, 1, "Bit Banding", [
                    EnumVal("BB_0", "0", "Bit Banding is not supported."),
                    EnumVal("BB_1", "0x1", "Bit Banding is supported."),
                ]),
                Field("CMP", 5, 1, "Core Memory Protection unit", [
                    EnumVal("CMP_0", "0", "Core Memory Protection is not included."),
                    EnumVal("CMP_1", "0x1", "Core Memory Protection is included."),
                ]),
                Field("TZ", 4, 1, "Trust Zone", [
                    EnumVal("TZ_0", "0", "Trust Zone support is not included."),
                    EnumVal("TZ_1", "0x1", "Trust Zone support is included."),
                ]),
                Field("MMU", 3, 1, "Memory Management Unit", [
                    EnumVal("MMU_0", "0", "MMU support is not included."),
                    EnumVal("MMU_1", "0x1", "MMU support is included."),
                ]),
                Field("JAZ", 2, 1, "Jazelle support", [
                    EnumVal("JAZ_0", "0", "Jazelle support is not included."),
                    EnumVal("JAZ_1", "0x1", "Jazelle support is included."),
                ]),
                Field("SIMD", 1, 1, "SIMD/NEON instruction support", [
                    EnumVal("SIMD_0", "0", "SIMD/NEON support is not included."),
                    EnumVal("SIMD_1", "0x1", "SIMD/NEON support is included."),
                ]),
                Field("FPU", 0, 1, "Floating Point Unit", [
                    EnumVal("FPU_0", "0", "FPU support is not included."),
                    EnumVal("FPU_1", "0x1", "FPU support is included."),
                ]),
            ]),
            Register("OCMDR0", 0x40001400, 32, "On-Chip Memory Descriptor Register", [
                Field("V", 31, 1, "V", [
                    EnumVal("V_0", "0", "OCMEMn is not present."),
                    EnumVal("V_1", "0x1", "OCMEMn is present."),
                ]),
                Field("OCMSZH", 28, 1, "OCMSZH", [
                    EnumVal("OCMSZH_0", "0", "OCMEMn is a power-of-2 capacity."),
                    EnumVal("OCMSZH_1", "0x1", "OCMEMn is not a power-of-2, with a capacity is 0.75 * OCMSZ."),
                ]),
                Field("OCMSZ", 24, 4, "OCMSZ", [
                    EnumVal("OCMSZ_0", "0", "no OCMEMn"),
                    EnumVal("OCMSZ_1", "0x1", "1KB OCMEMn"),
                    EnumVal("OCMSZ_2", "0x2", "2KB OCMEMn"),
                    EnumVal("OCMSZ_3", "0x3", "4KB OCMEMn"),
                    EnumVal("OCMSZ_4", "0x4", "8KB OCMEMn"),
                    EnumVal("OCMSZ_5", "0x5", "16KB OCMEMn"),
                    EnumVal("OCMSZ_6", "0x6", "32KB OCMEMn"),
                    EnumVal("OCMSZ_7", "0x7", "64KB OCMEMn"),
                    EnumVal("OCMSZ_8", "0x8", "128KB OCMEMn"),
                    EnumVal("OCMSZ_9", "0x9", "256KB OCMEMn"),
                    EnumVal("OCMSZ_10", "0xA", "512KB OCMEMn"),
                    EnumVal("OCMSZ_11", "0xB", "1MB OCMEMn"),
                    EnumVal("OCMSZ_12", "0xC", "2MB OCMEMn"),
                    EnumVal("OCMSZ_13", "0xD", "4MB OCMEMn"),
                    EnumVal("OCMSZ_14", "0xE", "8MB OCMEMn"),
                    EnumVal("OCMSZ_15", "0xF", "16MB OCMEMn"),
                ]),
                Field("OCMW", 17, 3, "OCMW", [
                    EnumVal("OCMW_2", "0x2", "OCMEMn 32-bits wide"),
                    EnumVal("OCMW_3", "0x3", "OCMEMn 64-bits wide"),
                    EnumVal("OCMW_4", "0x4", "OCMEMn 128-bits wide"),
                    EnumVal("OCMW_5", "0x5", "OCMEMn 256-bits wide"),
                ]),
                Field("RO", 16, 1, "RO", [
                    EnumVal("RO_0", "0", "Writes to the OCMDRn[11:0] are allowed"),
                    EnumVal("RO_1", "0x1", "Writes to the OCMDRn[11:0] are ignored"),
                ]),
                Field("OCMT", 13, 3, "OCMT", [
                    EnumVal("OCMT_4", "0x4", "OCMEMn is a Program Flash."),
                    EnumVal("OCMT_5", "0x5", "OCMEMn is a Data Flash."),
                    EnumVal("OCMT_6", "0x6", "OCMEMn is an EEE."),
                ]),
                Field("OCMPU", 12, 1, "OCMPU", [
                ]),
                Field("OCM1", 4, 2, "OCMEM Control Field 1", [
                ]),
            ]),
            Register("OCMDR1", 0x40001404, 32, "On-Chip Memory Descriptor Register", [
                Field("V", 31, 1, "V", [
                    EnumVal("V_0", "0", "OCMEMn is not present."),
                    EnumVal("V_1", "0x1", "OCMEMn is present."),
                ]),
                Field("OCMSZH", 28, 1, "OCMSZH", [
                    EnumVal("OCMSZH_0", "0", "OCMEMn is a power-of-2 capacity."),
                    EnumVal("OCMSZH_1", "0x1", "OCMEMn is not a power-of-2, with a capacity is 0.75 * OCMSZ."),
                ]),
                Field("OCMSZ", 24, 4, "OCMSZ", [
                    EnumVal("OCMSZ_0", "0", "no OCMEMn"),
                    EnumVal("OCMSZ_1", "0x1", "1KB OCMEMn"),
                    EnumVal("OCMSZ_2", "0x2", "2KB OCMEMn"),
                    EnumVal("OCMSZ_3", "0x3", "4KB OCMEMn"),
                    EnumVal("OCMSZ_4", "0x4", "8KB OCMEMn"),
                    EnumVal("OCMSZ_5", "0x5", "16KB OCMEMn"),
                    EnumVal("OCMSZ_6", "0x6", "32KB OCMEMn"),
                    EnumVal("OCMSZ_7", "0x7", "64KB OCMEMn"),
                    EnumVal("OCMSZ_8", "0x8", "128KB OCMEMn"),
                    EnumVal("OCMSZ_9", "0x9", "256KB OCMEMn"),
                    EnumVal("OCMSZ_10", "0xA", "512KB OCMEMn"),
                    EnumVal("OCMSZ_11", "0xB", "1MB OCMEMn"),
                    EnumVal("OCMSZ_12", "0xC", "2MB OCMEMn"),
                    EnumVal("OCMSZ_13", "0xD", "4MB OCMEMn"),
                    EnumVal("OCMSZ_14", "0xE", "8MB OCMEMn"),
                    EnumVal("OCMSZ_15", "0xF", "16MB OCMEMn"),
                ]),
                Field("OCMW", 17, 3, "OCMW", [
                    EnumVal("OCMW_2", "0x2", "OCMEMn 32-bits wide"),
                    EnumVal("OCMW_3", "0x3", "OCMEMn 64-bits wide"),
                    EnumVal("OCMW_4", "0x4", "OCMEMn 128-bits wide"),
                    EnumVal("OCMW_5", "0x5", "OCMEMn 256-bits wide"),
                ]),
                Field("RO", 16, 1, "RO", [
                    EnumVal("RO_0", "0", "Writes to the OCMDRn[11:0] are allowed"),
                    EnumVal("RO_1", "0x1", "Writes to the OCMDRn[11:0] are ignored"),
                ]),
                Field("OCMT", 13, 3, "OCMT", [
                    EnumVal("OCMT_4", "0x4", "OCMEMn is a Program Flash."),
                    EnumVal("OCMT_5", "0x5", "OCMEMn is a Data Flash."),
                    EnumVal("OCMT_6", "0x6", "OCMEMn is an EEE."),
                ]),
                Field("OCMPU", 12, 1, "OCMPU", [
                ]),
                Field("OCM1", 4, 2, "OCMEM Control Field 1", [
                ]),
            ]),
            Register("OCMDR2", 0x40001408, 32, "On-Chip Memory Descriptor Register", [
                Field("V", 31, 1, "V", [
                    EnumVal("V_0", "0", "OCMEMn is not present."),
                    EnumVal("V_1", "0x1", "OCMEMn is present."),
                ]),
                Field("OCMSZH", 28, 1, "OCMSZH", [
                    EnumVal("OCMSZH_0", "0", "OCMEMn is a power-of-2 capacity."),
                    EnumVal("OCMSZH_1", "0x1", "OCMEMn is not a power-of-2, with a capacity is 0.75 * OCMSZ."),
                ]),
                Field("OCMSZ", 24, 4, "OCMSZ", [
                    EnumVal("OCMSZ_0", "0", "no OCMEMn"),
                    EnumVal("OCMSZ_1", "0x1", "1KB OCMEMn"),
                    EnumVal("OCMSZ_2", "0x2", "2KB OCMEMn"),
                    EnumVal("OCMSZ_3", "0x3", "4KB OCMEMn"),
                    EnumVal("OCMSZ_4", "0x4", "8KB OCMEMn"),
                    EnumVal("OCMSZ_5", "0x5", "16KB OCMEMn"),
                    EnumVal("OCMSZ_6", "0x6", "32KB OCMEMn"),
                    EnumVal("OCMSZ_7", "0x7", "64KB OCMEMn"),
                    EnumVal("OCMSZ_8", "0x8", "128KB OCMEMn"),
                    EnumVal("OCMSZ_9", "0x9", "256KB OCMEMn"),
                    EnumVal("OCMSZ_10", "0xA", "512KB OCMEMn"),
                    EnumVal("OCMSZ_11", "0xB", "1MB OCMEMn"),
                    EnumVal("OCMSZ_12", "0xC", "2MB OCMEMn"),
                    EnumVal("OCMSZ_13", "0xD", "4MB OCMEMn"),
                    EnumVal("OCMSZ_14", "0xE", "8MB OCMEMn"),
                    EnumVal("OCMSZ_15", "0xF", "16MB OCMEMn"),
                ]),
                Field("OCMW", 17, 3, "OCMW", [
                    EnumVal("OCMW_2", "0x2", "OCMEMn 32-bits wide"),
                    EnumVal("OCMW_3", "0x3", "OCMEMn 64-bits wide"),
                    EnumVal("OCMW_4", "0x4", "OCMEMn 128-bits wide"),
                    EnumVal("OCMW_5", "0x5", "OCMEMn 256-bits wide"),
                ]),
                Field("RO", 16, 1, "RO", [
                    EnumVal("RO_0", "0", "Writes to the OCMDRn[11:0] are allowed"),
                    EnumVal("RO_1", "0x1", "Writes to the OCMDRn[11:0] are ignored"),
                ]),
                Field("OCMT", 13, 3, "OCMT", [
                    EnumVal("OCMT_4", "0x4", "OCMEMn is a Program Flash."),
                    EnumVal("OCMT_5", "0x5", "OCMEMn is a Data Flash."),
                    EnumVal("OCMT_6", "0x6", "OCMEMn is an EEE."),
                ]),
                Field("OCMPU", 12, 1, "OCMPU", [
                ]),
            ]),
        ])

class Module_PCC(Peripheral):
    def __init__(self):
        super().__init__("PCC", 0x40065000, 0x1E8, [
            Register("PCC_FTFC", 0x40065080, 32, "PCC FTFC Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_DMAMUX", 0x40065084, 32, "PCC DMAMUX Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_FlexCAN0", 0x40065090, 32, "PCC FlexCAN0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_FlexCAN1", 0x40065094, 32, "PCC FlexCAN1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_FTM3", 0x40065098, 32, "PCC FTM3 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_ADC1", 0x4006509C, 32, "PCC ADC1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FlexCAN2", 0x400650AC, 32, "PCC FlexCAN2 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_LPSPI0", 0x400650B0, 32, "PCC LPSPI0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_LPSPI1", 0x400650B4, 32, "PCC LPSPI1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_LPSPI2", 0x400650B8, 32, "PCC LPSPI2 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_PDB1", 0x400650C4, 32, "PCC PDB1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_CRC", 0x400650C8, 32, "PCC CRC Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_PDB0", 0x400650D8, 32, "PCC PDB0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_LPIT", 0x400650DC, 32, "PCC LPIT Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FTM0", 0x400650E0, 32, "PCC FTM0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FTM1", 0x400650E4, 32, "PCC FTM1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FTM2", 0x400650E8, 32, "PCC FTM2 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_ADC0", 0x400650EC, 32, "PCC ADC0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_RTC", 0x400650F4, 32, "PCC RTC Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_LPTMR0", 0x40065100, 32, "PCC LPTMR0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
                Field("FRAC", 3, 1, "Peripheral Clock Divider Fraction", [
                    EnumVal("FRAC_0", "0", "Fractional value is 0."),
                    EnumVal("FRAC_1", "0x1", "Fractional value is 1."),
                ]),
                Field("PCD", 0, 3, "Peripheral Clock Divider Select", [
                    EnumVal("DIV_1", "0", "Divide by 1."),
                    EnumVal("DIV_2", "0x1", "Divide by 2."),
                    EnumVal("DIV_3", "0x2", "Divide by 3."),
                    EnumVal("DIV_4", "0x3", "Divide by 4."),
                    EnumVal("DIV_5", "0x4", "Divide by 5."),
                    EnumVal("DIV_6", "0x5", "Divide by 6."),
                    EnumVal("DIV_7", "0x6", "Divide by 7."),
                    EnumVal("DIV_8", "0x7", "Divide by 8."),
                ]),
            ]),
            Register("PCC_PORTA", 0x40065124, 32, "PCC PORTA Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_PORTB", 0x40065128, 32, "PCC PORTB Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_PORTC", 0x4006512C, 32, "PCC PORTC Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_PORTD", 0x40065130, 32, "PCC PORTD Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_PORTE", 0x40065134, 32, "PCC PORTE Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_SAI0", 0x40065150, 32, "PCC SAI0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_SAI1", 0x40065154, 32, "PCC SAI1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_FlexIO", 0x40065168, 32, "PCC FlexIO Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_EWM", 0x40065184, 32, "PCC EWM Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_LPI2C0", 0x40065198, 32, "PCC LPI2C0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_LPI2C1", 0x4006519C, 32, "PCC LPI2C1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_LPUART0", 0x400651A8, 32, "PCC LPUART0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_LPUART1", 0x400651AC, 32, "PCC LPUART1 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_LPUART2", 0x400651B0, 32, "PCC LPUART2 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FTM4", 0x400651B8, 32, "PCC FTM4 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FTM5", 0x400651BC, 32, "PCC FTM5 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FTM6", 0x400651C0, 32, "PCC FTM6 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_FTM7", 0x400651C4, 32, "PCC FTM7 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_EXT", "0", "Clock is off. An external clock can be enabled for this peripheral."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
            ]),
            Register("PCC_CMP0", 0x400651CC, 32, "PCC CMP0 Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_QSPI", 0x400651D8, 32, "PCC QSPI Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
            ]),
            Register("PCC_ENET", 0x400651E4, 32, "PCC ENET Register", [
                Field("PR", 31, 1, "Present", [
                    EnumVal("NOT_PRESENT", "0", "Peripheral is not present."),
                    EnumVal("PRESENT", "0x1", "Peripheral is present."),
                ]),
                Field("CGC", 30, 1, "Clock Gate Control", [
                    EnumVal("DISABLED", "0", "Clock disabled. The current clock selection and divider options are not locked and can be modified."),
                    EnumVal("ENABLED", "0x1", "Clock enabled. The current clock selection and divider options are locked and cannot be modified."),
                ]),
                Field("PCS", 24, 3, "Peripheral Clock Source Select", [
                    EnumVal("CLOCK_OFF", "0", "Clock is off."),
                    EnumVal("CLOCK_OPT1", "0x1", "Clock option 1"),
                    EnumVal("CLOCK_OPT2", "0x2", "Clock option 2"),
                    EnumVal("CLOCK_OPT3", "0x3", "Clock option 3"),
                    EnumVal("CLOCK_OPT4", "0x4", "Clock option 4"),
                    EnumVal("CLOCK_OPT5", "0x5", "Clock option 5"),
                    EnumVal("CLOCK_OPT6", "0x6", "Clock option 6"),
                    EnumVal("CLOCK_OPT7", "0x7", "Clock option 7"),
                ]),
                Field("FRAC", 3, 1, "Peripheral Clock Divider Fraction", [
                    EnumVal("FRAC_0", "0", "Fractional value is 0."),
                    EnumVal("FRAC_1", "0x1", "Fractional value is 1."),
                ]),
                Field("PCD", 0, 3, "Peripheral Clock Divider Select", [
                    EnumVal("DIV_1", "0", "Divide by 1."),
                    EnumVal("DIV_2", "0x1", "Divide by 2."),
                    EnumVal("DIV_3", "0x2", "Divide by 3."),
                    EnumVal("DIV_4", "0x3", "Divide by 4."),
                    EnumVal("DIV_5", "0x4", "Divide by 5."),
                    EnumVal("DIV_6", "0x5", "Divide by 6."),
                    EnumVal("DIV_7", "0x6", "Divide by 7."),
                    EnumVal("DIV_8", "0x7", "Divide by 8."),
                ]),
            ]),
        ])

class Module_PDB0(Peripheral):
    def __init__(self):
        super().__init__("PDB0", 0x40036000, 0x198, [
            Register("SC", 0x40036000, 32, "Status and Control register", [
                Field("LDMOD", 18, 2, "Load Mode Select", [
                    EnumVal("LDMOD_0", "0", "The internal registers are loaded with the values from their buffers, immediately after 1 is written to LDOK."),
                    EnumVal("LDMOD_1", "0x1", "The internal registers are loaded with the values from their buffers when the PDB counter (CNT) = MOD + 1 CNT delay elapsed, after 1 is written to LDOK."),
                    EnumVal("LDMOD_2", "0x2", "The internal registers are loaded with the values from their buffers when a trigger input event is detected, after 1 is written to LDOK."),
                    EnumVal("LDMOD_3", "0x3", "The internal registers are loaded with the values from their buffers when either the PDB counter (CNT) = MOD + 1 CNT delay elapsed, or a trigger input event is detected, after 1 is written to LDOK."),
                ]),
                Field("PDBEIE", 17, 1, "PDB Sequence Error Interrupt Enable", [
                    EnumVal("PDBEIE_0", "0", "PDB sequence error interrupt disabled."),
                    EnumVal("PDBEIE_1", "0x1", "PDB sequence error interrupt enabled."),
                ]),
                Field("SWTRIG", 16, 1, "Software Trigger", [
                ]),
                Field("DMAEN", 15, 1, "DMA Enable", [
                    EnumVal("DMAEN_0", "0", "DMA disabled."),
                    EnumVal("DMAEN_1", "0x1", "DMA enabled."),
                ]),
                Field("PRESCALER", 12, 3, "Prescaler Divider Select", [
                    EnumVal("PRESCALER_0", "0", "Counting uses the peripheral clock divided by MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_1", "0x1", "Counting uses the peripheral clock divided by 2 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_2", "0x2", "Counting uses the peripheral clock divided by 4 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_3", "0x3", "Counting uses the peripheral clock divided by 8 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_4", "0x4", "Counting uses the peripheral clock divided by 16 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_5", "0x5", "Counting uses the peripheral clock divided by 32 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_6", "0x6", "Counting uses the peripheral clock divided by 64 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_7", "0x7", "Counting uses the peripheral clock divided by 128 x MULT (the multiplication factor)."),
                ]),
                Field("TRGSEL", 8, 4, "Trigger Input Source Select", [
                    EnumVal("TRGSEL_0", "0", "Trigger-In 0 is selected."),
                    EnumVal("TRGSEL_1", "0x1", "Trigger-In 1 is selected."),
                    EnumVal("TRGSEL_2", "0x2", "Trigger-In 2 is selected."),
                    EnumVal("TRGSEL_3", "0x3", "Trigger-In 3 is selected."),
                    EnumVal("TRGSEL_4", "0x4", "Trigger-In 4 is selected."),
                    EnumVal("TRGSEL_5", "0x5", "Trigger-In 5 is selected."),
                    EnumVal("TRGSEL_6", "0x6", "Trigger-In 6 is selected."),
                    EnumVal("TRGSEL_7", "0x7", "Trigger-In 7 is selected."),
                    EnumVal("TRGSEL_8", "0x8", "Trigger-In 8 is selected."),
                    EnumVal("TRGSEL_9", "0x9", "Trigger-In 9 is selected."),
                    EnumVal("TRGSEL_10", "0xA", "Trigger-In 10 is selected."),
                    EnumVal("TRGSEL_11", "0xB", "Trigger-In 11 is selected."),
                    EnumVal("TRGSEL_12", "0xC", "Trigger-In 12 is selected."),
                    EnumVal("TRGSEL_13", "0xD", "Trigger-In 13 is selected."),
                    EnumVal("TRGSEL_14", "0xE", "Trigger-In 14 is selected."),
                    EnumVal("TRGSEL_15", "0xF", "Software trigger is selected."),
                ]),
                Field("PDBEN", 7, 1, "PDB Enable", [
                    EnumVal("PDBEN_0", "0", "PDB disabled. Counter is off."),
                    EnumVal("PDBEN_1", "0x1", "PDB enabled."),
                ]),
                Field("PDBIF", 6, 1, "PDB Interrupt Flag", [
                ]),
                Field("PDBIE", 5, 1, "PDB Interrupt Enable", [
                    EnumVal("PDBIE_0", "0", "PDB interrupt disabled."),
                    EnumVal("PDBIE_1", "0x1", "PDB interrupt enabled."),
                ]),
                Field("MULT", 2, 2, "Multiplication Factor Select for Prescaler", [
                    EnumVal("MULT_0", "0", "Multiplication factor is 1."),
                    EnumVal("MULT_1", "0x1", "Multiplication factor is 10."),
                    EnumVal("MULT_2", "0x2", "Multiplication factor is 20."),
                    EnumVal("MULT_3", "0x3", "Multiplication factor is 40."),
                ]),
                Field("CONT", 1, 1, "Continuous Mode Enable", [
                    EnumVal("CONT_0", "0", "PDB operation in One-Shot mode"),
                    EnumVal("CONT_1", "0x1", "PDB operation in Continuous mode"),
                ]),
                Field("LDOK", 0, 1, "Load OK", [
                ]),
            ]),
            Register("MOD", 0x40036004, 32, "Modulus register", [
                Field("MOD", 0, 16, "PDB Modulus", [
                ]),
            ]),
            Register("CNT", 0x40036008, 32, "Counter register", [
                Field("CNT", 0, 16, "PDB Counter", [
                ]),
            ]),
            Register("IDLY", 0x4003600C, 32, "Interrupt Delay register", [
                Field("IDLY", 0, 16, "PDB Interrupt Delay", [
                ]),
            ]),
            Register("CH0C1", 0x40036010, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH1C1", 0x40036038, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH2C1", 0x40036060, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH3C1", 0x40036088, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH0S", 0x40036014, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH1S", 0x4003603C, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH2S", 0x40036064, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH3S", 0x4003608C, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH0DLY0", 0x40036018, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY0", 0x40036040, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY0", 0x40036068, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY0", 0x40036090, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY1", 0x4003601C, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY1", 0x40036044, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY1", 0x4003606C, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY1", 0x40036094, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY2", 0x40036020, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY2", 0x40036048, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY2", 0x40036070, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY2", 0x40036098, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY3", 0x40036024, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY3", 0x4003604C, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY3", 0x40036074, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY3", 0x4003609C, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY4", 0x40036028, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY4", 0x40036050, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY4", 0x40036078, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY4", 0x400360A0, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY5", 0x4003602C, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY5", 0x40036054, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY5", 0x4003607C, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY5", 0x400360A4, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY6", 0x40036030, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY6", 0x40036058, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY6", 0x40036080, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY6", 0x400360A8, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY7", 0x40036034, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY7", 0x4003605C, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY7", 0x40036084, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY7", 0x400360AC, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("POEN", 0x40036190, 32, "Pulse-Out n Enable register", [
                Field("POEN", 0, 8, "PDB Pulse-Out Enable", [
                    EnumVal("POEN_0", "0", "PDB Pulse-Out disabled"),
                    EnumVal("POEN_1", "0x1", "PDB Pulse-Out enabled"),
                ]),
            ]),
            Register("PODLY", 0x40036194, 32, "Pulse-Out n Delay register", [
                Field("DLY1", 16, 16, "PDB Pulse-Out Delay 1", [
                ]),
                Field("DLY2", 0, 16, "PDB Pulse-Out Delay 2", [
                ]),
            ]),
        ])

class Module_PDB1(Peripheral):
    def __init__(self):
        super().__init__("PDB1", 0x40031000, 0x198, [
            Register("SC", 0x40031000, 32, "Status and Control register", [
                Field("LDMOD", 18, 2, "Load Mode Select", [
                    EnumVal("LDMOD_0", "0", "The internal registers are loaded with the values from their buffers, immediately after 1 is written to LDOK."),
                    EnumVal("LDMOD_1", "0x1", "The internal registers are loaded with the values from their buffers when the PDB counter (CNT) = MOD + 1 CNT delay elapsed, after 1 is written to LDOK."),
                    EnumVal("LDMOD_2", "0x2", "The internal registers are loaded with the values from their buffers when a trigger input event is detected, after 1 is written to LDOK."),
                    EnumVal("LDMOD_3", "0x3", "The internal registers are loaded with the values from their buffers when either the PDB counter (CNT) = MOD + 1 CNT delay elapsed, or a trigger input event is detected, after 1 is written to LDOK."),
                ]),
                Field("PDBEIE", 17, 1, "PDB Sequence Error Interrupt Enable", [
                    EnumVal("PDBEIE_0", "0", "PDB sequence error interrupt disabled."),
                    EnumVal("PDBEIE_1", "0x1", "PDB sequence error interrupt enabled."),
                ]),
                Field("SWTRIG", 16, 1, "Software Trigger", [
                ]),
                Field("DMAEN", 15, 1, "DMA Enable", [
                    EnumVal("DMAEN_0", "0", "DMA disabled."),
                    EnumVal("DMAEN_1", "0x1", "DMA enabled."),
                ]),
                Field("PRESCALER", 12, 3, "Prescaler Divider Select", [
                    EnumVal("PRESCALER_0", "0", "Counting uses the peripheral clock divided by MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_1", "0x1", "Counting uses the peripheral clock divided by 2 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_2", "0x2", "Counting uses the peripheral clock divided by 4 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_3", "0x3", "Counting uses the peripheral clock divided by 8 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_4", "0x4", "Counting uses the peripheral clock divided by 16 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_5", "0x5", "Counting uses the peripheral clock divided by 32 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_6", "0x6", "Counting uses the peripheral clock divided by 64 x MULT (the multiplication factor)."),
                    EnumVal("PRESCALER_7", "0x7", "Counting uses the peripheral clock divided by 128 x MULT (the multiplication factor)."),
                ]),
                Field("TRGSEL", 8, 4, "Trigger Input Source Select", [
                    EnumVal("TRGSEL_0", "0", "Trigger-In 0 is selected."),
                    EnumVal("TRGSEL_1", "0x1", "Trigger-In 1 is selected."),
                    EnumVal("TRGSEL_2", "0x2", "Trigger-In 2 is selected."),
                    EnumVal("TRGSEL_3", "0x3", "Trigger-In 3 is selected."),
                    EnumVal("TRGSEL_4", "0x4", "Trigger-In 4 is selected."),
                    EnumVal("TRGSEL_5", "0x5", "Trigger-In 5 is selected."),
                    EnumVal("TRGSEL_6", "0x6", "Trigger-In 6 is selected."),
                    EnumVal("TRGSEL_7", "0x7", "Trigger-In 7 is selected."),
                    EnumVal("TRGSEL_8", "0x8", "Trigger-In 8 is selected."),
                    EnumVal("TRGSEL_9", "0x9", "Trigger-In 9 is selected."),
                    EnumVal("TRGSEL_10", "0xA", "Trigger-In 10 is selected."),
                    EnumVal("TRGSEL_11", "0xB", "Trigger-In 11 is selected."),
                    EnumVal("TRGSEL_12", "0xC", "Trigger-In 12 is selected."),
                    EnumVal("TRGSEL_13", "0xD", "Trigger-In 13 is selected."),
                    EnumVal("TRGSEL_14", "0xE", "Trigger-In 14 is selected."),
                    EnumVal("TRGSEL_15", "0xF", "Software trigger is selected."),
                ]),
                Field("PDBEN", 7, 1, "PDB Enable", [
                    EnumVal("PDBEN_0", "0", "PDB disabled. Counter is off."),
                    EnumVal("PDBEN_1", "0x1", "PDB enabled."),
                ]),
                Field("PDBIF", 6, 1, "PDB Interrupt Flag", [
                ]),
                Field("PDBIE", 5, 1, "PDB Interrupt Enable", [
                    EnumVal("PDBIE_0", "0", "PDB interrupt disabled."),
                    EnumVal("PDBIE_1", "0x1", "PDB interrupt enabled."),
                ]),
                Field("MULT", 2, 2, "Multiplication Factor Select for Prescaler", [
                    EnumVal("MULT_0", "0", "Multiplication factor is 1."),
                    EnumVal("MULT_1", "0x1", "Multiplication factor is 10."),
                    EnumVal("MULT_2", "0x2", "Multiplication factor is 20."),
                    EnumVal("MULT_3", "0x3", "Multiplication factor is 40."),
                ]),
                Field("CONT", 1, 1, "Continuous Mode Enable", [
                    EnumVal("CONT_0", "0", "PDB operation in One-Shot mode"),
                    EnumVal("CONT_1", "0x1", "PDB operation in Continuous mode"),
                ]),
                Field("LDOK", 0, 1, "Load OK", [
                ]),
            ]),
            Register("MOD", 0x40031004, 32, "Modulus register", [
                Field("MOD", 0, 16, "PDB Modulus", [
                ]),
            ]),
            Register("CNT", 0x40031008, 32, "Counter register", [
                Field("CNT", 0, 16, "PDB Counter", [
                ]),
            ]),
            Register("IDLY", 0x4003100C, 32, "Interrupt Delay register", [
                Field("IDLY", 0, 16, "PDB Interrupt Delay", [
                ]),
            ]),
            Register("CH0C1", 0x40031010, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH1C1", 0x40031038, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH2C1", 0x40031060, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH3C1", 0x40031088, 32, "Channel n Control register 1", [
                Field("BB", 16, 8, "PDB Channel Pre-Trigger Back-to-Back Operation Enable", [
                    EnumVal("BB_0", "0", "PDB channel's corresponding pre-trigger back-to-back operation disabled."),
                    EnumVal("BB_1", "0x1", "PDB channel's corresponding pre-trigger back-to-back operation enabled."),
                ]),
                Field("TOS", 8, 8, "PDB Channel Pre-Trigger Output Select", [
                    EnumVal("TOS_0", "0", "PDB channel's corresponding pre-trigger is in bypassed mode. The pre-trigger asserts one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                    EnumVal("TOS_1", "0x1", "PDB channel's corresponding pre-trigger asserts when the counter reaches the channel delay register plus one peripheral clock cycle after a rising edge is detected on selected trigger input source or software trigger is selected and SWTRIG is written with 1."),
                ]),
                Field("EN", 0, 8, "PDB Channel Pre-Trigger Enable", [
                    EnumVal("EN_0", "0", "PDB channel's corresponding pre-trigger disabled."),
                    EnumVal("EN_1", "0x1", "PDB channel's corresponding pre-trigger enabled."),
                ]),
            ]),
            Register("CH0S", 0x40031014, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH1S", 0x4003103C, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH2S", 0x40031064, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH3S", 0x4003108C, 32, "Channel n Status register", [
                Field("CF", 16, 8, "PDB Channel Flags", [
                ]),
                Field("ERR", 0, 8, "PDB Channel Sequence Error Flags", [
                    EnumVal("ERR_0", "0", "Sequence error not detected on PDB channel's corresponding pre-trigger."),
                    EnumVal("ERR_1", "0x1", "Sequence error detected on PDB channel's corresponding pre-trigger. ADCn block can be triggered for a conversion by one pre-trigger from PDB channel n. When one conversion, which is triggered by one of the pre-triggers from PDB channel n, is in progress, new trigger from PDB channel's corresponding pre-trigger m cannot be accepted by ADCn, and ERR[m] is set. Writing 0's to clear the sequence error flags."),
                ]),
            ]),
            Register("CH0DLY0", 0x40031018, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY0", 0x40031040, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY0", 0x40031068, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY0", 0x40031090, 32, "Channel n Delay 0 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY1", 0x4003101C, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY1", 0x40031044, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY1", 0x4003106C, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY1", 0x40031094, 32, "Channel n Delay 1 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY2", 0x40031020, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY2", 0x40031048, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY2", 0x40031070, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY2", 0x40031098, 32, "Channel n Delay 2 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY3", 0x40031024, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY3", 0x4003104C, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY3", 0x40031074, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY3", 0x4003109C, 32, "Channel n Delay 3 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY4", 0x40031028, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY4", 0x40031050, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY4", 0x40031078, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY4", 0x400310A0, 32, "Channel n Delay 4 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY5", 0x4003102C, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY5", 0x40031054, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY5", 0x4003107C, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY5", 0x400310A4, 32, "Channel n Delay 5 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY6", 0x40031030, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY6", 0x40031058, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY6", 0x40031080, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY6", 0x400310A8, 32, "Channel n Delay 6 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH0DLY7", 0x40031034, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH1DLY7", 0x4003105C, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH2DLY7", 0x40031084, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("CH3DLY7", 0x400310AC, 32, "Channel n Delay 7 register", [
                Field("DLY", 0, 16, "PDB Channel Delay", [
                ]),
            ]),
            Register("POEN", 0x40031190, 32, "Pulse-Out n Enable register", [
                Field("POEN", 0, 8, "PDB Pulse-Out Enable", [
                    EnumVal("POEN_0", "0", "PDB Pulse-Out disabled"),
                    EnumVal("POEN_1", "0x1", "PDB Pulse-Out enabled"),
                ]),
            ]),
            Register("PODLY", 0x40031194, 32, "Pulse-Out n Delay register", [
                Field("DLY1", 16, 16, "PDB Pulse-Out Delay 1", [
                ]),
                Field("DLY2", 0, 16, "PDB Pulse-Out Delay 2", [
                ]),
            ]),
        ])

class Module_PMC(Peripheral):
    def __init__(self):
        super().__init__("PMC", 0x4007D000, 0x5, [
            Register("LVDSC1", 0x4007D000, 8, "Low Voltage Detect Status and Control 1 Register", [
                Field("LVDF", 7, 1, "Low Voltage Detect Flag", [
                    EnumVal("LVDF_0", "0", "Low-voltage event not detected"),
                    EnumVal("LVDF_1", "0x1", "Low-voltage event detected"),
                ]),
                Field("LVDACK", 6, 1, "Low Voltage Detect Acknowledge", [
                ]),
                Field("LVDIE", 5, 1, "Low Voltage Detect Interrupt Enable", [
                    EnumVal("LVDIE_0", "0", "Hardware interrupt disabled (use polling)"),
                    EnumVal("LVDIE_1", "0x1", "Request a hardware interrupt when LVDF = 1"),
                ]),
                Field("LVDRE", 4, 1, "Low Voltage Detect Reset Enable", [
                    EnumVal("LVDRE_0", "0", "No system resets on low voltage detect events."),
                    EnumVal("LVDRE_1", "0x1", "If the supply voltage falls below VLVD, a system reset will be generated."),
                ]),
            ]),
            Register("LVDSC2", 0x4007D001, 8, "Low Voltage Detect Status and Control 2 Register", [
                Field("LVWF", 7, 1, "Low-Voltage Warning Flag", [
                    EnumVal("LVWF_0", "0", "Low-voltage warning event not detected"),
                    EnumVal("LVWF_1", "0x1", "Low-voltage warning event detected"),
                ]),
                Field("LVWACK", 6, 1, "Low-Voltage Warning Acknowledge", [
                ]),
                Field("LVWIE", 5, 1, "Low-Voltage Warning Interrupt Enable", [
                    EnumVal("LVWIE_0", "0", "Hardware interrupt disabled (use polling)"),
                    EnumVal("LVWIE_1", "0x1", "Request a hardware interrupt when LVWF=1"),
                ]),
            ]),
            Register("REGSC", 0x4007D002, 8, "Regulator Status and Control Register", [
                Field("LPODIS", 7, 1, "LPO Disable Bit", [
                    EnumVal("LPODIS_0", "0", "Low power oscillator enabled"),
                    EnumVal("LPODIS_1", "0x1", "Low power oscillator disabled"),
                ]),
                Field("LPOSTAT", 6, 1, "LPO Status Bit", [
                    EnumVal("LPOSTAT_0", "0", "Low power oscillator in low phase"),
                    EnumVal("LPOSTAT_1", "0x1", "Low power oscillator in high phase"),
                ]),
                Field("REGFPM", 2, 1, "Regulator in Full Performance Mode Status Bit", [
                    EnumVal("REGFPM_0", "0", "Regulator is in low power mode or transition to/from"),
                    EnumVal("REGFPM_1", "0x1", "Regulator is in full performance mode"),
                ]),
                Field("CLKBIASDIS", 1, 1, "Clock Bias Disable Bit", [
                    EnumVal("CLKBIASDIS_0", "0", "No effect"),
                    EnumVal("CLKBIASDIS_1", "0x1", "In VLPS mode, the bias currents and reference voltages for the following clock modules are disabled: SIRC, FIRC, PLL. (if available on device)"),
                ]),
                Field("BIASEN", 0, 1, "Bias Enable Bit", [
                    EnumVal("BIASEN_0", "0", "Biasing disabled, core logic can run in full performance"),
                    EnumVal("BIASEN_1", "0x1", "Biasing enabled, core logic is slower and there are restrictions in allowed system clock speed (see Data Sheet for details)"),
                ]),
            ]),
            Register("LPOTRIM", 0x4007D004, 8, "Low Power Oscillator Trim Register", [
                Field("LPOTRIM", 0, 5, "LPO trimming bits", [
                ]),
            ]),
        ])

class Module_PORTA(Peripheral):
    def __init__(self):
        super().__init__("PORTA", 0x40049000, 0xCC, [
            Register("PCR0", 0x40049000, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR1", 0x40049004, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR2", 0x40049008, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR3", 0x4004900C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR4", 0x40049010, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR5", 0x40049014, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR6", 0x40049018, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR7", 0x4004901C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR8", 0x40049020, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR9", 0x40049024, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR10", 0x40049028, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR11", 0x4004902C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR12", 0x40049030, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR13", 0x40049034, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR14", 0x40049038, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR15", 0x4004903C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR16", 0x40049040, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR17", 0x40049044, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR18", 0x40049048, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR19", 0x4004904C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR20", 0x40049050, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR21", 0x40049054, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR22", 0x40049058, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR23", 0x4004905C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR24", 0x40049060, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR25", 0x40049064, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR26", 0x40049068, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR27", 0x4004906C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR28", 0x40049070, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR29", 0x40049074, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR30", 0x40049078, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR31", 0x4004907C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("GPCLR", 0x40049080, 32, "Global Pin Control Low Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GPCHR", 0x40049084, 32, "Global Pin Control High Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GICLR", 0x40049088, 32, "Global Interrupt Control Low Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("GICHR", 0x4004908C, 32, "Global Interrupt Control High Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("ISFR", 0x400490A0, 32, "Interrupt Status Flag Register", [
                Field("ISF", 0, 32, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
            ]),
            Register("DFER", 0x400490C0, 32, "Digital Filter Enable Register", [
                Field("DFE", 0, 32, "Digital Filter Enable", [
                    EnumVal("DFE_0", "0", "Digital filter is disabled on the corresponding pin and output of the digital filter is reset to zero."),
                    EnumVal("DFE_1", "0x1", "Digital filter is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
            ]),
            Register("DFCR", 0x400490C4, 32, "Digital Filter Clock Register", [
                Field("CS", 0, 1, "Clock Source", [
                    EnumVal("CS_0", "0", "Digital filters are clocked by the bus clock."),
                    EnumVal("CS_1", "0x1", "Digital filters are clocked by the LPO clock."),
                ]),
            ]),
            Register("DFWR", 0x400490C8, 32, "Digital Filter Width Register", [
                Field("FILT", 0, 5, "Filter Length", [
                ]),
            ]),
        ])

class Module_PORTB(Peripheral):
    def __init__(self):
        super().__init__("PORTB", 0x4004A000, 0xCC, [
            Register("PCR0", 0x4004A000, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR1", 0x4004A004, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR2", 0x4004A008, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR3", 0x4004A00C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR4", 0x4004A010, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR5", 0x4004A014, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR6", 0x4004A018, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR7", 0x4004A01C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR8", 0x4004A020, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR9", 0x4004A024, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR10", 0x4004A028, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR11", 0x4004A02C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR12", 0x4004A030, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR13", 0x4004A034, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR14", 0x4004A038, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR15", 0x4004A03C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR16", 0x4004A040, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR17", 0x4004A044, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR18", 0x4004A048, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR19", 0x4004A04C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR20", 0x4004A050, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR21", 0x4004A054, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR22", 0x4004A058, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR23", 0x4004A05C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR24", 0x4004A060, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR25", 0x4004A064, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR26", 0x4004A068, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR27", 0x4004A06C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR28", 0x4004A070, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR29", 0x4004A074, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR30", 0x4004A078, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR31", 0x4004A07C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("GPCLR", 0x4004A080, 32, "Global Pin Control Low Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GPCHR", 0x4004A084, 32, "Global Pin Control High Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GICLR", 0x4004A088, 32, "Global Interrupt Control Low Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("GICHR", 0x4004A08C, 32, "Global Interrupt Control High Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("ISFR", 0x4004A0A0, 32, "Interrupt Status Flag Register", [
                Field("ISF", 0, 32, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
            ]),
            Register("DFER", 0x4004A0C0, 32, "Digital Filter Enable Register", [
                Field("DFE", 0, 32, "Digital Filter Enable", [
                    EnumVal("DFE_0", "0", "Digital filter is disabled on the corresponding pin and output of the digital filter is reset to zero."),
                    EnumVal("DFE_1", "0x1", "Digital filter is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
            ]),
            Register("DFCR", 0x4004A0C4, 32, "Digital Filter Clock Register", [
                Field("CS", 0, 1, "Clock Source", [
                    EnumVal("CS_0", "0", "Digital filters are clocked by the bus clock."),
                    EnumVal("CS_1", "0x1", "Digital filters are clocked by the LPO clock."),
                ]),
            ]),
            Register("DFWR", 0x4004A0C8, 32, "Digital Filter Width Register", [
                Field("FILT", 0, 5, "Filter Length", [
                ]),
            ]),
        ])

class Module_PORTC(Peripheral):
    def __init__(self):
        super().__init__("PORTC", 0x4004B000, 0xCC, [
            Register("PCR0", 0x4004B000, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR1", 0x4004B004, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR2", 0x4004B008, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR3", 0x4004B00C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR4", 0x4004B010, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR5", 0x4004B014, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR6", 0x4004B018, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR7", 0x4004B01C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR8", 0x4004B020, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR9", 0x4004B024, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR10", 0x4004B028, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR11", 0x4004B02C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR12", 0x4004B030, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR13", 0x4004B034, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR14", 0x4004B038, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR15", 0x4004B03C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR16", 0x4004B040, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR17", 0x4004B044, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR18", 0x4004B048, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR19", 0x4004B04C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR20", 0x4004B050, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR21", 0x4004B054, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR22", 0x4004B058, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR23", 0x4004B05C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR24", 0x4004B060, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR25", 0x4004B064, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR26", 0x4004B068, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR27", 0x4004B06C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR28", 0x4004B070, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR29", 0x4004B074, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR30", 0x4004B078, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR31", 0x4004B07C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("GPCLR", 0x4004B080, 32, "Global Pin Control Low Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GPCHR", 0x4004B084, 32, "Global Pin Control High Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GICLR", 0x4004B088, 32, "Global Interrupt Control Low Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("GICHR", 0x4004B08C, 32, "Global Interrupt Control High Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("ISFR", 0x4004B0A0, 32, "Interrupt Status Flag Register", [
                Field("ISF", 0, 32, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
            ]),
            Register("DFER", 0x4004B0C0, 32, "Digital Filter Enable Register", [
                Field("DFE", 0, 32, "Digital Filter Enable", [
                    EnumVal("DFE_0", "0", "Digital filter is disabled on the corresponding pin and output of the digital filter is reset to zero."),
                    EnumVal("DFE_1", "0x1", "Digital filter is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
            ]),
            Register("DFCR", 0x4004B0C4, 32, "Digital Filter Clock Register", [
                Field("CS", 0, 1, "Clock Source", [
                    EnumVal("CS_0", "0", "Digital filters are clocked by the bus clock."),
                    EnumVal("CS_1", "0x1", "Digital filters are clocked by the LPO clock."),
                ]),
            ]),
            Register("DFWR", 0x4004B0C8, 32, "Digital Filter Width Register", [
                Field("FILT", 0, 5, "Filter Length", [
                ]),
            ]),
        ])

class Module_PORTD(Peripheral):
    def __init__(self):
        super().__init__("PORTD", 0x4004C000, 0xCC, [
            Register("PCR0", 0x4004C000, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR1", 0x4004C004, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR2", 0x4004C008, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR3", 0x4004C00C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR4", 0x4004C010, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR5", 0x4004C014, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR6", 0x4004C018, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR7", 0x4004C01C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR8", 0x4004C020, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR9", 0x4004C024, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR10", 0x4004C028, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR11", 0x4004C02C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR12", 0x4004C030, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR13", 0x4004C034, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR14", 0x4004C038, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR15", 0x4004C03C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR16", 0x4004C040, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR17", 0x4004C044, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR18", 0x4004C048, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR19", 0x4004C04C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR20", 0x4004C050, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR21", 0x4004C054, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR22", 0x4004C058, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR23", 0x4004C05C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR24", 0x4004C060, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR25", 0x4004C064, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR26", 0x4004C068, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR27", 0x4004C06C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR28", 0x4004C070, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR29", 0x4004C074, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR30", 0x4004C078, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR31", 0x4004C07C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("GPCLR", 0x4004C080, 32, "Global Pin Control Low Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GPCHR", 0x4004C084, 32, "Global Pin Control High Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GICLR", 0x4004C088, 32, "Global Interrupt Control Low Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("GICHR", 0x4004C08C, 32, "Global Interrupt Control High Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("ISFR", 0x4004C0A0, 32, "Interrupt Status Flag Register", [
                Field("ISF", 0, 32, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
            ]),
            Register("DFER", 0x4004C0C0, 32, "Digital Filter Enable Register", [
                Field("DFE", 0, 32, "Digital Filter Enable", [
                    EnumVal("DFE_0", "0", "Digital filter is disabled on the corresponding pin and output of the digital filter is reset to zero."),
                    EnumVal("DFE_1", "0x1", "Digital filter is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
            ]),
            Register("DFCR", 0x4004C0C4, 32, "Digital Filter Clock Register", [
                Field("CS", 0, 1, "Clock Source", [
                    EnumVal("CS_0", "0", "Digital filters are clocked by the bus clock."),
                    EnumVal("CS_1", "0x1", "Digital filters are clocked by the LPO clock."),
                ]),
            ]),
            Register("DFWR", 0x4004C0C8, 32, "Digital Filter Width Register", [
                Field("FILT", 0, 5, "Filter Length", [
                ]),
            ]),
        ])

class Module_PORTE(Peripheral):
    def __init__(self):
        super().__init__("PORTE", 0x4004D000, 0xCC, [
            Register("PCR0", 0x4004D000, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR1", 0x4004D004, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR2", 0x4004D008, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR3", 0x4004D00C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR4", 0x4004D010, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR5", 0x4004D014, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR6", 0x4004D018, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR7", 0x4004D01C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR8", 0x4004D020, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR9", 0x4004D024, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR10", 0x4004D028, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR11", 0x4004D02C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR12", 0x4004D030, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR13", 0x4004D034, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR14", 0x4004D038, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR15", 0x4004D03C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR16", 0x4004D040, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR17", 0x4004D044, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR18", 0x4004D048, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR19", 0x4004D04C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR20", 0x4004D050, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR21", 0x4004D054, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR22", 0x4004D058, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR23", 0x4004D05C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR24", 0x4004D060, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR25", 0x4004D064, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR26", 0x4004D068, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR27", 0x4004D06C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR28", 0x4004D070, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR29", 0x4004D074, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR30", 0x4004D078, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("PCR31", 0x4004D07C, 32, "Pin Control Register n", [
                Field("ISF", 24, 1, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
                Field("IRQC", 16, 4, "Interrupt Configuration", [
                    EnumVal("IRQC_0", "0", "Interrupt Status Flag (ISF) is disabled."),
                    EnumVal("IRQC_1", "0x1", "ISF flag and DMA request on rising edge."),
                    EnumVal("IRQC_2", "0x2", "ISF flag and DMA request on falling edge."),
                    EnumVal("IRQC_3", "0x3", "ISF flag and DMA request on either edge."),
                    EnumVal("IRQC_8", "0x8", "ISF flag and Interrupt when logic 0."),
                    EnumVal("IRQC_9", "0x9", "ISF flag and Interrupt on rising-edge."),
                    EnumVal("IRQC_10", "0xA", "ISF flag and Interrupt on falling-edge."),
                    EnumVal("IRQC_11", "0xB", "ISF flag and Interrupt on either edge."),
                    EnumVal("IRQC_12", "0xC", "ISF flag and Interrupt when logic 1."),
                ]),
                Field("LK", 15, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Pin Control Register fields [15:0] are not locked."),
                    EnumVal("LK_1", "0x1", "Pin Control Register fields [15:0] are locked and cannot be updated until the next system reset."),
                ]),
                Field("MUX", 8, 3, "Pin Mux Control", [
                    EnumVal("MUX_0", "0", "Pin disabled (Alternative 0) (analog)."),
                    EnumVal("MUX_1", "0x1", "Alternative 1 (GPIO)."),
                    EnumVal("MUX_2", "0x2", "Alternative 2 (chip-specific)."),
                    EnumVal("MUX_3", "0x3", "Alternative 3 (chip-specific)."),
                    EnumVal("MUX_4", "0x4", "Alternative 4 (chip-specific)."),
                    EnumVal("MUX_5", "0x5", "Alternative 5 (chip-specific)."),
                    EnumVal("MUX_6", "0x6", "Alternative 6 (chip-specific)."),
                    EnumVal("MUX_7", "0x7", "Alternative 7 (chip-specific)."),
                ]),
                Field("DSE", 6, 1, "Drive Strength Enable", [
                    EnumVal("DSE_0", "0", "Low drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                    EnumVal("DSE_1", "0x1", "High drive strength is configured on the corresponding pin, if pin is configured as a digital output."),
                ]),
                Field("PFE", 4, 1, "Passive Filter Enable", [
                    EnumVal("PFE_0", "0", "Passive input filter is disabled on the corresponding pin."),
                    EnumVal("PFE_1", "0x1", "Passive input filter is enabled on the corresponding pin, if the pin is configured as a digital input. Refer to the device data sheet for filter characteristics."),
                ]),
                Field("PE", 1, 1, "Pull Enable", [
                    EnumVal("PE_0", "0", "Internal pullup or pulldown resistor is not enabled on the corresponding pin."),
                    EnumVal("PE_1", "0x1", "Internal pullup or pulldown resistor is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
                Field("PS", 0, 1, "Pull Select", [
                    EnumVal("PS_0", "0", "Internal pulldown resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                    EnumVal("PS_1", "0x1", "Internal pullup resistor is enabled on the corresponding pin, if the corresponding PE field is set."),
                ]),
            ]),
            Register("GPCLR", 0x4004D080, 32, "Global Pin Control Low Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GPCHR", 0x4004D084, 32, "Global Pin Control High Register", [
                Field("GPWE", 16, 16, "Global Pin Write Enable", [
                    EnumVal("GPWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GPWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
                Field("GPWD", 0, 16, "Global Pin Write Data", [
                ]),
            ]),
            Register("GICLR", 0x4004D088, 32, "Global Interrupt Control Low Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("GICHR", 0x4004D08C, 32, "Global Interrupt Control High Register", [
                Field("GIWD", 16, 16, "Global Interrupt Write Data", [
                ]),
                Field("GIWE", 0, 16, "Global Interrupt Write Enable", [
                    EnumVal("GIWE_0", "0", "Corresponding Pin Control Register is not updated with the value in GPWD."),
                    EnumVal("GIWE_1", "0x1", "Corresponding Pin Control Register is updated with the value in GPWD."),
                ]),
            ]),
            Register("ISFR", 0x4004D0A0, 32, "Interrupt Status Flag Register", [
                Field("ISF", 0, 32, "Interrupt Status Flag", [
                    EnumVal("ISF_0", "0", "Configured interrupt is not detected."),
                    EnumVal("ISF_1", "0x1", "Configured interrupt is detected. If the pin is configured to generate a DMA request, then the corresponding flag will be cleared automatically at the completion of the requested DMA transfer. Otherwise, the flag remains set until a logic 1 is written to the flag. If the pin is configured for a level sensitive interrupt and the pin remains asserted, then the flag is set again immediately after it is cleared."),
                ]),
            ]),
            Register("DFER", 0x4004D0C0, 32, "Digital Filter Enable Register", [
                Field("DFE", 0, 32, "Digital Filter Enable", [
                    EnumVal("DFE_0", "0", "Digital filter is disabled on the corresponding pin and output of the digital filter is reset to zero."),
                    EnumVal("DFE_1", "0x1", "Digital filter is enabled on the corresponding pin, if the pin is configured as a digital input."),
                ]),
            ]),
            Register("DFCR", 0x4004D0C4, 32, "Digital Filter Clock Register", [
                Field("CS", 0, 1, "Clock Source", [
                    EnumVal("CS_0", "0", "Digital filters are clocked by the bus clock."),
                    EnumVal("CS_1", "0x1", "Digital filters are clocked by the LPO clock."),
                ]),
            ]),
            Register("DFWR", 0x4004D0C8, 32, "Digital Filter Width Register", [
                Field("FILT", 0, 5, "Filter Length", [
                ]),
            ]),
        ])

class Module_PTA(Peripheral):
    def __init__(self):
        super().__init__("PTA", 0x400FF000, 0x1C, [
            Register("PDOR", 0x400FF000, 32, "Port Data Output Register", [
                Field("PDO", 0, 32, "Port Data Output", [
                ]),
            ]),
            Register("PSOR", 0x400FF004, 32, "Port Set Output Register", [
                Field("PTSO", 0, 32, "Port Set Output", [
                ]),
            ]),
            Register("PCOR", 0x400FF008, 32, "Port Clear Output Register", [
                Field("PTCO", 0, 32, "Port Clear Output", [
                ]),
            ]),
            Register("PTOR", 0x400FF00C, 32, "Port Toggle Output Register", [
                Field("PTTO", 0, 32, "Port Toggle Output", [
                ]),
            ]),
            Register("PDIR", 0x400FF010, 32, "Port Data Input Register", [
                Field("PDI", 0, 32, "Port Data Input", [
                ]),
            ]),
            Register("PDDR", 0x400FF014, 32, "Port Data Direction Register", [
                Field("PDD", 0, 32, "Port Data Direction", [
                ]),
            ]),
            Register("PIDR", 0x400FF018, 32, "Port Input Disable Register", [
                Field("PID", 0, 32, "Port Input Disable", [
                ]),
            ]),
        ])

class Module_PTB(Peripheral):
    def __init__(self):
        super().__init__("PTB", 0x400FF040, 0x1C, [
            Register("PDOR", 0x400FF040, 32, "Port Data Output Register", [
                Field("PDO", 0, 32, "Port Data Output", [
                ]),
            ]),
            Register("PSOR", 0x400FF044, 32, "Port Set Output Register", [
                Field("PTSO", 0, 32, "Port Set Output", [
                ]),
            ]),
            Register("PCOR", 0x400FF048, 32, "Port Clear Output Register", [
                Field("PTCO", 0, 32, "Port Clear Output", [
                ]),
            ]),
            Register("PTOR", 0x400FF04C, 32, "Port Toggle Output Register", [
                Field("PTTO", 0, 32, "Port Toggle Output", [
                ]),
            ]),
            Register("PDIR", 0x400FF050, 32, "Port Data Input Register", [
                Field("PDI", 0, 32, "Port Data Input", [
                ]),
            ]),
            Register("PDDR", 0x400FF054, 32, "Port Data Direction Register", [
                Field("PDD", 0, 32, "Port Data Direction", [
                ]),
            ]),
            Register("PIDR", 0x400FF058, 32, "Port Input Disable Register", [
                Field("PID", 0, 32, "Port Input Disable", [
                ]),
            ]),
        ])

class Module_PTC(Peripheral):
    def __init__(self):
        super().__init__("PTC", 0x400FF080, 0x1C, [
            Register("PDOR", 0x400FF080, 32, "Port Data Output Register", [
                Field("PDO", 0, 32, "Port Data Output", [
                ]),
            ]),
            Register("PSOR", 0x400FF084, 32, "Port Set Output Register", [
                Field("PTSO", 0, 32, "Port Set Output", [
                ]),
            ]),
            Register("PCOR", 0x400FF088, 32, "Port Clear Output Register", [
                Field("PTCO", 0, 32, "Port Clear Output", [
                ]),
            ]),
            Register("PTOR", 0x400FF08C, 32, "Port Toggle Output Register", [
                Field("PTTO", 0, 32, "Port Toggle Output", [
                ]),
            ]),
            Register("PDIR", 0x400FF090, 32, "Port Data Input Register", [
                Field("PDI", 0, 32, "Port Data Input", [
                ]),
            ]),
            Register("PDDR", 0x400FF094, 32, "Port Data Direction Register", [
                Field("PDD", 0, 32, "Port Data Direction", [
                ]),
            ]),
            Register("PIDR", 0x400FF098, 32, "Port Input Disable Register", [
                Field("PID", 0, 32, "Port Input Disable", [
                ]),
            ]),
        ])

class Module_PTD(Peripheral):
    def __init__(self):
        super().__init__("PTD", 0x400FF0C0, 0x1C, [
            Register("PDOR", 0x400FF0C0, 32, "Port Data Output Register", [
                Field("PDO", 0, 32, "Port Data Output", [
                ]),
            ]),
            Register("PSOR", 0x400FF0C4, 32, "Port Set Output Register", [
                Field("PTSO", 0, 32, "Port Set Output", [
                ]),
            ]),
            Register("PCOR", 0x400FF0C8, 32, "Port Clear Output Register", [
                Field("PTCO", 0, 32, "Port Clear Output", [
                ]),
            ]),
            Register("PTOR", 0x400FF0CC, 32, "Port Toggle Output Register", [
                Field("PTTO", 0, 32, "Port Toggle Output", [
                ]),
            ]),
            Register("PDIR", 0x400FF0D0, 32, "Port Data Input Register", [
                Field("PDI", 0, 32, "Port Data Input", [
                ]),
            ]),
            Register("PDDR", 0x400FF0D4, 32, "Port Data Direction Register", [
                Field("PDD", 0, 32, "Port Data Direction", [
                ]),
            ]),
            Register("PIDR", 0x400FF0D8, 32, "Port Input Disable Register", [
                Field("PID", 0, 32, "Port Input Disable", [
                ]),
            ]),
        ])

class Module_PTE(Peripheral):
    def __init__(self):
        super().__init__("PTE", 0x400FF100, 0x1C, [
            Register("PDOR", 0x400FF100, 32, "Port Data Output Register", [
                Field("PDO", 0, 32, "Port Data Output", [
                ]),
            ]),
            Register("PSOR", 0x400FF104, 32, "Port Set Output Register", [
                Field("PTSO", 0, 32, "Port Set Output", [
                ]),
            ]),
            Register("PCOR", 0x400FF108, 32, "Port Clear Output Register", [
                Field("PTCO", 0, 32, "Port Clear Output", [
                ]),
            ]),
            Register("PTOR", 0x400FF10C, 32, "Port Toggle Output Register", [
                Field("PTTO", 0, 32, "Port Toggle Output", [
                ]),
            ]),
            Register("PDIR", 0x400FF110, 32, "Port Data Input Register", [
                Field("PDI", 0, 32, "Port Data Input", [
                ]),
            ]),
            Register("PDDR", 0x400FF114, 32, "Port Data Direction Register", [
                Field("PDD", 0, 32, "Port Data Direction", [
                ]),
            ]),
            Register("PIDR", 0x400FF118, 32, "Port Input Disable Register", [
                Field("PID", 0, 32, "Port Input Disable", [
                ]),
            ]),
        ])

class Module_QuadSPI(Peripheral):
    def __init__(self):
        super().__init__("QuadSPI", 0x40076000, 0x410, [
            Register("MCR", 0x40076000, 32, "Module Configuration Register", [
                Field("SCLKCFG", 24, 8, "Serial Clock Configuration", [
                ]),
                Field("ISD3FB", 19, 1, "Idle Signal Drive IOFB[3] Flash B", [
                    EnumVal("ISD3FB_0", "0", "IOFB[3] is driven to logic L"),
                    EnumVal("ISD3FB_1", "0x1", "IOFB[3] is driven to logic H"),
                ]),
                Field("ISD2FB", 18, 1, "Idle Signal Drive IOFB[2] Flash B", [
                    EnumVal("ISD2FB_0", "0", "IOFB[2] is driven to logic L"),
                    EnumVal("ISD2FB_1", "0x1", "IOFB[2] is driven to logic H"),
                ]),
                Field("ISD3FA", 17, 1, "Idle Signal Drive IOFA[3] Flash A", [
                    EnumVal("ISD3FA_0", "0", "IOFA[3] is driven to logic L"),
                    EnumVal("ISD3FA_1", "0x1", "IOFA[3] is driven to logic H"),
                ]),
                Field("ISD2FA", 16, 1, "Idle Signal Drive IOFA[2] Flash A", [
                    EnumVal("ISD2FA_0", "0", "IOFA[2] is driven to logic L"),
                    EnumVal("ISD2FA_1", "0x1", "IOFA[2] is driven to logic H"),
                ]),
                Field("DOZE", 15, 1, "Doze Enable", [
                    EnumVal("DOZE_0", "0", "A doze request will be ignored by the QuadSPI module"),
                    EnumVal("DOZE_1", "0x1", "A doze request will be processed by the QuadSPI module"),
                ]),
                Field("MDIS", 14, 1, "Module Disable", [
                    EnumVal("MDIS_0", "0", "Enable QuadSPI clocks."),
                    EnumVal("MDIS_1", "0x1", "Allow external logic to disable QuadSPI clocks."),
                ]),
                Field("CLR_TXF", 11, 1, "Clear TX FIFO/Buffer. Invalidates the TX Buffer content. This is a self-clearing field.", [
                    EnumVal("CLR_TXF_0", "0", "No action."),
                    EnumVal("CLR_TXF_1", "0x1", "Read and write pointers of the TX Buffer are reset to 0. QSPI_TBSR[TRCTR] is reset to 0."),
                ]),
                Field("CLR_RXF", 10, 1, "Clear RX FIFO. Invalidates the RX Buffer. This is a self-clearing field.", [
                    EnumVal("CLR_RXF_0", "0", "No action."),
                    EnumVal("CLR_RXF_1", "0x1", "Read and write pointers of the RX Buffer are reset to 0. QSPI_RBSR[RDBFL] is reset to 0."),
                ]),
                Field("VAR_LAT_EN", 8, 1, "This field is used to enable variable latency feature in the controller", [
                    EnumVal("VAR_LAT_EN_0", "0", "Fixed latency: Twice + 1 latency enable"),
                    EnumVal("VAR_LAT_EN_1", "0x1", "Variable latency: 'once' or 'twice + 1' the initial latency based on Data strobe during CA phase. If enabled also need to ensure QSPI_FLSHCR[TCSS] must be >= 2."),
                ]),
                Field("DDR_EN", 7, 1, "DDR mode enable", [
                    EnumVal("DDR_EN_0", "0", "2x clock are disabled for SDR instructions only"),
                    EnumVal("DDR_EN_1", "0x1", "2x clock are enabled supports both SDR and DDR instruction."),
                ]),
                Field("DQS_EN", 6, 1, "DQS enable", [
                    EnumVal("DQS_EN_0", "0", "DQS disabled."),
                    EnumVal("DQS_EN_1", "0x1", "DQS enabled. When enabled, the incoming data is sampled on both the edges of DQS input when QSPI_MCR[DDR_EN] is set, else, on only one edge when QSPI_MCR[DDR_EN] is 0. The QSPI_SMPR[DDR_SMP] values are ignored."),
                ]),
                Field("DQS_LAT_EN", 5, 1, "DQS Latency Enable", [
                    EnumVal("DQS_LAT_EN_0", "0", "DQS Latency disabled"),
                    EnumVal("DQS_LAT_EN_1", "0x1", "DQS feature with latency included enabled"),
                ]),
                Field("DQS_OUT_EN", 4, 1, "This field is valid when Data Strobe is also used as an output from controller during Write data phase", [
                    EnumVal("DQS_OUT_EN_0", "0", "DQS as an output from controller is disabled"),
                    EnumVal("DQS_OUT_EN_1", "0x1", "DQS as an output from controller is enabled"),
                ]),
                Field("END_CFG", 2, 2, "Defines the endianness of the QuadSPI module. For more details refer to Byte Ordering Endianess", [
                ]),
                Field("SWRSTHD", 1, 1, "Software reset for AHB domain", [
                    EnumVal("SWRSTHD_0", "0", "No action"),
                    EnumVal("SWRSTHD_1", "0x1", "AHB domain flops are reset. Does not reset configuration registers. It is advisable to reset both the serial flash domain and AHB domain at the same time. Resetting only one domain might lead to side effects. The software resets need the clock to be running to propagate to the design. The MCR[MDIS] should therefore be set to 0 when the software reset bits are asserted. Also, before they can be deasserted again (by setting MCR[SWRSTHD] to 0), it is recommended to set the MCR[MDIS] bit to 1. Once the software resets have been deasserted, the normal operation can be started by setting the MCR[MDIS] bit to 0."),
                ]),
                Field("SWRSTSD", 0, 1, "Software reset for serial flash domain", [
                    EnumVal("SWRSTSD_0", "0", "No action"),
                    EnumVal("SWRSTSD_1", "0x1", "Serial Flash domain flops are reset. Does not reset configuration registers. It is advisable to reset both the serial flash domain and AHB domain at the same time. Resetting only one domain might lead to side effects. The software resets need the clock to be running to propagate to the design. The MCR[MDIS] should therefore be set to 0 when the software reset bits are asserted. Also, before they can be deasserted again (by setting MCR[SWRSTSD] to 0), it is recommended to set the MCR[MDIS] bit to 1. Once the software resets have been deasserted, the normal operation can be started by setting the MCR[MDIS] bit to 0."),
                ]),
            ]),
            Register("IPCR", 0x40076008, 32, "IP Configuration Register", [
                Field("SEQID", 24, 4, "Points to a sequence in the Look-up table", [
                ]),
                Field("IDATSZ", 0, 16, "IP data transfer size. Defines the data transfer size in bytes of the IP command.", [
                ]),
            ]),
            Register("FLSHCR", 0x4007600C, 32, "Flash Configuration Register", [
                Field("TDH", 16, 2, "Serial flash data in hold time", [
                    EnumVal("TDH_0", "0", "Data aligned with the posedge of Internal reference clock of QuadSPI"),
                    EnumVal("TDH_1", "0x1", "Data aligned with 2x serial flash half clock"),
                ]),
                Field("TCSH", 8, 4, "Serial flash CS hold time in terms of serial flash clock cycles", [
                ]),
                Field("TCSS", 0, 4, "Serial flash CS setup time in terms of serial flash clock cycles", [
                ]),
            ]),
            Register("BUF0CR", 0x40076010, 32, "Buffer0 Configuration Register", [
                Field("HP_EN", 31, 1, "High Priority Enable", [
                ]),
                Field("ADATSZ", 8, 8, "AHB data transfer size", [
                ]),
                Field("MSTRID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("BUF1CR", 0x40076014, 32, "Buffer1 Configuration Register", [
                Field("ADATSZ", 8, 8, "AHB data transfer size", [
                ]),
                Field("MSTRID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("BUF2CR", 0x40076018, 32, "Buffer2 Configuration Register", [
                Field("ADATSZ", 8, 8, "AHB data transfer size", [
                ]),
                Field("MSTRID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("BUF3CR", 0x4007601C, 32, "Buffer3 Configuration Register", [
                Field("ALLMST", 31, 1, "All master enable", [
                ]),
                Field("ADATSZ", 8, 8, "AHB data transfer size", [
                ]),
                Field("MSTRID", 0, 4, "Master ID", [
                ]),
            ]),
            Register("BFGENCR", 0x40076020, 32, "Buffer Generic Configuration Register", [
                Field("SEQID", 12, 4, "Points to a sequence in the Look-up-table", [
                ]),
            ]),
            Register("SOCCR", 0x40076024, 32, "SOC Configuration Register", [
                Field("SOCCFG", 0, 32, "SOC Configuration For details, refer to chip-specific QuadSPI information.", [
                ]),
            ]),
            Register("BUF0IND", 0x40076030, 32, "Buffer0 Top Index Register", [
                Field("TPINDX0", 3, 29, "Top index of buffer 0.", [
                ]),
            ]),
            Register("BUF1IND", 0x40076034, 32, "Buffer1 Top Index Register", [
                Field("TPINDX1", 3, 29, "Top index of buffer 1.", [
                ]),
            ]),
            Register("BUF2IND", 0x40076038, 32, "Buffer2 Top Index Register", [
                Field("TPINDX2", 3, 29, "Top index of buffer 2.", [
                ]),
            ]),
            Register("SFAR", 0x40076100, 32, "Serial Flash Address Register", [
                Field("SFADR", 0, 32, "Serial Flash Address. The register content is used as byte address for all following IP Commands.", [
                ]),
            ]),
            Register("SFACR", 0x40076104, 32, "Serial Flash Address Configuration Register", [
                Field("WA", 16, 1, "Word Addressable", [
                    EnumVal("WA_0", "0", "Byte addressable serial flash mode."),
                    EnumVal("WA_1", "0x1", "Word (2 byte) addressable serial flash mode."),
                ]),
                Field("CAS", 0, 4, "Column Address Space", [
                ]),
            ]),
            Register("SMPR", 0x40076108, 32, "Sampling Register", [
                Field("FSDLY", 6, 1, "Full Speed Delay selection for SDR instructions. Select the delay with respect to the reference edge for the sample point valid for full speed commands.", [
                    EnumVal("FSDLY_0", "0", "One clock cycle delay"),
                    EnumVal("FSDLY_1", "0x1", "Two clock cycles delay."),
                ]),
                Field("FSPHS", 5, 1, "Full Speed Phase selection for SDR instructions.", [
                    EnumVal("FSPHS_0", "0", "Select sampling at non-inverted clock"),
                    EnumVal("FSPHS_1", "0x1", "Select sampling at inverted clock."),
                ]),
            ]),
            Register("RBSR", 0x4007610C, 32, "RX Buffer Status Register", [
                Field("RDCTR", 16, 16, "Read Counter", [
                ]),
                Field("RDBFL", 8, 6, "RX Buffer Fill Level", [
                ]),
            ]),
            Register("RBCT", 0x40076110, 32, "RX Buffer Control Register", [
                Field("RXBRD", 8, 1, "RX Buffer Readout. This field specifies the access scheme for the RX Buffer readout.", [
                    EnumVal("RXBRD_0", "0", "RX Buffer content is read using the AHB Bus registers QSPI_ARDB0 to QSPI_ARDB31."),
                    EnumVal("RXBRD_1", "0x1", "RX Buffer content is read using the IP Bus registers QSPI_RBDR0 to QSPI_RBDR31."),
                ]),
                Field("WMRK", 0, 5, "RX Buffer Watermark", [
                ]),
            ]),
            Register("TBSR", 0x40076150, 32, "TX Buffer Status Register", [
                Field("TRCTR", 16, 16, "Transmit Counter", [
                ]),
                Field("TRBFL", 8, 6, "TX Buffer Fill Level", [
                ]),
            ]),
            Register("TBDR", 0x40076154, 32, "TX Buffer Data Register", [
                Field("TXDATA", 0, 32, "TX Data On write access the data is written into the next available entry of the TX Buffer and the QPSI_TBSR[TRBFL] field is updated accordingly", [
                ]),
            ]),
            Register("TBCT", 0x40076158, 32, "Tx Buffer Control Register", [
                Field("WMRK", 0, 5, "Determines the watermark for the TX Buffer", [
                ]),
            ]),
            Register("SR", 0x4007615C, 32, "Status Register", [
                Field("TXFULL", 27, 1, "TX Buffer Full. Asserted when no more data can be stored.", [
                ]),
                Field("TXDMA", 26, 1, "TXDMA", [
                ]),
                Field("TXWA", 25, 1, "TX Buffer watermark Available", [
                ]),
                Field("TXEDA", 24, 1, "Tx Buffer Enough Data Available", [
                ]),
                Field("RXDMA", 23, 1, "RX Buffer DMA. Asserted when RX Buffer read out via DMA is active i.e DMA is requested or running.", [
                ]),
                Field("RXFULL", 19, 1, "RX Buffer Full", [
                ]),
                Field("RXWE", 16, 1, "RX Buffer Watermark Exceeded", [
                ]),
                Field("AHB3FUL", 14, 1, "AHB 3 Buffer Full. Asserted when AHB 3 buffer is full.", [
                ]),
                Field("AHB2FUL", 13, 1, "AHB 2 Buffer Full. Asserted when AHB 2 buffer is full.", [
                ]),
                Field("AHB1FUL", 12, 1, "AHB 1 Buffer Full. Asserted when AHB 1 buffer is full.", [
                ]),
                Field("AHB0FUL", 11, 1, "AHB 0 Buffer Full. Asserted when AHB 0 buffer is full.", [
                ]),
                Field("AHB3NE", 10, 1, "AHB 3 Buffer Not Empty. Asserted when AHB 3 buffer contains data.", [
                ]),
                Field("AHB2NE", 9, 1, "AHB 2 Buffer Not Empty. Asserted when AHB 2 buffer contains data.", [
                ]),
                Field("AHB1NE", 8, 1, "AHB 1 Buffer Not Empty. Asserted when AHB 1 buffer contains data.", [
                ]),
                Field("AHB0NE", 7, 1, "AHB 0 Buffer Not Empty. Asserted when AHB 0 buffer contains data.", [
                ]),
                Field("AHBTRN", 6, 1, "AHB Access Transaction pending", [
                ]),
                Field("AHB_ACC", 2, 1, "AHB Access. Asserted when the transaction currently executed was initiated by AHB bus.", [
                ]),
                Field("IP_ACC", 1, 1, "IP Access. Asserted when transaction currently executed was initiated by IP bus.", [
                ]),
                Field("BUSY", 0, 1, "Module Busy", [
                ]),
            ]),
            Register("FR", 0x40076160, 32, "Flag Register", [
                Field("TBFF", 27, 1, "TX Buffer Fill Flag", [
                ]),
                Field("TBUF", 26, 1, "TX Buffer Underrun Flag", [
                ]),
                Field("ILLINE", 23, 1, "Illegal Instruction Error Flag", [
                ]),
                Field("RBOF", 17, 1, "RX Buffer Overflow Flag", [
                ]),
                Field("RBDF", 16, 1, "RX Buffer Drain Flag", [
                ]),
                Field("ABSEF", 15, 1, "AHB Sequence Error Flag", [
                ]),
                Field("AITEF", 14, 1, "AHB Illegal transaction error flag", [
                ]),
                Field("AIBSEF", 13, 1, "AHB Illegal Burst Size Error Flag", [
                ]),
                Field("ABOF", 12, 1, "AHB Buffer Overflow Flag", [
                ]),
                Field("IPAEF", 7, 1, "IP Command Trigger during AHB Access Error Flag", [
                ]),
                Field("IPIEF", 6, 1, "IP Command Trigger could not be executed Error Flag", [
                ]),
                Field("TFF", 0, 1, "IP Command Transaction Finished Flag", [
                ]),
            ]),
            Register("RSER", 0x40076164, 32, "Interrupt and DMA Request Select and Enable Register", [
                Field("TBFIE", 27, 1, "TX Buffer Fill Interrupt Enable", [
                    EnumVal("TBFIE_0", "0", "No TBFF interrupt will be generated"),
                    EnumVal("TBFIE_1", "0x1", "TBFF interrupt will be generated"),
                ]),
                Field("TBUIE", 26, 1, "TX Buffer Underrun Interrupt Enable", [
                    EnumVal("TBUIE_0", "0", "No TBUF interrupt will be generated"),
                    EnumVal("TBUIE_1", "0x1", "TBUF interrupt will be generated"),
                ]),
                Field("TBFDE", 25, 1, "TX Buffer Fill DMA Enable", [
                    EnumVal("TBFDE_0", "0", "No DMA request will be generated"),
                    EnumVal("TBFDE_1", "0x1", "DMA request will be generated"),
                ]),
                Field("ILLINIE", 23, 1, "Illegal Instruction Error Interrupt Enable. Triggered by ILLINE flag in QSPI_FR", [
                    EnumVal("ILLINIE_0", "0", "No ILLINE interrupt will be generated"),
                    EnumVal("ILLINIE_1", "0x1", "ILLINE interrupt will be generated"),
                ]),
                Field("RBDDE", 21, 1, "RX Buffer Drain DMA Enable: Enables generation of DMA requests for RX Buffer Drain", [
                    EnumVal("RBDDE_0", "0", "No DMA request will be generated"),
                    EnumVal("RBDDE_1", "0x1", "DMA request will be generated"),
                ]),
                Field("RBOIE", 17, 1, "RX Buffer Overflow Interrupt Enable", [
                    EnumVal("RBOIE_0", "0", "No RBOF interrupt will be generated"),
                    EnumVal("RBOIE_1", "0x1", "RBOF interrupt will be generated"),
                ]),
                Field("RBDIE", 16, 1, "RX Buffer Drain Interrupt Enable: Enables generation of IRQ requests for RX Buffer Drain", [
                    EnumVal("RBDIE_0", "0", "No RBDF interrupt will be generated"),
                    EnumVal("RBDIE_1", "0x1", "RBDF Interrupt will be generated"),
                ]),
                Field("ABSEIE", 15, 1, "AHB Sequence Error Interrupt Enable: Triggered by ABSEF flags of QSPI_FR", [
                    EnumVal("ABSEIE_0", "0", "No ABSEF interrupt will be generated"),
                    EnumVal("ABSEIE_1", "0x1", "ABSEF interrupt will be generated"),
                ]),
                Field("AITIE", 14, 1, "AHB Illegal transaction interrupt enable.", [
                    EnumVal("AITIE_0", "0", "No AITEF interrupt will be generated"),
                    EnumVal("AITIE_1", "0x1", "AITEF interrupt will be generated"),
                ]),
                Field("AIBSIE", 13, 1, "AHB Illegal Burst Size Interrupt Enable", [
                    EnumVal("AIBSIE_0", "0", "No AIBSEF interrupt will be generated"),
                    EnumVal("AIBSIE_1", "0x1", "AIBSEF interrupt will be generated"),
                ]),
                Field("ABOIE", 12, 1, "AHB Buffer Overflow Interrupt Enable", [
                    EnumVal("ABOIE_0", "0", "No ABOF interrupt will be generated"),
                    EnumVal("ABOIE_1", "0x1", "ABOF interrupt will be generated"),
                ]),
                Field("IPAEIE", 7, 1, "IP Command Trigger during AHB Access Error Interrupt Enable", [
                    EnumVal("IPAEIE_0", "0", "No IPAEF interrupt will be generated"),
                    EnumVal("IPAEIE_1", "0x1", "IPAEF interrupt will be generated"),
                ]),
                Field("IPIEIE", 6, 1, "IP Command Trigger during IP Access Error Interrupt Enable", [
                    EnumVal("IPIEIE_0", "0", "No IPIEF interrupt will be generated"),
                    EnumVal("IPIEIE_1", "0x1", "IPIEF interrupt will be generated"),
                ]),
                Field("TFIE", 0, 1, "Transaction Finished Interrupt Enable", [
                    EnumVal("TFIE_0", "0", "No TFF interrupt will be generated"),
                    EnumVal("TFIE_1", "0x1", "TFF interrupt will be generated"),
                ]),
            ]),
            Register("SPNDST", 0x40076168, 32, "Sequence Suspend Status Register", [
                Field("DATLFT", 9, 7, "Data left: Provides information about the amount of data left to be read in the suspended sequence", [
                ]),
                Field("SPDBUF", 6, 2, "Suspended Buffer: Provides the suspended buffer number. Valid only when SUSPND is set to 1'b1", [
                ]),
                Field("SUSPND", 0, 1, "When set, it signifies that a sequence is in suspended state", [
                ]),
            ]),
            Register("SPTRCLR", 0x4007616C, 32, "Sequence Pointer Clear Register", [
                Field("IPPTRC", 8, 1, "IP Pointer Clear: 1: Clears the sequence pointer for IP accesses as defined in QuadSPI_IPCR This is a self-clearing field", [
                ]),
                Field("BFPTRC", 0, 1, "Buffer Pointer Clear: 1: Clears the sequence pointer for AHB accesses as defined in QuadSPI_BFGENCR", [
                ]),
            ]),
            Register("SFA1AD", 0x40076180, 32, "Serial Flash A1 Top Address", [
                Field("TPADA1", 10, 22, "Top address for Serial Flash A1. In effect, TPADxx is the first location of the next memory.", [
                ]),
            ]),
            Register("SFA2AD", 0x40076184, 32, "Serial Flash A2 Top Address", [
                Field("TPADA2", 10, 22, "Top address for Serial Flash A2. In effect, TPxxAD is the first location of the next memory.", [
                ]),
            ]),
            Register("SFB1AD", 0x40076188, 32, "Serial Flash B1 Top Address", [
                Field("TPADB1", 10, 22, "Top address for Serial Flash B1.In effect, TPxxAD is the first location of the next memory.", [
                ]),
            ]),
            Register("SFB2AD", 0x4007618C, 32, "Serial Flash B2 Top Address", [
                Field("TPADB2", 10, 22, "Top address for Serial Flash B2. In effect, TPxxAD is the first location of the next memory.", [
                ]),
            ]),
            Register("RBDR0", 0x40076200, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR1", 0x40076204, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR2", 0x40076208, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR3", 0x4007620C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR4", 0x40076210, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR5", 0x40076214, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR6", 0x40076218, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR7", 0x4007621C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR8", 0x40076220, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR9", 0x40076224, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR10", 0x40076228, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR11", 0x4007622C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR12", 0x40076230, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR13", 0x40076234, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR14", 0x40076238, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR15", 0x4007623C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR16", 0x40076240, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR17", 0x40076244, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR18", 0x40076248, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR19", 0x4007624C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR20", 0x40076250, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR21", 0x40076254, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR22", 0x40076258, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR23", 0x4007625C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR24", 0x40076260, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR25", 0x40076264, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR26", 0x40076268, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR27", 0x4007626C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR28", 0x40076270, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR29", 0x40076274, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR30", 0x40076278, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("RBDR31", 0x4007627C, 32, "RX Buffer Data Register", [
                Field("RXDATA", 0, 32, "RX Data", [
                ]),
            ]),
            Register("LUTKEY", 0x40076300, 32, "LUT Key Register", [
                Field("KEY", 0, 32, "The key to lock or unlock the LUT. The KEY is 0x5AF05AF0. The read value is always 0x5AF05AF0", [
                ]),
            ]),
            Register("LCKCR", 0x40076304, 32, "LUT Lock Configuration Register", [
                Field("UNLOCK", 1, 1, "Unlocks the LUT when the following two conditions are met: 1", [
                ]),
                Field("LOCK", 0, 1, "Locks the LUT when the following condition is met: This register is written just after the LUTKEYLUT Key Register The LUT key register was written with 0x5AF05AF0 key", [
                ]),
            ]),
            Register("LUT0", 0x40076310, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT1", 0x40076314, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT2", 0x40076318, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT3", 0x4007631C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT4", 0x40076320, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT5", 0x40076324, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT6", 0x40076328, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT7", 0x4007632C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT8", 0x40076330, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT9", 0x40076334, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT10", 0x40076338, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT11", 0x4007633C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT12", 0x40076340, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT13", 0x40076344, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT14", 0x40076348, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT15", 0x4007634C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT16", 0x40076350, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT17", 0x40076354, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT18", 0x40076358, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT19", 0x4007635C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT20", 0x40076360, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT21", 0x40076364, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT22", 0x40076368, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT23", 0x4007636C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT24", 0x40076370, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT25", 0x40076374, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT26", 0x40076378, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT27", 0x4007637C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT28", 0x40076380, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT29", 0x40076384, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT30", 0x40076388, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT31", 0x4007638C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT32", 0x40076390, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT33", 0x40076394, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT34", 0x40076398, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT35", 0x4007639C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT36", 0x400763A0, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT37", 0x400763A4, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT38", 0x400763A8, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT39", 0x400763AC, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT40", 0x400763B0, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT41", 0x400763B4, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT42", 0x400763B8, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT43", 0x400763BC, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT44", 0x400763C0, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT45", 0x400763C4, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT46", 0x400763C8, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT47", 0x400763CC, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT48", 0x400763D0, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT49", 0x400763D4, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT50", 0x400763D8, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT51", 0x400763DC, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT52", 0x400763E0, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT53", 0x400763E4, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT54", 0x400763E8, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT55", 0x400763EC, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT56", 0x400763F0, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT57", 0x400763F4, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT58", 0x400763F8, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT59", 0x400763FC, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT60", 0x40076400, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT61", 0x40076404, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT62", 0x40076408, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
            Register("LUT63", 0x4007640C, 32, "Look-up Table register", [
                Field("INSTR1", 26, 6, "Instruction 1", [
                ]),
                Field("PAD1", 24, 2, "Pad information for INSTR1.", [
                    EnumVal("PAD1_0", "0", "1 Pad"),
                    EnumVal("PAD1_1", "0x1", "2 Pads"),
                    EnumVal("PAD1_2", "0x2", "4 Pads"),
                    EnumVal("PAD1_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND1", 16, 8, "Operand for INSTR1.", [
                ]),
                Field("INSTR0", 10, 6, "Instruction 0", [
                ]),
                Field("PAD0", 8, 2, "Pad information for INSTR0.", [
                    EnumVal("PAD0_0", "0", "1 Pad"),
                    EnumVal("PAD0_1", "0x1", "2 Pads"),
                    EnumVal("PAD0_2", "0x2", "4 Pads"),
                    EnumVal("PAD0_3", "0x3", "8 Pads"),
                ]),
                Field("OPRND0", 0, 8, "Operand for INSTR0.", [
                ]),
            ]),
        ])

class Module_RCM(Peripheral):
    def __init__(self):
        super().__init__("RCM", 0x4007F000, 0x20, [
            Register("VERID", 0x4007F000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("FEATURE_3", "0x3", "Standard feature set."),
                ]),
            ]),
            Register("PARAM", 0x4007F004, 32, "Parameter Register", [
                Field("ECORE1", 16, 1, "Existence of SRS[CORE1] status indication feature", [
                    EnumVal("ECORE1_0", "0", "The feature is not available."),
                    EnumVal("ECORE1_1", "0x1", "The feature is available."),
                ]),
                Field("ETAMPER", 15, 1, "Existence of SRS[TAMPER] status indication feature", [
                    EnumVal("ETAMPER_0", "0", "The feature is not available."),
                    EnumVal("ETAMPER_1", "0x1", "The feature is available."),
                ]),
                Field("ESACKERR", 13, 1, "Existence of SRS[SACKERR] status indication feature", [
                    EnumVal("ESACKERR_0", "0", "The feature is not available."),
                    EnumVal("ESACKERR_1", "0x1", "The feature is available."),
                ]),
                Field("EMDM_AP", 11, 1, "Existence of SRS[MDM_AP] status indication feature", [
                    EnumVal("EMDM_AP_0", "0", "The feature is not available."),
                    EnumVal("EMDM_AP_1", "0x1", "The feature is available."),
                ]),
                Field("ESW", 10, 1, "Existence of SRS[SW] status indication feature", [
                    EnumVal("ESW_0", "0", "The feature is not available."),
                    EnumVal("ESW_1", "0x1", "The feature is available."),
                ]),
                Field("ELOCKUP", 9, 1, "Existence of SRS[LOCKUP] status indication feature", [
                    EnumVal("ELOCKUP_0", "0", "The feature is not available."),
                    EnumVal("ELOCKUP_1", "0x1", "The feature is available."),
                ]),
                Field("EJTAG", 8, 1, "Existence of SRS[JTAG] status indication feature", [
                    EnumVal("EJTAG_0", "0", "The feature is not available."),
                    EnumVal("EJTAG_1", "0x1", "The feature is available."),
                ]),
                Field("EPOR", 7, 1, "Existence of SRS[POR] status indication feature", [
                    EnumVal("EPOR_0", "0", "The feature is not available."),
                    EnumVal("EPOR_1", "0x1", "The feature is available."),
                ]),
                Field("EPIN", 6, 1, "Existence of SRS[PIN] status indication feature", [
                    EnumVal("EPIN_0", "0", "The feature is not available."),
                    EnumVal("EPIN_1", "0x1", "The feature is available."),
                ]),
                Field("EWDOG", 5, 1, "Existence of SRS[WDOG] status indication feature", [
                    EnumVal("EWDOG_0", "0", "The feature is not available."),
                    EnumVal("EWDOG_1", "0x1", "The feature is available."),
                ]),
                Field("ECMU_LOC", 4, 1, "Existence of SRS[CMU_LOC] status indication feature", [
                    EnumVal("ECMU_LOC_0", "0", "The feature is not available."),
                    EnumVal("ECMU_LOC_1", "0x1", "The feature is available."),
                ]),
                Field("ELOL", 3, 1, "Existence of SRS[LOL] status indication feature", [
                    EnumVal("ELOL_0", "0", "The feature is not available."),
                    EnumVal("ELOL_1", "0x1", "The feature is available."),
                ]),
                Field("ELOC", 2, 1, "Existence of SRS[LOC] status indication feature", [
                    EnumVal("ELOC_0", "0", "The feature is not available."),
                    EnumVal("ELOC_1", "0x1", "The feature is available."),
                ]),
                Field("ELVD", 1, 1, "Existence of SRS[LVD] status indication feature", [
                    EnumVal("ELVD_0", "0", "The feature is not available."),
                    EnumVal("ELVD_1", "0x1", "The feature is available."),
                ]),
                Field("EWAKEUP", 0, 1, "Existence of SRS[WAKEUP] status indication feature", [
                    EnumVal("EWAKEUP_0", "0", "The feature is not available."),
                    EnumVal("EWAKEUP_1", "0x1", "The feature is available."),
                ]),
            ]),
            Register("SRS", 0x4007F008, 32, "System Reset Status Register", [
                Field("SACKERR", 13, 1, "Stop Acknowledge Error", [
                    EnumVal("SACKERR_0", "0", "Reset not caused by peripheral failure to acknowledge attempt to enter stop mode"),
                    EnumVal("SACKERR_1", "0x1", "Reset caused by peripheral failure to acknowledge attempt to enter stop mode"),
                ]),
                Field("MDM_AP", 11, 1, "MDM-AP System Reset Request", [
                    EnumVal("MDM_AP_0", "0", "Reset was not caused by host debugger system setting of the System Reset Request bit"),
                    EnumVal("MDM_AP_1", "0x1", "Reset was caused by host debugger system setting of the System Reset Request bit"),
                ]),
                Field("SW", 10, 1, "Software", [
                    EnumVal("SW_0", "0", "Reset not caused by software setting of SYSRESETREQ bit"),
                    EnumVal("SW_1", "0x1", "Reset caused by software setting of SYSRESETREQ bit"),
                ]),
                Field("LOCKUP", 9, 1, "Core Lockup", [
                    EnumVal("LOCKUP_0", "0", "Reset not caused by core LOCKUP event"),
                    EnumVal("LOCKUP_1", "0x1", "Reset caused by core LOCKUP event"),
                ]),
                Field("JTAG", 8, 1, "JTAG generated reset", [
                    EnumVal("JTAG_0", "0", "Reset not caused by JTAG"),
                    EnumVal("JTAG_1", "0x1", "Reset caused by JTAG"),
                ]),
                Field("POR", 7, 1, "Power-On Reset", [
                    EnumVal("POR_0", "0", "Reset not caused by POR"),
                    EnumVal("POR_1", "0x1", "Reset caused by POR"),
                ]),
                Field("PIN", 6, 1, "External Reset Pin", [
                    EnumVal("PIN_0", "0", "Reset not caused by external reset pin"),
                    EnumVal("PIN_1", "0x1", "Reset caused by external reset pin"),
                ]),
                Field("WDOG", 5, 1, "Watchdog", [
                    EnumVal("WDOG_0", "0", "Reset not caused by watchdog timeout"),
                    EnumVal("WDOG_1", "0x1", "Reset caused by watchdog timeout"),
                ]),
                Field("LOL", 3, 1, "Loss-of-Lock Reset", [
                    EnumVal("LOL_0", "0", "Reset not caused by a loss of lock in the PLL/FLL"),
                    EnumVal("LOL_1", "0x1", "Reset caused by a loss of lock in the PLL/FLL"),
                ]),
                Field("LOC", 2, 1, "Loss-of-Clock Reset", [
                    EnumVal("LOC_0", "0", "Reset not caused by a loss of external clock."),
                    EnumVal("LOC_1", "0x1", "Reset caused by a loss of external clock."),
                ]),
                Field("LVD", 1, 1, "Low-Voltage Detect Reset or High-Voltage Detect Reset", [
                    EnumVal("LVD_0", "0", "Reset not caused by LVD trip, HVD trip or POR"),
                    EnumVal("LVD_1", "0x1", "Reset caused by LVD trip, HVD trip or POR"),
                ]),
            ]),
            Register("RPC", 0x4007F00C, 32, "Reset Pin Control register", [
                Field("RSTFLTSEL", 8, 5, "Reset Pin Filter Bus Clock Select", [
                ]),
                Field("RSTFLTSS", 2, 1, "Reset Pin Filter Select in Stop Mode", [
                    EnumVal("RSTFLTSS_0", "0", "All filtering disabled"),
                    EnumVal("RSTFLTSS_1", "0x1", "LPO clock filter enabled"),
                ]),
                Field("RSTFLTSRW", 0, 2, "Reset Pin Filter Select in Run and Wait Modes", [
                    EnumVal("RSTFLTSRW_0", "0", "All filtering disabled"),
                    EnumVal("RSTFLTSRW_1", "0x1", "Bus clock filter enabled for normal operation"),
                    EnumVal("RSTFLTSRW_2", "0x2", "LPO clock filter enabled for normal operation"),
                ]),
            ]),
            Register("SSRS", 0x4007F018, 32, "Sticky System Reset Status Register", [
                Field("SSACKERR", 13, 1, "Sticky Stop Acknowledge Error", [
                    EnumVal("SSACKERR_0", "0", "Reset not caused by peripheral failure to acknowledge attempt to enter stop mode"),
                    EnumVal("SSACKERR_1", "0x1", "Reset caused by peripheral failure to acknowledge attempt to enter stop mode"),
                ]),
                Field("SMDM_AP", 11, 1, "Sticky MDM-AP System Reset Request", [
                    EnumVal("SMDM_AP_0", "0", "Reset was not caused by host debugger system setting of the System Reset Request bit"),
                    EnumVal("SMDM_AP_1", "0x1", "Reset was caused by host debugger system setting of the System Reset Request bit"),
                ]),
                Field("SSW", 10, 1, "Sticky Software", [
                    EnumVal("SSW_0", "0", "Reset not caused by software setting of SYSRESETREQ bit"),
                    EnumVal("SSW_1", "0x1", "Reset caused by software setting of SYSRESETREQ bit"),
                ]),
                Field("SLOCKUP", 9, 1, "Sticky Core Lockup", [
                    EnumVal("SLOCKUP_0", "0", "Reset not caused by core LOCKUP event"),
                    EnumVal("SLOCKUP_1", "0x1", "Reset caused by core LOCKUP event"),
                ]),
                Field("SJTAG", 8, 1, "Sticky JTAG generated reset", [
                    EnumVal("SJTAG_0", "0", "Reset not caused by JTAG"),
                    EnumVal("SJTAG_1", "0x1", "Reset caused by JTAG"),
                ]),
                Field("SPOR", 7, 1, "Sticky Power-On Reset", [
                    EnumVal("SPOR_0", "0", "Reset not caused by POR"),
                    EnumVal("SPOR_1", "0x1", "Reset caused by POR"),
                ]),
                Field("SPIN", 6, 1, "Sticky External Reset Pin", [
                    EnumVal("SPIN_0", "0", "Reset not caused by external reset pin"),
                    EnumVal("SPIN_1", "0x1", "Reset caused by external reset pin"),
                ]),
                Field("SWDOG", 5, 1, "Sticky Watchdog", [
                    EnumVal("SWDOG_0", "0", "Reset not caused by watchdog timeout"),
                    EnumVal("SWDOG_1", "0x1", "Reset caused by watchdog timeout"),
                ]),
                Field("SLOL", 3, 1, "Sticky Loss-of-Lock Reset", [
                    EnumVal("SLOL_0", "0", "Reset not caused by a loss of lock in the PLL/FLL"),
                    EnumVal("SLOL_1", "0x1", "Reset caused by a loss of lock in the PLL/FLL"),
                ]),
                Field("SLOC", 2, 1, "Sticky Loss-of-Clock Reset", [
                    EnumVal("SLOC_0", "0", "Reset not caused by a loss of external clock."),
                    EnumVal("SLOC_1", "0x1", "Reset caused by a loss of external clock."),
                ]),
                Field("SLVD", 1, 1, "Sticky Low-Voltage Detect Reset", [
                    EnumVal("SLVD_0", "0", "Reset not caused by LVD trip or POR"),
                    EnumVal("SLVD_1", "0x1", "Reset caused by LVD trip or POR"),
                ]),
            ]),
            Register("SRIE", 0x4007F01C, 32, "System Reset Interrupt Enable Register", [
                Field("SACKERR", 13, 1, "Stop Acknowledge Error Interrupt", [
                    EnumVal("SACKERR_0", "0", "Interrupt disabled."),
                    EnumVal("SACKERR_1", "0x1", "Interrupt enabled."),
                ]),
                Field("MDM_AP", 11, 1, "MDM-AP System Reset Request", [
                    EnumVal("MDM_AP_0", "0", "Interrupt disabled."),
                    EnumVal("MDM_AP_1", "0x1", "Interrupt enabled."),
                ]),
                Field("SW", 10, 1, "Software Interrupt", [
                    EnumVal("SW_0", "0", "Interrupt disabled."),
                    EnumVal("SW_1", "0x1", "Interrupt enabled."),
                ]),
                Field("LOCKUP", 9, 1, "Core Lockup Interrupt", [
                    EnumVal("LOCKUP_0", "0", "Interrupt disabled."),
                    EnumVal("LOCKUP_1", "0x1", "Interrupt enabled."),
                ]),
                Field("JTAG", 8, 1, "JTAG generated reset", [
                    EnumVal("JTAG_0", "0", "Interrupt disabled."),
                    EnumVal("JTAG_1", "0x1", "Interrupt enabled."),
                ]),
                Field("GIE", 7, 1, "Global Interrupt Enable", [
                    EnumVal("GIE_0", "0", "All interrupt sources disabled."),
                    EnumVal("GIE_1", "0x1", "All interrupt sources enabled. Note that the individual interrupt-enable bits still need to be set to generate interrupts."),
                ]),
                Field("PIN", 6, 1, "External Reset Pin Interrupt", [
                    EnumVal("PIN_0", "0", "Reset not caused by external reset pin"),
                    EnumVal("PIN_1", "0x1", "Reset caused by external reset pin"),
                ]),
                Field("WDOG", 5, 1, "Watchdog Interrupt", [
                    EnumVal("WDOG_0", "0", "Interrupt disabled."),
                    EnumVal("WDOG_1", "0x1", "Interrupt enabled."),
                ]),
                Field("LOL", 3, 1, "Loss-of-Lock Interrupt", [
                    EnumVal("LOL_0", "0", "Interrupt disabled."),
                    EnumVal("LOL_1", "0x1", "Interrupt enabled."),
                ]),
                Field("LOC", 2, 1, "Loss-of-Clock Interrupt", [
                    EnumVal("LOC_0", "0", "Interrupt disabled."),
                    EnumVal("LOC_1", "0x1", "Interrupt enabled."),
                ]),
                Field("DELAY", 0, 2, "Reset Delay Time", [
                    EnumVal("DELAY_0", "0", "10 LPO cycles"),
                    EnumVal("DELAY_1", "0x1", "34 LPO cycles"),
                    EnumVal("DELAY_2", "0x2", "130 LPO cycles"),
                    EnumVal("DELAY_3", "0x3", "514 LPO cycles"),
                ]),
            ]),
        ])

class Module_RTC(Peripheral):
    def __init__(self):
        super().__init__("RTC", 0x4003D000, 0x20, [
            Register("TSR", 0x4003D000, 32, "RTC Time Seconds Register", [
                Field("TSR", 0, 32, "Time Seconds Register", [
                ]),
            ]),
            Register("TPR", 0x4003D004, 32, "RTC Time Prescaler Register", [
                Field("TPR", 0, 16, "Time Prescaler Register", [
                ]),
            ]),
            Register("TAR", 0x4003D008, 32, "RTC Time Alarm Register", [
                Field("TAR", 0, 32, "Time Alarm Register", [
                ]),
            ]),
            Register("TCR", 0x4003D00C, 32, "RTC Time Compensation Register", [
                Field("CIC", 24, 8, "Compensation Interval Counter", [
                ]),
                Field("TCV", 16, 8, "Time Compensation Value", [
                ]),
                Field("CIR", 8, 8, "Compensation Interval Register", [
                ]),
                Field("TCR", 0, 8, "Time Compensation Register", [
                    EnumVal("TCR_0", "0", "Time Prescaler Register overflows every 32768 clock cycles."),
                    EnumVal("TCR_1", "0x1", "Time Prescaler Register overflows every 32767 clock cycles."),
                    EnumVal("TCR_126", "0x7E", "Time Prescaler Register overflows every 32642 clock cycles."),
                    EnumVal("TCR_127", "0x7F", "Time Prescaler Register overflows every 32641 clock cycles."),
                    EnumVal("TCR_128", "0x80", "Time Prescaler Register overflows every 32896 clock cycles."),
                    EnumVal("TCR_129", "0x81", "Time Prescaler Register overflows every 32895 clock cycles."),
                    EnumVal("TCR_255", "0xFF", "Time Prescaler Register overflows every 32769 clock cycles."),
                ]),
            ]),
            Register("CR", 0x4003D010, 32, "RTC Control Register", [
                Field("CPE", 24, 1, "Clock Pin Enable", [
                    EnumVal("CPE_0", "0", "The RTC_CLKOUT function is disabled."),
                    EnumVal("CPE_1", "0x1", "Enable RTC_CLKOUT function."),
                ]),
                Field("CLKO", 9, 1, "Clock Output", [
                    EnumVal("CLKO_0", "0", "The 32 kHz clock is output to other peripherals."),
                    EnumVal("CLKO_1", "0x1", "The 32 kHz clock is not output to other peripherals."),
                ]),
                Field("LPOS", 7, 1, "LPO Select", [
                    EnumVal("LPOS_0", "0", "RTC prescaler increments using 32.768 kHz clock."),
                    EnumVal("LPOS_1", "0x1", "RTC prescaler increments using 1 kHz LPO, bits [4:0] of the prescaler are ignored."),
                ]),
                Field("CPS", 5, 1, "Clock Pin Select", [
                    EnumVal("CPS_0", "0", "The prescaler output clock (as configured by TSIC) is output on RTC_CLKOUT."),
                    EnumVal("CPS_1", "0x1", "The RTC 32.768 kHz clock is output on RTC_CLKOUT, provided it is output to other peripherals."),
                ]),
                Field("UM", 3, 1, "Update Mode", [
                    EnumVal("UM_0", "0", "Registers cannot be written when locked."),
                    EnumVal("UM_1", "0x1", "Registers can be written when locked under limited conditions."),
                ]),
                Field("SUP", 2, 1, "Supervisor Access", [
                    EnumVal("SUP_0", "0", "Non-supervisor mode write accesses are not supported and generate a bus error."),
                    EnumVal("SUP_1", "0x1", "Non-supervisor mode write accesses are supported."),
                ]),
                Field("SWR", 0, 1, "Software Reset", [
                    EnumVal("SWR_0", "0", "No effect."),
                    EnumVal("SWR_1", "0x1", "Resets all RTC registers except for the SWR bit . The SWR bit is cleared by POR and by software explicitly clearing it."),
                ]),
            ]),
            Register("SR", 0x4003D014, 32, "RTC Status Register", [
                Field("TCE", 4, 1, "Time Counter Enable", [
                    EnumVal("TCE_0", "0", "Time counter is disabled."),
                    EnumVal("TCE_1", "0x1", "Time counter is enabled."),
                ]),
                Field("TAF", 2, 1, "Time Alarm Flag", [
                    EnumVal("TAF_0", "0", "Time alarm has not occurred."),
                    EnumVal("TAF_1", "0x1", "Time alarm has occurred."),
                ]),
                Field("TOF", 1, 1, "Time Overflow Flag", [
                    EnumVal("TOF_0", "0", "Time overflow has not occurred."),
                    EnumVal("TOF_1", "0x1", "Time overflow has occurred and time counter is read as zero."),
                ]),
                Field("TIF", 0, 1, "Time Invalid Flag", [
                    EnumVal("TIF_0", "0", "Time is valid."),
                    EnumVal("TIF_1", "0x1", "Time is invalid and time counter is read as zero."),
                ]),
            ]),
            Register("LR", 0x4003D018, 32, "RTC Lock Register", [
                Field("LRL", 6, 1, "Lock Register Lock", [
                    EnumVal("LRL_0", "0", "Lock Register is locked and writes are ignored."),
                    EnumVal("LRL_1", "0x1", "Lock Register is not locked and writes complete as normal."),
                ]),
                Field("SRL", 5, 1, "Status Register Lock", [
                    EnumVal("SRL_0", "0", "Status Register is locked and writes are ignored."),
                    EnumVal("SRL_1", "0x1", "Status Register is not locked and writes complete as normal."),
                ]),
                Field("CRL", 4, 1, "Control Register Lock", [
                    EnumVal("CRL_0", "0", "Control Register is locked and writes are ignored."),
                    EnumVal("CRL_1", "0x1", "Control Register is not locked and writes complete as normal."),
                ]),
                Field("TCL", 3, 1, "Time Compensation Lock", [
                    EnumVal("TCL_0", "0", "Time Compensation Register is locked and writes are ignored."),
                    EnumVal("TCL_1", "0x1", "Time Compensation Register is not locked and writes complete as normal."),
                ]),
            ]),
            Register("IER", 0x4003D01C, 32, "RTC Interrupt Enable Register", [
                Field("TSIC", 16, 3, "Timer Seconds Interrupt Configuration", [
                    EnumVal("TSIC_0", "0", "1 Hz."),
                    EnumVal("TSIC_1", "0x1", "2 Hz."),
                    EnumVal("TSIC_2", "0x2", "4 Hz."),
                    EnumVal("TSIC_3", "0x3", "8 Hz."),
                    EnumVal("TSIC_4", "0x4", "16 Hz."),
                    EnumVal("TSIC_5", "0x5", "32 Hz."),
                    EnumVal("TSIC_6", "0x6", "64 Hz."),
                    EnumVal("TSIC_7", "0x7", "128 Hz."),
                ]),
                Field("TSIE", 4, 1, "Time Seconds Interrupt Enable", [
                    EnumVal("TSIE_0", "0", "Seconds interrupt is disabled."),
                    EnumVal("TSIE_1", "0x1", "Seconds interrupt is enabled."),
                ]),
                Field("TAIE", 2, 1, "Time Alarm Interrupt Enable", [
                    EnumVal("TAIE_0", "0", "Time alarm flag does not generate an interrupt."),
                    EnumVal("TAIE_1", "0x1", "Time alarm flag does generate an interrupt."),
                ]),
                Field("TOIE", 1, 1, "Time Overflow Interrupt Enable", [
                    EnumVal("TOIE_0", "0", "Time overflow flag does not generate an interrupt."),
                    EnumVal("TOIE_1", "0x1", "Time overflow flag does generate an interrupt."),
                ]),
                Field("TIIE", 0, 1, "Time Invalid Interrupt Enable", [
                    EnumVal("TIIE_0", "0", "Time invalid flag does not generate an interrupt."),
                    EnumVal("TIIE_1", "0x1", "Time invalid flag does generate an interrupt."),
                ]),
            ]),
        ])

class Module_SAI0(Peripheral):
    def __init__(self):
        super().__init__("SAI0", 0x40054000, 0xE4, [
            Register("VERID", 0x40054000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("FEATURE_0", "0", "Standard feature set."),
                ]),
            ]),
            Register("PARAM", 0x40054004, 32, "Parameter Register", [
                Field("FRAME", 16, 4, "Frame Size", [
                ]),
                Field("FIFO", 8, 4, "FIFO Size", [
                ]),
                Field("DATALINE", 0, 4, "Number of Datalines", [
                ]),
            ]),
            Register("TCSR", 0x40054008, 32, "SAI Transmit Control Register", [
                Field("TE", 31, 1, "Transmitter Enable", [
                    EnumVal("TE_0", "0", "Transmitter is disabled."),
                    EnumVal("TE_1", "0x1", "Transmitter is enabled, or transmitter has been disabled and has not yet reached end of frame."),
                ]),
                Field("DBGE", 29, 1, "Debug Enable", [
                    EnumVal("DBGE_0", "0", "Transmitter is disabled in Debug mode, after completing the current frame."),
                    EnumVal("DBGE_1", "0x1", "Transmitter is enabled in Debug mode."),
                ]),
                Field("BCE", 28, 1, "Bit Clock Enable", [
                    EnumVal("BCE_0", "0", "Transmit bit clock is disabled."),
                    EnumVal("BCE_1", "0x1", "Transmit bit clock is enabled."),
                ]),
                Field("FR", 25, 1, "FIFO Reset", [
                    EnumVal("FR_0", "0", "No effect."),
                    EnumVal("FR_1", "0x1", "FIFO reset."),
                ]),
                Field("SR", 24, 1, "Software Reset", [
                    EnumVal("SR_0", "0", "No effect."),
                    EnumVal("SR_1", "0x1", "Software reset."),
                ]),
                Field("WSF", 20, 1, "Word Start Flag", [
                    EnumVal("WSF_0", "0", "Start of word not detected."),
                    EnumVal("WSF_1", "0x1", "Start of word detected."),
                ]),
                Field("SEF", 19, 1, "Sync Error Flag", [
                    EnumVal("SEF_0", "0", "Sync error not detected."),
                    EnumVal("SEF_1", "0x1", "Frame sync error detected."),
                ]),
                Field("FEF", 18, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "Transmit underrun not detected."),
                    EnumVal("FEF_1", "0x1", "Transmit underrun detected."),
                ]),
                Field("FWF", 17, 1, "FIFO Warning Flag", [
                    EnumVal("FWF_0", "0", "No enabled transmit FIFO is empty."),
                    EnumVal("FWF_1", "0x1", "Enabled transmit FIFO is empty."),
                ]),
                Field("FRF", 16, 1, "FIFO Request Flag", [
                    EnumVal("FRF_0", "0", "Transmit FIFO watermark has not been reached."),
                    EnumVal("FRF_1", "0x1", "Transmit FIFO watermark has been reached."),
                ]),
                Field("WSIE", 12, 1, "Word Start Interrupt Enable", [
                    EnumVal("WSIE_0", "0", "Disables interrupt."),
                    EnumVal("WSIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("SEIE", 11, 1, "Sync Error Interrupt Enable", [
                    EnumVal("SEIE_0", "0", "Disables interrupt."),
                    EnumVal("SEIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("FEIE", 10, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Disables the interrupt."),
                    EnumVal("FEIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWIE", 9, 1, "FIFO Warning Interrupt Enable", [
                    EnumVal("FWIE_0", "0", "Disables the interrupt."),
                    EnumVal("FWIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FRIE", 8, 1, "FIFO Request Interrupt Enable", [
                    EnumVal("FRIE_0", "0", "Disables the interrupt."),
                    EnumVal("FRIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWDE", 1, 1, "FIFO Warning DMA Enable", [
                    EnumVal("FWDE_0", "0", "Disables the DMA request."),
                    EnumVal("FWDE_1", "0x1", "Enables the DMA request."),
                ]),
                Field("FRDE", 0, 1, "FIFO Request DMA Enable", [
                    EnumVal("FRDE_0", "0", "Disables the DMA request."),
                    EnumVal("FRDE_1", "0x1", "Enables the DMA request."),
                ]),
            ]),
            Register("TCR1", 0x4005400C, 32, "SAI Transmit Configuration 1 Register", [
                Field("TFW", 0, 3, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("TCR2", 0x40054010, 32, "SAI Transmit Configuration 2 Register", [
                Field("SYNC", 30, 2, "Synchronous Mode", [
                    EnumVal("SYNC_0", "0", "Asynchronous mode."),
                    EnumVal("SYNC_1", "0x1", "Synchronous with receiver."),
                ]),
                Field("BCI", 28, 1, "Bit Clock Input", [
                    EnumVal("BCI_0", "0", "No effect."),
                    EnumVal("BCI_1", "0x1", "Internal logic is clocked as if bit clock was externally generated."),
                ]),
                Field("MSEL", 26, 2, "MCLK Select", [
                    EnumVal("MSEL_0", "0", "Bus Clock selected."),
                    EnumVal("MSEL_1", "0x1", "Master Clock (MCLK) 1 option selected."),
                    EnumVal("MSEL_2", "0x2", "Master Clock (MCLK) 2 option selected."),
                    EnumVal("MSEL_3", "0x3", "Master Clock (MCLK) 3 option selected."),
                ]),
                Field("BCP", 25, 1, "Bit Clock Polarity", [
                    EnumVal("BCP_0", "0", "Bit clock is active high with drive outputs on rising edge and sample inputs on falling edge."),
                    EnumVal("BCP_1", "0x1", "Bit clock is active low with drive outputs on falling edge and sample inputs on rising edge."),
                ]),
                Field("BCD", 24, 1, "Bit Clock Direction", [
                    EnumVal("BCD_0", "0", "Bit clock is generated externally in Slave mode."),
                    EnumVal("BCD_1", "0x1", "Bit clock is generated internally in Master mode."),
                ]),
                Field("DIV", 0, 8, "Bit Clock Divide", [
                ]),
            ]),
            Register("TCR3", 0x40054014, 32, "SAI Transmit Configuration 3 Register", [
                Field("CFR", 24, 4, "Channel FIFO Reset", [
                ]),
                Field("TCE", 16, 4, "Transmit Channel Enable", [
                ]),
                Field("WDFL", 0, 4, "Word Flag Configuration", [
                ]),
            ]),
            Register("TCR4", 0x40054018, 32, "SAI Transmit Configuration 4 Register", [
                Field("FCONT", 28, 1, "FIFO Continue on Error", [
                    EnumVal("FCONT_0", "0", "On FIFO error, the SAI will continue from the start of the next frame after the FIFO error flag has been cleared."),
                    EnumVal("FCONT_1", "0x1", "On FIFO error, the SAI will continue from the same word that caused the FIFO error to set after the FIFO warning flag has been cleared."),
                ]),
                Field("FCOMB", 26, 2, "FIFO Combine Mode", [
                    EnumVal("FCOMB_0", "0", "FIFO combine mode disabled."),
                    EnumVal("FCOMB_1", "0x1", "FIFO combine mode enabled on FIFO reads (from transmit shift registers)."),
                    EnumVal("FCOMB_2", "0x2", "FIFO combine mode enabled on FIFO writes (by software)."),
                    EnumVal("FCOMB_3", "0x3", "FIFO combine mode enabled on FIFO reads (from transmit shift registers) and writes (by software)."),
                ]),
                Field("FPACK", 24, 2, "FIFO Packing Mode", [
                    EnumVal("FPACK_0", "0", "FIFO packing is disabled"),
                    EnumVal("FPACK_2", "0x2", "8-bit FIFO packing is enabled"),
                    EnumVal("FPACK_3", "0x3", "16-bit FIFO packing is enabled"),
                ]),
                Field("FRSZ", 16, 4, "Frame size", [
                ]),
                Field("SYWD", 8, 5, "Sync Width", [
                ]),
                Field("CHMOD", 5, 1, "Channel Mode", [
                    EnumVal("CHMOD_0", "0", "TDM mode, transmit data pins are tri-stated when slots are masked or channels are disabled."),
                    EnumVal("CHMOD_1", "0x1", "Output mode, transmit data pins are never tri-stated and will output zero when slots are masked or channels are disabled."),
                ]),
                Field("MF", 4, 1, "MSB First", [
                    EnumVal("MF_0", "0", "LSB is transmitted first."),
                    EnumVal("MF_1", "0x1", "MSB is transmitted first."),
                ]),
                Field("FSE", 3, 1, "Frame Sync Early", [
                    EnumVal("FSE_0", "0", "Frame sync asserts with the first bit of the frame."),
                    EnumVal("FSE_1", "0x1", "Frame sync asserts one bit before the first bit of the frame."),
                ]),
                Field("ONDEM", 2, 1, "On Demand Mode", [
                    EnumVal("ONDEM_0", "0", "Internal frame sync is generated continuously."),
                    EnumVal("ONDEM_1", "0x1", "Internal frame sync is generated when the FIFO warning flag is clear."),
                ]),
                Field("FSP", 1, 1, "Frame Sync Polarity", [
                    EnumVal("FSP_0", "0", "Frame sync is active high."),
                    EnumVal("FSP_1", "0x1", "Frame sync is active low."),
                ]),
                Field("FSD", 0, 1, "Frame Sync Direction", [
                    EnumVal("FSD_0", "0", "Frame sync is generated externally in Slave mode."),
                    EnumVal("FSD_1", "0x1", "Frame sync is generated internally in Master mode."),
                ]),
            ]),
            Register("TCR5", 0x4005401C, 32, "SAI Transmit Configuration 5 Register", [
                Field("WNW", 24, 5, "Word N Width", [
                ]),
                Field("W0W", 16, 5, "Word 0 Width", [
                ]),
                Field("FBT", 8, 5, "First Bit Shifted", [
                ]),
            ]),
            Register("TDR[0]", 0x40054020, 32, "SAI Transmit Data Register", [
                Field("TDR", 0, 32, "Transmit Data Register", [
                ]),
            ]),
            Register("TDR[1]", 0x40054024, 32, "SAI Transmit Data Register", [
                Field("TDR", 0, 32, "Transmit Data Register", [
                ]),
            ]),
            Register("TDR[2]", 0x40054028, 32, "SAI Transmit Data Register", [
                Field("TDR", 0, 32, "Transmit Data Register", [
                ]),
            ]),
            Register("TDR[3]", 0x4005402C, 32, "SAI Transmit Data Register", [
                Field("TDR", 0, 32, "Transmit Data Register", [
                ]),
            ]),
            Register("TFR[0]", 0x40054040, 32, "SAI Transmit FIFO Register", [
                Field("WCP", 31, 1, "Write Channel Pointer", [
                    EnumVal("WCP_0", "0", "No effect."),
                    EnumVal("WCP_1", "0x1", "FIFO combine is enabled for FIFO writes and this FIFO will be written on the next FIFO write."),
                ]),
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("TFR[1]", 0x40054044, 32, "SAI Transmit FIFO Register", [
                Field("WCP", 31, 1, "Write Channel Pointer", [
                    EnumVal("WCP_0", "0", "No effect."),
                    EnumVal("WCP_1", "0x1", "FIFO combine is enabled for FIFO writes and this FIFO will be written on the next FIFO write."),
                ]),
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("TFR[2]", 0x40054048, 32, "SAI Transmit FIFO Register", [
                Field("WCP", 31, 1, "Write Channel Pointer", [
                    EnumVal("WCP_0", "0", "No effect."),
                    EnumVal("WCP_1", "0x1", "FIFO combine is enabled for FIFO writes and this FIFO will be written on the next FIFO write."),
                ]),
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("TFR[3]", 0x4005404C, 32, "SAI Transmit FIFO Register", [
                Field("WCP", 31, 1, "Write Channel Pointer", [
                    EnumVal("WCP_0", "0", "No effect."),
                    EnumVal("WCP_1", "0x1", "FIFO combine is enabled for FIFO writes and this FIFO will be written on the next FIFO write."),
                ]),
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("TMR", 0x40054060, 32, "SAI Transmit Mask Register", [
                Field("TWM", 0, 16, "Transmit Word Mask", [
                    EnumVal("TWM_0", "0", "Word N is enabled."),
                    EnumVal("TWM_1", "0x1", "Word N is masked. The transmit data pins are tri-stated or drive zero when masked."),
                ]),
            ]),
            Register("RCSR", 0x40054088, 32, "SAI Receive Control Register", [
                Field("RE", 31, 1, "Receiver Enable", [
                    EnumVal("RE_0", "0", "Receiver is disabled."),
                    EnumVal("RE_1", "0x1", "Receiver is enabled, or receiver has been disabled and has not yet reached end of frame."),
                ]),
                Field("DBGE", 29, 1, "Debug Enable", [
                    EnumVal("DBGE_0", "0", "Receiver is disabled in Debug mode, after completing the current frame."),
                    EnumVal("DBGE_1", "0x1", "Receiver is enabled in Debug mode."),
                ]),
                Field("BCE", 28, 1, "Bit Clock Enable", [
                    EnumVal("BCE_0", "0", "Receive bit clock is disabled."),
                    EnumVal("BCE_1", "0x1", "Receive bit clock is enabled."),
                ]),
                Field("FR", 25, 1, "FIFO Reset", [
                    EnumVal("FR_0", "0", "No effect."),
                    EnumVal("FR_1", "0x1", "FIFO reset."),
                ]),
                Field("SR", 24, 1, "Software Reset", [
                    EnumVal("SR_0", "0", "No effect."),
                    EnumVal("SR_1", "0x1", "Software reset."),
                ]),
                Field("WSF", 20, 1, "Word Start Flag", [
                    EnumVal("WSF_0", "0", "Start of word not detected."),
                    EnumVal("WSF_1", "0x1", "Start of word detected."),
                ]),
                Field("SEF", 19, 1, "Sync Error Flag", [
                    EnumVal("SEF_0", "0", "Sync error not detected."),
                    EnumVal("SEF_1", "0x1", "Frame sync error detected."),
                ]),
                Field("FEF", 18, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "Receive overflow not detected."),
                    EnumVal("FEF_1", "0x1", "Receive overflow detected."),
                ]),
                Field("FWF", 17, 1, "FIFO Warning Flag", [
                    EnumVal("FWF_0", "0", "No enabled receive FIFO is full."),
                    EnumVal("FWF_1", "0x1", "Enabled receive FIFO is full."),
                ]),
                Field("FRF", 16, 1, "FIFO Request Flag", [
                    EnumVal("FRF_0", "0", "Receive FIFO watermark not reached."),
                    EnumVal("FRF_1", "0x1", "Receive FIFO watermark has been reached."),
                ]),
                Field("WSIE", 12, 1, "Word Start Interrupt Enable", [
                    EnumVal("WSIE_0", "0", "Disables interrupt."),
                    EnumVal("WSIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("SEIE", 11, 1, "Sync Error Interrupt Enable", [
                    EnumVal("SEIE_0", "0", "Disables interrupt."),
                    EnumVal("SEIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("FEIE", 10, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Disables the interrupt."),
                    EnumVal("FEIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWIE", 9, 1, "FIFO Warning Interrupt Enable", [
                    EnumVal("FWIE_0", "0", "Disables the interrupt."),
                    EnumVal("FWIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FRIE", 8, 1, "FIFO Request Interrupt Enable", [
                    EnumVal("FRIE_0", "0", "Disables the interrupt."),
                    EnumVal("FRIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWDE", 1, 1, "FIFO Warning DMA Enable", [
                    EnumVal("FWDE_0", "0", "Disables the DMA request."),
                    EnumVal("FWDE_1", "0x1", "Enables the DMA request."),
                ]),
                Field("FRDE", 0, 1, "FIFO Request DMA Enable", [
                    EnumVal("FRDE_0", "0", "Disables the DMA request."),
                    EnumVal("FRDE_1", "0x1", "Enables the DMA request."),
                ]),
            ]),
            Register("RCR1", 0x4005408C, 32, "SAI Receive Configuration 1 Register", [
                Field("RFW", 0, 3, "Receive FIFO Watermark", [
                ]),
            ]),
            Register("RCR2", 0x40054090, 32, "SAI Receive Configuration 2 Register", [
                Field("SYNC", 30, 2, "Synchronous Mode", [
                    EnumVal("SYNC_0", "0", "Asynchronous mode."),
                    EnumVal("SYNC_1", "0x1", "Synchronous with transmitter."),
                ]),
                Field("BCI", 28, 1, "Bit Clock Input", [
                    EnumVal("BCI_0", "0", "No effect."),
                    EnumVal("BCI_1", "0x1", "Internal logic is clocked as if bit clock was externally generated."),
                ]),
                Field("MSEL", 26, 2, "MCLK Select", [
                    EnumVal("MSEL_0", "0", "Bus Clock selected."),
                    EnumVal("MSEL_1", "0x1", "Master Clock (MCLK) 1 option selected."),
                    EnumVal("MSEL_2", "0x2", "Master Clock (MCLK) 2 option selected."),
                    EnumVal("MSEL_3", "0x3", "Master Clock (MCLK) 3 option selected."),
                ]),
                Field("BCP", 25, 1, "Bit Clock Polarity", [
                    EnumVal("BCP_0", "0", "Bit Clock is active high with drive outputs on rising edge and sample inputs on falling edge."),
                    EnumVal("BCP_1", "0x1", "Bit Clock is active low with drive outputs on falling edge and sample inputs on rising edge."),
                ]),
                Field("BCD", 24, 1, "Bit Clock Direction", [
                    EnumVal("BCD_0", "0", "Bit clock is generated externally in Slave mode."),
                    EnumVal("BCD_1", "0x1", "Bit clock is generated internally in Master mode."),
                ]),
                Field("DIV", 0, 8, "Bit Clock Divide", [
                ]),
            ]),
            Register("RCR3", 0x40054094, 32, "SAI Receive Configuration 3 Register", [
                Field("CFR", 24, 4, "Channel FIFO Reset", [
                ]),
                Field("RCE", 16, 4, "Receive Channel Enable", [
                ]),
                Field("WDFL", 0, 4, "Word Flag Configuration", [
                ]),
            ]),
            Register("RCR4", 0x40054098, 32, "SAI Receive Configuration 4 Register", [
                Field("FCONT", 28, 1, "FIFO Continue on Error", [
                    EnumVal("FCONT_0", "0", "On FIFO error, the SAI will continue from the start of the next frame after the FIFO error flag has been cleared."),
                    EnumVal("FCONT_1", "0x1", "On FIFO error, the SAI will continue from the same word that caused the FIFO error to set after the FIFO warning flag has been cleared."),
                ]),
                Field("FCOMB", 26, 2, "FIFO Combine Mode", [
                    EnumVal("FCOMB_0", "0", "FIFO combine mode disabled."),
                    EnumVal("FCOMB_1", "0x1", "FIFO combine mode enabled on FIFO writes (from receive shift registers)."),
                    EnumVal("FCOMB_2", "0x2", "FIFO combine mode enabled on FIFO reads (by software)."),
                    EnumVal("FCOMB_3", "0x3", "FIFO combine mode enabled on FIFO writes (from receive shift registers) and reads (by software)."),
                ]),
                Field("FPACK", 24, 2, "FIFO Packing Mode", [
                    EnumVal("FPACK_0", "0", "FIFO packing is disabled"),
                    EnumVal("FPACK_2", "0x2", "8-bit FIFO packing is enabled"),
                    EnumVal("FPACK_3", "0x3", "16-bit FIFO packing is enabled"),
                ]),
                Field("FRSZ", 16, 4, "Frame Size", [
                ]),
                Field("SYWD", 8, 5, "Sync Width", [
                ]),
                Field("MF", 4, 1, "MSB First", [
                    EnumVal("MF_0", "0", "LSB is received first."),
                    EnumVal("MF_1", "0x1", "MSB is received first."),
                ]),
                Field("FSE", 3, 1, "Frame Sync Early", [
                    EnumVal("FSE_0", "0", "Frame sync asserts with the first bit of the frame."),
                    EnumVal("FSE_1", "0x1", "Frame sync asserts one bit before the first bit of the frame."),
                ]),
                Field("ONDEM", 2, 1, "On Demand Mode", [
                    EnumVal("ONDEM_0", "0", "Internal frame sync is generated continuously."),
                    EnumVal("ONDEM_1", "0x1", "Internal frame sync is generated when the FIFO warning flag is clear."),
                ]),
                Field("FSP", 1, 1, "Frame Sync Polarity", [
                    EnumVal("FSP_0", "0", "Frame sync is active high."),
                    EnumVal("FSP_1", "0x1", "Frame sync is active low."),
                ]),
                Field("FSD", 0, 1, "Frame Sync Direction", [
                    EnumVal("FSD_0", "0", "Frame Sync is generated externally in Slave mode."),
                    EnumVal("FSD_1", "0x1", "Frame Sync is generated internally in Master mode."),
                ]),
            ]),
            Register("RCR5", 0x4005409C, 32, "SAI Receive Configuration 5 Register", [
                Field("WNW", 24, 5, "Word N Width", [
                ]),
                Field("W0W", 16, 5, "Word 0 Width", [
                ]),
                Field("FBT", 8, 5, "First Bit Shifted", [
                ]),
            ]),
            Register("RDR[0]", 0x400540A0, 32, "SAI Receive Data Register", [
                Field("RDR", 0, 32, "Receive Data Register", [
                ]),
            ]),
            Register("RDR[1]", 0x400540A4, 32, "SAI Receive Data Register", [
                Field("RDR", 0, 32, "Receive Data Register", [
                ]),
            ]),
            Register("RDR[2]", 0x400540A8, 32, "SAI Receive Data Register", [
                Field("RDR", 0, 32, "Receive Data Register", [
                ]),
            ]),
            Register("RDR[3]", 0x400540AC, 32, "SAI Receive Data Register", [
                Field("RDR", 0, 32, "Receive Data Register", [
                ]),
            ]),
            Register("RFR[0]", 0x400540C0, 32, "SAI Receive FIFO Register", [
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RCP", 15, 1, "Receive Channel Pointer", [
                    EnumVal("RCP_0", "0", "No effect."),
                    EnumVal("RCP_1", "0x1", "FIFO combine is enabled for FIFO reads and this FIFO will be read on the next FIFO read."),
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("RFR[1]", 0x400540C4, 32, "SAI Receive FIFO Register", [
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RCP", 15, 1, "Receive Channel Pointer", [
                    EnumVal("RCP_0", "0", "No effect."),
                    EnumVal("RCP_1", "0x1", "FIFO combine is enabled for FIFO reads and this FIFO will be read on the next FIFO read."),
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("RFR[2]", 0x400540C8, 32, "SAI Receive FIFO Register", [
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RCP", 15, 1, "Receive Channel Pointer", [
                    EnumVal("RCP_0", "0", "No effect."),
                    EnumVal("RCP_1", "0x1", "FIFO combine is enabled for FIFO reads and this FIFO will be read on the next FIFO read."),
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("RFR[3]", 0x400540CC, 32, "SAI Receive FIFO Register", [
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RCP", 15, 1, "Receive Channel Pointer", [
                    EnumVal("RCP_0", "0", "No effect."),
                    EnumVal("RCP_1", "0x1", "FIFO combine is enabled for FIFO reads and this FIFO will be read on the next FIFO read."),
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("RMR", 0x400540E0, 32, "SAI Receive Mask Register", [
                Field("RWM", 0, 16, "Receive Word Mask", [
                    EnumVal("RWM_0", "0", "Word N is enabled."),
                    EnumVal("RWM_1", "0x1", "Word N is masked."),
                ]),
            ]),
        ])

class Module_SAI1(Peripheral):
    def __init__(self):
        super().__init__("SAI1", 0x40055000, 0xE4, [
            Register("VERID", 0x40055000, 32, "Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("FEATURE_0", "0", "Standard feature set."),
                ]),
            ]),
            Register("PARAM", 0x40055004, 32, "Parameter Register", [
                Field("FRAME", 16, 4, "Frame Size", [
                ]),
                Field("FIFO", 8, 4, "FIFO Size", [
                ]),
                Field("DATALINE", 0, 4, "Number of Datalines", [
                ]),
            ]),
            Register("TCSR", 0x40055008, 32, "SAI Transmit Control Register", [
                Field("TE", 31, 1, "Transmitter Enable", [
                    EnumVal("TE_0", "0", "Transmitter is disabled."),
                    EnumVal("TE_1", "0x1", "Transmitter is enabled, or transmitter has been disabled and has not yet reached end of frame."),
                ]),
                Field("DBGE", 29, 1, "Debug Enable", [
                    EnumVal("DBGE_0", "0", "Transmitter is disabled in Debug mode, after completing the current frame."),
                    EnumVal("DBGE_1", "0x1", "Transmitter is enabled in Debug mode."),
                ]),
                Field("BCE", 28, 1, "Bit Clock Enable", [
                    EnumVal("BCE_0", "0", "Transmit bit clock is disabled."),
                    EnumVal("BCE_1", "0x1", "Transmit bit clock is enabled."),
                ]),
                Field("FR", 25, 1, "FIFO Reset", [
                    EnumVal("FR_0", "0", "No effect."),
                    EnumVal("FR_1", "0x1", "FIFO reset."),
                ]),
                Field("SR", 24, 1, "Software Reset", [
                    EnumVal("SR_0", "0", "No effect."),
                    EnumVal("SR_1", "0x1", "Software reset."),
                ]),
                Field("WSF", 20, 1, "Word Start Flag", [
                    EnumVal("WSF_0", "0", "Start of word not detected."),
                    EnumVal("WSF_1", "0x1", "Start of word detected."),
                ]),
                Field("SEF", 19, 1, "Sync Error Flag", [
                    EnumVal("SEF_0", "0", "Sync error not detected."),
                    EnumVal("SEF_1", "0x1", "Frame sync error detected."),
                ]),
                Field("FEF", 18, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "Transmit underrun not detected."),
                    EnumVal("FEF_1", "0x1", "Transmit underrun detected."),
                ]),
                Field("FWF", 17, 1, "FIFO Warning Flag", [
                    EnumVal("FWF_0", "0", "No enabled transmit FIFO is empty."),
                    EnumVal("FWF_1", "0x1", "Enabled transmit FIFO is empty."),
                ]),
                Field("FRF", 16, 1, "FIFO Request Flag", [
                    EnumVal("FRF_0", "0", "Transmit FIFO watermark has not been reached."),
                    EnumVal("FRF_1", "0x1", "Transmit FIFO watermark has been reached."),
                ]),
                Field("WSIE", 12, 1, "Word Start Interrupt Enable", [
                    EnumVal("WSIE_0", "0", "Disables interrupt."),
                    EnumVal("WSIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("SEIE", 11, 1, "Sync Error Interrupt Enable", [
                    EnumVal("SEIE_0", "0", "Disables interrupt."),
                    EnumVal("SEIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("FEIE", 10, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Disables the interrupt."),
                    EnumVal("FEIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWIE", 9, 1, "FIFO Warning Interrupt Enable", [
                    EnumVal("FWIE_0", "0", "Disables the interrupt."),
                    EnumVal("FWIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FRIE", 8, 1, "FIFO Request Interrupt Enable", [
                    EnumVal("FRIE_0", "0", "Disables the interrupt."),
                    EnumVal("FRIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWDE", 1, 1, "FIFO Warning DMA Enable", [
                    EnumVal("FWDE_0", "0", "Disables the DMA request."),
                    EnumVal("FWDE_1", "0x1", "Enables the DMA request."),
                ]),
                Field("FRDE", 0, 1, "FIFO Request DMA Enable", [
                    EnumVal("FRDE_0", "0", "Disables the DMA request."),
                    EnumVal("FRDE_1", "0x1", "Enables the DMA request."),
                ]),
            ]),
            Register("TCR1", 0x4005500C, 32, "SAI Transmit Configuration 1 Register", [
                Field("TFW", 0, 3, "Transmit FIFO Watermark", [
                ]),
            ]),
            Register("TCR2", 0x40055010, 32, "SAI Transmit Configuration 2 Register", [
                Field("SYNC", 30, 2, "Synchronous Mode", [
                    EnumVal("SYNC_0", "0", "Asynchronous mode."),
                    EnumVal("SYNC_1", "0x1", "Synchronous with receiver."),
                ]),
                Field("BCI", 28, 1, "Bit Clock Input", [
                    EnumVal("BCI_0", "0", "No effect."),
                    EnumVal("BCI_1", "0x1", "Internal logic is clocked as if bit clock was externally generated."),
                ]),
                Field("MSEL", 26, 2, "MCLK Select", [
                    EnumVal("MSEL_0", "0", "Bus Clock selected."),
                    EnumVal("MSEL_1", "0x1", "Master Clock (MCLK) 1 option selected."),
                    EnumVal("MSEL_2", "0x2", "Master Clock (MCLK) 2 option selected."),
                    EnumVal("MSEL_3", "0x3", "Master Clock (MCLK) 3 option selected."),
                ]),
                Field("BCP", 25, 1, "Bit Clock Polarity", [
                    EnumVal("BCP_0", "0", "Bit clock is active high with drive outputs on rising edge and sample inputs on falling edge."),
                    EnumVal("BCP_1", "0x1", "Bit clock is active low with drive outputs on falling edge and sample inputs on rising edge."),
                ]),
                Field("BCD", 24, 1, "Bit Clock Direction", [
                    EnumVal("BCD_0", "0", "Bit clock is generated externally in Slave mode."),
                    EnumVal("BCD_1", "0x1", "Bit clock is generated internally in Master mode."),
                ]),
                Field("DIV", 0, 8, "Bit Clock Divide", [
                ]),
            ]),
            Register("TCR3", 0x40055014, 32, "SAI Transmit Configuration 3 Register", [
                Field("TCE", 16, 1, "Transmit Channel Enable", [
                ]),
                Field("WDFL", 0, 4, "Word Flag Configuration", [
                ]),
            ]),
            Register("TCR4", 0x40055018, 32, "SAI Transmit Configuration 4 Register", [
                Field("FCONT", 28, 1, "FIFO Continue on Error", [
                    EnumVal("FCONT_0", "0", "On FIFO error, the SAI will continue from the start of the next frame after the FIFO error flag has been cleared."),
                    EnumVal("FCONT_1", "0x1", "On FIFO error, the SAI will continue from the same word that caused the FIFO error to set after the FIFO warning flag has been cleared."),
                ]),
                Field("FPACK", 24, 2, "FIFO Packing Mode", [
                    EnumVal("FPACK_0", "0", "FIFO packing is disabled"),
                    EnumVal("FPACK_2", "0x2", "8-bit FIFO packing is enabled"),
                    EnumVal("FPACK_3", "0x3", "16-bit FIFO packing is enabled"),
                ]),
                Field("FRSZ", 16, 4, "Frame size", [
                ]),
                Field("SYWD", 8, 5, "Sync Width", [
                ]),
                Field("CHMOD", 5, 1, "Channel Mode", [
                    EnumVal("CHMOD_0", "0", "TDM mode, transmit data pins are tri-stated when slots are masked or channels are disabled."),
                    EnumVal("CHMOD_1", "0x1", "Output mode, transmit data pins are never tri-stated and will output zero when slots are masked or channels are disabled."),
                ]),
                Field("MF", 4, 1, "MSB First", [
                    EnumVal("MF_0", "0", "LSB is transmitted first."),
                    EnumVal("MF_1", "0x1", "MSB is transmitted first."),
                ]),
                Field("FSE", 3, 1, "Frame Sync Early", [
                    EnumVal("FSE_0", "0", "Frame sync asserts with the first bit of the frame."),
                    EnumVal("FSE_1", "0x1", "Frame sync asserts one bit before the first bit of the frame."),
                ]),
                Field("ONDEM", 2, 1, "On Demand Mode", [
                    EnumVal("ONDEM_0", "0", "Internal frame sync is generated continuously."),
                    EnumVal("ONDEM_1", "0x1", "Internal frame sync is generated when the FIFO warning flag is clear."),
                ]),
                Field("FSP", 1, 1, "Frame Sync Polarity", [
                    EnumVal("FSP_0", "0", "Frame sync is active high."),
                    EnumVal("FSP_1", "0x1", "Frame sync is active low."),
                ]),
                Field("FSD", 0, 1, "Frame Sync Direction", [
                    EnumVal("FSD_0", "0", "Frame sync is generated externally in Slave mode."),
                    EnumVal("FSD_1", "0x1", "Frame sync is generated internally in Master mode."),
                ]),
            ]),
            Register("TCR5", 0x4005501C, 32, "SAI Transmit Configuration 5 Register", [
                Field("WNW", 24, 5, "Word N Width", [
                ]),
                Field("W0W", 16, 5, "Word 0 Width", [
                ]),
                Field("FBT", 8, 5, "First Bit Shifted", [
                ]),
            ]),
            Register("TDR0", 0x40055020, 32, "SAI Transmit Data Register", [
                Field("TDR", 0, 32, "Transmit Data Register", [
                ]),
            ]),
            Register("TFR0", 0x40055040, 32, "SAI Transmit FIFO Register", [
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("TMR", 0x40055060, 32, "SAI Transmit Mask Register", [
                Field("TWM", 0, 16, "Transmit Word Mask", [
                    EnumVal("TWM_0", "0", "Word N is enabled."),
                    EnumVal("TWM_1", "0x1", "Word N is masked. The transmit data pins are tri-stated or drive zero when masked."),
                ]),
            ]),
            Register("RCSR", 0x40055088, 32, "SAI Receive Control Register", [
                Field("RE", 31, 1, "Receiver Enable", [
                    EnumVal("RE_0", "0", "Receiver is disabled."),
                    EnumVal("RE_1", "0x1", "Receiver is enabled, or receiver has been disabled and has not yet reached end of frame."),
                ]),
                Field("DBGE", 29, 1, "Debug Enable", [
                    EnumVal("DBGE_0", "0", "Receiver is disabled in Debug mode, after completing the current frame."),
                    EnumVal("DBGE_1", "0x1", "Receiver is enabled in Debug mode."),
                ]),
                Field("BCE", 28, 1, "Bit Clock Enable", [
                    EnumVal("BCE_0", "0", "Receive bit clock is disabled."),
                    EnumVal("BCE_1", "0x1", "Receive bit clock is enabled."),
                ]),
                Field("FR", 25, 1, "FIFO Reset", [
                    EnumVal("FR_0", "0", "No effect."),
                    EnumVal("FR_1", "0x1", "FIFO reset."),
                ]),
                Field("SR", 24, 1, "Software Reset", [
                    EnumVal("SR_0", "0", "No effect."),
                    EnumVal("SR_1", "0x1", "Software reset."),
                ]),
                Field("WSF", 20, 1, "Word Start Flag", [
                    EnumVal("WSF_0", "0", "Start of word not detected."),
                    EnumVal("WSF_1", "0x1", "Start of word detected."),
                ]),
                Field("SEF", 19, 1, "Sync Error Flag", [
                    EnumVal("SEF_0", "0", "Sync error not detected."),
                    EnumVal("SEF_1", "0x1", "Frame sync error detected."),
                ]),
                Field("FEF", 18, 1, "FIFO Error Flag", [
                    EnumVal("FEF_0", "0", "Receive overflow not detected."),
                    EnumVal("FEF_1", "0x1", "Receive overflow detected."),
                ]),
                Field("FWF", 17, 1, "FIFO Warning Flag", [
                    EnumVal("FWF_0", "0", "No enabled receive FIFO is full."),
                    EnumVal("FWF_1", "0x1", "Enabled receive FIFO is full."),
                ]),
                Field("FRF", 16, 1, "FIFO Request Flag", [
                    EnumVal("FRF_0", "0", "Receive FIFO watermark not reached."),
                    EnumVal("FRF_1", "0x1", "Receive FIFO watermark has been reached."),
                ]),
                Field("WSIE", 12, 1, "Word Start Interrupt Enable", [
                    EnumVal("WSIE_0", "0", "Disables interrupt."),
                    EnumVal("WSIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("SEIE", 11, 1, "Sync Error Interrupt Enable", [
                    EnumVal("SEIE_0", "0", "Disables interrupt."),
                    EnumVal("SEIE_1", "0x1", "Enables interrupt."),
                ]),
                Field("FEIE", 10, 1, "FIFO Error Interrupt Enable", [
                    EnumVal("FEIE_0", "0", "Disables the interrupt."),
                    EnumVal("FEIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWIE", 9, 1, "FIFO Warning Interrupt Enable", [
                    EnumVal("FWIE_0", "0", "Disables the interrupt."),
                    EnumVal("FWIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FRIE", 8, 1, "FIFO Request Interrupt Enable", [
                    EnumVal("FRIE_0", "0", "Disables the interrupt."),
                    EnumVal("FRIE_1", "0x1", "Enables the interrupt."),
                ]),
                Field("FWDE", 1, 1, "FIFO Warning DMA Enable", [
                    EnumVal("FWDE_0", "0", "Disables the DMA request."),
                    EnumVal("FWDE_1", "0x1", "Enables the DMA request."),
                ]),
                Field("FRDE", 0, 1, "FIFO Request DMA Enable", [
                    EnumVal("FRDE_0", "0", "Disables the DMA request."),
                    EnumVal("FRDE_1", "0x1", "Enables the DMA request."),
                ]),
            ]),
            Register("RCR1", 0x4005508C, 32, "SAI Receive Configuration 1 Register", [
                Field("RFW", 0, 3, "Receive FIFO Watermark", [
                ]),
            ]),
            Register("RCR2", 0x40055090, 32, "SAI Receive Configuration 2 Register", [
                Field("SYNC", 30, 2, "Synchronous Mode", [
                    EnumVal("SYNC_0", "0", "Asynchronous mode."),
                    EnumVal("SYNC_1", "0x1", "Synchronous with transmitter."),
                ]),
                Field("BCI", 28, 1, "Bit Clock Input", [
                    EnumVal("BCI_0", "0", "No effect."),
                    EnumVal("BCI_1", "0x1", "Internal logic is clocked as if bit clock was externally generated."),
                ]),
                Field("MSEL", 26, 2, "MCLK Select", [
                    EnumVal("MSEL_0", "0", "Bus Clock selected."),
                    EnumVal("MSEL_1", "0x1", "Master Clock (MCLK) 1 option selected."),
                    EnumVal("MSEL_2", "0x2", "Master Clock (MCLK) 2 option selected."),
                    EnumVal("MSEL_3", "0x3", "Master Clock (MCLK) 3 option selected."),
                ]),
                Field("BCP", 25, 1, "Bit Clock Polarity", [
                    EnumVal("BCP_0", "0", "Bit Clock is active high with drive outputs on rising edge and sample inputs on falling edge."),
                    EnumVal("BCP_1", "0x1", "Bit Clock is active low with drive outputs on falling edge and sample inputs on rising edge."),
                ]),
                Field("BCD", 24, 1, "Bit Clock Direction", [
                    EnumVal("BCD_0", "0", "Bit clock is generated externally in Slave mode."),
                    EnumVal("BCD_1", "0x1", "Bit clock is generated internally in Master mode."),
                ]),
                Field("DIV", 0, 8, "Bit Clock Divide", [
                ]),
            ]),
            Register("RCR3", 0x40055094, 32, "SAI Receive Configuration 3 Register", [
                Field("RCE", 16, 1, "Receive Channel Enable", [
                ]),
                Field("WDFL", 0, 4, "Word Flag Configuration", [
                ]),
            ]),
            Register("RCR4", 0x40055098, 32, "SAI Receive Configuration 4 Register", [
                Field("FCONT", 28, 1, "FIFO Continue on Error", [
                    EnumVal("FCONT_0", "0", "On FIFO error, the SAI will continue from the start of the next frame after the FIFO error flag has been cleared."),
                    EnumVal("FCONT_1", "0x1", "On FIFO error, the SAI will continue from the same word that caused the FIFO error to set after the FIFO warning flag has been cleared."),
                ]),
                Field("FPACK", 24, 2, "FIFO Packing Mode", [
                    EnumVal("FPACK_0", "0", "FIFO packing is disabled"),
                    EnumVal("FPACK_2", "0x2", "8-bit FIFO packing is enabled"),
                    EnumVal("FPACK_3", "0x3", "16-bit FIFO packing is enabled"),
                ]),
                Field("FRSZ", 16, 4, "Frame Size", [
                ]),
                Field("SYWD", 8, 5, "Sync Width", [
                ]),
                Field("MF", 4, 1, "MSB First", [
                    EnumVal("MF_0", "0", "LSB is received first."),
                    EnumVal("MF_1", "0x1", "MSB is received first."),
                ]),
                Field("FSE", 3, 1, "Frame Sync Early", [
                    EnumVal("FSE_0", "0", "Frame sync asserts with the first bit of the frame."),
                    EnumVal("FSE_1", "0x1", "Frame sync asserts one bit before the first bit of the frame."),
                ]),
                Field("ONDEM", 2, 1, "On Demand Mode", [
                    EnumVal("ONDEM_0", "0", "Internal frame sync is generated continuously."),
                    EnumVal("ONDEM_1", "0x1", "Internal frame sync is generated when the FIFO warning flag is clear."),
                ]),
                Field("FSP", 1, 1, "Frame Sync Polarity", [
                    EnumVal("FSP_0", "0", "Frame sync is active high."),
                    EnumVal("FSP_1", "0x1", "Frame sync is active low."),
                ]),
                Field("FSD", 0, 1, "Frame Sync Direction", [
                    EnumVal("FSD_0", "0", "Frame Sync is generated externally in Slave mode."),
                    EnumVal("FSD_1", "0x1", "Frame Sync is generated internally in Master mode."),
                ]),
            ]),
            Register("RCR5", 0x4005509C, 32, "SAI Receive Configuration 5 Register", [
                Field("WNW", 24, 5, "Word N Width", [
                ]),
                Field("W0W", 16, 5, "Word 0 Width", [
                ]),
                Field("FBT", 8, 5, "First Bit Shifted", [
                ]),
            ]),
            Register("RDR0", 0x400550A0, 32, "SAI Receive Data Register", [
                Field("RDR", 0, 32, "Receive Data Register", [
                ]),
            ]),
            Register("RFR0", 0x400550C0, 32, "SAI Receive FIFO Register", [
                Field("WFP", 16, 4, "Write FIFO Pointer", [
                ]),
                Field("RFP", 0, 4, "Read FIFO Pointer", [
                ]),
            ]),
            Register("RMR", 0x400550E0, 32, "SAI Receive Mask Register", [
                Field("RWM", 0, 16, "Receive Word Mask", [
                    EnumVal("RWM_0", "0", "Word N is enabled."),
                    EnumVal("RWM_1", "0x1", "Word N is masked."),
                ]),
            ]),
        ])

class Module_SCG(Peripheral):
    def __init__(self):
        super().__init__("SCG", 0x40064000, 0x60C, [
            Register("VERID", 0x40064000, 32, "Version ID Register", [
                Field("VERSION", 0, 32, "SCG Version Number", [
                ]),
            ]),
            Register("PARAM", 0x40064004, 32, "Parameter Register", [
                Field("DIVPRES", 27, 5, "Divider Present", [
                ]),
                Field("CLKPRES", 0, 8, "Clock Present", [
                ]),
            ]),
            Register("CSR", 0x40064010, 32, "Clock Status Register", [
                Field("SCS", 24, 4, "System Clock Source", [
                    EnumVal("SCS_1", "0x1", "System OSC (SOSC_CLK)"),
                    EnumVal("SCS_2", "0x2", "Slow IRC (SIRC_CLK)"),
                    EnumVal("SCS_3", "0x3", "Fast IRC (FIRC_CLK)"),
                ]),
                Field("DIVCORE", 16, 4, "Core Clock Divide Ratio", [
                    EnumVal("DIVCORE_0", "0", "Divide-by-1"),
                    EnumVal("DIVCORE_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVCORE_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVCORE_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVCORE_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVCORE_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVCORE_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVCORE_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVCORE_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVCORE_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVCORE_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVCORE_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVCORE_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVCORE_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVCORE_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVCORE_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVBUS", 4, 4, "Bus Clock Divide Ratio", [
                    EnumVal("DIVBUS_0", "0", "Divide-by-1"),
                    EnumVal("DIVBUS_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVBUS_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVBUS_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVBUS_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVBUS_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVBUS_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVBUS_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVBUS_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVBUS_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVBUS_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVBUS_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVBUS_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVBUS_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVBUS_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVBUS_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVSLOW", 0, 4, "Slow Clock Divide Ratio", [
                    EnumVal("DIVSLOW_0", "0", "Divide-by-1"),
                    EnumVal("DIVSLOW_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVSLOW_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVSLOW_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVSLOW_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVSLOW_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVSLOW_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVSLOW_7", "0x7", "Divide-by-8"),
                ]),
            ]),
            Register("RCCR", 0x40064014, 32, "Run Clock Control Register", [
                Field("SCS", 24, 4, "System Clock Source", [
                    EnumVal("SCS_1", "0x1", "System OSC (SOSC_CLK)"),
                    EnumVal("SCS_2", "0x2", "Slow IRC (SIRC_CLK)"),
                    EnumVal("SCS_3", "0x3", "Fast IRC (FIRC_CLK)"),
                ]),
                Field("DIVCORE", 16, 4, "Core Clock Divide Ratio", [
                    EnumVal("DIVCORE_0", "0", "Divide-by-1"),
                    EnumVal("DIVCORE_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVCORE_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVCORE_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVCORE_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVCORE_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVCORE_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVCORE_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVCORE_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVCORE_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVCORE_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVCORE_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVCORE_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVCORE_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVCORE_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVCORE_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVBUS", 4, 4, "Bus Clock Divide Ratio", [
                    EnumVal("DIVBUS_0", "0", "Divide-by-1"),
                    EnumVal("DIVBUS_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVBUS_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVBUS_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVBUS_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVBUS_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVBUS_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVBUS_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVBUS_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVBUS_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVBUS_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVBUS_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVBUS_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVBUS_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVBUS_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVBUS_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVSLOW", 0, 4, "Slow Clock Divide Ratio", [
                    EnumVal("DIVSLOW_0", "0", "Divide-by-1"),
                    EnumVal("DIVSLOW_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVSLOW_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVSLOW_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVSLOW_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVSLOW_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVSLOW_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVSLOW_7", "0x7", "Divide-by-8"),
                ]),
            ]),
            Register("VCCR", 0x40064018, 32, "VLPR Clock Control Register", [
                Field("SCS", 24, 4, "System Clock Source", [
                    EnumVal("SCS_2", "0x2", "Slow IRC (SIRC_CLK)"),
                ]),
                Field("DIVCORE", 16, 4, "Core Clock Divide Ratio", [
                    EnumVal("DIVCORE_0", "0", "Divide-by-1"),
                    EnumVal("DIVCORE_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVCORE_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVCORE_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVCORE_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVCORE_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVCORE_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVCORE_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVCORE_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVCORE_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVCORE_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVCORE_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVCORE_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVCORE_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVCORE_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVCORE_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVBUS", 4, 4, "Bus Clock Divide Ratio", [
                    EnumVal("DIVBUS_0", "0", "Divide-by-1"),
                    EnumVal("DIVBUS_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVBUS_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVBUS_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVBUS_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVBUS_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVBUS_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVBUS_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVBUS_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVBUS_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVBUS_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVBUS_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVBUS_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVBUS_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVBUS_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVBUS_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVSLOW", 0, 4, "Slow Clock Divide Ratio", [
                    EnumVal("DIVSLOW_0", "0", "Divide-by-1"),
                    EnumVal("DIVSLOW_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVSLOW_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVSLOW_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVSLOW_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVSLOW_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVSLOW_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVSLOW_7", "0x7", "Divide-by-8"),
                ]),
            ]),
            Register("HCCR", 0x4006401C, 32, "HSRUN Clock Control Register", [
                Field("SCS", 24, 4, "System Clock Source", [
                    EnumVal("SCS_3", "0x3", "Fast IRC (FIRC_CLK)"),
                    EnumVal("SCS_6", "0x6", "System PLL (SPLL_CLK)"),
                ]),
                Field("DIVCORE", 16, 4, "Core Clock Divide Ratio", [
                    EnumVal("DIVCORE_0", "0", "Divide-by-1"),
                    EnumVal("DIVCORE_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVCORE_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVCORE_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVCORE_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVCORE_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVCORE_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVCORE_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVCORE_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVCORE_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVCORE_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVCORE_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVCORE_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVCORE_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVCORE_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVCORE_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVBUS", 4, 4, "Bus Clock Divide Ratio", [
                    EnumVal("DIVBUS_0", "0", "Divide-by-1"),
                    EnumVal("DIVBUS_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVBUS_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVBUS_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVBUS_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVBUS_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVBUS_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVBUS_7", "0x7", "Divide-by-8"),
                    EnumVal("DIVBUS_8", "0x8", "Divide-by-9"),
                    EnumVal("DIVBUS_9", "0x9", "Divide-by-10"),
                    EnumVal("DIVBUS_10", "0xA", "Divide-by-11"),
                    EnumVal("DIVBUS_11", "0xB", "Divide-by-12"),
                    EnumVal("DIVBUS_12", "0xC", "Divide-by-13"),
                    EnumVal("DIVBUS_13", "0xD", "Divide-by-14"),
                    EnumVal("DIVBUS_14", "0xE", "Divide-by-15"),
                    EnumVal("DIVBUS_15", "0xF", "Divide-by-16"),
                ]),
                Field("DIVSLOW", 0, 4, "Slow Clock Divide Ratio", [
                    EnumVal("DIVSLOW_0", "0", "Divide-by-1"),
                    EnumVal("DIVSLOW_1", "0x1", "Divide-by-2"),
                    EnumVal("DIVSLOW_2", "0x2", "Divide-by-3"),
                    EnumVal("DIVSLOW_3", "0x3", "Divide-by-4"),
                    EnumVal("DIVSLOW_4", "0x4", "Divide-by-5"),
                    EnumVal("DIVSLOW_5", "0x5", "Divide-by-6"),
                    EnumVal("DIVSLOW_6", "0x6", "Divide-by-7"),
                    EnumVal("DIVSLOW_7", "0x7", "Divide-by-8"),
                ]),
            ]),
            Register("CLKOUTCNFG", 0x40064020, 32, "SCG CLKOUT Configuration Register", [
                Field("CLKOUTSEL", 24, 4, "SCG Clkout Select", [
                    EnumVal("CLKOUTSEL_0", "0", "SCG SLOW Clock"),
                    EnumVal("CLKOUTSEL_1", "0x1", "System OSC (SOSC_CLK)"),
                    EnumVal("CLKOUTSEL_2", "0x2", "Slow IRC (SIRC_CLK)"),
                    EnumVal("CLKOUTSEL_3", "0x3", "Fast IRC (FIRC_CLK)"),
                ]),
            ]),
            Register("SOSCCSR", 0x40064100, 32, "System OSC Control Status Register", [
                Field("SOSCERR", 26, 1, "System OSC Clock Error", [
                    EnumVal("SOSCERR_0", "0", "System OSC Clock Monitor is disabled or has not detected an error"),
                    EnumVal("SOSCERR_1", "0x1", "System OSC Clock Monitor is enabled and detected an error"),
                ]),
                Field("SOSCSEL", 25, 1, "System OSC Selected", [
                    EnumVal("SOSCSEL_0", "0", "System OSC is not the system clock source"),
                    EnumVal("SOSCSEL_1", "0x1", "System OSC is the system clock source"),
                ]),
                Field("SOSCVLD", 24, 1, "System OSC Valid", [
                    EnumVal("SOSCVLD_0", "0", "System OSC is not enabled or clock is not valid"),
                    EnumVal("SOSCVLD_1", "0x1", "System OSC is enabled and output clock is valid"),
                ]),
                Field("LK", 23, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "This Control Status Register can be written."),
                    EnumVal("LK_1", "0x1", "This Control Status Register cannot be written."),
                ]),
                Field("SOSCCMRE", 17, 1, "System OSC Clock Monitor Reset Enable", [
                    EnumVal("SOSCCMRE_0", "0", "Clock Monitor generates interrupt when error detected"),
                    EnumVal("SOSCCMRE_1", "0x1", "Clock Monitor generates reset when error detected"),
                ]),
                Field("SOSCCM", 16, 1, "System OSC Clock Monitor", [
                    EnumVal("SOSCCM_0", "0", "System OSC Clock Monitor is disabled"),
                    EnumVal("SOSCCM_1", "0x1", "System OSC Clock Monitor is enabled"),
                ]),
                Field("SOSCEN", 0, 1, "System OSC Enable", [
                    EnumVal("SOSCEN_0", "0", "System OSC is disabled"),
                    EnumVal("SOSCEN_1", "0x1", "System OSC is enabled"),
                ]),
            ]),
            Register("SOSCDIV", 0x40064104, 32, "System OSC Divide Register", [
                Field("SOSCDIV2", 8, 3, "System OSC Clock Divide 2", [
                    EnumVal("SOSCDIV2_0", "0", "Output disabled"),
                    EnumVal("SOSCDIV2_1", "0x1", "Divide by 1"),
                    EnumVal("SOSCDIV2_2", "0x2", "Divide by 2"),
                    EnumVal("SOSCDIV2_3", "0x3", "Divide by 4"),
                    EnumVal("SOSCDIV2_4", "0x4", "Divide by 8"),
                    EnumVal("SOSCDIV2_5", "0x5", "Divide by 16"),
                    EnumVal("SOSCDIV2_6", "0x6", "Divide by 32"),
                    EnumVal("SOSCDIV2_7", "0x7", "Divide by 64"),
                ]),
                Field("SOSCDIV1", 0, 3, "System OSC Clock Divide 1", [
                    EnumVal("SOSCDIV1_0", "0", "Output disabled"),
                    EnumVal("SOSCDIV1_1", "0x1", "Divide by 1"),
                    EnumVal("SOSCDIV1_2", "0x2", "Divide by 2"),
                    EnumVal("SOSCDIV1_3", "0x3", "Divide by 4"),
                    EnumVal("SOSCDIV1_4", "0x4", "Divide by 8"),
                    EnumVal("SOSCDIV1_5", "0x5", "Divide by 16"),
                    EnumVal("SOSCDIV1_6", "0x6", "Divide by 32"),
                    EnumVal("SOSCDIV1_7", "0x7", "Divide by 64"),
                ]),
            ]),
            Register("SOSCCFG", 0x40064108, 32, "System Oscillator Configuration Register", [
                Field("RANGE", 4, 2, "System OSC Range Select", [
                    EnumVal("RANGE_1", "0x1", "Low frequency range selected for the crystal oscillator"),
                    EnumVal("RANGE_2", "0x2", "Medium frequency range selected for the crytstal oscillator"),
                    EnumVal("RANGE_3", "0x3", "High frequency range selected for the crystal oscillator"),
                ]),
                Field("HGO", 3, 1, "High Gain Oscillator Select", [
                    EnumVal("HGO_0", "0", "Configure crystal oscillator for low-gain operation"),
                    EnumVal("HGO_1", "0x1", "Configure crystal oscillator for high-gain operation"),
                ]),
                Field("EREFS", 2, 1, "External Reference Select", [
                    EnumVal("EREFS_0", "0", "External reference clock selected"),
                    EnumVal("EREFS_1", "0x1", "Internal crystal oscillator of OSC selected."),
                ]),
            ]),
            Register("SIRCCSR", 0x40064200, 32, "Slow IRC Control Status Register", [
                Field("SIRCSEL", 25, 1, "Slow IRC Selected", [
                    EnumVal("SIRCSEL_0", "0", "Slow IRC is not the system clock source"),
                    EnumVal("SIRCSEL_1", "0x1", "Slow IRC is the system clock source"),
                ]),
                Field("SIRCVLD", 24, 1, "Slow IRC Valid", [
                    EnumVal("SIRCVLD_0", "0", "Slow IRC is not enabled or clock is not valid"),
                    EnumVal("SIRCVLD_1", "0x1", "Slow IRC is enabled and output clock is valid"),
                ]),
                Field("LK", 23, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Control Status Register can be written."),
                    EnumVal("LK_1", "0x1", "Control Status Register cannot be written."),
                ]),
                Field("SIRCLPEN", 2, 1, "Slow IRC Low Power Enable", [
                    EnumVal("SIRCLPEN_0", "0", "Slow IRC is disabled in VLP modes"),
                    EnumVal("SIRCLPEN_1", "0x1", "Slow IRC is enabled in VLP modes"),
                ]),
                Field("SIRCSTEN", 1, 1, "Slow IRC Stop Enable", [
                    EnumVal("SIRCSTEN_0", "0", "Slow IRC is disabled in supported Stop modes"),
                    EnumVal("SIRCSTEN_1", "0x1", "Slow IRC is enabled in supported Stop modes"),
                ]),
                Field("SIRCEN", 0, 1, "Slow IRC Enable", [
                    EnumVal("SIRCEN_0", "0", "Slow IRC is disabled"),
                    EnumVal("SIRCEN_1", "0x1", "Slow IRC is enabled"),
                ]),
            ]),
            Register("SIRCDIV", 0x40064204, 32, "Slow IRC Divide Register", [
                Field("SIRCDIV2", 8, 3, "Slow IRC Clock Divide 2", [
                    EnumVal("SIRCDIV2_0", "0", "Output disabled"),
                    EnumVal("SIRCDIV2_1", "0x1", "Divide by 1"),
                    EnumVal("SIRCDIV2_2", "0x2", "Divide by 2"),
                    EnumVal("SIRCDIV2_3", "0x3", "Divide by 4"),
                    EnumVal("SIRCDIV2_4", "0x4", "Divide by 8"),
                    EnumVal("SIRCDIV2_5", "0x5", "Divide by 16"),
                    EnumVal("SIRCDIV2_6", "0x6", "Divide by 32"),
                    EnumVal("SIRCDIV2_7", "0x7", "Divide by 64"),
                ]),
                Field("SIRCDIV1", 0, 3, "Slow IRC Clock Divide 1", [
                    EnumVal("SIRCDIV1_0", "0", "Output disabled"),
                    EnumVal("SIRCDIV1_1", "0x1", "Divide by 1"),
                    EnumVal("SIRCDIV1_2", "0x2", "Divide by 2"),
                    EnumVal("SIRCDIV1_3", "0x3", "Divide by 4"),
                    EnumVal("SIRCDIV1_4", "0x4", "Divide by 8"),
                    EnumVal("SIRCDIV1_5", "0x5", "Divide by 16"),
                    EnumVal("SIRCDIV1_6", "0x6", "Divide by 32"),
                    EnumVal("SIRCDIV1_7", "0x7", "Divide by 64"),
                ]),
            ]),
            Register("SIRCCFG", 0x40064208, 32, "Slow IRC Configuration Register", [
                Field("RANGE", 0, 1, "Frequency Range", [
                    EnumVal("RANGE_0", "0", "Slow IRC low range clock (2 MHz)"),
                    EnumVal("RANGE_1", "0x1", "Slow IRC high range clock (8 MHz )"),
                ]),
            ]),
            Register("FIRCCSR", 0x40064300, 32, "Fast IRC Control Status Register", [
                Field("FIRCSEL", 25, 1, "Fast IRC Selected status", [
                    EnumVal("FIRCSEL_0", "0", "Fast IRC is not the system clock source"),
                    EnumVal("FIRCSEL_1", "0x1", "Fast IRC is the system clock source"),
                ]),
                Field("FIRCVLD", 24, 1, "Fast IRC Valid status", [
                    EnumVal("FIRCVLD_0", "0", "Fast IRC is not enabled or clock is not valid."),
                    EnumVal("FIRCVLD_1", "0x1", "Fast IRC is enabled and output clock is valid. The clock is valid once there is an output clock from the FIRC analog."),
                ]),
                Field("LK", 23, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Control Status Register can be written."),
                    EnumVal("LK_1", "0x1", "Control Status Register cannot be written."),
                ]),
                Field("FIRCREGOFF", 3, 1, "Fast IRC Regulator Enable", [
                    EnumVal("FIRCREGOFF_0", "0", "Fast IRC Regulator is enabled."),
                    EnumVal("FIRCREGOFF_1", "0x1", "Fast IRC Regulator is disabled."),
                ]),
                Field("FIRCEN", 0, 1, "Fast IRC Enable", [
                    EnumVal("FIRCEN_0", "0", "Fast IRC is disabled"),
                    EnumVal("FIRCEN_1", "0x1", "Fast IRC is enabled"),
                ]),
            ]),
            Register("FIRCDIV", 0x40064304, 32, "Fast IRC Divide Register", [
                Field("FIRCDIV2", 8, 3, "Fast IRC Clock Divide 2", [
                    EnumVal("FIRCDIV2_0", "0", "Output disabled"),
                    EnumVal("FIRCDIV2_1", "0x1", "Divide by 1"),
                    EnumVal("FIRCDIV2_2", "0x2", "Divide by 2"),
                    EnumVal("FIRCDIV2_3", "0x3", "Divide by 4"),
                    EnumVal("FIRCDIV2_4", "0x4", "Divide by 8"),
                    EnumVal("FIRCDIV2_5", "0x5", "Divide by 16"),
                    EnumVal("FIRCDIV2_6", "0x6", "Divide by 32"),
                    EnumVal("FIRCDIV2_7", "0x7", "Divide by 64"),
                ]),
                Field("FIRCDIV1", 0, 3, "Fast IRC Clock Divide 1", [
                    EnumVal("FIRCDIV1_0", "0", "Output disabled"),
                    EnumVal("FIRCDIV1_1", "0x1", "Divide by 1"),
                    EnumVal("FIRCDIV1_2", "0x2", "Divide by 2"),
                    EnumVal("FIRCDIV1_3", "0x3", "Divide by 4"),
                    EnumVal("FIRCDIV1_4", "0x4", "Divide by 8"),
                    EnumVal("FIRCDIV1_5", "0x5", "Divide by 16"),
                    EnumVal("FIRCDIV1_6", "0x6", "Divide by 32"),
                    EnumVal("FIRCDIV1_7", "0x7", "Divide by 64"),
                ]),
            ]),
            Register("FIRCCFG", 0x40064308, 32, "Fast IRC Configuration Register", [
                Field("RANGE", 0, 2, "Frequency Range", [
                    EnumVal("RANGE_0", "0", "Fast IRC is trimmed to 48 MHz"),
                ]),
            ]),
            Register("SPLLCSR", 0x40064600, 32, "System PLL Control Status Register", [
                Field("SPLLERR", 26, 1, "System PLL Clock Error", [
                    EnumVal("SPLLERR_0", "0", "System PLL Clock Monitor is disabled or has not detected an error"),
                    EnumVal("SPLLERR_1", "0x1", "System PLL Clock Monitor is enabled and detected an error. System PLL Clock Error flag will not set when System OSC is selected as its source and SOSCERR has set."),
                ]),
                Field("SPLLSEL", 25, 1, "System PLL Selected", [
                    EnumVal("SPLLSEL_0", "0", "System PLL is not the system clock source"),
                    EnumVal("SPLLSEL_1", "0x1", "System PLL is the system clock source"),
                ]),
                Field("SPLLVLD", 24, 1, "System PLL Valid", [
                    EnumVal("SPLLVLD_0", "0", "System PLL is not enabled or clock is not valid"),
                    EnumVal("SPLLVLD_1", "0x1", "System PLL is enabled and output clock is valid"),
                ]),
                Field("LK", 23, 1, "Lock Register", [
                    EnumVal("LK_0", "0", "Control Status Register can be written."),
                    EnumVal("LK_1", "0x1", "Control Status Register cannot be written."),
                ]),
                Field("SPLLCMRE", 17, 1, "System PLL Clock Monitor Reset Enable", [
                    EnumVal("SPLLCMRE_0", "0", "Clock Monitor generates interrupt when error detected"),
                    EnumVal("SPLLCMRE_1", "0x1", "Clock Monitor generates reset when error detected"),
                ]),
                Field("SPLLCM", 16, 1, "System PLL Clock Monitor", [
                    EnumVal("SPLLCM_0", "0", "System PLL Clock Monitor is disabled"),
                    EnumVal("SPLLCM_1", "0x1", "System PLL Clock Monitor is enabled"),
                ]),
                Field("SPLLEN", 0, 1, "System PLL Enable", [
                    EnumVal("SPLLEN_0", "0", "System PLL is disabled"),
                    EnumVal("SPLLEN_1", "0x1", "System PLL is enabled"),
                ]),
            ]),
            Register("SPLLDIV", 0x40064604, 32, "System PLL Divide Register", [
                Field("SPLLDIV2", 8, 3, "System PLL Clock Divide 2", [
                    EnumVal("SPLLDIV2_0", "0", "Clock disabled"),
                    EnumVal("SPLLDIV2_1", "0x1", "Divide by 1"),
                    EnumVal("SPLLDIV2_2", "0x2", "Divide by 2"),
                    EnumVal("SPLLDIV2_3", "0x3", "Divide by 4"),
                    EnumVal("SPLLDIV2_4", "0x4", "Divide by 8"),
                    EnumVal("SPLLDIV2_5", "0x5", "Divide by 16"),
                    EnumVal("SPLLDIV2_6", "0x6", "Divide by 32"),
                    EnumVal("SPLLDIV2_7", "0x7", "Divide by 64"),
                ]),
                Field("SPLLDIV1", 0, 3, "System PLL Clock Divide 1", [
                    EnumVal("SPLLDIV1_0", "0", "Clock disabled"),
                    EnumVal("SPLLDIV1_1", "0x1", "Divide by 1"),
                    EnumVal("SPLLDIV1_2", "0x2", "Divide by 2"),
                    EnumVal("SPLLDIV1_3", "0x3", "Divide by 4"),
                    EnumVal("SPLLDIV1_4", "0x4", "Divide by 8"),
                    EnumVal("SPLLDIV1_5", "0x5", "Divide by 16"),
                    EnumVal("SPLLDIV1_6", "0x6", "Divide by 32"),
                    EnumVal("SPLLDIV1_7", "0x7", "Divide by 64"),
                ]),
            ]),
            Register("SPLLCFG", 0x40064608, 32, "System PLL Configuration Register", [
                Field("MULT", 16, 5, "System PLL Multiplier", [
                ]),
                Field("PREDIV", 8, 3, "PLL Reference Clock Divider", [
                ]),
            ]),
        ])

class Module_SIM(Peripheral):
    def __init__(self):
        super().__init__("SIM", 0x40048000, 0x70, [
            Register("CHIPCTL", 0x40048004, 32, "Chip Control register", [
                Field("SRAML_RETEN", 21, 1, "SRAML_RETEN", [
                    EnumVal("SRAML_RETEN_0", "0", "SRAML contents are retained across resets"),
                    EnumVal("SRAML_RETEN_1", "0x1", "No SRAML retention"),
                ]),
                Field("SRAMU_RETEN", 20, 1, "SRAMU_RETEN", [
                    EnumVal("SRAMU_RETEN_0", "0", "SRAMU contents are retained across resets"),
                    EnumVal("SRAMU_RETEN_1", "0x1", "No SRAMU retention"),
                ]),
                Field("ADC_SUPPLYEN", 19, 1, "ADC_SUPPLYEN", [
                    EnumVal("ADC_SUPPLYEN_0", "0", "Disable internal supply monitoring"),
                    EnumVal("ADC_SUPPLYEN_1", "0x1", "Enable internal supply monitoring"),
                ]),
                Field("ADC_SUPPLY", 16, 3, "ADC_SUPPLY", [
                    EnumVal("ADC_SUPPLY_0", "0", "5 V input VDD supply (VDD)"),
                    EnumVal("ADC_SUPPLY_1", "0x1", "5 V input analog supply (VDDA)"),
                    EnumVal("ADC_SUPPLY_2", "0x2", "ADC Reference Supply (VREFH)"),
                    EnumVal("ADC_SUPPLY_3", "0x3", "3.3 V Oscillator Regulator Output (VDD_3V)"),
                    EnumVal("ADC_SUPPLY_4", "0x4", "3.3 V flash regulator output (VDD_flash_3V)"),
                    EnumVal("ADC_SUPPLY_5", "0x5", "1.2 V core regulator output (VDD_LV)"),
                ]),
                Field("PDB_BB_SEL", 13, 1, "PDB back-to-back select", [
                    EnumVal("PDB_BB_SEL_0", "0", "PDB0 channel 0 back-to-back operation with ADC0 COCO[7:0] and PDB1 channel 0 back-to-back operation with ADC1 COCO[7:0]"),
                    EnumVal("PDB_BB_SEL_1", "0x1", "Channel 0 of PDB0 and PDB1 back-to-back operation with COCO[7:0] of ADC0 and ADC1."),
                ]),
                Field("TRACECLK_SEL", 12, 1, "Debug trace clock select", [
                    EnumVal("TRACECLK_SEL_0", "0", "Core clock"),
                ]),
                Field("CLKOUTEN", 11, 1, "CLKOUT enable", [
                    EnumVal("CLKOUTEN_0", "0", "Clockout disable"),
                    EnumVal("CLKOUTEN_1", "0x1", "Clockout enable"),
                ]),
                Field("CLKOUTDIV", 8, 3, "CLKOUT Divide Ratio", [
                    EnumVal("CLKOUTDIV_0", "0", "Divide by 1"),
                    EnumVal("CLKOUTDIV_1", "0x1", "Divide by 2"),
                    EnumVal("CLKOUTDIV_2", "0x2", "Divide by 3"),
                    EnumVal("CLKOUTDIV_3", "0x3", "Divide by 4"),
                    EnumVal("CLKOUTDIV_4", "0x4", "Divide by 5"),
                    EnumVal("CLKOUTDIV_5", "0x5", "Divide by 6"),
                    EnumVal("CLKOUTDIV_6", "0x6", "Divide by 7"),
                    EnumVal("CLKOUTDIV_7", "0x7", "Divide by 8"),
                ]),
                Field("CLKOUTSEL", 4, 4, "CLKOUT Select", [
                    EnumVal("CLKOUTSEL_0", "0", "SCG CLKOUT"),
                    EnumVal("CLKOUTSEL_2", "0x2", "SOSC DIV2 CLK"),
                    EnumVal("CLKOUTSEL_4", "0x4", "SIRC DIV2 CLK"),
                    EnumVal("CLKOUTSEL_5", "0x5", "For S32K148: QSPI_SFIF_CLK_HYP_PREMUX: Divide by 2 clock (configured through SCLKCONFIG[5]) for HyperRAM going to sfif clock to QSPI; For others: Reserved"),
                    EnumVal("CLKOUTSEL_6", "0x6", "FIRC DIV2 CLK"),
                    EnumVal("CLKOUTSEL_7", "0x7", "HCLK"),
                    EnumVal("CLKOUTSEL_8", "0x8", "For S32K14x: SPLL DIV2 CLK For S32K11x: Reserved"),
                    EnumVal("CLKOUTSEL_9", "0x9", "BUS_CLK"),
                    EnumVal("CLKOUTSEL_10", "0xA", "LPO128K_CLK"),
                    EnumVal("CLKOUTSEL_11", "0xB", "For S32K148: QSPI_Module clock; For others: Reserved"),
                    EnumVal("CLKOUTSEL_12", "0xC", "LPO_CLK as selected by SIM_LPOCLKS[LPOCLKSEL]"),
                    EnumVal("CLKOUTSEL_13", "0xD", "For S32K148: QSPI_SFIF_CLK; For others: Reserved"),
                    EnumVal("CLKOUTSEL_14", "0xE", "RTC_CLK as selected by SIM_LPOCLKS[RTCCLKSEL]"),
                    EnumVal("CLKOUTSEL_15", "0xF", "For S32K148: QSPI_2xSFIF_CLK; For others: Reserved"),
                ]),
                Field("ADC_INTERLEAVE_EN", 0, 4, "ADC interleave channel enable", [
                    EnumVal("ADC_INTERLEAVE_EN_0", "0", "Interleaving disabled. No channel pair interleaved. Interleaved channels are individually connected to pins. PTC0 is connected to ADC0_SE8. PTC1 is connected to ADC0_SE9. PTB15 is connected to ADC1_SE14. PTB16 is connected to ADC1_SE15. PTB0 is connected to ADC0_SE4. PTB1 is connected to ADC0_SE5. PTB13 is connected to ADC1_SE8. PTB14 is connected to ADC1_SE9."),
                    EnumVal("ADC_INTERLEAVE_EN_8", "#1xxx", "PTB14 to ADC1_SE9 and ADC0_SE9"),
                ]),
            ]),
            Register("FTMOPT0", 0x4004800C, 32, "FTM Option Register 0", [
                Field("FTM3CLKSEL", 30, 2, "FTM3 External Clock Pin Select", [
                    EnumVal("FTM3CLKSEL_0", "0", "FTM3 external clock driven by TCLK0 pin."),
                    EnumVal("FTM3CLKSEL_1", "0x1", "FTM3 external clock driven by TCLK1 pin."),
                    EnumVal("FTM3CLKSEL_2", "0x2", "FTM3 external clock driven by TCLK2 pin."),
                    EnumVal("FTM3CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM2CLKSEL", 28, 2, "FTM2 External Clock Pin Select", [
                    EnumVal("FTM2CLKSEL_0", "0", "FTM2 external clock driven by TCLK0 pin."),
                    EnumVal("FTM2CLKSEL_1", "0x1", "FTM2 external clock driven by TCLK1 pin."),
                    EnumVal("FTM2CLKSEL_2", "0x2", "FTM2 external clock driven by TCLK2 pin."),
                    EnumVal("FTM2CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM1CLKSEL", 26, 2, "FTM1 External Clock Pin Select", [
                    EnumVal("FTM1CLKSEL_0", "0", "FTM1 external clock driven by TCLK0 pin."),
                    EnumVal("FTM1CLKSEL_1", "0x1", "FTM1 external clock driven by TCLK1 pin."),
                    EnumVal("FTM1CLKSEL_2", "0x2", "FTM1 external clock driven by TCLK2 pin."),
                    EnumVal("FTM1CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM0CLKSEL", 24, 2, "FTM0 External Clock Pin Select", [
                    EnumVal("FTM0CLKSEL_0", "0", "FTM0 external clock driven by TCLK0 pin."),
                    EnumVal("FTM0CLKSEL_1", "0x1", "FTM0 external clock driven by TCLK1 pin."),
                    EnumVal("FTM0CLKSEL_2", "0x2", "FTM0 external clock driven by TCLK2 pin."),
                    EnumVal("FTM0CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM7CLKSEL", 22, 2, "FTM7 External Clock Pin Select", [
                    EnumVal("FTM7CLKSEL_0", "0", "FTM7 external clock driven by TCLK0 pin."),
                    EnumVal("FTM7CLKSEL_1", "0x1", "FTM7 external clock driven by TCLK1 pin."),
                    EnumVal("FTM7CLKSEL_2", "0x2", "FTM7 external clock driven by TCLK2 pin."),
                    EnumVal("FTM7CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM6CLKSEL", 20, 2, "FTM6 External Clock Pin Select", [
                    EnumVal("FTM6CLKSEL_0", "0", "FTM6 external clock driven by TCLK0 pin."),
                    EnumVal("FTM6CLKSEL_1", "0x1", "FTM6 external clock driven by TCLK1 pin."),
                    EnumVal("FTM6CLKSEL_2", "0x2", "FTM6 external clock driven by TCLK2 pin."),
                    EnumVal("FTM6CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM5CLKSEL", 18, 2, "FTM5 External Clock Pin Select", [
                    EnumVal("FTM5CLKSEL_0", "0", "FTM5 external clock driven by TCLK0 pin."),
                    EnumVal("FTM5CLKSEL_1", "0x1", "FTM5 external clock driven by TCLK1 pin."),
                    EnumVal("FTM5CLKSEL_2", "0x2", "FTM5 external clock driven by TCLK2 pin."),
                    EnumVal("FTM5CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM4CLKSEL", 16, 2, "FTM4 External Clock Pin Select", [
                    EnumVal("FTM4CLKSEL_0", "0", "FTM4 external clock driven by TCLK0 pin."),
                    EnumVal("FTM4CLKSEL_1", "0x1", "FTM4 external clock driven by TCLK1 pin."),
                    EnumVal("FTM4CLKSEL_2", "0x2", "FTM4 external clock driven by TCLK2 pin."),
                    EnumVal("FTM4CLKSEL_3", "0x3", "No clock input"),
                ]),
                Field("FTM3FLTxSEL", 12, 3, "FTM3 Fault X Select", [
                    EnumVal("FTM3FLTxSEL_0", "0", "FTM3_FLTx pin"),
                    EnumVal("FTM3FLTxSEL_1", "0x1", "TRGMUX_FTM3 out"),
                ]),
                Field("FTM2FLTxSEL", 8, 3, "FTM2 Fault X Select", [
                    EnumVal("FTM2FLTxSEL_0", "0", "FTM2_FLTx pin"),
                    EnumVal("FTM2FLTxSEL_1", "0x1", "TRGMUX_FTM2 out"),
                ]),
                Field("FTM1FLTxSEL", 4, 3, "FTM1 Fault X Select", [
                    EnumVal("FTM1FLTxSEL_0", "0", "FTM1_FLTx pin"),
                    EnumVal("FTM1FLTxSEL_1", "0x1", "TRGMUX_FTM1 out"),
                ]),
                Field("FTM0FLTxSEL", 0, 3, "FTM0 Fault X Select", [
                    EnumVal("FTM0FLTxSEL_0", "0", "FTM0_FLTx pin"),
                    EnumVal("FTM0FLTxSEL_1", "0x1", "TRGMUX_FTM0 out"),
                ]),
            ]),
            Register("LPOCLKS", 0x40048010, 32, "LPO Clock Select Register", [
                Field("RTCCLKSEL", 4, 2, "32 kHz clock source select", [
                    EnumVal("RTCCLKSEL_0", "0", "SOSCDIV1_CLK"),
                    EnumVal("RTCCLKSEL_1", "0x1", "32 kHz LPO_CLK"),
                    EnumVal("RTCCLKSEL_2", "0x2", "32 kHz RTC_CLKIN clock"),
                    EnumVal("RTCCLKSEL_3", "0x3", "FIRCDIV1_CLK"),
                ]),
                Field("LPOCLKSEL", 2, 2, "LPO clock source select", [
                    EnumVal("LPOCLKSEL_0", "0", "128 kHz LPO_CLK"),
                    EnumVal("LPOCLKSEL_1", "0x1", "No clock"),
                    EnumVal("LPOCLKSEL_2", "0x2", "32 kHz LPO_CLK which is derived from the 128 kHz LPO_CLK"),
                    EnumVal("LPOCLKSEL_3", "0x3", "1 kHz LPO_CLK which is derived from the 128 kHz LPO_CLK"),
                ]),
                Field("LPO32KCLKEN", 1, 1, "32 kHz LPO_CLK enable", [
                    EnumVal("LPO32KCLKEN_0", "0", "Disable 32 kHz LPO_CLK output"),
                    EnumVal("LPO32KCLKEN_1", "0x1", "Enable 32 kHz LPO_CLK output"),
                ]),
                Field("LPO1KCLKEN", 0, 1, "1 kHz LPO_CLK enable", [
                    EnumVal("LPO1KCLKEN_0", "0", "Disable 1 kHz LPO_CLK output"),
                    EnumVal("LPO1KCLKEN_1", "0x1", "Enable 1 kHz LPO_CLK output"),
                ]),
            ]),
            Register("ADCOPT", 0x40048018, 32, "ADC Options Register", [
                Field("ADC1PRETRGSEL", 12, 2, "ADC1 pretrigger source select", [
                    EnumVal("ADC1PRETRGSEL_0", "0", "PDB pretrigger (default)"),
                    EnumVal("ADC1PRETRGSEL_1", "0x1", "TRGMUX pretrigger"),
                    EnumVal("ADC1PRETRGSEL_2", "0x2", "Software pretrigger"),
                ]),
                Field("ADC1SWPRETRG", 9, 3, "ADC1 software pretrigger sources", [
                    EnumVal("ADC1SWPRETRG_0", "0", "Software pretrigger disabled"),
                    EnumVal("ADC1SWPRETRG_4", "0x4", "Software pretrigger 0"),
                    EnumVal("ADC1SWPRETRG_5", "0x5", "Software pretrigger 1"),
                    EnumVal("ADC1SWPRETRG_6", "0x6", "Software pretrigger 2"),
                    EnumVal("ADC1SWPRETRG_7", "0x7", "Software pretrigger 3"),
                ]),
                Field("ADC1TRGSEL", 8, 1, "ADC1 trigger source select", [
                    EnumVal("ADC1TRGSEL_0", "0", "PDB output"),
                    EnumVal("ADC1TRGSEL_1", "0x1", "TRGMUX output"),
                ]),
                Field("ADC0PRETRGSEL", 4, 2, "ADC0 pretrigger source select", [
                    EnumVal("ADC0PRETRGSEL_0", "0", "PDB pretrigger (default)"),
                    EnumVal("ADC0PRETRGSEL_1", "0x1", "TRGMUX pretrigger"),
                    EnumVal("ADC0PRETRGSEL_2", "0x2", "Software pretrigger"),
                ]),
                Field("ADC0SWPRETRG", 1, 3, "ADC0 software pretrigger sources", [
                    EnumVal("ADC0SWPRETRG_0", "0", "Software pretrigger disabled"),
                    EnumVal("ADC0SWPRETRG_4", "0x4", "Software pretrigger 0"),
                    EnumVal("ADC0SWPRETRG_5", "0x5", "Software pretrigger 1"),
                    EnumVal("ADC0SWPRETRG_6", "0x6", "Software pretrigger 2"),
                    EnumVal("ADC0SWPRETRG_7", "0x7", "Software pretrigger 3"),
                ]),
                Field("ADC0TRGSEL", 0, 1, "ADC0 trigger source select", [
                    EnumVal("ADC0TRGSEL_0", "0", "PDB output"),
                    EnumVal("ADC0TRGSEL_1", "0x1", "TRGMUX output"),
                ]),
            ]),
            Register("FTMOPT1", 0x4004801C, 32, "FTM Option Register 1", [
                Field("FTM3_OUTSEL", 24, 8, "FTM3 channel modulation select with FTM2_CH1", [
                    EnumVal("FTM3_OUTSEL_0", "0", "No modulation with FTM2_CH1"),
                    EnumVal("FTM3_OUTSEL_1", "0x1", "Modulation with FTM2_CH1"),
                ]),
                Field("FTM0_OUTSEL", 16, 8, "FTM0 channel modulation select with FTM1_CH1", [
                    EnumVal("FTM0_OUTSEL_0", "0", "No modulation with FTM1_CH1"),
                    EnumVal("FTM0_OUTSEL_1", "0x1", "Modulation with FTM1_CH1"),
                ]),
                Field("FTMGLDOK", 15, 1, "FTM global load enable", [
                    EnumVal("FTMGLDOK_0", "0", "FTM Global load mechanism disabled."),
                    EnumVal("FTMGLDOK_1", "0x1", "FTM Global load mechanism enabled"),
                ]),
                Field("FTM7SYNCBIT", 14, 1, "FTM7 Sync Bit", [
                ]),
                Field("FTM6SYNCBIT", 13, 1, "FTM6 Sync Bit", [
                ]),
                Field("FTM5SYNCBIT", 12, 1, "FTM5 Sync Bit", [
                ]),
                Field("FTM4SYNCBIT", 11, 1, "FTM4 Sync Bit", [
                ]),
                Field("FTM2CH1SEL", 8, 1, "FTM2 CH1 Select", [
                    EnumVal("FTM2CH1SEL_0", "0", "FTM2_CH1 input"),
                    EnumVal("FTM2CH1SEL_1", "0x1", "exclusive OR of FTM2_CH0,FTM2_CH1,and FTM1_CH1"),
                ]),
                Field("FTM2CH0SEL", 6, 2, "FTM2 CH0 Select", [
                    EnumVal("FTM2CH0SEL_0", "0", "FTM2_CH0 input"),
                    EnumVal("FTM2CH0SEL_1", "0x1", "CMP0 output"),
                ]),
                Field("FTM1CH0SEL", 4, 2, "FTM1 CH0 Select", [
                    EnumVal("FTM1CH0SEL_0", "0", "FTM1_CH0 input"),
                    EnumVal("FTM1CH0SEL_1", "0x1", "CMP0 output"),
                ]),
                Field("FTM3SYNCBIT", 3, 1, "FTM3 Sync Bit", [
                ]),
                Field("FTM2SYNCBIT", 2, 1, "FTM2 Sync Bit", [
                ]),
                Field("FTM1SYNCBIT", 1, 1, "FTM1 Sync Bit", [
                ]),
                Field("FTM0SYNCBIT", 0, 1, "FTM0 Sync Bit", [
                ]),
            ]),
            Register("MISCTRL0", 0x40048020, 32, "Miscellaneous control register 0", [
                Field("QSPI_CLK_SEL", 26, 1, "QSPI CLK Select bit", [
                    EnumVal("QSPI_CLK_SEL_0", "0", "QuadSPI internal reference clock is gated."),
                    EnumVal("QSPI_CLK_SEL_1", "0x1", "QuadSPI internal reference clock is enabled."),
                ]),
                Field("RMII_CLK_SEL", 25, 1, "RMII CLK Select bit", [
                ]),
                Field("RMII_CLK_OBE", 24, 1, "RMII CLK OBE bit", [
                ]),
                Field("FTM7_OBE_CTRL", 23, 1, "FTM7 OBE CTRL bit", [
                    EnumVal("FTM7_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM7_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM6_OBE_CTRL", 22, 1, "FTM6 OBE CTRL bit", [
                    EnumVal("FTM6_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM6_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM5_OBE_CTRL", 21, 1, "FTM5 OBE CTRL bit", [
                    EnumVal("FTM5_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM5_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM4_OBE_CTRL", 20, 1, "FTM4 OBE CTRL bit", [
                    EnumVal("FTM4_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM4_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM3_OBE_CTRL", 19, 1, "FTM3 OBE CTRL bit", [
                    EnumVal("FTM3_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM3_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM2_OBE_CTRL", 18, 1, "FTM2 OBE CTRL bit", [
                    EnumVal("FTM2_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM2_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM1_OBE_CTRL", 17, 1, "FTM1 OBE CTRL bit", [
                    EnumVal("FTM1_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM1_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM0_OBE_CTRL", 16, 1, "FTM0 OBE CTRL bit", [
                    EnumVal("FTM0_OBE_CTRL_0", "0", "The FTM channel output is put to safe state when the FTM counter is enabled and the FTM channel output is enabled by Fault Control (FTM_MODE[FAULTM]!=2'b00 and FTM_FLTCTRL[FSTATE]=1'b0) and PWM is enabled (FTM_SC[PWMENn] = 1'b1). Otherwise the channel output is tristated."),
                    EnumVal("FTM0_OBE_CTRL_1", "0x1", "The FTM channel output state is retained when the channel is in output mode. The output channel is tristated when the channel is in input capture [DECAPEN=1'b0, COMBINE=1'b0, MSnB:MSnA=2'b00] or dual edge capture mode [DECAPEN=1'b1]."),
                ]),
                Field("FTM_GTB_SPLIT_EN", 14, 1, "FTM GTB split enable/disable bit", [
                    EnumVal("FTM_GTB_SPLIT_EN_0", "0", "All the FTMs have a single global time-base"),
                    EnumVal("FTM_GTB_SPLIT_EN_1", "0x1", "FTM0-3 have a common time-base and others have a different common time-base. Please refer 'FTM global time base' in FTM chapter for implementation details."),
                ]),
                Field("STOP2_MONITOR", 10, 1, "STOP2 monitor bit", [
                    EnumVal("STOP2_MONITOR_0", "0", "System clock enabled or STOP2 entry aborted"),
                    EnumVal("STOP2_MONITOR_1", "0x1", "STOP2 entry successful"),
                ]),
                Field("STOP1_MONITOR", 9, 1, "STOP1 monitor bit", [
                    EnumVal("STOP1_MONITOR_0", "0", "Bus clock enabled or STOP1 entry aborted"),
                    EnumVal("STOP1_MONITOR_1", "0x1", "STOP1 entry successful"),
                ]),
            ]),
            Register("SDID", 0x40048024, 32, "System Device Identification Register", [
                Field("GENERATION", 28, 4, "S32K product series generation", [
                ]),
                Field("SUBSERIES", 24, 4, "Subseries", [
                ]),
                Field("DERIVATE", 20, 4, "Derivate", [
                ]),
                Field("RAMSIZE", 16, 4, "RAM size", [
                ]),
                Field("REVID", 12, 4, "Device revision number", [
                ]),
                Field("PACKAGE", 8, 4, "Package", [
                    EnumVal("PACKAGE_2", "0x2", "48 LQFP"),
                    EnumVal("PACKAGE_3", "0x3", "64 LQFP"),
                    EnumVal("PACKAGE_4", "0x4", "100 LQFP"),
                    EnumVal("PACKAGE_6", "0x6", "144 LQFP"),
                    EnumVal("PACKAGE_7", "0x7", "176 LQFP"),
                    EnumVal("PACKAGE_8", "0x8", "100 MAP BGA"),
                ]),
                Field("FEATURES", 0, 8, "Features", [
                ]),
            ]),
            Register("PLATCGC", 0x40048040, 32, "Platform Clock Gating Control Register", [
                Field("CGCEIM", 4, 1, "EIM Clock Gating Control", [
                    EnumVal("CGCEIM_0", "0", "Clock disabled"),
                    EnumVal("CGCEIM_1", "0x1", "Clock enabled"),
                ]),
                Field("CGCERM", 3, 1, "ERM Clock Gating Control", [
                    EnumVal("CGCERM_0", "0", "Clock disabled"),
                    EnumVal("CGCERM_1", "0x1", "Clock enabled"),
                ]),
                Field("CGCDMA", 2, 1, "DMA Clock Gating Control", [
                    EnumVal("CGCDMA_0", "0", "Clock disabled"),
                    EnumVal("CGCDMA_1", "0x1", "Clock enabled"),
                ]),
                Field("CGCMPU", 1, 1, "MPU Clock Gating Control", [
                    EnumVal("CGCMPU_0", "0", "Clock disabled"),
                    EnumVal("CGCMPU_1", "0x1", "Clock enabled"),
                ]),
                Field("CGCMSCM", 0, 1, "MSCM Clock Gating Control", [
                    EnumVal("CGCMSCM_0", "0", "Clock disabled"),
                    EnumVal("CGCMSCM_1", "0x1", "Clock enabled"),
                ]),
            ]),
            Register("FCFG1", 0x4004804C, 32, "Flash Configuration Register 1", [
                Field("EEERAMSIZE", 16, 4, "EEE SRAM SIZE", [
                    EnumVal("EEERAMSIZE_2", "0x2", "4 KB"),
                    EnumVal("EEERAMSIZE_3", "0x3", "2 KB"),
                    EnumVal("EEERAMSIZE_4", "0x4", "1 KB"),
                    EnumVal("EEERAMSIZE_5", "0x5", "512 Bytes"),
                    EnumVal("EEERAMSIZE_6", "0x6", "256 Bytes"),
                    EnumVal("EEERAMSIZE_7", "0x7", "128 Bytes"),
                    EnumVal("EEERAMSIZE_8", "0x8", "64 Bytes"),
                    EnumVal("EEERAMSIZE_9", "0x9", "32 Bytes"),
                    EnumVal("EEERAMSIZE_15", "0xF", "0 Bytes"),
                ]),
                Field("DEPART", 12, 4, "FlexNVM partition", [
                ]),
            ]),
            Register("UIDH", 0x40048054, 32, "Unique Identification Register High", [
                Field("UID127_96", 0, 32, "Unique Identification", [
                ]),
            ]),
            Register("UIDMH", 0x40048058, 32, "Unique Identification Register Mid-High", [
                Field("UID95_64", 0, 32, "Unique Identification", [
                ]),
            ]),
            Register("UIDML", 0x4004805C, 32, "Unique Identification Register Mid Low", [
                Field("UID63_32", 0, 32, "Unique Identification", [
                ]),
            ]),
            Register("UIDL", 0x40048060, 32, "Unique Identification Register Low", [
                Field("UID31_0", 0, 32, "Unique Identification", [
                ]),
            ]),
            Register("CLKDIV4", 0x40048068, 32, "System Clock Divider Register 4", [
                Field("TRACEDIVEN", 28, 1, "Debug Trace Divider control", [
                    EnumVal("TRACEDIVEN_0", "0", "Debug trace divider disabled"),
                    EnumVal("TRACEDIVEN_1", "0x1", "Debug trace divider enabled"),
                ]),
                Field("TRACEDIV", 1, 3, "Trace Clock Divider value To configure TRACEDIV, you must first disable TRACEDIVEN, then enable it after setting TRACEDIV.", [
                ]),
                Field("TRACEFRAC", 0, 1, "Trace Clock Divider fraction To configure TRACEDIV and TRACEFRAC, you must first clear TRACEDIVEN to disable the trace clock divide function.", [
                ]),
            ]),
            Register("MISCTRL1", 0x4004806C, 32, "Miscellaneous Control register 1", [
                Field("SW_TRG", 0, 1, "Software trigger to TRGMUX. Writing to this bit generates software trigger to peripherals through TRGMUX (Refer to Figure: Trigger interconnectivity).", [
                ]),
            ]),
        ])

class Module_SMC(Peripheral):
    def __init__(self):
        super().__init__("SMC", 0x4007E000, 0x18, [
            Register("VERID", 0x4007E000, 32, "SMC Version ID Register", [
                Field("MAJOR", 24, 8, "Major Version Number", [
                ]),
                Field("MINOR", 16, 8, "Minor Version Number", [
                ]),
                Field("FEATURE", 0, 16, "Feature Specification Number", [
                    EnumVal("FEATURE_0", "0", "Standard features implemented"),
                ]),
            ]),
            Register("PARAM", 0x4007E004, 32, "SMC Parameter Register", [
                Field("EVLLS0", 6, 1, "Existence of VLLS0 feature", [
                    EnumVal("EVLLS0_0", "0", "The feature is not available."),
                    EnumVal("EVLLS0_1", "0x1", "The feature is available."),
                ]),
                Field("ELLS2", 5, 1, "Existence of LLS2 feature", [
                    EnumVal("ELLS2_0", "0", "The feature is not available."),
                    EnumVal("ELLS2_1", "0x1", "The feature is available."),
                ]),
                Field("ELLS", 3, 1, "Existence of LLS feature", [
                    EnumVal("ELLS_0", "0", "The feature is not available."),
                    EnumVal("ELLS_1", "0x1", "The feature is available."),
                ]),
                Field("EHSRUN", 0, 1, "Existence of HSRUN feature", [
                    EnumVal("EHSRUN_0", "0", "The feature is not available."),
                    EnumVal("EHSRUN_1", "0x1", "The feature is available."),
                ]),
            ]),
            Register("PMPROT", 0x4007E008, 32, "Power Mode Protection register", [
                Field("AHSRUN", 7, 1, "Allow High Speed Run mode", [
                    EnumVal("AHSRUN_0", "0", "HSRUN is not allowed"),
                    EnumVal("AHSRUN_1", "0x1", "HSRUN is allowed"),
                ]),
                Field("AVLP", 5, 1, "Allow Very-Low-Power Modes", [
                    EnumVal("AVLP_0", "0", "VLPR and VLPS are not allowed."),
                    EnumVal("AVLP_1", "0x1", "VLPR and VLPS are allowed."),
                ]),
            ]),
            Register("PMCTRL", 0x4007E00C, 32, "Power Mode Control register", [
                Field("RUNM", 5, 2, "Run Mode Control", [
                    EnumVal("RUNM_0", "0", "Normal Run mode (RUN)"),
                    EnumVal("RUNM_2", "0x2", "Very-Low-Power Run mode (VLPR)"),
                    EnumVal("RUNM_3", "0x3", "High Speed Run mode (HSRUN)"),
                ]),
                Field("VLPSA", 3, 1, "Very Low Power Stop Aborted", [
                    EnumVal("VLPSA_0", "0", "The previous stop mode entry was successful."),
                    EnumVal("VLPSA_1", "0x1", "The previous stop mode entry was aborted."),
                ]),
                Field("STOPM", 0, 3, "Stop Mode Control", [
                    EnumVal("STOPM_0", "0", "Normal Stop (STOP)"),
                    EnumVal("STOPM_2", "0x2", "Very-Low-Power Stop (VLPS)"),
                    EnumVal("STOPM_6", "0x6", "Reseved"),
                ]),
            ]),
            Register("STOPCTRL", 0x4007E010, 32, "Stop Control Register", [
                Field("STOPO", 6, 2, "Stop Option", [
                    EnumVal("STOPO_1", "0x1", "STOP1 - Stop with both system and bus clocks disabled"),
                    EnumVal("STOPO_2", "0x2", "STOP2 - Stop with system clock disabled and bus clock enabled"),
                ]),
            ]),
            Register("PMSTAT", 0x4007E014, 32, "Power Mode Status register", [
                Field("PMSTAT", 0, 8, "Power Mode Status", [
                ]),
            ]),
        ])

class Module_TRGMUX(Peripheral):
    def __init__(self):
        super().__init__("TRGMUX", 0x40063000, 0x80, [
            Register("DMAMUX0", 0x40063000, 32, "TRGMUX DMAMUX0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("EXTOUT0", 0x40063004, 32, "TRGMUX EXTOUT0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("EXTOUT1", 0x40063008, 32, "TRGMUX EXTOUT1 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("ADC0", 0x4006300C, 32, "TRGMUX ADC0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("ADC1", 0x40063010, 32, "TRGMUX ADC1 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("CMP0", 0x4006301C, 32, "TRGMUX CMP0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM0", 0x40063028, 32, "TRGMUX FTM0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM1", 0x4006302C, 32, "TRGMUX FTM1 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM2", 0x40063030, 32, "TRGMUX FTM2 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM3", 0x40063034, 32, "TRGMUX FTM3 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("PDB0", 0x40063038, 32, "TRGMUX PDB0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("PDB1", 0x4006303C, 32, "TRGMUX PDB1 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FLEXIO", 0x40063044, 32, "TRGMUX FLEXIO Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPIT0", 0x40063048, 32, "TRGMUX LPIT0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL3", 24, 7, "Trigger MUX Input 3 Source Select", [
                ]),
                Field("SEL2", 16, 7, "Trigger MUX Input 2 Source Select", [
                ]),
                Field("SEL1", 8, 7, "Trigger MUX Input 1 Source Select", [
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPUART0", 0x4006304C, 32, "TRGMUX LPUART0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPUART1", 0x40063050, 32, "TRGMUX LPUART1 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPI2C0", 0x40063054, 32, "TRGMUX LPI2C0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPSPI0", 0x4006305C, 32, "TRGMUX LPSPI0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPSPI1", 0x40063060, 32, "TRGMUX LPSPI1 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPTMR0", 0x40063064, 32, "TRGMUX LPTMR0 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("LPI2C1", 0x4006306C, 32, "TRGMUX LPI2C1 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM4", 0x40063070, 32, "TRGMUX FTM4 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM5", 0x40063074, 32, "TRGMUX FTM5 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM6", 0x40063078, 32, "TRGMUX FTM6 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
            Register("FTM7", 0x4006307C, 32, "TRGMUX FTM7 Register", [
                Field("LK", 31, 1, "TRGMUX register lock.", [
                    EnumVal("UNLOCKED", "0", "Register can be written."),
                    EnumVal("LOCKED", "0x1", "Register cannot be written until the next system Reset."),
                ]),
                Field("SEL0", 0, 7, "Trigger MUX Input 0 Source Select", [
                ]),
            ]),
        ])

class Module_WDOG(Peripheral):
    def __init__(self):
        super().__init__("WDOG", 0x40052000, 0x10, [
            Register("CS", 0x40052000, 32, "Watchdog Control and Status Register", [
                Field("WIN", 15, 1, "Watchdog Window", [
                    EnumVal("WIN_0", "0", "Window mode disabled."),
                    EnumVal("WIN_1", "0x1", "Window mode enabled."),
                ]),
                Field("FLG", 14, 1, "Watchdog Interrupt Flag", [
                    EnumVal("FLG_0", "0", "No interrupt occurred."),
                    EnumVal("FLG_1", "0x1", "An interrupt occurred."),
                ]),
                Field("CMD32EN", 13, 1, "Enables or disables WDOG support for 32-bit (otherwise 16-bit or 8-bit) refresh/unlock command write words", [
                    EnumVal("CMD32EN_0", "0", "Disables support for 32-bit refresh/unlock command write words. Only 16-bit or 8-bit is supported."),
                    EnumVal("CMD32EN_1", "0x1", "Enables support for 32-bit refresh/unlock command write words. 16-bit or 8-bit is NOT supported."),
                ]),
                Field("PRES", 12, 1, "Watchdog prescaler", [
                    EnumVal("PRES_0", "0", "256 prescaler disabled."),
                    EnumVal("PRES_1", "0x1", "256 prescaler enabled."),
                ]),
                Field("ULK", 11, 1, "Unlock status", [
                    EnumVal("ULK_0", "0", "WDOG is locked."),
                    EnumVal("ULK_1", "0x1", "WDOG is unlocked."),
                ]),
                Field("RCS", 10, 1, "Reconfiguration Success", [
                    EnumVal("RCS_0", "0", "Reconfiguring WDOG."),
                    EnumVal("RCS_1", "0x1", "Reconfiguration is successful."),
                ]),
                Field("CLK", 8, 2, "Watchdog Clock", [
                ]),
                Field("EN", 7, 1, "Watchdog Enable", [
                    EnumVal("EN_0", "0", "Watchdog disabled."),
                    EnumVal("EN_1", "0x1", "Watchdog enabled."),
                ]),
                Field("INT", 6, 1, "Watchdog Interrupt", [
                    EnumVal("INT_0", "0", "Watchdog interrupts are disabled. Watchdog resets are not delayed."),
                    EnumVal("INT_1", "0x1", "Watchdog interrupts are enabled. Watchdog resets are delayed by 128 bus clocks from the interrupt vector fetch."),
                ]),
                Field("UPDATE", 5, 1, "Allow updates", [
                    EnumVal("UPDATE_0", "0", "Updates not allowed. After the initial configuration, the watchdog cannot be later modified without forcing a reset."),
                    EnumVal("UPDATE_1", "0x1", "Updates allowed. Software can modify the watchdog configuration registers within 128 bus clocks after performing the unlock write sequence."),
                ]),
                Field("TST", 3, 2, "Watchdog Test", [
                    EnumVal("TST_0", "0", "Watchdog test mode disabled."),
                    EnumVal("TST_1", "0x1", "Watchdog user mode enabled. (Watchdog test mode disabled.) After testing the watchdog, software should use this setting to indicate that the watchdog is functioning normally in user mode."),
                    EnumVal("TST_2", "0x2", "Watchdog test mode enabled, only the low byte is used. CNT[CNTLOW] is compared with TOVAL[TOVALLOW]."),
                    EnumVal("TST_3", "0x3", "Watchdog test mode enabled, only the high byte is used. CNT[CNTHIGH] is compared with TOVAL[TOVALHIGH]."),
                ]),
                Field("DBG", 2, 1, "Debug Enable", [
                    EnumVal("DBG_0", "0", "Watchdog disabled in chip debug mode."),
                    EnumVal("DBG_1", "0x1", "Watchdog enabled in chip debug mode."),
                ]),
                Field("WAIT", 1, 1, "Wait Enable", [
                    EnumVal("WAIT_0", "0", "Watchdog disabled in chip wait mode."),
                    EnumVal("WAIT_1", "0x1", "Watchdog enabled in chip wait mode."),
                ]),
                Field("STOP", 0, 1, "Stop Enable", [
                    EnumVal("STOP_0", "0", "Watchdog disabled in chip stop mode."),
                    EnumVal("STOP_1", "0x1", "Watchdog enabled in chip stop mode."),
                ]),
            ]),
            Register("CNT", 0x40052004, 32, "Watchdog Counter Register", [
                Field("CNTHIGH", 8, 8, "High byte of the Watchdog Counter", [
                ]),
                Field("CNTLOW", 0, 8, "Low byte of the Watchdog Counter", [
                ]),
            ]),
            Register("TOVAL", 0x40052008, 32, "Watchdog Timeout Value Register", [
                Field("TOVALHIGH", 8, 8, "High byte of the timeout value", [
                ]),
                Field("TOVALLOW", 0, 8, "Low byte of the timeout value", [
                ]),
            ]),
            Register("WIN", 0x4005200C, 32, "Watchdog Window Register", [
                Field("WINHIGH", 8, 8, "High byte of Watchdog Window", [
                ]),
                Field("WINLOW", 0, 8, "Low byte of Watchdog Window", [
                ]),
            ]),
        ])

class Device:
    def __init__(self):
        self.modules = [
            Module_ADC0(),
            Module_ADC1(),
            Module_AIPS(),
            Module_CMP0(),
            Module_CRC(),
            Module_DMA(),
            Module_DMAMUX(),
            Module_EIM(),
            Module_ENET(),
            Module_ERM(),
            Module_EWM(),
            Module_FLEXCAN0(),
            Module_FLEXCAN1(),
            Module_FLEXCAN2(),
            Module_FLEXIO(),
            Module_FTFC(),
            Module_FTM0(),
            Module_FTM1(),
            Module_FTM2(),
            Module_FTM3(),
            Module_FTM4(),
            Module_FTM5(),
            Module_FTM6(),
            Module_FTM7(),
            Module_LMEM(),
            Module_LPI2C0(),
            Module_LPI2C1(),
            Module_LPIT0(),
            Module_LPSPI0(),
            Module_LPSPI1(),
            Module_LPSPI2(),
            Module_LPTMR0(),
            Module_LPUART0(),
            Module_LPUART1(),
            Module_LPUART2(),
            Module_MCM(),
            Module_MPU(),
            Module_MSCM(),
            Module_PCC(),
            Module_PDB0(),
            Module_PDB1(),
            Module_PMC(),
            Module_PORTA(),
            Module_PORTB(),
            Module_PORTC(),
            Module_PORTD(),
            Module_PORTE(),
            Module_PTA(),
            Module_PTB(),
            Module_PTC(),
            Module_PTD(),
            Module_PTE(),
            Module_QuadSPI(),
            Module_RCM(),
            Module_RTC(),
            Module_SAI0(),
            Module_SAI1(),
            Module_SCG(),
            Module_SIM(),
            Module_SMC(),
            Module_TRGMUX(),
            Module_WDOG(),
        ]
        self.rowOffset = [0] * len(self.modules)

    def UpdateSheet(self, result: list, workbook: openpyxl.Workbook):
        for (Address, Value) in result:
            for index, module in enumerate(self.modules):
                if module.base_address <= Address < module.base_address + module.size:
                    name = module.GetName()
                    if name not in workbook.sheetnames:
                        sheet = workbook.create_sheet(title=name)
                        sheet['A1'] = "Address"
                        sheet['B1'] = "Name"
                        sheet['C1'] = "Value"
                        sheet['D1'] = "Description"
                        self.rowOffset[index] = 2
                    else:
                        sheet = workbook[name]
                    self.rowOffset[index] = module.Process(Address, Value, sheet, self.rowOffset[index])
                    break

def ReadFile(filename: str) -> list:
    result = []
    pattern = r'^~\"V/([0-9A-Fa-f]{8})/([0-9A-Fa-f]+)\\n\"'

    try:
        with open(filename, 'r') as file:
            for line in file:
                line = line.strip()
                match = re.match(pattern, line)
                if match:
                    hex1, hex2 = match.groups()
                    result.append((int(hex1, 16), int(hex2, 16)))  # 将两个 uint32 数字作为元组追加
    except FileNotFoundError:
        print(f"错误: 找不到文件 '{filename}'")
    except IOError:
        print(f"错误: 无法读取文件 '{filename}'")

    return result


def Parse(input_filename: str, excel_filename: str):

    # 创建新的Excel工作簿和工作表
    workbook = openpyxl.Workbook()
    workbook.remove(workbook.active)

    result = ReadFile(input_filename)

    Device().UpdateSheet(result, workbook)

    if len(workbook.sheetnames) > 0:
        for sheet in workbook.sheetnames:
            module_sheet = workbook[sheet]

            # 设置对齐方式
            alignment = Alignment(horizontal='center', vertical='center')
            for row in module_sheet.iter_rows(min_row=1, max_col=4):
                for cell in row:
                    cell.alignment = alignment

            # 自动调整列宽度
            for column in ['A', 'B', 'C', 'D']:
                module_sheet.column_dimensions[column].width = max(module_sheet.column_dimensions[column].width, max(len(str(cell.value)) for cell in module_sheet[column])) + 2
        workbook.save(excel_filename)


def main():
    if len(sys.argv) != 2:
        print("使用方法: python {} <输入文件名>".format(sys.argv[0]))
        sys.exit(1)

    input_filename = sys.argv[1]
    excel_filename = input_filename.rsplit('.', 1)[0] + '.xlsx'

    Parse(input_filename, excel_filename)


if __name__ == "__main__":
    main()
