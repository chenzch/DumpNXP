from typing import List, Tuple
from enum import Enum
import openpyxl

from IModule import IModule
from IParseItem import IParseItem
from BitItem import BitItem
from IntItem import IntItem
from Parse import ProcessArray


class NVICType(Enum):
    S32K3 = 1
    S32K3E = 2

class NVIC(IModule):
    def __init__(self, name: str, address: int, Type: NVICType):
        self.Name = name
        self.Address = address
        if (Type == NVICType.S32K3E):
            self.NameList = [
                "INT0",
                "INT1",
                "INT2",
                "INT3",
                "eDMA0_DMATCD_CH0_CH1",
                "eDMA0_DMATCD_CH2_CH3",
                "eDMA0_DMATCD_CH4_CH5",
                "eDMA0_DMATCD_CH6_CH7",
                "eDMA0_DMATCD_CH8_CH9",
                "eDMA0_DMATCD_CH10_CH11",
                "eDMA0_DMATCD_CH12_CH13",
                "eDMA0_DMATCD_CH14_CH15",
                "eDMA0_DMATCD_CH16_CH17",
                "eDMA0_DMATCD_CH18_CH19",
                "eDMA0_DMATCD_CH20_CH21",
                "eDMA0_DMATCD_CH22_CH23",
                "eDMA0_DMATCD_CH24_CH25",
                "eDMA0_DMATCD_CH26_CH27",
                "eDMA0_DMATCD_CH28_CH29",
                "eDMA0_DMATCD_CH30_CH31",
                "eDMA1_DMATCD_CH0_CH1",
                "eDMA1_DMATCD_CH2_CH3",
                "eDMA1_DMATCD_CH4_CH5",
                "eDMA1_DMATCD_CH6_CH7",
                "eDMA1_DMATCD_CH8_CH9",
                "eDMA1_DMATCD_CH10_CH11",
                "eDMA1_DMATCD_CH12_CH13",
                "eDMA1_DMATCD_CH14_CH15",
                "eDMA1_DMATCD_CH16_CH17",
                "eDMA1_DMATCD_CH18_CH19",
                "eDMA1_DMATCD_CH20_CH21",
                "eDMA1_DMATCD_CH22_CH23",
                "eDMA1_DMATCD_CH24_CH25",
                "eDMA1_DMATCD_CH26_CH27",
                "eDMA1_DMATCD_CH28_CH29",
                "eDMA1_DMATCD_CH30_CH31",
                "ERM_0",
                "ERM_1",
                "MCM",
                "STM0",
                "STM1",
                "STM2",
                "SWT0",
                "SWT1",
                "SWT2",
                "CTI0",
                "CTI1",
                "CTI2",
                "FLASH_0",
                "FLASH_1",
                "FLASH_2",
                "RGM",
                "PMC",
                "SIUL_0",
                "SIUL_1",
                "SIUL_2",
                "SIUL_3",
                "eTPU",
                "eTPU_A_CH0",
                "eTPU_A_CH1",
                "eTPU_A_CH2",
                "EMIOS0_0",
                "EMIOS0_1",
                "EMIOS0_2",
                "EMIOS0_3",
                "EMIOS0_4",
                "EMIOS0_5",
                "SIPI1_CH1",
                "SIPI1_CH2",
                "SIPI1_CH3",
                "SIPI1_CH4",
                "SIPI1_Int1",
                "SIPI1_Int2",
                "SIPI1_Int3",
                "DIGRF_Tx_int",
                "DIGRF_Tx_exc",
                "DIGRF_Rx_int",
                "DIGRF_Rx_exc",
                "DIGRF_ICLC_Rx",
                "eTPU_A_CH3",
                "eTPU_A_CH4",
                "eTPU_A_CH5",
                "eTPU_A_CH6",
                "WKPU",
                "CMU0",
                "CMU1",
                "CMU2",
                "BCTU0",
                "BCTU1",
                "eTPU_A_CH7",
                "eTPU_A_CH8",
                "eTPU_A_CH9",
                "LCU0",
                "LCU1",
                "eTPU_A_CH10",
                "eTPU_A_CH11",
                "PIT0",
                "PIT1",
                "PIT2",
                "eTPU_A_CH12",
                "eTPU_A_CH13",
                "eTPU_A_CH14",
                "RTC",
                "eTPU_A_CH15",
                "eTPU_A_CH16",
                "EMAC_0",
                "EMAC_1",
                "EMAC_2",
                "EMAC_3",
                "FlexCAN0_0",
                "FlexCAN0_1",
                "FlexCAN0_2",
                "FlexCAN0_3",
                "FlexCAN1_0",
                "FlexCAN1_1",
                "FlexCAN1_2",
                "FlexCAN2_0",
                "FlexCAN2_1",
                "FlexCAN2_2",
                "FlexCAN3_0",
                "FlexCAN3_1",
                "FlexCAN4_0",
                "FlexCAN4_1",
                "FlexCAN5_0",
                "FlexCAN5_1",
                "eTPU_A_CH17",
                "eTPU_A_CH18",
                "eTPU_A_CH19",
                "eTPU_A_CH20",
                "FlexCAN1_3",
                "FlexCAN2_3",
                "FlexCAN3_2",
                "FlexCAN4_2",
                "FlexCAN5_2",
                "eTPU_A_CH21",
                "eTPU_A_CH22",
                "eTPU_A_CH23",
                "SWG_0",
                "eTPU_A_CH24_31",
                "FLEXIO",
                "eTPU_B_CH0",
                "LPUART0",
                "LPUART1",
                "LPUART2",
                "LPUART3",
                "LPUART4",
                "LPUART5",
                "eTPU_B_CH1",
                "eTPU_B_CH2",
                "eTPU_B_CH3",
                "eTPU_B_CH4",
                "eTPU_B_CH5",
                "eTPU_B_CH6",
                "eTPU_B_CH7",
                "eTPU_B_CH8",
                "eTPU_B_CH9",
                "eTPU_B_CH10",
                "eTPU_B_CH11",
                "eTPU_B_CH12",
                "eTPU_B_CH13",
                "",
                "LPI2C0",
                "LPI2C1",
                "",
                "DSPI0",
                "LPSPI0",
                "LPSPI1",
                "LPSPI2",
                "LPSPI3",
                "LPSPI4",
                "LPSPI5",
                "eTPU_B_CH14",
                "eTPU_B_CH15",
                "QSPI",
                "eTPU_B_CH16",
                "eTPU_B_CH17",
                "eFlexPWM0",
                "eFlexPWM1",
                "JDC",
                "SDADC",
                "ADC0",
                "ADC1",
                "ADC2",
                "LPCMP0",
                "LPCMP1",
                "ADC3",
                "ADC4",
                "ADC5",
                "ADC6",
                "FCCU_0",
                "FCCU_1",
                "STCU_LBIST_MBIST",
                "HSE_MU0_TX",
                "HSE_MU0_RX",
                "HSE_MU0_ORED",
                "HSE_MU1_TX",
                "HSE_MU1_RX",
                "HSE_MU1_ORED",
                "eTPU_B_CH18",
                "eTPU_B_CH19",
                "eTPU_B_CH20",
                "eTPU_B_CH21",
                "MU_A_0",
                "MU_A_1",
                "MU_A_2",
                "MU_B_0",
                "MU_B_1",
                "MU_B_2",
                "",
                "",
                "",
                "",
                "Soc_RSB",
                "",
                "eFlexPWM1_1",
                "",
                "XRDC",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "CoolFlux1",
                "CoolFlux2",
                "CoolFlux3",
                "CoolFlux4",
                "CoolFlux5",
                "eTPU_B_CH22",
                "eTPU_B_CH23",
                "eTPU_B_CH24",
                "SWG1",
                "eTPU_B_CH25_31",
                "eFlexPWM0_0",
                "eFlexPWM0_1",
                "eFlexPWM0_2",
                "eFlexPWM0_3",
                "eFlexPWM1_2",
                "eFlexPWM1_3"
            ]
        else:
            self.NameList = [
                "INT0",
                "INT1",
                "INT2",
                "INT3",
                "DMATCD0",
                "DMATCD1",
                "DMATCD2",
                "DMATCD3",
                "DMATCD4",
                "DMATCD5",
                "DMATCD6",
                "DMATCD7",
                "DMATCD8",
                "DMATCD9",
                "DMATCD10",
                "DMATCD11",
                "DMATCD12",
                "DMATCD13",
                "DMATCD14",
                "DMATCD15",
                "DMATCD16",
                "DMATCD17",
                "DMATCD18",
                "DMATCD19",
                "DMATCD20",
                "DMATCD21",
                "DMATCD22",
                "DMATCD23",
                "DMATCD24",
                "DMATCD25",
                "DMATCD26",
                "DMATCD27",
                "DMATCD28",
                "DMATCD29",
                "DMATCD30",
                "DMATCD31",
                "ERM_0",
                "ERM_1",
                "MCM",
                "STM0",
                "STM1",
                "STM2",
                "SWT0",
                "SWT1",
                "SWT2",
                "CTI0",
                "CTI1",
                "",
                "FLASH_0",
                "FLASH_1",
                "FLASH_2",
                "RGM",
                "PMC",
                "SIUL_0",
                "SIUL_1",
                "SIUL_2",
                "SIUL_3",
                "STM3",
                "SWT3",
                "",
                "",
                "EMIOS0_0",
                "EMIOS0_1",
                "EMIOS0_2",
                "EMIOS0_3",
                "EMIOS0_4",
                "EMIOS0_5",
                "",
                "",
                "EMIOS1_0",
                "EMIOS1_1",
                "EMIOS1_2",
                "EMIOS1_3",
                "EMIOS1_4",
                "EMIOS1_5",
                "",
                "",
                "EMIOS2_0",
                "EMIOS2_1",
                "EMIOS2_2",
                "EMIOS2_3",
                "EMIOS2_4",
                "EMIOS2_5",
                "WKPU",
                "CMU0",
                "CMU1",
                "CMU2",
                "BCTU",
                "AESAPP0",
                "AES_APP1",
                "AES_APP2",
                "AES_APP3",
                "LCU0",
                "LCU1",
                "AES_APP4",
                "AES_APP5",
                "PIT0",
                "PIT1",
                "PIT2",
                "PIT3",
                "AES_APP6",
                "AES_APP7",
                "RTC",
                "",
                "",
                "",
                "",
                "",
                "",
                "FlexCAN0_0",
                "FlexCAN0_1",
                "FlexCAN0_2",
                "FlexCAN0_3",
                "FlexCAN1_0",
                "FlexCAN1_1",
                "FlexCAN1_2",
                "FlexCAN2_0",
                "FlexCAN2_1",
                "FlexCAN2_2",
                "FlexCAN3_0",
                "FlexCAN3_1",
                "FlexCAN4_0",
                "FlexCAN4_1",
                "FlexCAN5_0",
                "FlexCAN5_1",
                "FlexCAN6_0",
                "FlexCAN6_1",
                "FlexCAN7_0",
                "FlexCAN7_1",
                "FlexCAN1_3",
                "FlexCAN2_3",
                "FlexCAN3_2",
                "FlexCAN4_2",
                "FlexCAN5_2",
                "FlexCAN6_2",
                "FlexCAN7_2",
                "MU4_A_0",
                "MU4_A_1",
                "MU4_A_2",
                "FLEXIO",
                "",
                "LPUART0",
                "LPUART1",
                "LPUART2",
                "LPUART3",
                "LPUART4",
                "LPUART5",
                "LPUART6",
                "LPUART7",
                "LPUART8",
                "LPUART9",
                "LPUART10",
                "LPUART11",
                "LPUART12",
                "LPUART13",
                "LPUART14",
                "LPUART15",
                "MU4_B_0",
                "MU4_B_1",
                "MU4_B_2",
                "",
                "LPI2C0",
                "LPI2C1",
                "",
                "",
                "LPSPI0",
                "LPSPI1",
                "LPSPI2",
                "LPSPI3",
                "LPSPI4",
                "LPSPI5",
                "GMAC1_Common",
                "GMAC1_CH0_TX",
                "QSPI",
                "SAI0",
                "SAI1",
                "",
                "",
                "JDC",
                "",
                "ADC0",
                "ADC1",
                "ADC2",
                "LPCMP0",
                "LPCMP1",
                "LPCMP2",
                "MU3_A_0",
                "MU3_A_1",
                "MU3_A_2",
                "FCCU_0",
                "FCCU_1",
                "STCU_LBIST_MBIST",
                "HSE_MU0_TX",
                "HSE_MU0_RX",
                "HSE_MU0_ORED",
                "HSE_MU1_TX",
                "HSE_MU1_RX",
                "HSE_MU1_ORED",
                "",
                "MU3_B_0",
                "MU3_B_1",
                "MU3_B_2",
                "MU_A_0",
                "MU_A_1",
                "MU_A_2",
                "MU_B_0",
                "MU_B_1",
                "MU_B_2",
                "",
                "",
                "",
                "",
                "SoC",
                "Core_clk",
                "SoC2",
                "SoC3",
                "XRDC",
                "SoC4",
                "",
                "SoC5",
                "",
                "",
                "",
                "",
                "GMAC0_Common",
                "GMAC0_CH0_TX",
                "GMAC0_CH0_RX",
                "GMAC0_CH1_TX",
                "GMAC0_CH1_RX",
                "GMAC0_CH2_TX",
                "GMAC0_CH2_RX",
                "GMAC0_SIC",
                "GMAC0_SIUC",
                "GMAC1_CH0_RX",
                "GMAC1_CH1_TX",
                "GMAC1_CH1_RX",
                "GMAC1_CH2_TX",
                "GMAC1_CH2_RX",
                "GMAC1_SIC",
                "GMAC1_SIUC"
            ]

    def GetModuleName(self) -> str:
        return self.Name

    def __createArray(self, index: int) -> List[IParseItem]:
        array = []
        for item in range(32 if index != 7 else 16):
            array.append(BitItem(name=self.NameList[index * 32 + item], offset=item, true_meaning="Enable", false_meaning="Disable"))
        return array

    def UpdateSheet(self, data: List[Tuple[str, str]], sheet: openpyxl.worksheet.worksheet.Worksheet) -> None:
        row = 1
        scb_base = self.Address
        for item in data:
            row += 1
            addr = int(item[0], 16)
            value = int(item[1], 16)

            if (addr >= scb_base + 0x100 and addr <= scb_base + 0x31C and (addr & 0x60) == 0):
                blockIndex = (addr - scb_base - 0x100) // 0x80
                index = (addr - scb_base - 0x100 - blockIndex * 0x80) // 4
                sheet.cell(row=row, column=1, value=["ISER", "ICER", "ISPR", "ICPR", "IABR"][blockIndex] + str(index))
                sheet.cell(row=row, column=2, value=f"{value:08X}")
                row = row + ProcessArray(array=self.__createArray(index=index), value=value, sheet=sheet, start_row=row + 1, start_column=1)
            elif (addr >= scb_base + 0x400 and addr <= scb_base + 0x4EC):
                index = (addr - scb_base - 0x400) // 4
                sheet.cell(row=row, column=1, value="IP" + str(index))
                sheet.cell(row=row, column=2, value=f"{value:08X}")
                row = row + ProcessArray(array=[
                    IntItem(name=self.NameList[index * 4 + 3], offset=32, width=8),
                    IntItem(name=self.NameList[index * 4 + 2], offset=16, width=8),
                    IntItem(name=self.NameList[index * 4 + 1], offset=8, width=8),
                    IntItem(name=self.NameList[index * 4 + 0], offset=0, width=8),
                ], value=value, sheet=sheet, start_row=row + 1, start_column=1)
            elif (addr == scb_base + 0xD04):
                sheet.cell(row=row, column=1, value="ICSR")
                sheet.cell(row=row, column=2, value=f"{value:08X}")
                SysIntName = [
                    "Thread mode", "", "NMI", "HardFault",
                    "MemManage", "BusFault", "UsageFault", "",
                    "", "", "", "SVCall",
                    "DebugMonitor", "", "PendSV", "SysTick"]
                row = row + ProcessArray(array=[
                    BitItem(name="NMIPENDSET", offset=31, true_meaning="NMI pending", false_meaning="NMI not pending"),
                    BitItem(name="PENDSVSET", offset=28, true_meaning="PendSV pending", false_meaning="PendSV not pending"),
                    BitItem(name="PENDSTSET", offset=26, true_meaning="SysTick pending", false_meaning="SysTick not pending"),
                    BitItem(name="ISRPENDING", offset=22, true_meaning="Interrupt pending", false_meaning="Interrupt not pending"),
                    IntItem(name="VECTPENDING", offset=12, width=8, enumStr=SysIntName + self.NameList),
                    BitItem(name="RETTOBASE", offset=11, true_meaning="no preempted exceptions", false_meaning="preempted active exceptions"),
                    IntItem(name="VECTACTIVE", offset=0, width=8, enumStr=SysIntName + self.NameList),
                ], value=value, sheet=sheet, start_row=row + 1, start_column=1)
            elif (addr == scb_base + 0xD08):
                sheet.cell(row=row, column=1, value="VTOR")
                sheet.cell(row=row, column=2, value=f"{value:08X}")
            else:
                row -= 1
